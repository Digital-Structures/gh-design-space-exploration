<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RhinoCommon</name>
    </assembly>
    <members>
        <member name="T:Rhino.Runtime.Skin">
            <summary>
            Represents a customized environment that changes the appearance of Rhino.
            <para>Skin DLLs must contain a single class that derives from the Skin class.</para>
            </summary>
        </member>
        <member name="M:Rhino.Runtime.Skin.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Runtime.Skin"/> class.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.Skin.ShowSplash">
            <summary>Is called when the splash screen should be shown.</summary>
        </member>
        <member name="M:Rhino.Runtime.Skin.ShowHelp">
            <summary>
            Called when the "help" splash screen should be shown. Default
            implementation just calls ShowSplash()
            </summary>
        </member>
        <member name="M:Rhino.Runtime.Skin.HideSplash">
            <summary>Is called when the splash screen should be hidden.</summary>
        </member>
        <member name="M:Rhino.Runtime.Skin.OnMainFrameWindowCreated">
            <summary>Is called when the main frame window is created.</summary>
        </member>
        <member name="M:Rhino.Runtime.Skin.OnLicenseCheckCompleted">
            <summary>Is called when the license check is completed.</summary>
        </member>
        <member name="M:Rhino.Runtime.Skin.OnBuiltInCommandsRegistered">
            <summary>Is called when built-in commands are registered.</summary>
        </member>
        <member name="M:Rhino.Runtime.Skin.OnBeginLoadAtStartPlugIns(System.Int32)">
            <summary>Is called when the first plug-in that loads at start-up is going to be loaded.</summary>
            <param name="expectedCount">The complete amount of plug-ins.</param>
        </member>
        <member name="M:Rhino.Runtime.Skin.OnBeginLoadPlugIn(System.String)">
            <summary>Is called when a specific plug-in is going to be loaded.</summary>
            <param name="description">The plug-in description.</param>
        </member>
        <member name="M:Rhino.Runtime.Skin.OnEndLoadPlugIn">
            <summary>Is called after each plug-in has been loaded.</summary>
        </member>
        <member name="M:Rhino.Runtime.Skin.OnEndLoadAtStartPlugIns">
            <summary>Is called after all of the load at start plug-ins have been loaded.</summary>
        </member>
        <member name="P:Rhino.Runtime.Skin.ActiveSkin">
            <summary>
            Any time Rhino is running there is at most one skin being used (and
            possibly no skin).  If a RhinoCommon based Skin class is being used, use
            ActiveSkin to get at the instance of this Skin class. May return null
            if no Skin is being used or if the skin is not a RhinoCommon based skin.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.Skin.MainRhinoIcon">
            <summary>If you want to provide a custom icon for your skin.</summary>
        </member>
        <member name="P:Rhino.Runtime.Skin.ApplicationName">
            <summary>If you want to provide a custom name for your skin.</summary>
        </member>
        <member name="P:Rhino.Runtime.Skin.Settings">
            <summary>
            Gets access to the skin persistent settings.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.PythonCompiledCode">
            <summary>
            Represents scripting compiled code.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.PythonCompiledCode.Execute(Rhino.Runtime.PythonScript)">
            <summary>
            Executes the script in a specific scope.
            </summary>
            <param name="scope">The scope where the script should be executed.</param>
        </member>
        <member name="T:Rhino.Runtime.PythonScript">
            <summary>
            Represents a Python script.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.PythonScript.Create">
            <summary>
            Constructs a new Python script context.
            </summary>
            <returns>A new Python script, or null if none could be created. Rhino 4 always returns null.</returns>
        </member>
        <member name="M:Rhino.Runtime.PythonScript.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Runtime.PythonScript"/> class.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.PythonScript.Compile(System.String)">
            <summary>
            Compiles a class in a quick-to-execute proxy.
            </summary>
            <param name="script">A string text.</param>
            <returns>A Python compiled code instance.</returns>
        </member>
        <member name="M:Rhino.Runtime.PythonScript.ContainsVariable(System.String)">
            <summary>
            Determines if the main scripting context has a variable with a name.
            </summary>
            <param name="name">The variable name.</param>
            <returns>true if the variable is present.</returns>
        </member>
        <member name="M:Rhino.Runtime.PythonScript.GetVariableNames">
            <summary>
            Retrieves all variable names in the script.
            </summary>
            <returns>An enumerable set with all names of the variables.</returns>
        </member>
        <member name="M:Rhino.Runtime.PythonScript.GetVariable(System.String)">
            <summary>
            Gets the object associated with a variable name in the main scripting context.
            </summary>
            <param name="name">A variable name.</param>
            <returns>The variable object.</returns>
        </member>
        <member name="M:Rhino.Runtime.PythonScript.SetVariable(System.String,System.Object)">
            <summary>
            Sets a variable with a name and an object. Object can be null (Nothing in Visual Basic).
            </summary>
            <param name="name">A valid variable name in Python.</param>
            <param name="value">A valid value for that variable name.</param>
        </member>
        <member name="M:Rhino.Runtime.PythonScript.SetIntellisenseVariable(System.String,System.Object)">
            <summary>
            Sets a variable for runtime introspection.
            </summary>
            <param name="name">A variable name.</param>
            <param name="value">A variable value.</param>
        </member>
        <member name="M:Rhino.Runtime.PythonScript.RemoveVariable(System.String)">
            <summary>
            Removes a defined variable from the main scripting context.
            </summary>
            <param name="name">The variable name.</param>
        </member>
        <member name="M:Rhino.Runtime.PythonScript.EvaluateExpression(System.String,System.String)">
            <summary>
            Evaluates statements and an expression in the main scripting context.
            </summary>
            <param name="statements">One or several statements.</param>
            <param name="expression">An expression.</param>
            <returns>The expression result.</returns>
        </member>
        <member name="M:Rhino.Runtime.PythonScript.ExecuteFile(System.String)">
            <summary>
            Executes a Python file.
            </summary>
            <param name="path">The path to the file.</param>
            <returns>true if the file executed. This method can throw scripting-runtime based exceptions.</returns>
        </member>
        <member name="M:Rhino.Runtime.PythonScript.ExecuteScript(System.String)">
            <summary>
            Executes a Python string.
            </summary>
            <param name="script">A Python text.</param>
            <returns>true if the file executed. This method can throw scripting-runtime based exceptions.</returns>
        </member>
        <member name="M:Rhino.Runtime.PythonScript.GetStackTraceFromException(System.Exception)">
            <summary>
            Retrieves a meaningful representation of the call stack.
            </summary>
            <param name="ex">An exception that was thrown by some of the methods in this class.</param>
            <returns>A string that represents the Python exception.</returns>
        </member>
        <member name="M:Rhino.Runtime.PythonScript.CreateTextEditorControl(System.String,System.Action{System.String})">
            <summary>
            Creates a control where the user is able to type Python code.
            </summary>
            <param name="script">A starting script.</param>
            <param name="helpcallback">A method that is called when help is shown for a function, a class or a method.</param>
            <returns>A Windows Forms control.</returns>
        </member>
        <member name="P:Rhino.Runtime.PythonScript.Output">
            <summary>
            Gets or sets the Python script "print()" target.
            <para>By default string output goes to the Rhino.RhinoApp.Write function.
            Set Output if you want to redirect the output from python to a different function
            while this script executes.</para>
            </summary>
        </member>
        <member name="P:Rhino.Runtime.PythonScript.ScriptContextDoc">
            <summary>
            object set to variable held in scriptcontext.doc.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.PythonScript.ContextId">
            <summary>
            Gets or sets a context unique identified.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.HostUtils">
            <summary>
            Contains static methods to deal with teh runtime environment.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.GetAssemblySearchPaths">
            <summary>
            Returns list of directory names where additional assemblies (plug-ins, DLLs, Grasshopper components)
            may be located
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.InPlaceConstCast(Rhino.Geometry.GeometryBase,System.Boolean)">
            <summary>
            DO NOT USE UNLESS YOU ARE CERTAIN ABOUT THE IMPLICATIONS.
            <para>This is an expert user function which should not be needed in most
            cases. This function is similar to a const_cast in C++ to allow an object
            to be made temporarily modifiable without causing RhinoCommon to convert
            the class from const to non-const by creating a duplicate.</para>
            
            <para>You must call this function with a true parameter, make your
            modifications, and then restore the const flag by calling this function
            again with a false parameter. If you have any questions, please
            contact McNeel developer support before using!</para>
            </summary>
            <param name="geometry">Some geometry.</param>
            <param name="makeNonConst">A boolean value.</param>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.CheckForRdk(System.Boolean,System.Boolean)">
            <summary>
            Determines if the RDK is loaded.
            </summary>
            <param name="throwOnFalse">if the RDK is not loaded, then throws a
            <see cref="T:Rhino.Runtime.RdkNotLoadedException"/>.</param>
            <param name="usePreviousResult">if true, then the last result can be used instaed of
            performing a full check.</param>
            <returns>true if the RDK is loaded; false if the RDK is not loaded. Note that the
            <see cref="T:Rhino.Runtime.RdkNotLoadedException"/> will hinder the retrieval of any return value.</returns>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.DebugString(System.String)">
            <summary>
            Prints a debug message to the Rhino Command Line. 
            The message will only appear if the SendDebugToCommandLine property is set to true.
            </summary>
            <param name="msg">Message to print.</param>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.DebugString(System.String,System.Object[])">
            <summary>
            Prints a debug message to the Rhino Command Line. 
            The message will only appear if the SendDebugToCommandLine property is set to true.
            </summary>
            <param name="format">Message to format and print.</param>
            <param name="args">An Object array containing zero or more objects to format.</param>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.ExceptionReport(System.Exception)">
            <summary>
            Informs RhinoCommon of an exception that has been handled but that the developer wants to screen.
            </summary>
            <param name="ex">An exception.</param>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.ExceptionReport(System.String,System.Exception)">
            <summary>
            Informs RhinoCommon of an exception that has been handled but that the developer wants to screen.
            </summary>
            <param name="source">An exception source text.</param>
            <param name="ex">An exception.</param>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.InvokeOnMainUiThread(System.Delegate)">
            <summary>
            Calls a method on the main Rhino UI thread if this is necessary.
            </summary>
            <param name="method">A method. This method is called with no arguments.</param>
            <returns>A return object, or null.</returns>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.InvokeOnMainUiThread(System.Delegate,System.Object[])">
            <summary>
            Calls a method on the main Rhino UI thread if this is necessary.
            </summary>
            <param name="method">A method. This method is called with args arguments.</param>
            <param name="args">The method arguments.</param>
            <returns>A return object, or null.</returns>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.DebugDumpToString(Rhino.Geometry.GeometryBase)">
            <summary>
            Gets the debug dumps. This is a text description of the geometric contents.
            DebugDump() is intended for debugging and is not suitable for creating high
            quality text descriptions of an object.
            </summary>
            <param name="geometry">Some geometry.</param>
            <returns>A debug dump text.</returns>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.DebugDumpToString(Rhino.Geometry.BezierCurve)">
            <summary>
            Gets the debug dumps. This is a text description of the geometric contents.
            DebugDump() is intended for debugging and is not suitable for creating high
            quality text descriptions of an object.
            </summary>
            <param name="bezierCurve">curve to evaluate</param>
            <returns>A debug dump text.</returns>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.CreateCommands(Rhino.PlugIns.PlugIn)">
            <summary>
            Parses a plugin and create all the commands defined therein.
            </summary>
            <param name="plugin">Plugin to harvest for commands.</param>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.CreateCommands(System.IntPtr,System.Reflection.Assembly)">
            <summary>
            Parses a plugin and create all the commands defined therein.
            </summary>
            <param name="pPlugIn">Plugin to harvest for commands.</param>
            <param name="pluginAssembly">Assembly associated with the plugin.</param>
            <returns>The number of newly created commands.</returns>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.RegisterDynamicCommand(Rhino.PlugIns.PlugIn,Rhino.Commands.Command)">
            <summary>
            Adds a new dynamic command to Rhino.
            </summary>
            <param name="plugin">Plugin that owns the command.</param>
            <param name="cmd">Command to add.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.InitializeRhinoCommon">
            <summary>
            Makes sure all static RhinoCommon components is set up correctly. 
            This happens automatically when a plug-in is loaded, so you probably won't 
            have to call this method.
            </summary>
            <remarks>Subsequent calls to this method will be ignored.</remarks>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.InitializeZooClient">
            <summary>
            Initializes the ZooClient and Rhino license manager, this should get
            called automatically when RhinoCommon is loaded so you probably won't
            have to call this method.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.CreatePlugIn(System.Type,System.Boolean)">
            <summary>
            Instantiates a plug-in type and registers the associated commands and classes.
            </summary>
            <param name="pluginType">A plug-in type. This type must derive from <see cref="T:Rhino.PlugIns.PlugIn"/>.</param>
            <param name="printDebugMessages">true if debug messages should be printed.</param>
            <returns>A new plug-in instance.</returns>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.DisplayOleAlerts(System.Boolean)">
            <summary>
            Defines if Ole alerts ("Server busy") alerts should be visualized.
            <para>This function makes no sense on Mono.</para>
            </summary>
            <param name="display">Whether alerts should be visible.</param>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.GetRhinoDotNetAssembly">
            <summary>
            Only works on Windows. Returns null on Mac.
            </summary>
            <returns>An assembly.</returns>
        </member>
        <member name="M:Rhino.Runtime.HostUtils.SetInShutDown">
            <summary>
            Informs the runtime that the application is shutting down.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.HostUtils.RunningOnWindows">
            <summary>
            Tests if this process is currently executing on the Windows platform.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.HostUtils.RunningOnOSX">
            <summary>
            Tests if this process is currently executing on the Mac OSX platform.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.HostUtils.RunningInMono">
            <summary>
            Tests if this process is currently executing under the Mono runtime.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.HostUtils.RunningInRhino">
            <summary>
            Tests if RhinoCommon is currently executing inside of the Rhino.exe process.
            There are other cases where RhinoCommon could be running; specifically inside
            of Visual Studio when something like a windows form is being worked on in the
            resource editor or running stand-alone when compiled to be used as a version
            of OpenNURBS.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.HostUtils.SendDebugToCommandLine">
            <summary>
            Gets or sets whether debug messages are printed to the command line.
            </summary>
        </member>
        <member name="E:Rhino.Runtime.HostUtils.OnExceptionReport">
            <summary>
            Is raised when an exception is reported with one of the <see cref="M:Rhino.Runtime.HostUtils.ExceptionReport(System.Exception)"/> method.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.HostUtils.ExceptionReportDelegate">
            <summary>
            Represents a reference to a method that will be called when an exception occurs.
            </summary>
            <param name="source">An exception source text.</param>
            <param name="ex">An exception.</param>
        </member>
        <member name="T:Rhino.Runtime.RdkNotLoadedException">
            <summary>
            Is thrown when the RDK is not loaded.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.RdkNotLoadedException.#ctor">
            <summary>
            Initializes a new instance of the RDK not loaded exception with a standard message.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.Interop">
            <summary>
            Contains static methods to marshal objects between RhinoCommon and legacy Rhino_DotNet or C++.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.Interop.NativeRhinoDocPointer(Rhino.RhinoDoc)">
            <summary>
            Gets the C++ CRhinoDoc* for a given RhinoCommon RhinoDoc class.
            </summary>
            <param name="doc">A document.</param>
            <returns>A pointer value.</returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.NativeGeometryConstPointer(Rhino.Geometry.GeometryBase)">
            <summary>
            Returns the underlying const ON_Geometry* for a RhinoCommon class. You should only
            be interested in using this function if you are writing C++ code.
            </summary>
            <param name="geometry">A geometry object. This can be null and in such a case <see cref="F:System.IntPtr.Zero"/> is returned.</param>
            <returns>A pointer to the const geometry.</returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.NativeGeometryNonConstPointer(Rhino.Geometry.GeometryBase)">
            <summary>
            Returns the underlying non-const ON_Geometry* for a RhinoCommon class. You should
            only be interested in using this function if you are writing C++ code.
            </summary>
            <param name="geometry">A geometry object. This can be null and in such a case <see cref="F:System.IntPtr.Zero"/> is returned.</param>
            <returns>A pointer to the non-const geometry.</returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.NativeNonConstPointer(Rhino.DocObjects.ViewportInfo)">
            <summary>
            Get ON_Viewport* from a ViewportInfo instance
            </summary>
            <param name="viewport"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.RhinoObjectConstPointer(Rhino.DocObjects.RhinoObject)">
            <summary>
            Returns the underlying const CRhinoObject* for a RhinoCommon class. You should only
            be interested in using this function if you are writing C++ code.
            </summary>
            <param name="rhinoObject">A Rhino object.</param>
            <returns>A pointer to the Rhino const object.</returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.RhinoObjectFromPointer(System.IntPtr)">
            <summary>
            Constructs a RhinoCommon Rhino object from an unmanaged C++ RhinoObject pointer.
            </summary>
            <param name="pRhinoObject">The original pointer.</param>
            <returns>A new Rhino object, or null if the pointer was invalid or <see cref="F:System.IntPtr.Zero"/>.</returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.CreateFromNativePointer(System.IntPtr)">
            <summary>
            Constructs a RhinoCommon Geometry class from a given ON_Geomety*. The ON_Geometry*
            must be declared on the heap and its lifetime becomes controlled by RhinoCommon.
            </summary>
            <param name="pGeometry">ON_Geometry*</param>
            <returns>The appropriate geometry class in RhinoCommon on success.</returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.TryCopyFromOnArc(System.Object,Rhino.Geometry.Arc@)">
            <summary>
            Attempts to copy the contents of a RMA.OpenNURBS.OnArc to a Rhino.Geometry.Arc.
            </summary>
            <param name="source">A source OnArc.</param>
            <param name="destination">A destination arc.</param>
            <returns>true if the operation succeeded; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.TryCopyToOnArc(Rhino.Geometry.Arc,System.Object)">
            <summary>
            Attempts to copy the contents of a Rhino.Geometry.Arc to a RMA.OpenNURBS.OnArc.
            </summary>
            <param name="source">A source arc.</param>
            <param name="destination">A destination OnArc.</param>
            <returns>true if the operation succeeded; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.FromOnBrep(System.Object)">
            <summary>
            Copies a Rhino_DotNet brep to a RhinoCommon brep class.
            </summary>
            <param name="source">
            RMA.OpenNURBS.IOnBrep or RMA.OpenNURBS.OnBrep.
            </param>
            <returns>
            RhinoCommon object on success. This will be an independent copy.
            </returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.FromOnSurface(System.Object)">
            <summary>
            Copies a Rhino_DotNet surface to a RhinoCommon Surface class.
            </summary>
            <param name="source">
            Any of the following in the RMA.OpenNURBS namespace are acceptable.
            IOnSurface, OnSurface, IOnPlaneSurface, OnPlaneSurface, IOnClippingPlaneSurface,
            OnClippingPlaneSurface, IOnNurbsSurface, OnNurbsSurfac, IOnRevSurface, OnRevSurface,
            IOnSumSurface, OnSumSurface.
            </param>
            <returns>
            RhinoCommon object on success. This will be an independent copy.
            </returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.FromOnMesh(System.Object)">
            <summary>
            Copies a Rhino_DotNet mesh to a RhinoCommon mesh class.
            </summary>
            <param name="source">
            RMA.OpenNURBS.IOnMesh or RMA.OpenNURBS.OnMesh.
            </param>
            <returns>
            RhinoCommon object on success. This will be an independent copy.
            </returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.FromOnCurve(System.Object)">
            <summary>
            Copies a Rhino_DotNet curve to a RhinoCommon curve class.
            </summary>
            <param name="source">
            RMA.OpenNURBS.IOnCurve or RMA.OpenNURBS.OnCurve.
            </param>
            <returns>
            RhinoCommon object on success. This will be an independent copy.
            </returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.ToOnBrep(Rhino.Geometry.Brep)">
            <summary>
            Constructs a Rhino_DotNet OnBrep that is a copy of a given brep.
            </summary>
            <param name="source">A source brep.</param>
            <returns>
            Rhino_DotNet object on success. This will be an independent copy.
            </returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.ToOnSurface(Rhino.Geometry.Surface)">
            <summary>
            Constructs a Rhino_DotNet OnSurface that is a copy of a given curve.
            </summary>
            <param name="source">A source brep.</param>
            <returns>
            Rhino_DotNet object on success. This will be an independent copy.
            </returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.ToOnMesh(Rhino.Geometry.Mesh)">
            <summary>
            Constructs a Rhino_DotNet OnMesh that is a copy of a given mesh.
            </summary>
            <param name="source">A source brep.</param>
            <returns>
            Rhino_DotNet object on success. This will be an independent copy.
            </returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.ToOnCurve(Rhino.Geometry.Curve)">
            <summary>
            Constructs a Rhino_DotNet OnCurve that is a copy of a given curve.
            </summary>
            <param name="source">A RhinoCommon source curve.</param>
            <returns>
            Rhino_DotNet object on success. This will be an independent copy.
            </returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.ToOnXform(Rhino.Geometry.Transform)">
            <summary>
            Constructs a Rhino_DotNet OnXform from a given RhinoCommon Transform.
            </summary>
            <param name="source">A RhinoCommon source transform.</param>
            <returns>
            Rhino_DotNet object on success. This will be an independent copy.
            </returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.ToIRhinoViewport(Rhino.Display.RhinoViewport)">
            <summary>
            Convert a Rhino.Display.Viewport to an RMA.Rhino.IRhinoViewport.
            </summary>
            <param name="source">A RhinoCommon viewport.</param>
            <returns>
            Rhino_DotNet IRhinoViewport object on success. This will be an independent copy.
            </returns>
        </member>
        <member name="M:Rhino.Runtime.Interop.PlugInPointer(Rhino.PlugIns.PlugIn)">
            <summary>
            Gets a C++ plug-in pointer for a given RhinoCommon plug-in.
            <para>This is a Rhino SDK function.</para>
            </summary>
            <param name="plugin">A plug-in.</param>
            <returns>A pointer.</returns>
        </member>
        <member name="F:Rhino.Runtime.LicenseManager._setCallbacksWasRun">
            <summary>
            Gets set to true after initial call to
            UnsafeNativeMethods.RHC_SetLicenseManagerCallbacks and is checked to
            make sure it only gets called one time.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.LicenseManager.SetCallbacks">
            <summary>
            Only needs to be called once, will call into rhcommon_c and set call
            back function pointers
            </summary>
        </member>
        <member name="M:Rhino.Runtime.LicenseManager.InitializeHelper">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.LicenseManager.EchoHelper(System.String,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="message"></param>
            <param name="resultString"></param>
        </member>
        <member name="M:Rhino.Runtime.LicenseManager.ShowValidationUiHelper(System.String)">
            <summary>
            
            </summary>
            <param name="cdKey"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.LicenseManager.GetLicenseHelper(System.String,System.Guid,System.Int32,System.String,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="title"></param>
            <param name="id"></param>
            <param name="productBuildType"></param>
            <param name="path"></param>
            <param name="validator"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.LicenseManager.CustomGetLicenseHelper(System.Guid,System.String,System.UInt32,System.String,System.String,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="id"></param>
            <param name="title"></param>
            <param name="capabilities"></param>
            <param name="textMask"></param>
            <param name="path"></param>
            <param name="validator"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.LicenseManager.GetRegisteredOwnerInfoHelper(System.Guid,System.IntPtr,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="productId"></param>
            <param name="ownerWStringPointer"></param>
            <param name="companyWStringPointer"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.LicenseManager.AskUserForLicenseHelper(System.String,System.Boolean,System.IntPtr,System.Guid,System.Int32,System.String,System.String,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="productTitle"></param>
            <param name="standAlone"></param>
            <param name="parent"></param>
            <param name="productId"></param>
            <param name="productBuildType"></param>
            <param name="textMask"></param>
            <param name="path"></param>
            <param name="validator"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.LicenseManager.UuidHelper(System.Int32,System.Guid)">
            <summary>
            The CRhCmn_ZooClient; ReturnLicense(), CheckOutLicense(),
            CheckInLicense(), ConvertLicense(), and GetLicenseType() methods call
            this method with the appropriate mode.
            </summary>
            <param name="mode">Calling function Id</param>
            <param name="id">License type Id</param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Runtime.LicenseManager.InitializeCallback">
            <summary>
            Delegate passed to rhcommon_c as a call back function pointer
            </summary>
            <returns>
            Returns LicenseUtils.Initialize()
            </returns>
        </member>
        <member name="T:Rhino.Runtime.LicenseManager.EchoCallback">
            <summary>
            Delegate passed to rhcommon_c as a call back function pointer
            </summary>
            <param name="message"></param>
            <param name="resultString"></param>
        </member>
        <member name="T:Rhino.Runtime.LicenseManager.ShowValidationUiCallback">
            <summary>
            Delegate passed to rhcommon_c as a call back function pointer
            </summary>
            <param name="cdKey"></param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Runtime.LicenseManager.UuidCallback">
            <summary>
            Delegate passed to rhcommon_c as a call back function pointer
            </summary>
            <param name="mode">
            Constants defined in rh_license.cpp which define which LicenseUtils
            method to call.
            </param>
            <param name="id">
            License type id
            </param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Runtime.LicenseManager.GetLicenseCallback">
            <summary>
            Delegate passed to rhcommon_c as a call back function pointer
            </summary>
            <param name="title">
            License description string
            </param>
            <param name="id">
            License type id
            </param>
            <param name="productBuildType"></param>
            <param name="path">
            Full path to module which we are getting a license for, will check
            module for the required digital signatures.
            </param>
            <param name="validator">
            A pointer to the CRhinoLicenseValidator associated with this call, this
            object contains the ValidateProductKey method used by the Zoo Client to
            validate key values.
            </param>
            <returns>
            Returns a value of 1 on success or 0 on failure.
            </returns>
        </member>
        <member name="T:Rhino.Runtime.LicenseManager.GetCustomLicenseCallback">
            <summary>
            Delegate passed to rhcommon_c as a call back function pointer
            </summary>
            <param name="id">
            License type id
            </param>
            <param name="title">
            License description string
            </param>
            <param name="capabilities">
            Bitwise flag containing a list of buttons to be displayed on the custom
            get license dialog.
            </param>
            <param name="textMask">
            Optional text mask to be applied to the license key input control
            </param>
            <param name="path">
            Full path to module which we are getting a license for, will check
            module for the required digital signatures.
            </param>
            <param name="validator">
            A pointer to the CRhinoLicenseValidator associated with this call, this
            object contains the ValidateProductKey method used by the Zoo Client to
            validate key values.
            </param>
            <returns>
            Returns a value of 1 on success or 0 on failure.
            </returns>
        </member>
        <member name="T:Rhino.Runtime.LicenseManager.ValidatorHelper">
            <summary>
            Helper class used by GetLicenseHelper and GetCustomLicenseHelper
            methods when calling back into UnsafeNativeMethods.RHC_GetLicense
            </summary>
        </member>
        <member name="M:Rhino.Runtime.LicenseManager.ValidatorHelper.#ctor(System.IntPtr,System.Guid,System.String,System.String)">
            <summary>
            Constructor
            </summary>
            <param name="validator">CRhinoLicenseValidator unmanaged pointer</param>
            <param name="id">License type Id</param>
            <param name="title">License title</param>
            <param name="path">Full path to the executable requesting the license</param>
        </member>
        <member name="M:Rhino.Runtime.LicenseManager.ValidatorHelper.ValidateProductKey(System.String,Rhino.PlugIns.LicenseData@)">
            <summary>
            Passed as a delegate to LicenseUtils.GetLicense(), will call the C++
            ValidateProductKey() method then and copy CRhinoLicenseValidator C++
            data to the LicenseData output object.
            </summary>
            <param name="productKey"></param>
            <param name="licenseData">
            Key information is coppied to this object
            </param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.LicenseManager.ValidatorHelper.Path">
            <summary>
            This method is called by the Zoo Client using reflection so there are
            no direct calls to it here.  The Zoo Client will fail if this method
            is not defined.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.LicenseManager.ValidatorHelper.ProductId">
            <summary>
            This method is called by the Zoo Client using reflection so there are
            no direct calls to it here.  The Zoo Client will fail if this method
            is not defined.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.LicenseManager.ValidatorHelper.ProductTitle">
            <summary>
            This method is called by the Zoo Client using reflection so there are
            no direct calls to it here.  The Zoo Client will fail if this method
            is not defined.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Rhino.Runtime.LicenseManager.ValidatorHelper._validator">
            <summary>
            CRhinoLicenseValidator pointer passed to the constructor
            </summary>
        </member>
        <member name="F:Rhino.Runtime.LicenseManager.ValidatorHelper._path">
            <summary>
            Full path to the executable requesting the license.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.MonoHost">
            <summary>
            This class should only ever be called from the MonoManager.rhp. Luckily
            when embedding mono, you can call private classes with no problem so we
            don't need to expose this to the SDK.
            </summary>
        </member>
        <member name="T:Rhino.NamespaceDoc">
            <summary>
            The Rhino namespace contains fundamental types that
            define commonly-used value types and classes used in Rhino.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.NamespaceDoc">
            <summary>
            The Geometry namespace contains geometric types used in Rhino.
            <para>Examples are lines, curves, meshes and boundary representations.</para>
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.NamespaceDoc">
            <summary>
            The DocObjects namespace contains types that correspond to geometry
            that is found in a document.
            <para>Generally, these types reference an attribute and have a
            distinctive ID.</para>
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ConstructionPlane">
            <summary>
            Represents a contruction plane inside the document.
            <para>Use Rhino.DocObjects.Tables.NamedConstructionPlaneTable
            methods and indexers to add and access a <see cref="T:Rhino.DocObjects.ConstructionPlane"/>.</para>
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ConstructionPlane.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Rhino.DocObjects.ConstructionPlane"/>.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.Plane">
            <summary>
            Gets or sets the geometric plane to use for construction.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.GridSpacing">
            <summary>
            Gets or sets the distance between grid lines.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.SnapSpacing">
            <summary>
            when "grid snap" is enabled, the distance between snap points.
            Typically this is the same distance as grid spacing.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.GridLineCount">
            <summary>
            Gets or sets the total amount of grid lines in each direction.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.ThickLineFrequency">
            <summary>
            Gets or sets the recurrence of a wider line on the grid.
            <para>0: No lines are thick, all are drawn thin.</para>
            <para>1: All lines are thick.</para>
            <para>2: Every other line is thick.</para>
            <para>3: One line in three lines is thick (and two are thin).</para>
            <para>4: ...</para>
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.DepthBuffered">
            <summary>
            Gets or sets whether the grid is drawn on top of geometry.
            <para>false=grid is always drawn behind 3d geometry</para>
            <para>true=grid is drawn at its depth as a 3d plane and grid lines obscure things behind the grid.</para>
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.Name">
            <summary>
            Gets or sets the name of the grid.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.ShowGrid">
            <summary>
            Gets or sets whether the grid itself should be visible. 
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.ShowAxes">
            <summary>
            Gets or sets whether the axes of the grid shuld be visible.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.ThinLineColor">
            <summary>
            Gets or sets the color of the thinner, less prominent line.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.ThickLineColor">
            <summary>
            Gets or sets the color of the thicker, wider line.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.GridXColor">
            <summary>
            Gets or sets the color of the grid X-axis mark.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.GridYColor">
            <summary>
            Gets or sets the color of the grid Y-axis mark.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ConstructionPlane.GridZColor">
            <summary>
            Gets or sets the color of the grid Z-axis mark.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ViewInfo">
            <summary>
            Represents the name and orientation of a View (and named view).
            <para>views can be thought of as cameras.</para>
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ViewInfo.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ViewInfo.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ViewInfo.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.DocObjects.ViewInfo.Name">
            <summary>
            Gets or sets the name of the NamedView.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewInfo.Viewport">
            <summary>
            Gets the viewport, or viewing frustum, associated with this view.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.EarthAnchorPoint">
            <summary>
            Contains information about the model's position in latitude, longitude,
            and elevation for GIS mapping applications.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.EarthAnchorPoint.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.DocObjects.EarthAnchorPoint"/> class.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.EarthAnchorPoint.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.EarthAnchorPoint.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.EarthAnchorPoint.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="M:Rhino.DocObjects.EarthAnchorPoint.GetModelCompass">
            <summary>
            Returns a plane in model coordinates whose X axis points East,
            Y axis points North and Z axis points Up. The origin
            is set to ModelBasepoint.
            </summary>
            <returns>A plane value. This might be invalid on error.</returns>
        </member>
        <member name="M:Rhino.DocObjects.EarthAnchorPoint.GetModelToEarthTransform(Rhino.UnitSystem)">
            <summary>
            Gets a transformation from model coordinates to earth coordinates.
            This transformation assumes the model is small enough that
            the curvature of the earth can be ignored.
            </summary>
            <param name="modelUnitSystem">The model unit system.</param>
            <returns>
            Transform on success. Inalid Transform on error.
            </returns>
            <remarks>
            If M is a point in model coordinates and E = model_to_earth*M,
            then 
              E.x = latitude in decimal degrees
              E.y = longitude in decimal degrees
              E.z = elevation in meters above mean sea level
            Because the earth is not flat, there is a small amount of error
            when using a linear transformation to calculate oblate spherical 
            coordinates.  This error is small.  If the distance from P to M
            is d meters, then the approximation error is
            latitude error  &lt;=
            longitude error &lt;=
            elevation error &lt;= 6379000*((1 + (d/6356000)^2)-1) meters
            
            In particular, if every point in the model is within 1000 meters of
            the m_model_basepoint, then the maximum approximation errors are
            latitude error  &lt;=
            longitude error &lt;=
            elevation error &lt;= 8 centimeters.
            </remarks>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.EarthBasepointLatitude">
            <summary>
            Gets or sets a point latitude on earth, in decimal degrees.
            +90 = north pole, 0 = equator, -90 = south pole.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.EarthBasepointLongitude">
            <summary>
            Gets or sets the point longitude on earth, in decimal degrees.
            <para>0 = prime meridian (Greenwich meridian)</para>
            <para>Values increase towards West</para>
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.EarthBasepointElevation">
            <summary>
            Gets or sets the point elevation on earth, in meters.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.EarthBasepointElevationZero">
            <summary>
            Gets or sets a value indicating the zero level convention relating to a location on Earth.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.ModelBasePoint">
            <summary>Corresponding model point in model coordinates.</summary>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.ModelNorth">
            <summary>Earth directions in model coordinates.</summary>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.ModelEast">
            <summary>Earth directions in model coordinates.</summary>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.Name">
            <summary>
            Gets or sets the short form of the identifying information about this location.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.EarthAnchorPoint.Description">
            <summary>
            Gets or sets the long form of the identifying information about this location.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.BasepointZero">
            <summary>
            Specifies enumerated constants used to indicate the zero level convention relating to a location on Earth.
            <para>This is used in conjunction with the <see cref="T:Rhino.DocObjects.EarthAnchorPoint"/> class.</para>
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.BasepointZero.GroundLevel">
            <summary>
            The ground level is the convention for 0.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.BasepointZero.MeanSeaLevel">
            <summary>
            The mean sea level is the convention for 0.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.BasepointZero.CenterOfEarth">
            <summary>
            The center of the planet is the convention for 0.
            </summary>
        </member>
        <member name="T:Rhino.Render.RenderSettings">
            <summary>
            Contains settings used in rendering.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Render.RenderSettings"/> class.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderSettings.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderSettings.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderSettings.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Render.RenderSettings.AmbientLight">
            <summary>
            Gets or sets the ambient light color used in rendering.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.BackgroundColorTop">
            <summary>
            Gets or sets the background top color used in rendering.
            <para>Sets also the background color if a solid background color is set.</para>
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.BackgroundColorBottom">
            <summary>
            Gets or sets the background bottom color used in rendering.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.UseHiddenLights">
            <summary>
            Gets or sets a value indicating whether to render using lights that are on layers that are off.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.DepthCue">
            <summary>
            Gets or sets a value indicating whether to render using depth cues.
            <para>These are clues to help the perception of position and orientation of objects in the image.</para>
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.FlatShade">
            <summary>
            Gets or sets a value indicating whether to render using flat shading.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.RenderBackfaces">
            <summary>
            Gets or sets a value indicating whether to render back faces.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.RenderPoints">
            <summary>
            Gets or sets a value indicating whether to instruct the rendering engine to show points.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.RenderCurves">
            <summary>
            Gets or sets a value indicating whether to instruct the rendering engine to show curves.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.RenderIsoparams">
            <summary>
            Gets or sets a value indicating whether to instruct the rendering engine to show isocurves.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.RenderMeshEdges">
            <summary>
            Gets or sets a value indicating whether to instruct the rendering engine to show mesh edges.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.RenderAnnotations">
            <summary>
            Gets or sets a value indicating whether to instruct the rendering engine to show annotations,
            such as linear dimensions or angular dimensions.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.AntialiasLevel">
            <summary>
            0=none, 1=normal, 2=best.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.UseViewportSize">
            <summary>
            Gets or sets a value indicating whether to use the resolution of the
            viewport being rendered or ImageSize when rendering
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.ImageUnitSystem">
            <summary>
            unit system to use when converting image pixel size and dpi information
            into a print size.  Default = inches
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.ImageDpi">
            <summary>
            Number of dots/inch (dots=pixels) to use when printing and saving
            bitmaps. The default is 72.0 dots/inch.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.ImageSize">
            <summary>
            Gets or sets a value indicating the size of the rendering result if
            UseViewportSize is set to false.  If UseViewportSize is set to true,
            then this value is ignored.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.ShadowmapLevel">
            <summary>
            0=none, 1=normal, 2=best.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderSettings.BackgroundStyle">
            <summary>
            How the viewport's backgroun should be filled.
            </summary>
        </member>
        <member name="T:Rhino.Display.BackgroundStyle">
            <summary>
            Contains enumerated constants that define how the background of
            a viewport should be filled.
            </summary>
        </member>
        <member name="F:Rhino.Display.BackgroundStyle.SolidColor">
            <summary>Single solid color fill.</summary>
        </member>
        <member name="F:Rhino.Display.BackgroundStyle.WallpaperImage">
            <summary>Simple image background wallpaper.</summary>
        </member>
        <member name="F:Rhino.Display.BackgroundStyle.Gradient">
            <summary>Two color top/bottom color gradient.</summary>
        </member>
        <member name="F:Rhino.Display.BackgroundStyle.Environment">
            <summary>Using a special environment.</summary>
        </member>
        <member name="T:Rhino.FileIO.File3dmSettings">
            <summary>
            Contains settings used within the whole 3dm file.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.ModelUrl">
            <summary>
            Gets or sets a Uniform Resource Locator (URL) direction for the model.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.ModelBasepoint">
            <summary>
            Gets or sets the model basepoint that is used when the file is read as an instance definition.
            <para>This point is mapped to the origin in the instance definition.</para>
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.ModelAbsoluteTolerance">
            <summary>Gets or sets the model space absolute tolerance.</summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.ModelAngleToleranceRadians">
            <summary>Gets or sets the model space angle tolerance.</summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.ModelAngleToleranceDegrees">
            <summary>Gets or sets the model space angle tolerance.</summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.ModelRelativeTolerance">
            <summary>Gets or sets the model space relative tolerance.</summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.PageAbsoluteTolerance">
            <summary>Gets or sets the page space absolute tolerance.</summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.PageAngleToleranceRadians">
            <summary>Gets or sets the page space angle tolerance.</summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.PageAngleToleranceDegrees">
            <summary>Gets or sets the page space angle tolerance.</summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.PageRelativeTolerance">
            <summary>Gets or sets the page space relative tolerance.</summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.ModelUnitSystem">
            <summary>
            Gets or sets the model unit system, using <see cref="T:Rhino.UnitSystem"/> enumeration.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmSettings.PageUnitSystem">
            <summary>
            Gets or sets the page unit system, using <see cref="T:Rhino.UnitSystem"/> enumeration.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.TextJustification">
            <summary>
            Specifies enumerated constants used to indicate the internal alignment and justification of text.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.None">
            <summary>
            The default justification.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.Left">
            <summary>
            Left justification.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.Center">
            <summary>
            Center justification.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.Right">
            <summary>
            Right justification.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.Bottom">
            <summary>
            Bottom inner alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.Middle">
            <summary>
            Middle inner alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.Top">
            <summary>
            Top inner alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.BottomLeft">
            <summary>
            Combination of left justification and bottom alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.BottomCenter">
            <summary>
            Combination of center justification and bottom alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.BottomRight">
            <summary>
            Combination of right justification and bottom alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.MiddleLeft">
            <summary>
            Combination of left justification and middle alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.MiddleCenter">
            <summary>
            Combination of center justification and middle alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.MiddleRight">
            <summary>
            Combination of right justification and middle alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.TopLeft">
            <summary>
            Combination of left justification and top alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.TopCenter">
            <summary>
            Combination of center justification and top alignment.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TextJustification.TopRight">
            <summary>
            Combination of right justification and top alignment.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.AnnotationBase">
            <summary>
            Provides a common base class to all annotation geometry.
            <para>This class refers to the geometric element that is independent from the document.</para>
            </summary>
        </member>
        <member name="T:Rhino.Geometry.GeometryBase">
            <summary>
            Provides a common base for most geometric classes. This class is abstract.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.CommonObject">
            <summary>
            Base class for .NET classes that wrap C++ unmanaged Rhino classes.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.NonConstOperation">
            <summary>
            For derived classes implementers.
            <para>Defines the necessary implementation to free the instance from being const.</para>
            </summary>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.OnSwitchToNonConst">
            <summary>
            Is called when a non-const operation first occurs.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.EnsurePrivateCopy">
            <summary>
            If you want to keep a copy of this class around by holding onto it in a variable after a command
            completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can
            call this function as many times as you want.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.ReleaseNonConstPointer">
            <summary>
            Used for "temporary" wrapping of objects that we don't want .NET to destruct
            on disposal.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.ConstructConstObject(System.Object,System.Int32)">
            <summary>
            Assigns a parent object and a subobject index to this.
            </summary>
            <param name="parentObject">The parent object.</param>
            <param name="subobject_index">The subobject index.</param>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.IsValidWithLog(System.String@)">
            <summary>
            Determines if an object is valid. Also provides a report on errors if this
            object happens not to be valid.
            </summary>
            <param name="log">A textual log. This out parameter is assigned during this call.</param>
            <returns>true if this object is valid; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.#ctor">
            <summary>
            Allows construction from inheriting classes.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.CommonObject._SetUserString(System.String,System.String)">
            <summary>
            Attach a user string (key,value combination) to this geometry.
            </summary>
            <param name="key">id used to retrieve this string.</param>
            <param name="value">string associated with key.</param>
            <returns>true on success.</returns>
        </member>
        <member name="M:Rhino.Runtime.CommonObject._GetUserString(System.String)">
            <summary>
            Gets user string from this geometry.
            </summary>
            <param name="key">id used to retrieve the string.</param>
            <returns>string associated with the key if successful. null if no key was found.</returns>
        </member>
        <member name="M:Rhino.Runtime.CommonObject._GetUserStrings">
            <summary>
            Gets a copy of all (user key string, user value string) pairs attached to this geometry.
            </summary>
            <returns>A new collection.</returns>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Runtime.CommonObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
        </member>
        <member name="P:Rhino.Runtime.CommonObject.IsDocumentControlled">
            <summary>
            If true this object may not be modified. Any properties or functions that attempt
            to modify this object when it is set to "IsReadOnly" will throw a NotSupportedException.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.CommonObject.IsValid">
            <summary>Tests an object to see if it is valid.</summary>
        </member>
        <member name="P:Rhino.Runtime.CommonObject.HasUserData">
            <summary>
            Gets true if this class has any custom information attached to it through UserData.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.CommonObject.UserData">
            <summary>
            List of custom information that is attached to this class.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.CommonObject.UserDictionary">
            <summary>
            Dictionary of custom information attached to this class. The dictionary is actually user
            data provided as an easy to use sharable set of information.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.CommonObject._UserStringCount">
            <summary>
            Gets the amount of user strings.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.OnSwitchToNonConst">
            <summary>
            Is called when a non-const operation occurs.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.DuplicateShallow">
            <summary>
            Constructs a light copy of this object. By "light", it is meant that the same
            underlying data is used until something is done to attempt to change it. For example,
            you could have a shallow copy of a very heavy mesh object and the same underlying
            data will be used when doing things like inspecting the number of faces on the mesh.
            If you modify the location of one of the mesh vertices, the shallow copy will create
            a full duplicate of the underlying mesh data and the shallow copy will become a
            deep copy.
            </summary>
            <returns>An object of the same type as this object.
            <para>This behavior is overridden by implementing classes.</para></returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Duplicate">
            <summary>
            Constructs a deep (full) copy of this object.
            </summary>
            <returns>An object of the same type as this, with the same properties and behavior.</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the geometry. If the input Transform has a SimilarityType of
            OrientationReversing, you may want to consider flipping the transformed
            geometry after calling this function when it makes sense. For example,
            you may want to call Flip() on a Brep after transforming it.
            </summary>
            <param name="xform">
            Transformation to apply to geometry.
            </param>
            <returns>true if geometry successfully transformed.</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Translate(Rhino.Geometry.Vector3d)">
            <summary>Translates the object along the specified vector.</summary>
            <param name="translationVector">A moving vector.</param>
            <returns>true if geometry successfully translated.</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Translate(System.Double,System.Double,System.Double)">
            <summary>Translates the object along the specified vector.</summary>
            <param name="x">The X component.</param>
            <param name="y">The Y component.</param>
            <param name="z">The Z component.</param>
            <returns>true if geometry successfully translated.</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Scale(System.Double)">
            <summary>
            Scales the object by the specified factor. The scale is centered at the origin.
            </summary>
            <param name="scaleFactor">The uniform scaling factor.</param>
            <returns>true if geometry successfully scaled.</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.Rotate(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotates the object about the specified axis. A positive rotation 
            angle results in a counter-clockwise rotation about the axis (right hand rule).
            </summary>
            <param name="angleRadians">Angle of rotation in radians.</param>
            <param name="rotationAxis">Direction of the axis of rotation.</param>
            <param name="rotationCenter">Point on the axis of rotation.</param>
            <returns>true if geometry successfully rotated.</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.MemoryEstimate">
            <summary>
            Computes an estimate of the number of bytes that this object is using in memory.
            </summary>
            <returns>An estimated memory footprint.</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetBoundingBox(System.Boolean)">
            <summary>
            Boundingbox solver. Gets the world axis aligned boundingbox for the geometry.
            </summary>
            <param name="accurate">If true, a physically accurate boundingbox will be computed. 
            If not, a boundingbox estimate will be computed. For some geometry types there is no 
            difference between the estimate and the accurate boundingbox. Estimated boundingboxes 
            can be computed much (much) faster than accurate (or "tight") bounding boxes. 
            Estimated bounding boxes are always similar to or larger than accurate bounding boxes.</param>
            <returns>
            The boundingbox of the geometry in world coordinates or BoundingBox.Empty 
            if not bounding box could be found.
            </returns>
            <example>
            <code source='examples\vbnet\ex_curveboundingbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_curveboundingbox.cs' lang='cs'/>
            <code source='examples\py\ex_curveboundingbox.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetBoundingBox(Rhino.Geometry.Transform)">
            <summary>
            Aligned Boundingbox solver. Gets the world axis aligned boundingbox for the transformed geometry.
            </summary>
            <param name="xform">Transformation to apply to object prior to the BoundingBox computation. 
            The geometry itself is not modified.</param>
            <returns>The accurate boundingbox of the transformed geometry in world coordinates 
            or BoundingBox.Empty if not bounding box could be found.</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetBoundingBox(Rhino.Geometry.Plane)">
            <summary>
            Aligned Boundingbox solver. Gets the plane aligned boundingbox.
            </summary>
            <param name="plane">Orientation plane for BoundingBox.</param>
            <returns>A BoundingBox in plane coordinates.</returns>
            <example>
            <code source='examples\vbnet\ex_curveboundingbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_curveboundingbox.cs' lang='cs'/>
            <code source='examples\py\ex_curveboundingbox.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetBoundingBox(Rhino.Geometry.Plane,Rhino.Geometry.Box@)">
            <summary>
            Aligned Boundingbox solver. Gets the plane aligned boundingbox.
            </summary>
            <param name="plane">Orientation plane for BoundingBox.</param>
            <param name="worldBox">Aligned box in World coordinates.</param>
            <returns>A BoundingBox in plane coordinates.</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.MakeDeformable">
            <summary>
            If possible, converts the object into a form that can be accurately modified
            with "squishy" transformations like projections, shears, an non-uniform scaling.
            </summary>
            <returns>
            false if object cannot be converted to a deformable object. true if object was
            already deformable or was converted into a deformable object.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.ComponentIndex">
            <summary>
            If this piece of geometry is a component in something larger, like a BrepEdge
            in a Brep, then this function returns the component index.
            </summary>
            <returns>
            This object's component index.  If this object is not a sub-piece of a larger
            geometric entity, then the returned index has 
            m_type = ComponentIndex.InvalidType
            and m_index = -1.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.SetUserString(System.String,System.String)">
            <summary>
            Attach a user string (key,value combination) to this geometry.
            </summary>
            <param name="key">id used to retrieve this string.</param>
            <param name="value">string associated with key.</param>
            <returns>true on success.</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetUserString(System.String)">
            <summary>
            Gets user string from this geometry.
            </summary>
            <param name="key">id used to retrieve the string.</param>
            <returns>string associated with the key if successful. null if no key was found.</returns>
        </member>
        <member name="M:Rhino.Geometry.GeometryBase.GetUserStrings">
            <summary>
            Gets a copy of all (user key string, user value string) pairs attached to this geometry.
            </summary>
            <returns>A new collection.</returns>
        </member>
        <member name="P:Rhino.Geometry.GeometryBase.IsDocumentControlled">
            <summary>
            If true this object may not be modified. Any properties or functions that attempt
            to modify this object when it is set to "IsReadOnly" will throw a NotSupportedException.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.GeometryBase.ObjectType">
            <summary>
            Useful for switch statements that need to differentiate between
            basic object types like points, curves, surfaces, and so on.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.GeometryBase.IsDeformable">
            <summary>
            true if object can be accurately modified with "squishy" transformations like
            projections, shears, and non-uniform scaling.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.GeometryBase.HasBrepForm">
            <summary>
            Returns true if the Brep.TryConvertBrep function will be successful for this object
            </summary>
        </member>
        <member name="P:Rhino.Geometry.GeometryBase.UserStringCount">
            <summary>
            Gets the amount of user strings.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.#ctor">
            <summary>
            Protected constructor for internal use.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.AnnotationBase.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.NumericValue">
            <summary>
            Gets the numeric value, depending on geometry type.
            <para>LinearDimension: distance between arrow tips</para>
            <para>RadialDimension: radius or diamater depending on type</para>
            <para>AngularDimension: angle in degrees</para>
            <para>Leader or Text: UnsetValue</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.Text">
            <summary>
            Gets or sets the text for this annotation.
            </summary>
            <example>
            <code source='examples\vbnet\ex_edittext.vb' lang='vbnet'/>
            <code source='examples\cs\ex_edittext.cs' lang='cs'/>
            <code source='examples\py\ex_edittext.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.TextFormula">
            <summary>
            Gets or sets a formula for this annotation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.TextHeight">
            <summary>
            Gets or sets the text height in model units.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.Plane">
            <summary>
            Gets or sets the plane containing the annotation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AnnotationBase.Index">
            <summary>
            Index of DimensionStyle in document DimStyle table used by the dimension.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.LinearDimension">
            <summary>
            Represents a linear dimension.
            <para>This entity refers to the geometric element that is independent from the document.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.LinearDimension.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.LinearDimension"/> class.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.LinearDimension.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Point2d,Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <example>
            <code source='examples\vbnet\ex_addlineardimension2.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlineardimension2.cs' lang='cs'/>
            <code source='examples\py\ex_addlineardimension2.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.LinearDimension.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.LinearDimension.FromPoints(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.LinearDimension"/> class, based on three points.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.LinearDimension.SetLocations(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Sets the three locations of the point, using two-dimensional points that refer to the plane of the annotation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.LinearDimension.DistanceBetweenArrowTips">
            <summary>
            Gets the distance between arrow tips.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.LinearDimension.DimensionStyleIndex">
            <summary>
            Index of DimensionStyle in document DimStyle table used by the dimension.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.LinearDimension.ExtensionLine1End">
            <summary>
            Gets the end of the first extension line.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.LinearDimension.ExtensionLine2End">
            <summary>
            Gets the end of the second extension line.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.LinearDimension.Arrowhead1End">
            <summary>
            Gets the arrow head end of the first extension line.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.LinearDimension.Arrowhead2End">
            <summary>
            Gets the arrow head end of the second extension line.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.LinearDimension.TextPosition">
            <summary>
            Gets and sets the position of text on the plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.LinearDimension.Aligned">
            <summary>
            Gets or sets a value indicating whether this annotation is aligned.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.RadialDimension">
            <summary>
            Represents a dimension of a circular entity that can be measured with radius or diameter.
            <para>This entity refers to the geometric element that is independent from the document.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.RadialDimension.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.RadialDimension.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Construct a radial dimension from 3d input
            </summary>
            <param name="center">center of Circle</param>
            <param name="arrowTip">3d point on the circle at the dimension arrow tip</param>
            <param name="xAxis">x axis of the dimension's plane</param>
            <param name="normal">normal to the dimension's plane</param>
            <param name="offsetDistance">distance from arrow tip to knee point</param>
            <example>
            <code source='examples\vbnet\ex_addradialdimension.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addradialdimension.cs' lang='cs'/>
            <code source='examples\py\ex_addradialdimension.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.RadialDimension.#ctor(Rhino.Geometry.Circle,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Construct a radial dimension from 3d input
            </summary>
            <param name="circle"></param>
            <param name="arrowTip">3d point on the circle at the dimension arrow tip</param>
            <param name="offsetDistance">distance from arrow tip to knee point</param>
        </member>
        <member name="P:Rhino.Geometry.RadialDimension.IsDiameterDimension">
            <summary>
            Gets a value indicating whether the value refers to the diameter, rather than the radius.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.AngularDimension">
            <summary>
            Represents a dimension of an entity that can be measured with an angle.
            <para>This entity refers to the geometric element that is independent from the document.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.#ctor(Rhino.Geometry.Arc,System.Double)">
            <summary>
            Create an angular dimension from a give arc
            </summary>
            <param name="arc">The start and end points of the arc are the start and endpoints of the dimension</param>
            <param name="offset">How far to offset the dimension location from the arc</param>
        </member>
        <member name="M:Rhino.Geometry.AngularDimension.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.OrdinateDimension">
            <summary>
            Represents the geometry of a dimension that displays a coordinate of a point.
            <para>This class refers to the geometric element that is independent from the document.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.OrdinateDimension.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.TextEntity">
            <summary>
            Represents text geometry.
            <para>This class refers to the geometric element that is independent from the document.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.TextEntity.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.TextEntity"/> class.
            </summary>
            <example>
            <code source="examples\vbnet\ex_textjustify.vb" lang="vbnet"/>
            <code source="examples\cs\ex_textjustify.cs" lang="cs"/>
            <code source="examples\py\ex_textjustify.py" lang="py"/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.TextEntity.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.TextEntity.Explode">
            <summary>
            Explodes this text entity into an array of curves.
            </summary>
            <returns>An array of curves that forms the outline or content of this text entity.</returns>
        </member>
        <member name="P:Rhino.Geometry.TextEntity.FontIndex">
            <summary>
            Gets or sets the index of font in document font table used by the text.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.TextEntity.Justification">
            <summary>
            Gets or sets the justification of text in relation to its base point.
            </summary>
            <example>
            <code source='examples\vbnet\ex_textjustify.vb' lang='vbnet'/>
            <code source='examples\cs\ex_textjustify.cs' lang='cs'/>
            <code source='examples\py\ex_textjustify.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.TextEntity.MaskEnabled">
            <summary>
            Determines whether or not to draw a Text Mask
            </summary>
        </member>
        <member name="P:Rhino.Geometry.TextEntity.MaskUsesViewportColor">
            <summary>
            If true, the viewport's color is used for the mask color. If
            false, the color defined by MaskColor is used
            </summary>
        </member>
        <member name="P:Rhino.Geometry.TextEntity.MaskColor">
            <summary>
            Color to use for drawing a text mask when it is enabled. If the mask is
            enabled and MaskColor is System.Drawing.Color.Transparent, then the
            viewport's color will be used for the MaskColor
            </summary>
        </member>
        <member name="P:Rhino.Geometry.TextEntity.MaskOffset">
            <summary>
            distance around text to display mask
            </summary>
        </member>
        <member name="P:Rhino.Geometry.TextEntity.AnnotativeScalingEnabled">
            <summary>
            Scale annotation according to detail scale factor in paperspace
            or by 1.0 in paperspace and not in a detail
            Otherwise, dimscale or text scale is used
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Leader">
            <summary>
            Represents a leader, or an annotation entity with text that resembles an arrow pointing to something.
            <para>This class refers to the geometric element that is independent from the document.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Leader.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.TextDot">
            <summary>
            Represents a text dot, or an annotation entity with text that always faces the camera and always has the same size.
            <para>This class refers to the geometric element that is independent from the document.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.TextDot.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.TextDot.#ctor(System.String,Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new textdot based on the text and the location.
            </summary>
            <param name="text">Text.</param>
            <param name="location">A position.</param>
        </member>
        <member name="P:Rhino.Geometry.TextDot.Point">
            <summary>
            Gets or sets the position of the textdot.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.TextDot.Text">
            <summary>
            Gets or sets the text of the textdot.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.TextDot.FontHeight">
            <summary>
            Height of font used for displaying the dot
            </summary>
        </member>
        <member name="P:Rhino.Geometry.TextDot.FontFace">
            <summary>Font face used for displaying the dot</summary>
        </member>
        <member name="T:Rhino.Geometry.ArcCurve">
            <summary>
            Represent arcs and circles.
            <para>ArcCurve.IsCircle returns true if the curve is a complete circle.</para>
            </summary>
            <remarks>
            <para>Details:</para>
            <para>an ArcCurve is a subcurve of a circle, with a constant speed
            parameterization. The parameterization is	an affine linear
            reparameterzation of the underlying arc	m_arc onto the domain m_t.</para>
            <para>A valid ArcCurve has Radius()>0 and  0&lt;AngleRadians()&lt;=2*PI
            and a strictly increasing Domain.</para>
            </remarks>
        </member>
        <member name="T:Rhino.Geometry.Curve">
            <summary>
            Represents a base class that is common to most RhinoCommon curve types.
            <para>A curve represents an entity that can be all visited by providing
            a single parameter, usually called t.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateInterpolatedCurve(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)">
            <summary>
            Interpolates a sequence of points. Used by InterpCurve Command
            This routine works best when degree=3.
            </summary>
            <param name="degree">The degree of the curve >=1.  Degree must be odd.</param>
            <param name="points">
            Points to interpolate (Count must be >= 2)
            </param>
            <returns>interpolated curve on success. null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateInterpolatedCurve(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32,Rhino.Geometry.CurveKnotStyle)">
            <summary>
            Interpolates a sequence of points. Used by InterpCurve Command
            This routine works best when degree=3.
            </summary>
            <param name="degree">The degree of the curve >=1.  Degree must be odd.</param>
            <param name="points">
            Points to interpolate. For periodic curves if the final point is a
            duplicate of the initial point it is  ignored. (Count must be >=2)
            </param>
            <param name="knots">
            Knot-style to use  and specifies if the curve should be periodic.
            </param>
            <returns>interpolated curve on success. null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateInterpolatedCurve(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32,Rhino.Geometry.CurveKnotStyle,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Interpolates a sequence of points. Used by InterpCurve Command
            This routine works best when degree=3.
            </summary>
            <param name="degree">The degree of the curve >=1.  Degree must be odd.</param>
            <param name="points">
            Points to interpolate. For periodic curves if the final point is a
            duplicate of the initial point it is  ignored. (Count must be >=2)
            </param>
            <param name="knots">
            Knot-style to use  and specifies if the curve should be periodic.
            </param>
            <param name="startTangent">A starting tangent.</param>
            <param name="endTangent">An ending tangent.</param>
            <returns>interpolated curve on success. null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateControlPointCurve(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32)">
            <summary>
            Constructs a curve from a set of control-point locations.
            </summary>
            <param name="points">Control points.</param>
            <param name="degree">Degree of curve. The number of control points must be at least degree+1.</param>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateControlPointCurve(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Constructs a control-point of degree=3 (or less).
            </summary>
            <param name="points">Control points of curve.</param>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateMeanCurve(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Double)">
            <summary>
            Constructs a mean, or average, curve from two curves.
            </summary>
            <param name="curveA">A first curve.</param>
            <param name="curveB">A second curve.</param>
            <param name="angleToleranceRadians">
            The angle tolerance, in radians, used to match kinks between curves.
            If you are unsure how to set this parameter, then either use the
            document's angle tolerance RhinoDoc.AngleToleranceRadians,
            or the default value (RhinoMath.UnsetValue)
            </param>
            <returns>The average curve, or null on error.</returns>
            <exception cref="T:System.ArgumentNullException">If curveA or curveB are null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateMeanCurve(Rhino.Geometry.Curve,Rhino.Geometry.Curve)">
            <summary>
            Constructs a mean, or average, curve from two curves.
            </summary>
            <param name="curveA">A first curve.</param>
            <param name="curveB">A second curve.</param>
            <returns>The average curve, or null on error.</returns>
            <exception cref="T:System.ArgumentNullException">If curveA or curveB are null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateBlendCurve(Rhino.Geometry.Curve,Rhino.Geometry.Curve,Rhino.Geometry.BlendContinuity)">
            <summary>
            Create a Blend curve between two existing curves.
            </summary>
            <param name="curveA">Curve to blend from (blending will occur at curve end point).</param>
            <param name="curveB">Curve to blend to (blending will occur at curve start point).</param>
            <param name="continuity">Continuity of blend.</param>
            <returns>A curve representing the blend between A and B or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateBlendCurve(Rhino.Geometry.Curve,Rhino.Geometry.Curve,Rhino.Geometry.BlendContinuity,System.Double,System.Double)">
            <summary>
            Create a Blend curve between two existing curves.
            </summary>
            <param name="curveA">Curve to blend from (blending will occur at curve end point).</param>
            <param name="curveB">Curve to blend to (blending will occur at curve start point).</param>
            <param name="continuity">Continuity of blend.</param>
            <param name="bulgeA">Bulge factor at curveA end of blend. Values near 1.0 work best.</param>
            <param name="bulgeB">Bulge factor at curveB end of blend. Values near 1.0 work best.</param>
            <returns>A curve representing the blend between A and B or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateBlendCurve(Rhino.Geometry.Curve,System.Double,System.Boolean,Rhino.Geometry.BlendContinuity,Rhino.Geometry.Curve,System.Double,System.Boolean,Rhino.Geometry.BlendContinuity)">
            <summary>
            Makes a curve blend between 2 curves at the parameters specified
            with the directions and continuities specified
            </summary>
            <param name="curve0">First curve to blend from</param>
            <param name="t0">Parameter on first curve for blend endpoint</param>
            <param name="reverse0">
            If false, the blend will go in the natural direction of the curve.
            If true, the blend will go in the opposite direction to the curve
            </param>
            <param name="continuity0">continuity for the blend at the start</param>
            <param name="curve1">Second curve to blend from</param>
            <param name="t1">Parameter on second curve for blend endpoint</param>
            <param name="reverse1">
            If false, the blend will go in the natural direction of the curve.
            If true, the blend will go in the opposite direction to the curve
            </param>
            <param name="continuity1">continuity for the blend at the end</param>
            <returns>the blend curve on success. null on failure</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateTweenCurves(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Int32)">
            <summary>
            Creates curves between two open or closed input curves. Uses the control points of the curves for finding tween curves.
            That means the first control point of first curve is matched to first control point of the second curve and so on.
            There is no matching of curves direction. Caller must match input curves direction before calling the function.
            </summary>
            <param name="curve0">The first, or starting, curve.</param>
            <param name="curve1">The second, or ending, curve.</param>
            <param name="numCurves">Number of tween curves to create.</param>
            <returns>An array of joint curves. This array can be empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateTweenCurvesWithMatching(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Int32)">
            <summary>
            Creates curves between two open or closed input curves. Make the structure of input curves compatible if needed.
            Refits the input curves to have the same structure. The resulting curves are usually more complex than input unless
            input curves are compatible and no refit is needed. There is no matching of curves direction.
            Caller must match input curves direction before calling the function.
            </summary>
            <param name="curve0">The first, or starting, curve.</param>
            <param name="curve1">The second, or ending, curve.</param>
            <param name="numCurves">Number of tween curves to create.</param>
            <returns>An array of joint curves. This array can be empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateTweenCurvesWithSampling(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Int32,System.Int32)">
            <summary>
            Creates curves between two open or closed input curves. Use sample points method to make curves compatible.
            This is how the algorithm workd: Divides the two curves into an equal number of points, finds the midpoint between the 
            corresponding points on the curves and interpolates the tween curve through those points. There is no matching of curves
            direction. Caller must match input curves direction before calling the function.
            </summary>
            <param name="curve0">The first, or starting, curve.</param>
            <param name="curve1">The second, or ending, curve.</param>
            <param name="numCurves">Number of tween curves to create.</param>
            <param name="numSamples">Number of sample points along input curves.</param>
            <returns>>An array of joint curves. This array can be empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.JoinCurves(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Joins a collection of curve segments together.
            </summary>
            <param name="inputCurves">Curve segments to join.</param>
            <returns>An array of curves which contains.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.JoinCurves(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Double)">
            <summary>
            Joins a collection of curve segments together.
            </summary>
            <param name="inputCurves">An array, a list or any enumerable set of curve segments to join.</param>
            <param name="joinTolerance">Joining tolerance, 
            i.e. the distance between segment end-points that is allowed.</param>
            <returns>An array of joint curves. This array can be empty.</returns>
            <example>
            <code source="examples\vbnet\ex_dividebylength.vb" lang="vbnet"/>
            <code source="examples\cs\ex_dividebylength.cs" lang="cs"/>
            <code source="examples\py\ex_dividebylength.py" lang="py"/>
            </example>
            <exception cref="T:System.ArgumentNullException">If inputCurves is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Curve.JoinCurves(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Double,System.Boolean)">
            <summary>
            Joins a collection of curve segments together.
            </summary>
            <param name="inputCurves">An array, a list or any enumerable set of curve segments to join.</param>
            <param name="joinTolerance">Joining tolerance, 
            i.e. the distance between segment end-points that is allowed.</param>
            <param name="preserveDirection">
            <para>If true, curve endpoints will be compared to curve startpoints.</para>
            <para>If false, all start and endpoints will be compared and copies of input curves may be reversed in output.</para>
            </param>
            <returns>An array of joint curves. This array can be empty.</returns>
            <exception cref="T:System.ArgumentNullException">If inputCurves is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Curve.MakeEndsMeet(Rhino.Geometry.Curve,System.Boolean,Rhino.Geometry.Curve,System.Boolean)">
            <summary>
            Makes adjustments to the ends of one or both input curves so that they meet at a point.
            </summary>
            <param name="curveA">1st curve to adjust.</param>
            <param name="adjustStartCurveA">
            Which end of the 1st curve to adjust: true is start, false is end.
            </param>
            <param name="curveB">2nd curve to adjust.</param>
            <param name="adjustStartCurveB">
            which end of the 2nd curve to adjust true==start, false==end.
            </param>
            <returns>true on success.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetFilletPoints(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Double,System.Double,System.Double,System.Double@,System.Double@,Rhino.Geometry.Plane@)">
            <summary>
            Finds points at which to cut a pair of curves so that a fillet of given radius can be inserted.
            </summary>
            <param name="curve0">First curve to fillet.</param>
            <param name="curve1">Second curve to fillet.</param>
            <param name="radius">Fillet radius.</param>
            <param name="t0Base">Parameter value for base point on curve0.</param>
            <param name="t1Base">Parameter value for base point on curve1.</param>
            <param name="t0">Parameter value of fillet point on curve 0.</param>
            <param name="t1">Parameter value of fillet point on curve 1.</param>
            <param name="filletPlane">
            The fillet is contained in this plane with the fillet center at the plane origin.
            </param>
            <returns>true on success, false on failure.</returns>
            <remarks>
            A fillet point is a pair of curve parameters (t0,t1) such that there is a circle
            of radius point3 tangent to curve c0 at t0 and tangent to curve c1 at t1. Of all possible
            fillet points this function returns the one which is the closest to the base point
            t0Base, t1Base. Distance from the base point is measured by the sum of arc lengths
            along the two curves. 
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateFillet(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Double,System.Double,System.Double)">
            <summary>
            Computes the fillet arc for a curve filleting operation.
            </summary>
            <param name="curve0">First curve to fillet.</param>
            <param name="curve1">Second curve to fillet.</param>
            <param name="radius">Fillet radius.</param>
            <param name="t0Base">Parameter on curve0 where the fillet ought to start (approximately).</param>
            <param name="t1Base">Parameter on curve1 where the fillet ought to end (approximately).</param>
            <returns>The fillet arc on success, or Arc.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateFilletCurves(Rhino.Geometry.Curve,Rhino.Geometry.Point3d,Rhino.Geometry.Curve,Rhino.Geometry.Point3d,System.Double,System.Boolean,System.Boolean,System.Boolean,System.Double,System.Double)">
            <summary>
            Creates a tangent arc between two curves and trims or extends the curves to the arc.
            </summary>
            <param name="curve0">The first curve to fillet.</param>
            <param name="point0">
            A point on the first curve that is near the end where the fillet will
            be created.
            </param>
            <param name="curve1">The second curve to fillet.</param>
            <param name="point1">
            A point on the second curve that is near the end where the fillet will
            be created.
            </param>
            <param name="radius">The radius of the fillet.</param>
            <param name="join">Join the output curves.</param>
            <param name="trim">
            Trim copies of the input curves to the output fillet curve.
            </param>
            <param name="arcExtension">
            Applies when arcs are filleted but need to be extended to meet the
            fillet curve or chamfer line. If true, then the arc is extended
            maintaining its validity. If false, then the arc is extended with a
            line segment, which is joined to the arc converting it to a polycurve.
            </param>
            <param name="tolerance">
            The tolerance, generally the document's absolute tolerance.
            </param>
            <param name="angleTolerance"></param>
            <returns>
            The results of the fillet operation. The number of output curves depends
            on the input curves and the values of the parameters that were used
            during the fillet operation. In most cases, the output array will contain
            either one or three curves, although two curves can be returned if the
            radius is zero and join = false.
            For example, if both join and trim = true, then the output curve
            will be a polycurve containing the fillet curve joined with trimmed copies
            of the input curves. If join = false and trim = true, then three curves,
            the fillet curve and trimmed copies of the input curves, will be returned.
            If both join and trim = false, then just the fillet curve is returned.
            </returns>
            <example>
            <code source='examples\vbnet\ex_filletcurves.vb' lang='vbnet'/>
            <code source='examples\cs\ex_filletcurves.cs' lang='cs'/>
            <code source='examples\py\ex_filletcurves.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateBooleanUnion(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Calculates the boolean union of two or more closed, planar curves. 
            Note, curves must be co-planar.
            </summary>
            <param name="curves">The co-planar curves to union.</param>
            <returns>Result curves on success, empty array if no union could be calculated.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateBooleanIntersection(Rhino.Geometry.Curve,Rhino.Geometry.Curve)">
            <summary>
            Calculates the boolean intersection of two closed, planar curves. 
            Note, curves must be co-planar.
            </summary>
            <param name="curveA">The first closed, planar curve.</param>
            <param name="curveB">The second closed, planar curve.</param>
            <returns>Result curves on success, empty array if no intersection could be calculated.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateBooleanDifference(Rhino.Geometry.Curve,Rhino.Geometry.Curve)">
            <summary>
            Calculates the boolean difference between two closed, planar curves. 
            Note, curves must be co-planar.
            </summary>
            <param name="curveA">The first closed, planar curve.</param>
            <param name="curveB">The second closed, planar curve.</param>
            <returns>Result curves on success, empty array if no difference could be calculated.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CreateBooleanDifference(Rhino.Geometry.Curve,System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Calculates the boolean difference between a closed planar curve, and a list of closed planar curves. 
            Note, curves must be co-planar.
            </summary>
            <param name="curveA">The first closed, planar curve.</param>
            <param name="subtractors">curves to subtract from the first closed curve.</param>
            <returns>Result curves on success, empty array if no difference could be calculated.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.DoDirectionsMatch(Rhino.Geometry.Curve,Rhino.Geometry.Curve)">
            <summary>
            Determines whether two curves travel more or less in the same direction.
            </summary>
            <param name="curveA">First curve to test.</param>
            <param name="curveB">Second curve to test.</param>
            <returns>true if both curves more or less point in the same direction, 
            false if they point in the opposite directions.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ProjectToMesh(Rhino.Geometry.Curve,Rhino.Geometry.Mesh,Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Projects a curve to a mesh using a direction and tolerance.
            </summary>
            <param name="curve">A curve.</param>
            <param name="mesh">A mesh.</param>
            <param name="direction">A direction vector.</param>
            <param name="tolerance">A tolerance value.</param>
            <returns>A curve array.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ProjectToMesh(Rhino.Geometry.Curve,System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh},Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Projects a curve to a set of meshes using a direction and tolerance.
            </summary>
            <param name="curve">A curve.</param>
            <param name="meshes">A list, an array or any enumerable of meshes.</param>
            <param name="direction">A direction vector.</param>
            <param name="tolerance">A tolerance value.</param>
            <returns>A curve array.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ProjectToMesh(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh},Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Projects a curve to a set of meshes using a direction and tolerance.
            </summary>
            <param name="curves">A list, an array or any enumerable of curves.</param>
            <param name="meshes">A list, an array or any enumerable of meshes.</param>
            <param name="direction">A direction vector.</param>
            <param name="tolerance">A tolerance value.</param>
            <returns>A curve array.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ProjectToBrep(Rhino.Geometry.Curve,Rhino.Geometry.Brep,Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Projects a Curve onto a Brep along a given direction.
            </summary>
            <param name="curve">Curve to project.</param>
            <param name="brep">Brep to project onto.</param>
            <param name="direction">Direction of projection.</param>
            <param name="tolerance">Tolerance to use for projection.</param>
            <returns>An array of projected curves or empty array if the projection set is empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ProjectToBrep(Rhino.Geometry.Curve,System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Projects a Curve onto a collection of Breps along a given direction.
            </summary>
            <param name="curve">Curve to project.</param>
            <param name="breps">Breps to project onto.</param>
            <param name="direction">Direction of projection.</param>
            <param name="tolerance">Tolerance to use for projection.</param>
            <returns>An array of projected curves or empty array if the projection set is empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ProjectToBrep(Rhino.Geometry.Curve,System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},Rhino.Geometry.Vector3d,System.Double,System.Int32[]@)">
            <summary>
            Projects a Curve onto a collection of Breps along a given direction.
            </summary>
            <param name="curve">Curve to project.</param>
            <param name="breps">Breps to project onto.</param>
            <param name="direction">Direction of projection.</param>
            <param name="tolerance">Tolerance to use for projection.</param>
            <param name="brepIndices">(out) Integers that identify for each resulting curve which Brep it was projected onto.</param>
            <returns>An array of projected curves or null if the projection set is empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ProjectToBrep(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Projects a collection of Curves onto a collection of Breps along a given direction.
            </summary>
            <param name="curves">Curves to project.</param>
            <param name="breps">Breps to project onto.</param>
            <param name="direction">Direction of projection.</param>
            <param name="tolerance">Tolerance to use for projection.</param>
            <returns>An array of projected curves or empty array if the projection set is empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ProjectToBrep(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},Rhino.Geometry.Vector3d,System.Double,System.Int32[]@,System.Int32[]@)">
            <summary>
            Projects a collection of Curves onto a collection of Breps along a given direction.
            </summary>
            <param name="curves">Curves to project.</param>
            <param name="breps">Breps to project onto.</param>
            <param name="direction">Direction of projection.</param>
            <param name="tolerance">Tolerance to use for projection.</param>
            <param name="curveIndices">Index of which curve in the input list was the source for a curve in the return array.</param>
            <param name="brepIndices">Index of which brep was used to generate a curve in the return array.</param>
            <returns>An array of projected curves. Array is empty if the projection set is empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ProjectToPlane(Rhino.Geometry.Curve,Rhino.Geometry.Plane)">
            <summary>
            Constructs a curve by projecting an existing curve to a plane.
            </summary>
            <param name="curve">A curve.</param>
            <param name="plane">A plane.</param>
            <returns>The projected curve on success; null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.PullToBrepFace(Rhino.Geometry.Curve,Rhino.Geometry.BrepFace,System.Double)">
            <summary>
            Pull a curve to a BrepFace using closest point projection.
            </summary>
            <param name="curve">Curve to pull.</param>
            <param name="face">Brepface that pulls.</param>
            <param name="tolerance">Tolerance to use for pulling.</param>
            <returns>An array of pulled curves, or an empty array on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetDistancesBetweenCurves(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Double,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Computes the distances between two arbitrary curves that overlap.
            </summary>
            <param name="curveA">A curve.</param>
            <param name="curveB">Another curve.</param>
            <param name="tolerance">A tolerance value.</param>
            <param name="maxDistance">The maximum distance value. This is an out reference argument.</param>
            <param name="maxDistanceParameterA">The maximum distance parameter on curve A. This is an out reference argument.</param>
            <param name="maxDistanceParameterB">The maximum distance parameter on curve B. This is an out reference argument.</param>
            <param name="minDistance">The minimum distance value. This is an out reference argument.</param>
            <param name="minDistanceParameterA">The minimum distance parameter on curve A. This is an out reference argument.</param>
            <param name="minDistanceParameterB">The minimum distance parameter on curve B. This is an out reference argument.</param>
            <returns>true if the operation succeeded; otherwise false.</returns>
            <example>
            <code source='examples\vbnet\ex_crvdeviation.vb' lang='vbnet'/>
            <code source='examples\cs\ex_crvdeviation.cs' lang='cs'/>
            <code source='examples\py\ex_crvdeviation.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.PlanarClosedCurveRelationship(Rhino.Geometry.Curve,Rhino.Geometry.Curve,Rhino.Geometry.Plane,System.Double)">
            <summary>
            Determines whether two coplanar simple closed curves are disjoint or intersect;
            otherwise, if the regions have a containment relationship, discovers
            which curve encloses the other.
            </summary>
            <param name="curveA">A first curve.</param>
            <param name="curveB">A second curve.</param>
            <param name="testPlane">A plane.</param>
            <param name="tolerance">A tolerance value.</param>
            <returns>
            A value indicating the relationship between the first and the second curve.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.PlanarCurveCollision(Rhino.Geometry.Curve,Rhino.Geometry.Curve,Rhino.Geometry.Plane,System.Double)">
            <summary>
            Determines if two coplanar curves collide (intersect).
            </summary>
            <param name="curveA">A curve.</param>
            <param name="curveB">Another curve.</param>
            <param name="testPlane">A valid plane containing the curves.</param>
            <param name="tolerance">A tolerance value for intersection.</param>
            <returns>true if the curves intersect, otherwise false</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.#ctor">
            <summary>
            Protected constructor for internal use.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Curve.Duplicate">
            <summary>
            Constructs an exact duplicate of this Curve.
            </summary>
            <seealso cref="M:Rhino.Geometry.Curve.DuplicateCurve"/>
        </member>
        <member name="M:Rhino.Geometry.Curve.DuplicateCurve">
            <summary>
            Constructs an exact duplicate of this curve.
            </summary>
            <returns>An exact copy of this curve.</returns>
            <example>
            <code source='examples\vbnet\ex_curvereverse.vb' lang='vbnet'/>
            <code source='examples\cs\ex_curvereverse.cs' lang='cs'/>
            <code source='examples\py\ex_curvereverse.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.DuplicateSegments">
            <summary>
            Polylines will be exploded into line segments. ExplodeCurves will
            return the curves in topological order.
            </summary>
            <returns>
            An array of all the segments that make up this curve.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="M:Rhino.Geometry.Curve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected serialization constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.Curve.NonConstOperation">
            <summary>
            For derived classes implementers.
            <para>Defines the necessary implementation to free the instance from being const.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Curve.ChangeDimension(System.Int32)">
            <summary>
            Changes the dimension of a curve.
            </summary>
            <param name="desiredDimension">The desired dimension.</param>
            <returns>
            true if the curve's dimension was already desiredDimension
            or if the curve's dimension was successfully changed to desiredDimension;
            otherwise false.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsLinear">
            <summary>
            Test a curve to see if it is linear to within RhinoMath.ZeroTolerance units (1e-12).
            </summary>
            <returns>true if the curve is linear.</returns>
            <example>
            <code source='examples\vbnet\ex_addradialdimension.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addradialdimension.cs' lang='cs'/>
            <code source='examples\py\ex_addradialdimension.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsLinear(System.Double)">
            <summary>
            Test a curve to see if it is linear to within the custom tolerance.
            </summary>
            <param name="tolerance">Tolerance to use when checking linearity.</param>
            <returns>
            true if the ends of the curve are farther than tolerance apart
            and the maximum distance from any point on the curve to
            the line segment connecting the curve ends is &lt;= tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsPolyline">
            <summary>
            Several types of Curve can have the form of a polyline
            including a degree 1 NurbsCurve, a PolylineCurve,
            and a PolyCurve all of whose segments are some form of
            polyline. IsPolyline tests a curve to see if it can be
            represented as a polyline.
            </summary>
            <returns>true if this curve can be represented as a polyline; otherwise, false.</returns>
            <example>
            <code source='examples\vbnet\ex_addradialdimension.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addradialdimension.cs' lang='cs'/>
            <code source='examples\py\ex_addradialdimension.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetPolyline(Rhino.Geometry.Polyline@)">
            <summary>
            Several types of Curve can have the form of a polyline 
            including a degree 1 NurbsCurve, a PolylineCurve, 
            and a PolyCurve all of whose segments are some form of 
            polyline. IsPolyline tests a curve to see if it can be 
            represented as a polyline.
            </summary>
            <param name="polyline">
            If true is returned, then the polyline form is returned here.
            </param>
            <returns>true if this curve can be represented as a polyline; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetPolyline(Rhino.Geometry.Polyline@,System.Double[]@)">
            <summary>
            Several types of Curve can have the form of a polyline 
            including a degree 1 NurbsCurve, a PolylineCurve, 
            and a PolyCurve all of whose segments are some form of 
            polyline. IsPolyline tests a curve to see if it can be 
            represented as a polyline.
            </summary>
            <param name="polyline">
            If true is returned, then the polyline form is returned here.
            </param>
            <param name="parameters">
            if true is returned, then the parameters of the polyline
            points are returned here.
            </param>
            <returns>true if this curve can be represented as a polyline; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsArc">
            <summary>
            Test a curve to see if it can be represented by an arc or circle within RhinoMath.ZeroTolerance.
            </summary>
            <returns>
            true if the curve can be represented by an arc or a circle within tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsArc(System.Double)">
            <summary>
            Test a curve to see if it can be represented by an arc or circle within the given tolerance.
            </summary>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>
            true if the curve can be represented by an arc or a circle within tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetArc(Rhino.Geometry.Arc@)">
            <summary>
            Try to convert this curve into an Arc using RhinoMath.ZeroTolerance.
            </summary>
            <param name="arc">On success, the Arc will be filled in.</param>
            <returns>true if the curve could be converted into an arc.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetArc(Rhino.Geometry.Arc@,System.Double)">
            <summary>
            Try to convert this curve into an Arc using a custom tolerance.
            </summary>
            <param name="arc">On success, the Arc will be filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>true if the curve could be converted into an arc.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetArc(Rhino.Geometry.Plane,Rhino.Geometry.Arc@)">
            <summary>
            Try to convert this curve into an Arc using RhinoMath.ZeroTolerance.
            </summary>
            <param name="plane">Plane in which the comparison is performed.</param>
            <param name="arc">On success, the Arc will be filled in.</param>
            <returns>true if the curve could be converted into an arc within the given plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetArc(Rhino.Geometry.Plane,Rhino.Geometry.Arc@,System.Double)">
            <summary>
            Try to convert this curve into an Arc using a custom tolerance.
            </summary>
            <param name="plane">Plane in which the comparison is performed.</param>
            <param name="arc">On success, the Arc will be filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>true if the curve could be converted into an arc within the given plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsCircle">
            <summary>
            Test a curve to see if it can be represented by a circle within RhinoMath.ZeroTolerance.
            </summary>
            <returns>
            true if the Curve can be represented by a circle within tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsCircle(System.Double)">
            <summary>
            Test a curve to see if it can be represented by a circle within the given tolerance.
            </summary>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>
            true if the curve can be represented by a circle to within tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetCircle(Rhino.Geometry.Circle@)">
            <summary>
            Try to convert this curve into a circle using RhinoMath.ZeroTolerance.
            </summary>
            <param name="circle">On success, the Circle will be filled in.</param>
            <returns>true if the curve could be converted into a Circle.</returns>
            <example>
            <code source='examples\vbnet\ex_customgeometryfilter.vb' lang='vbnet'/>
            <code source='examples\cs\ex_customgeometryfilter.cs' lang='cs'/>
            <code source='examples\py\ex_customgeometryfilter.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetCircle(Rhino.Geometry.Circle@,System.Double)">
            <summary>
            Try to convert this curve into a Circle using a custom tolerance.
            </summary>
            <param name="circle">On success, the Circle will be filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>true if the curve could be converted into a Circle within tolerance.</returns>
            <example>
            <code source='examples\vbnet\ex_circlecenter.vb' lang='vbnet'/>
            <code source='examples\cs\ex_circlecenter.cs' lang='cs'/>
            <code source='examples\py\ex_circlecenter.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsEllipse">
            <summary>
            Test a curve to see if it can be represented by an ellipse within RhinoMath.ZeroTolerance.
            </summary>
            <returns>
            true if the Curve can be represented by an ellipse within tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsEllipse(System.Double)">
            <summary>
            Test a curve to see if it can be represented by an ellipse within a given tolerance.
            </summary>
            <param name="tolerance">Tolerance to use for checking.</param>
            <returns>
            true if the Curve can be represented by an ellipse within tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetEllipse(Rhino.Geometry.Ellipse@)">
            <summary>
            Try to convert this curve into an Ellipse within RhinoMath.ZeroTolerance.
            </summary>
            <param name="ellipse">On success, the Ellipse will be filled in.</param>
            <returns>true if the curve could be converted into an Ellipse.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetEllipse(Rhino.Geometry.Ellipse@,System.Double)">
            <summary>
            Try to convert this curve into an Ellipse using a custom tolerance.
            </summary>
            <param name="ellipse">On success, the Ellipse will be filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>true if the curve could be converted into an Ellipse.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetEllipse(Rhino.Geometry.Plane,Rhino.Geometry.Ellipse@)">
            <summary>
            Try to convert this curve into an Ellipse within RhinoMath.ZeroTolerance.
            </summary>
            <param name="plane">Plane in which the comparison is performed.</param>
            <param name="ellipse">On success, the Ellipse will be filled in.</param>
            <returns>true if the curve could be converted into an Ellipse within the given plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetEllipse(Rhino.Geometry.Plane,Rhino.Geometry.Ellipse@,System.Double)">
            <summary>
            Try to convert this curve into an Ellipse using a custom tolerance.
            </summary>
            <param name="plane">Plane in which the comparison is performed.</param>
            <param name="ellipse">On success, the Ellipse will be filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>true if the curve could be converted into an Ellipse within the given plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsPlanar">
            <summary>Test a curve for planarity.</summary>
            <returns>
            true if the curve is planar (flat) to within RhinoMath.ZeroTolerance units (1e-12).
            </returns>
            <example>
            <code source='examples\vbnet\ex_addradialdimension.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addradialdimension.cs' lang='cs'/>
            <code source='examples\py\ex_addradialdimension.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsPlanar(System.Double)">
            <summary>Test a curve for planarity.</summary>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>
            true if there is a plane such that the maximum distance from the curve to the plane is &lt;= tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetPlane(Rhino.Geometry.Plane@)">
            <summary>Test a curve for planarity and return the plane.</summary>
            <param name="plane">On success, the plane parameters are filled in.</param>
            <returns>
            true if there is a plane such that the maximum distance from the curve to the plane is &lt;= RhinoMath.ZeroTolerance.
            </returns>
            <example>
            <code source='examples\vbnet\ex_constrainedcopy.vb' lang='vbnet'/>
            <code source='examples\cs\ex_constrainedcopy.cs' lang='cs'/>
            <code source='examples\py\ex_constrainedcopy.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.TryGetPlane(Rhino.Geometry.Plane@,System.Double)">
            <summary>Test a curve for planarity and return the plane.</summary>
            <param name="plane">On success, the plane parameters are filled in.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>
            true if there is a plane such that the maximum distance from the curve to the plane is &lt;= tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsInPlane(Rhino.Geometry.Plane)">
            <summary>Test a curve to see if it lies in a specific plane.</summary>
            <param name="testPlane">Plane to test for.</param>
            <returns>
            true if the maximum distance from the curve to the testPlane is &lt;= RhinoMath.ZeroTolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsInPlane(Rhino.Geometry.Plane,System.Double)">
            <summary>Test a curve to see if it lies in a specific plane.</summary>
            <param name="testPlane">Plane to test for.</param>
            <param name="tolerance">Tolerance to use when checking.</param>
            <returns>
            true if the maximum distance from the curve to the testPlane is &lt;= tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ChangeClosedCurveSeam(System.Double)">
            <summary>
            If this curve is closed, then modify it so that the start/end point is at curve parameter t.
            </summary>
            <param name="t">
            Curve parameter of new start/end point. The returned curves domain will start at t.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsClosable(System.Double)">
            <summary>
            Decide if it makes sense to close off this curve by moving the endpoint 
            to the start based on start-end gap size and length of curve as 
            approximated by chord defined by 6 points.
            </summary>
            <param name="tolerance">
            Maximum allowable distance between start and end. 
            If start - end gap is greater than tolerance, this function will return false.
            </param>
            <returns>true if start and end points are close enough based on above conditions.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsClosable(System.Double,System.Double,System.Double)">
            <summary>
            Decide if it makes sense to close off this curve by moving the endpoint
            to the start based on start-end gap size and length of curve as
            approximated by chord defined by 6 points.
            </summary>
            <param name="tolerance">
            Maximum allowable distance between start and end. 
            If start - end gap is greater than tolerance, this function will return false.
            </param>
            <param name="minimumAbsoluteSize">
            If greater than 0.0 and none of the interior sampled points are at
            least minimumAbsoluteSize from start, this function will return false.
            </param>
            <param name="minimumRelativeSize">
            If greater than 1.0 and chord length is less than 
            minimumRelativeSize*gap, this function will return false.
            </param>
            <returns>true if start and end points are close enough based on above conditions.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.MakeClosed(System.Double)">
            <summary>
            If IsClosed, just return true. Otherwise, decide if curve can be closed as 
            follows: Linear curves polylinear curves with 2 segments, Nurbs with 3 or less 
            control points cannot be made closed. Also, if tolerance > 0 and the gap between 
            start and end is larger than tolerance, curve cannot be made closed. 
            Adjust the curve's endpoint to match its start point.
            </summary>
            <param name="tolerance">
            If nonzero, and the gap is more than tolerance, curve cannot be made closed.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ClosedCurveOrientation(Rhino.Geometry.Vector3d)">
            <summary>
            Determines the orientation (counterclockwise or clockwise) of a closed planar curve in a given plane.
            Only works with simple (no self intersections) closed planar curves.
            </summary>
            <param name="upDirection">A vector that is considered "up".</param>
            <returns>The orientation of this curve with respect to a defined up direction.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ClosedCurveOrientation(Rhino.Geometry.Plane)">
            <summary>
            Determines the orientation (counterclockwise or clockwise) of a closed planar curve in a given plane.
            Only works with simple (no self intersections) closed planar curves.
            </summary>
            <param name="plane">
            The plane in which to solve the orientation.
            </param>
            <returns>The orientation of this curve in the given plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ClosedCurveOrientation(Rhino.Geometry.Transform)">
            <summary>
            Determines the orientation (counterclockwise or clockwise) of a closed planar curve.
            Only works with simple (no self intersections) closed planar curves.
            </summary>
            <param name="xform">
            Transformation to map the curve to the xy plane. If the curve is parallel
            to the xy plane, you may pass Identity matrix.
            </param>
            <returns>The orientation of this curve in the world xy-plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Reverse">
            <summary>
            Reverses the direction of the curve.
            </summary>
            <returns>true on success, false on failure.</returns>
            <remarks>If reversed, the domain changes from [a,b] to [-b,-a]</remarks>
            <example>
            <code source='examples\vbnet\ex_curvereverse.vb' lang='vbnet'/>
            <code source='examples\cs\ex_curvereverse.cs' lang='cs'/>
            <code source='examples\py\ex_curvereverse.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.ClosestPoint(Rhino.Geometry.Point3d,System.Double@)">
            <summary>
            Finds parameter of the point on a curve that is closest to testPoint.
            If the maximumDistance parameter is > 0, then only points whose distance
            to the given point is &lt;= maximumDistance will be returned.  Using a 
            positive value of maximumDistance can substantially speed up the search.
            </summary>
            <param name="testPoint">Point to search from.</param>
            <param name="t">Parameter of local closest point.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ClosestPoint(Rhino.Geometry.Point3d,System.Double@,System.Double)">
            <summary>
            Finds the parameter of the point on a curve that is closest to testPoint.
            If the maximumDistance parameter is > 0, then only points whose distance
            to the given point is &lt;= maximumDistance will be returned.  Using a 
            positive value of maximumDistance can substantially speed up the search.
            </summary>
            <param name="testPoint">Point to project.</param>
            <param name="t">parameter of local closest point returned here.</param>
            <param name="maximumDistance">The maximum allowed distance.
            <para>Past this distance, the search is given up and false is returned.</para>
            <para>Use 0 to turn off this parameter.</para></param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ClosestPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase},Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@,System.Int32@,System.Double)">
            <summary>
            Finds the object (and the closest point in that object) that is closest to
            this curve. <para><see cref="T:Rhino.Geometry.Brep">Breps</see>, <see cref="T:Rhino.Geometry.Surface">surfaces</see>,
            <see cref="T:Rhino.Geometry.Curve">curves</see> and <see cref="T:Rhino.Geometry.PointCloud">point clouds</see> are examples of
            objects that can be passed to this function.</para>
            </summary>
            <param name="geometry">A list, an array or any enumerable set of geometry to search.</param>
            <param name="pointOnCurve">The point on curve. This out parameter is assigned during this call.</param>
            <param name="pointOnObject">The point on geometry. This out parameter is assigned during this call.</param>
            <param name="whichGeometry">The index of the geometry. This out parameter is assigned during this call.</param>
            <param name="maximumDistance">Maximum allowable distance. Past this distance, the research is given up and false is returned.</param>
            <returns>true on success; false if no object was found or selected.</returns>
            <exception cref="T:System.ArgumentNullException">If geometry is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Curve.ClosestPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase},Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@,System.Int32@)">
            <summary>
            Finds the object (and the closest point in that object) that is closest to
            this curve. <para><see cref="T:Rhino.Geometry.Brep">Breps</see>, <see cref="T:Rhino.Geometry.Surface">surfaces</see>,
            <see cref="T:Rhino.Geometry.Curve">curves</see> and <see cref="T:Rhino.Geometry.PointCloud">point clouds</see> are examples of
            objects that can be passed to this function.</para>
            </summary>
            <param name="geometry">A list, an array or any enumerable set of geometry to search.</param>
            <param name="pointOnCurve">The point on curve. This out parameter is assigned during this call.</param>
            <param name="pointOnObject">The point on geometry. This out parameter is assigned during this call.</param>
            <param name="whichGeometry">The index of the geometry. This out parameter is assigned during this call.</param>
            <returns>true on success; false if no object was found or selected.</returns>
            <exception cref="T:System.ArgumentNullException">If geometry is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Curve.ClosestPoints(Rhino.Geometry.Curve,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@)">
            <summary>
            Gets closest points between this and another curves.
            </summary>
            <param name="otherCurve">The other curve.</param>
            <param name="pointOnThisCurve">The point on this curve. This out parameter is assigned during this call.</param>
            <param name="pointOnOtherCurve">The point on other curve. This out parameter is assigned during this call.</param>
            <returns>true on success; false on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Contains(Rhino.Geometry.Point3d)">
            <summary>
            Computes the relationship between a point and a closed curve region. 
            This curve must be closed or the return value will be Unset.
            Both curve and point are projected to the World XY plane.
            </summary>
            <param name="testPoint">Point to test.</param>
            <returns>Relationship between point and curve region.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Contains(Rhino.Geometry.Point3d,Rhino.Geometry.Plane)">
            <summary>
            Computes the relationship between a point and a closed curve region. 
            This curve must be closed or the return value will be Unset.
            </summary>
            <param name="testPoint">Point to test.</param>
            <param name="plane">Plane in in which to compare point and region.</param>
            <returns>Relationship between point and curve region.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Contains(Rhino.Geometry.Point3d,Rhino.Geometry.Plane,System.Double)">
            <summary>
            Computes the relationship between a point and a closed curve region. 
            This curve must be closed or the return value will be Unset.
            </summary>
            <param name="testPoint">Point to test.</param>
            <param name="plane">Plane in in which to compare point and region.</param>
            <param name="tolerance">Tolerance to use during comparison.</param>
            <returns>Relationship between point and curve region.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.PointAt(System.Double)">
            <summary>Evaluates point at a curve parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <returns>Point (location of curve at the parameter t).</returns>
            <remarks>No error handling.</remarks>
            <example>
            <code source='examples\vbnet\ex_addradialdimension.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addradialdimension.cs' lang='cs'/>
            <code source='examples\py\ex_addradialdimension.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.PointAtLength(System.Double)">
            <summary>
            Gets a point at a certain length along the curve. The length must be 
            non-negative and less than or equal to the length of the curve. 
            Lengths will not be wrapped when the curve is closed or periodic.
            </summary>
            <param name="length">Length along the curve between the start point and the returned point.</param>
            <returns>Point on the curve at the specified length from the start point or Poin3d.Unset on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_arclengthpoint.vb' lang='vbnet'/>
            <code source='examples\cs\ex_arclengthpoint.cs' lang='cs'/>
            <code source='examples\py\ex_arclengthpoint.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.PointAtNormalizedLength(System.Double)">
            <summary>
            Gets a point at a certain normalized length along the curve. The length must be 
            between or including 0.0 and 1.0, where 0.0 equals the start of the curve and 
            1.0 equals the end of the curve. 
            </summary>
            <param name="length">Normalized length along the curve between the start point and the returned point.</param>
            <returns>Point on the curve at the specified normalized length from the start point or Poin3d.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.SetStartPoint(Rhino.Geometry.Point3d)">
            <summary>Forces the curve to start at a specified point. 
            Not all curve types support this operation.</summary>
            <param name="point">New start point of curve.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>Some start points cannot be moved. Be sure to check return code.</remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.SetEndPoint(Rhino.Geometry.Point3d)">
            <summary>Forces the curve to end at a specified point. 
            Not all curve types support this operation.</summary>
            <param name="point">New end point of curve.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>Some end points cannot be moved. Be sure to check return code</remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.TangentAt(System.Double)">
            <summary>Evaluates the unit tangent vector at a curve parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <returns>Unit tangent vector of the curve at the parameter t.</returns>
            <remarks>No error handling.</remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.FrameAt(System.Double,Rhino.Geometry.Plane@)">
            <summary>Returns a 3d frame at a parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <param name="plane">The frame is returned here.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.DerivativeAt(System.Double,System.Int32)">
            <summary>
            Evaluate the derivatives at the specified curve parameter.
            </summary>
            <param name="t">Curve parameter to evaluate.</param>
            <param name="derivativeCount">Number of derivatives to evaluate, must be at least 0.</param>
            <returns>An array of vectors that represents all the derivatives starting at zero.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.DerivativeAt(System.Double,System.Int32,Rhino.Geometry.CurveEvaluationSide)">
            <summary>
            Evaluate the derivatives at the specified curve parameter.
            </summary>
            <param name="t">Curve parameter to evaluate.</param>
            <param name="derivativeCount">Number of derivatives to evaluate, must be at least 0.</param>
            <param name="side">Side of parameter to evaluate. If the parameter is at a kink, 
            it makes a big difference whether the evaluation is from below or above.</param>
            <returns>An array of vectors that represents all the derivatives starting at zero.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.CurvatureAt(System.Double)">
            <summary>Evaluate the curvature vector at a curve parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <returns>Curvature vector of the curve at the parameter t.</returns>
            <remarks>No error handling.</remarks>
            <example>
            <code source='examples\vbnet\ex_addradialdimension.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addradialdimension.cs' lang='cs'/>
            <code source='examples\py\ex_addradialdimension.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.PerpendicularFrameAt(System.Double,Rhino.Geometry.Plane@)">
            <summary>
            Return a 3d frame at a parameter. This is slightly different than FrameAt in
            that the frame is computed in a way so there is minimal rotation from one
            frame to the next.
            </summary>
            <param name="t">Evaluation parameter.</param>
            <param name="plane">The frame is returned here.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetPerpendicularFrames(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Gets a collection of perpendicular frames along the curve. Perpendicular frames 
            are also known as 'Zero-twisting frames' and they minimize rotation from one frame to the next.
            </summary>
            <param name="parameters">A collection of <i>strictly increasing</i> curve parameters to place perpendicular frames on.</param>
            <returns>An array of perpendicular frames on success or null on failure.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown when the curve parameters are not increasing.</exception>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsContinuous(Rhino.Geometry.Continuity,System.Double)">
            <summary>
            Test continuity at a curve parameter value.
            </summary>
            <param name="continuityType">Type of continuity to test for.</param>
            <param name="t">Parameter to test.</param>
            <returns>
            true if the curve has at least the c type continuity at the parameter t.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetNextDiscontinuity(Rhino.Geometry.Continuity,System.Double,System.Double,System.Double@)">
            <summary>
            Searches for a derivative, tangent, or curvature discontinuity.
            </summary>
            <param name="continuityType">Type of continuity to search for.</param>
            <param name="t0">
            Search begins at t0. If there is a discontinuity at t0, it will be ignored. This makes it
            possible to repeatedly call GetNextDiscontinuity() and step through the discontinuities.
            </param>
            <param name="t1">
            (t0 != t1)  If there is a discontinuity at t1 it will be ignored unless continuityType is
            a locus discontinuity type and t1 is at the start or end of the curve.
            </param>
            <param name="t">If a discontinuity is found, then t reports the parameter at the discontinuity.</param>
            <returns>
            Parametric continuity tests c = (C0_continuous, ..., G2_continuous):
             true if a parametric discontinuity was found strictly between t0 and t1. Note well that
             all curves are parametrically continuous at the ends of their domains.
            
            Locus continuity tests c = (C0_locus_continuous, ...,G2_locus_continuous):
             true if a locus discontinuity was found strictly between t0 and t1 or at t1 is the at the end
             of a curve. Note well that all open curves (IsClosed()=false) are locus discontinuous at the
             ends of their domains.  All closed curves (IsClosed()=true) are at least C0_locus_continuous at 
             the ends of their domains.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetLength">
            <summary>
            Gets the length of the curve with a fractional tolerance of 1.0e-8.
            </summary>
            <returns>The length of the curve on success, or zero on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_arclengthpoint.vb' lang='vbnet'/>
            <code source='examples\cs\ex_arclengthpoint.cs' lang='cs'/>
            <code source='examples\py\ex_arclengthpoint.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetLength(System.Double)">
            <summary>Get the length of the curve.</summary>
            <param name="fractionalTolerance">
            Desired fractional precision. 
            fabs(("exact" length from start to t) - arc_length)/arc_length &lt;= fractionalTolerance.
            </param>
            <returns>The length of the curve on success, or zero on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetLength(Rhino.Geometry.Interval)">
            <summary>Get the length of a sub-section of the curve with a fractional tolerance of 1e-8.</summary>
            <param name="subdomain">
            The calculation is performed on the specified sub-domain of the curve (must be non-decreasing).
            </param>
            <returns>The length of the sub-curve on success, or zero on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetLength(System.Double,Rhino.Geometry.Interval)">
            <summary>Get the length of a sub-section of the curve.</summary>
            <param name="fractionalTolerance">
            Desired fractional precision. 
            fabs(("exact" length from start to t) - arc_length)/arc_length &lt;= fractionalTolerance.
            </param>
            <param name="subdomain">
            The calculation is performed on the specified sub-domain of the curve (must be non-decreasing).
            </param>
            <returns>The length of the sub-curve on success, or zero on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsShort(System.Double)">
            <summary>Used to quickly find short curves.</summary>
            <param name="tolerance">Length threshold value for "shortness".</param>
            <returns>true if the length of the curve is &lt;= tolerance.</returns>
            <remarks>Faster than calling Length() and testing the result.</remarks>
            <example>
            <code source='examples\vbnet\ex_dividebylength.vb' lang='vbnet'/>
            <code source='examples\cs\ex_dividebylength.cs' lang='cs'/>
            <code source='examples\py\ex_dividebylength.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.IsShort(System.Double,Rhino.Geometry.Interval)">
            <summary>Used to quickly find short curves.</summary>
            <param name="tolerance">Length threshold value for "shortness".</param>
            <param name="subdomain">
            The test is performed on the interval that is the intersection of subdomain with Domain()
            </param>
            <returns>true if the length of the curve is &lt;= tolerance.</returns>
            <remarks>Faster than calling Length() and testing the result.</remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.RemoveShortSegments(System.Double)">
            <summary>
            Looks for segments that are shorter than tolerance that can be removed. 
            Does not change the domain, but it will change the relative parameterization.
            </summary>
            <param name="tolerance">Tolerance which defines "short" segments.</param>
            <returns>
            true if removable short segments were found. 
            false if no removable short segments were found.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.LengthParameter(System.Double,System.Double@)">
            <summary>
            Gets the parameter along the curve which coincides with a given length along the curve. 
            A fractional tolerance of 1e-8 is used in this version of the function.
            </summary>
            <param name="segmentLength">
            Length of segment to measure. Must be less than or equal to the length of the curve.
            </param>
            <param name="t">
            Parameter such that the length of the curve from the curve start point to t equals length.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.LengthParameter(System.Double,System.Double@,System.Double)">
            <summary>
            Gets the parameter along the curve which coincides with a given length along the curve.
            </summary>
            <param name="segmentLength">
            Length of segment to measure. Must be less than or equal to the length of the curve.
            </param>
            <param name="t">
            Parameter such that the length of the curve from the curve start point to t equals s.
            </param>
            <param name="fractionalTolerance">
            Desired fractional precision.
            fabs(("exact" length from start to t) - arc_length)/arc_length &lt;= fractionalTolerance.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.LengthParameter(System.Double,System.Double@,Rhino.Geometry.Interval)">
            <summary>
            Gets the parameter along the curve which coincides with a given length along the curve. 
            A fractional tolerance of 1e-8 is used in this version of the function.
            </summary>
            <param name="segmentLength">
            Length of segment to measure. Must be less than or equal to the length of the subdomain.
            </param>
            <param name="t">
            Parameter such that the length of the curve from the start of the subdomain to t is s.
            </param>
            <param name="subdomain">
            The calculation is performed on the specified sub-domain of the curve rather than the whole curve.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.LengthParameter(System.Double,System.Double@,System.Double,Rhino.Geometry.Interval)">
            <summary>
            Gets the parameter along the curve which coincides with a given length along the curve.
            </summary>
            <param name="segmentLength">
            Length of segment to measure. Must be less than or equal to the length of the subdomain.
            </param>
            <param name="t">
            Parameter such that the length of the curve from the start of the subdomain to t is s.
            </param>
            <param name="fractionalTolerance">
            Desired fractional precision. 
            fabs(("exact" length from start to t) - arc_length)/arc_length &lt;= fractionalTolerance.
            </param>
            <param name="subdomain">
            The calculation is performed on the specified sub-domain of the curve rather than the whole curve.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.NormalizedLengthParameter(System.Double,System.Double@)">
            <summary>
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve. 
            A fractional tolerance of 1e-8 is used in this version of the function.
            </summary>
            <param name="s">
            Normalized arc length parameter. 
            E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
            </param>
            <param name="t">
            Parameter such that the length of the curve from its start to t is arc_length.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.NormalizedLengthParameter(System.Double,System.Double@,System.Double)">
            <summary>
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            </summary>
            <param name="s">
            Normalized arc length parameter. 
            E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
            </param>
            <param name="t">
            Parameter such that the length of the curve from its start to t is arc_length.
            </param>
            <param name="fractionalTolerance">
            Desired fractional precision. 
            fabs(("exact" length from start to t) - arc_length)/arc_length &lt;= fractionalTolerance.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.NormalizedLengthParameter(System.Double,System.Double@,Rhino.Geometry.Interval)">
            <summary>
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve. 
            A fractional tolerance of 1e-8 is used in this version of the function.
            </summary>
            <param name="s">
            Normalized arc length parameter. 
            E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
            </param>
            <param name="t">
            Parameter such that the length of the curve from its start to t is arc_length.
            </param>
            <param name="subdomain">
            The calculation is performed on the specified sub-domain of the curve.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.NormalizedLengthParameter(System.Double,System.Double@,System.Double,Rhino.Geometry.Interval)">
            <summary>
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            </summary>
            <param name="s">
            Normalized arc length parameter. 
            E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
            </param>
            <param name="t">
            Parameter such that the length of the curve from its start to t is arc_length.
            </param>
            <param name="fractionalTolerance">
            Desired fractional precision. 
            fabs(("exact" length from start to t) - arc_length)/arc_length &lt;= fractionalTolerance.
            </param>
            <param name="subdomain">
            The calculation is performed on the specified sub-domain of the curve.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.NormalizedLengthParameters(System.Double[],System.Double)">
            <summary>
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve. 
            A fractional tolerance of 1e-8 is used in this version of the function.
            </summary>
            <param name="s">
            Array of normalized arc length parameters. 
            E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
            </param>
            <param name="absoluteTolerance">
            If absoluteTolerance > 0, then the difference between (s[i+1]-s[i])*curve_length 
            and the length of the curve segment from t[i] to t[i+1] will be &lt;= absoluteTolerance.
            </param>
            <returns>
            If successful, array of curve parameters such that the length of the curve from its start to t[i] is s[i]*curve_length. 
            Null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.NormalizedLengthParameters(System.Double[],System.Double,System.Double)">
            <summary>
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            </summary>
            <param name="s">
            Array of normalized arc length parameters. 
            E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
            </param>
            <param name="absoluteTolerance">
            If absoluteTolerance > 0, then the difference between (s[i+1]-s[i])*curve_length 
            and the length of the curve segment from t[i] to t[i+1] will be &lt;= absoluteTolerance.
            </param>
            <param name="fractionalTolerance">
            Desired fractional precision for each segment. 
            fabs("true" length - actual length)/(actual length) &lt;= fractionalTolerance.
            </param>
            <returns>
            If successful, array of curve parameters such that the length of the curve from its start to t[i] is s[i]*curve_length. 
            Null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.NormalizedLengthParameters(System.Double[],System.Double,Rhino.Geometry.Interval)">
            <summary>
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve. 
            A fractional tolerance of 1e-8 is used in this version of the function.
            </summary>
            <param name="s">
            Array of normalized arc length parameters. 
            E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
            </param>
            <param name="absoluteTolerance">
            If absoluteTolerance > 0, then the difference between (s[i+1]-s[i])*curve_length 
            and the length of the curve segment from t[i] to t[i+1] will be &lt;= absoluteTolerance.
            </param>
            <param name="subdomain">
            The calculation is performed on the specified sub-domain of the curve. 
            A 0.0 s value corresponds to subdomain->Min() and a 1.0 s value corresponds to subdomain->Max().
            </param>
            <returns>
            If successful, array of curve parameters such that the length of the curve from its start to t[i] is s[i]*curve_length. 
            Null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.NormalizedLengthParameters(System.Double[],System.Double,System.Double,Rhino.Geometry.Interval)">
            <summary>
            Input the parameter of the point on the curve that is a prescribed arc length from the start of the curve.
            </summary>
            <param name="s">
            Array of normalized arc length parameters. 
            E.g., 0 = start of curve, 1/2 = midpoint of curve, 1 = end of curve.
            </param>
            <param name="absoluteTolerance">
            If absoluteTolerance > 0, then the difference between (s[i+1]-s[i])*curve_length 
            and the length of the curve segment from t[i] to t[i+1] will be &lt;= absoluteTolerance.
            </param>
            <param name="fractionalTolerance">
            Desired fractional precision for each segment. 
            fabs("true" length - actual length)/(actual length) &lt;= fractionalTolerance.
            </param>
            <param name="subdomain">
            The calculation is performed on the specified sub-domain of the curve. 
            A 0.0 s value corresponds to subdomain->Min() and a 1.0 s value corresponds to subdomain->Max().
            </param>
            <returns>
            If successful, array of curve parameters such that the length of the curve from its start to t[i] is s[i]*curve_length. 
            Null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.DivideByCount(System.Int32,System.Boolean)">
            <summary>
            Divide the curve into a number of equal-length segments.
            </summary>
            <param name="segmentCount">Segment count. Note that the number of division points may differ from the segment count.</param>
            <param name="includeEnds">If true, then the points at the start and end of the curve are included.</param>
            <returns>
            List of curve parameters at the division points on success, null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.DivideByCount(System.Int32,System.Boolean,Rhino.Geometry.Point3d[]@)">
            <summary>
            Divide the curve into a number of equal-length segments.
            </summary>
            <param name="segmentCount">Segment count. Note that the number of division points may differ from the segment count.</param>
            <param name="includeEnds">If true, then the points at the start and end of the curve are included.</param>
            <param name="points">A list of division points. If the function returns successfully, this point-array will be filled in.</param>
            <returns>Array containing division curve parameters on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.DivideByLength(System.Double,System.Boolean)">
            <summary>
            Divide the curve into specific length segments.
            </summary>
            <param name="segmentLength">The length of each and every segment (except potentially the last one).</param>
            <param name="includeStart">If true, then the points at the start of the curve is included.</param>
            <returns>Array containing division curve parameters if successful, null on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_dividebylength.vb' lang='vbnet'/>
            <code source='examples\cs\ex_dividebylength.cs' lang='cs'/>
            <code source='examples\py\ex_dividebylength.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.DivideByLength(System.Double,System.Boolean,Rhino.Geometry.Point3d[]@)">
            <summary>
            Divide the curve into specific length segments.
            </summary>
            <param name="segmentLength">The length of each and every segment (except potentially the last one).</param>
            <param name="includeStart">If true, then the point at the start of the curve is included.</param>
            <param name="points">If function is successful, points at each parameter value are returned in points.</param>
            <returns>Array containing division curve parameters if successful, null on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_dividebylength.vb' lang='vbnet'/>
            <code source='examples\cs\ex_dividebylength.cs' lang='cs'/>
            <code source='examples\py\ex_dividebylength.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.DivideEquidistant(System.Double)">
            <summary>
            Calculates 3d points on a curve where the linear distance between the points is equal.
            </summary>
            <param name="distance">The distance betwen division points.</param>
            <returns>An array of equidistant points, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.DivideAsContour(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Divides this curve at fixed steps along a defined contour line.
            </summary>
            <param name="contourStart">The start of the contouring line.</param>
            <param name="contourEnd">The end of the contouring line.</param>
            <param name="interval">A distance to measure on the contouring axis.</param>
            <returns>An array of points; or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetCurveParameterFromNurbsFormParameter(System.Double,System.Double@)">
            <summary>
            Convert a NURBS curve parameter to a curve parameter.
            </summary>
            <param name="nurbsParameter">Nurbs form parameter.</param>
            <param name="curveParameter">Curve parameter.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>
            If HasNurbForm returns 2, this function converts the curve parameter to the NURBS curve parameter.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.GetNurbsFormParameterFromCurveParameter(System.Double,System.Double@)">
            <summary>Convert a curve parameter to a NURBS curve parameter.</summary>
            <param name="curveParameter">Curve parameter.</param>
            <param name="nurbsParameter">Nurbs form parameter.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>
            If GetNurbForm returns 2, this function converts the curve parameter to the NURBS curve parameter.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Curve.Trim(System.Double,System.Double)">
            <summary>
            Removes portions of the curve outside the specified interval.
            </summary>
            <param name="t0">
            Start of the trimming interval. Portions of the curve before curve(t0) are removed.
            </param>
            <param name="t1">
            End of the trimming interval. Portions of the curve after curve(t1) are removed.
            </param>
            <returns>Trimmed portion of this curve is successfull, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Trim(Rhino.Geometry.Interval)">
            <summary>
            Removes portions of the curve outside the specified interval.
            </summary>
            <param name="domain">
            Trimming interval. Portions of the curve before curve(domain[0])
            and after curve(domain[1]) are removed.
            </param>
            <returns>Trimmed curve if successful, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Trim(Rhino.Geometry.CurveEnd,System.Double)">
            <summary>
            Shortens a curve by a given length
            </summary>
            <param name="side"></param>
            <param name="length"></param>
            <returns>Trimmed curve if successful, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Split(System.Double)">
            <summary>
            Splits (divides) the curve at the specified parameter. 
            The parameter must be in the interior of the curve's domain.
            </summary>
            <param name="t">
            Parameter to split the curve at in the interval returned by Domain().
            </param>
            <returns>
            Two curves on success, null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Split(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Splits (divides) the curve at a series of specified parameters. 
            The parameter must be in the interior of the curve's domain.
            </summary>
            <param name="t">
            Parameters to split the curve at in the interval returned by Domain().
            </param>
            <returns>
            Multiple curves on success, null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Split(Rhino.Geometry.Brep,System.Double)">
            <summary>
            Splits a curve into pieces using a polysurface.
            </summary>
            <param name="cutter">A cutting surface or polysurface.</param>
            <param name="tolerance">A tolerance for computing intersections.</param>
            <returns>An array of curves. This array can be empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Split(Rhino.Geometry.Surface,System.Double)">
            <summary>
            Splits a curve into pieces using a surface.
            </summary>
            <param name="cutter">A cutting surface or polysurface.</param>
            <param name="tolerance">A tolerance for computing intersections.</param>
            <returns>An array of curves. This array can be empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Extend(System.Double,System.Double)">
            <summary>
            Where possible, analytically extends curve to include the given domain. 
            This will not work on closed curves. The original curve will be identical to the 
            restriction of the resulting curve to the original curve domain.
            </summary>
            <param name="t0">Start of extension domain, if the start is not inside the 
            Domain of this curve, an attempt will be made to extend the curve.</param>
            <param name="t1">End of extension domain, if the end is not inside the 
            Domain of this curve, an attempt will be made to extend the curve.</param>
            <returns>Extended curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Extend(Rhino.Geometry.Interval)">
            <summary>
            Where possible, analytically extends curve to include the given domain. 
            This will not work on closed curves. The original curve will be identical to the 
            restriction of the resulting curve to the original curve domain.
            </summary>
            <param name="domain">Extension domain.</param>
            <returns>Extended curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Extend(Rhino.Geometry.CurveEnd,System.Double,Rhino.Geometry.CurveExtensionStyle)">
            <summary>
            Extends a curve by a specific length.
            </summary>
            <param name="side">Curve end to extend.</param>
            <param name="length">Length to add to the curve end.</param>
            <param name="style">Extension style.</param>
            <returns>A curve with extended ends or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Extend(Rhino.Geometry.CurveEnd,Rhino.Geometry.CurveExtensionStyle,System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase})">
            <summary>
            Extends a curve until it intersects a collection of objects.
            </summary>
            <param name="side">The end of the curve to extend.</param>
            <param name="style">The style or type of extension to use.</param>
            <param name="geometry">A collection of objects. Allowable object types are Curve, Surface, Brep.</param>
            <returns>New extended curve result on success, null on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_extendcurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_extendcurve.cs' lang='cs'/>
            <code source='examples\py\ex_extendcurve.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Curve.Extend(Rhino.Geometry.CurveEnd,Rhino.Geometry.CurveExtensionStyle,Rhino.Geometry.Point3d)">
            <summary>
            Extends a curve to a point.
            </summary>
            <param name="side">The end of the curve to extend.</param>
            <param name="style">The style or type of extension to use.</param>
            <param name="endPoint">A new end point.</param>
            <returns>New extended curve result on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ExtendOnSurface(Rhino.Geometry.CurveEnd,Rhino.Geometry.Surface)">
            <summary>
            Extends a curve on a surface.
            </summary>
            <param name="side">The end of the curve to extend.</param>
            <param name="surface">Surface that contains the curve.</param>
            <returns>New extended curve result on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ExtendOnSurface(Rhino.Geometry.CurveEnd,Rhino.Geometry.BrepFace)">
            <summary>
            Extends a curve on a surface.
            </summary>
            <param name="side">The end of the curve to extend.</param>
            <param name="face">BrepFace that contains the curve.</param>
            <returns>New extended curve result on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ExtendByLine(Rhino.Geometry.CurveEnd,System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase})">
            <summary>
            Extends a curve by a line until it intersects a collection of objects.
            </summary>
            <param name="side">The end of the curve to extend.</param>
            <param name="geometry">A collection of objects. Allowable object types are Curve, Surface, Brep.</param>
            <returns>New extended curve result on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ExtendByArc(Rhino.Geometry.CurveEnd,System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase})">
            <summary>
            Extends a curve by an Arc until it intersects a collection of objects.
            </summary>
            <param name="side">The end of the curve to extend.</param>
            <param name="geometry">A collection of objects. Allowable object types are Curve, Surface, Brep.</param>
            <returns>New extended curve result on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Simplify(Rhino.Geometry.CurveSimplifyOptions,System.Double,System.Double)">
            <summary>
            Returns a geometrically equivalent PolyCurve.
            <para>The PolyCurve has the following properties</para>
            <para>
            1. All the PolyCurve segments are LineCurve, PolylineCurve, ArcCurve, or NurbsCurve.
            </para>
            <para>
            2. The Nurbs Curves segments do not have fully multiple interior knots.
            </para>
            <para>
            3. Rational Nurbs curves do not have constant weights.
            </para>
            <para>
            4. Any segment for which IsLinear() or IsArc() is true is a Line, 
               Polyline segment, or an Arc.
            </para>
            <para>
            5. Adjacent Colinear or Cocircular segments are combined.
            </para>
            <para>
            6. Segments that meet with G1-continuity have there ends tuned up so
               that they meet with G1-continuity to within machine precision.
            </para>
            </summary>
            <param name="options">Simplification options.</param>
            <param name="distanceTolerance">A distance tolerance for the simplification.</param>
            <param name="angleToleranceRadians">An angle tolerance for the simplification.</param>
            <returns>New simplified curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.SimplifyEnd(Rhino.Geometry.CurveEnd,Rhino.Geometry.CurveSimplifyOptions,System.Double,System.Double)">
            <summary>
            Same as SimplifyCurve, but simplifies only the last two segments at "side" end.
            </summary>
            <param name="end">If CurveEnd.Start the function simplifies the last two start 
            side segments, otherwise if CurveEnd.End the last two end side segments are simplified.
            </param>
            <param name="options">Simplification options.</param>
            <param name="distanceTolerance">A distance tolerance for the simplification.</param>
            <param name="angleToleranceRadians">An angle tolerance for the simplification.</param>
            <returns>New simplified curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Fair(System.Double,System.Double,System.Int32,System.Int32,System.Int32)">
            <summary>
            Fairs a curve object. Fair works best on degree 3 (cubic) curves. Attempts to 
            remove large curvature variations while limiting the geometry changes to be no 
            more than the specified tolerance. 
            </summary>
            <param name="distanceTolerance">Maximum allowed distance the faired curve is allowed to deviate from the input.</param>
            <param name="angleTolerance">(in radians) kinks with angles &lt;= angleTolerance are smoothed out 0.05 is a good default.</param>
            <param name="clampStart">The number of (control vertices-1) to preserve at start. 
            <para>0 = preserve start point</para>
            <para>1 = preserve start point and 1st derivative</para>
            <para>2 = preserve start point, 1st and 2nd derivative</para>
            </param>
            <param name="clampEnd">Same as clampStart.</param>
            <param name="iterations">The number of iteratoins to use in adjusting the curve.</param>
            <returns>Returns new faired Curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Fit(System.Int32,System.Double,System.Double)">
            <summary>
            Fits a new curve through an existing curve.
            </summary>
            <param name="degree">The degree of the returned Curve. Must be bigger than 1.</param>
            <param name="fitTolerance">The fitting tolerance. If fitTolerance is RhinoMath.UnsetValue or &lt;=0.0,
            the document absolute tolerance is used.</param>
            <param name="angleTolerance">The kink smoothing tolerance in radians.
            <para>If angleTolerance is 0.0, all kinks are smoothed</para>
            <para>If angleTolerance is &gt;0.0, kinks smaller than angleTolerance are smoothed</para>  
            <para>If angleTolerance is RhinoMath.UnsetValue or &lt;0.0, the document angle tolerance is used for the kink smoothing</para>
            </param>
            <returns>Returns a new fitted Curve if successful, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Rebuild(System.Int32,System.Int32,System.Boolean)">
            <summary>
            Rebuild a curve with a specific point count.
            </summary>
            <param name="pointCount">Number of control points in the rebuild curve.</param>
            <param name="degree">Degree of curve. Valid values are between and including 1 and 11.</param>
            <param name="preserveTangents">If true, the end tangents of the input curve will be preserved.</param>
            <returns>A Nurbs curve on success or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.HasNurbsForm">
            <summary>
            Does a NURBS curve representation of this curve exist?
            </summary>
            <returns>
            0   unable to create NURBS representation with desired accuracy.
            1   success - NURBS parameterization matches the curve's to the desired accuracy
            2   success - NURBS point locus matches the curve's and the domain of the NURBS
                          curve is correct. However, This curve's parameterization and the
                          NURBS curve parameterization may not match. This situation happens
                          when getting NURBS representations of curves that have a
                          transendental parameterization like circles.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ToNurbsCurve">
            <summary>
            Constructs a NURBS curve representation of this curve.
            </summary>
            <returns>NURBS representation of the curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ToNurbsCurve(Rhino.Geometry.Interval)">
            <summary>
            Constructs a NURBS curve representation of this curve.
            </summary>
            <param name="subdomain">The NURBS representation for this portion of the curve is returned.</param>
            <returns>NURBS representation of the curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.SpanDomain(System.Int32)">
            <summary>
            Get the domain of the curve span with the given index. 
            Use the SpanCount property to test how many spans there are.
            </summary>
            <param name="spanIndex">Index of span.</param>
            <returns>Interval of the span with the given index.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ToPolyline(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean)">
            <summary>
            Gets a polyline approximation of a curve.
            </summary>
            <param name="mainSegmentCount">
            If mainSegmentCount &lt;= 0, then both subSegmentCount and mainSegmentCount are ignored. 
            If mainSegmentCount &gt; 0, then subSegmentCount must be &gt;= 1. In this 
            case the nurb will be broken into mainSegmentCount equally spaced 
            chords. If needed, each of these chords can be split into as many 
            subSegmentCount sub-parts if the subdivision is necessary for the 
            mesh to meet the other meshing constraints. In particular, if 
            subSegmentCount = 0, then the curve is broken into mainSegmentCount 
            pieces and no further testing is performed.</param>
            <param name="subSegmentCount">An amount of subsegments.</param>
            <param name="maxAngleRadians">
            ( 0 to pi ) Maximum angle (in radians) between unit tangents at 
            adjacent vertices.</param>
            <param name="maxChordLengthRatio">Maximum permitted value of 
            (distance chord midpoint to curve) / (length of chord).</param>
            <param name="maxAspectRatio">If maxAspectRatio &lt; 1.0, the parameter is ignored. 
            If 1 &lt;= maxAspectRatio &lt; sqrt(2), it is treated as if maxAspectRatio = sqrt(2). 
            This parameter controls the maximum permitted value of 
            (length of longest chord) / (length of shortest chord).</param>
            <param name="tolerance">If tolerance = 0, the parameter is ignored. 
            This parameter controls the maximum permitted value of the 
            distance from the curve to the polyline.</param>
            <param name="minEdgeLength">The minimum permitted edge length.</param>
            <param name="maxEdgeLength">If maxEdgeLength = 0, the parameter 
            is ignored. This parameter controls the maximum permitted edge length.
            </param>
            <param name="keepStartPoint">If true the starting point of the curve 
            is added to the polyline. If false the starting point of the curve is 
            not added to the polyline.</param>
            <returns>PolylineCurve on success, null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.ToPolyline(System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Double,System.Double,System.Double,System.Boolean,Rhino.Geometry.Interval)">
            <summary>
            Gets a polyline approximation of a curve.
            </summary>
            <param name="mainSegmentCount">
            If mainSegmentCount &lt;= 0, then both subSegmentCount and mainSegmentCount are ignored. 
            If mainSegmentCount &gt; 0, then subSegmentCount must be &gt;= 1. In this 
            case the nurb will be broken into mainSegmentCount equally spaced 
            chords. If needed, each of these chords can be split into as many 
            subSegmentCount sub-parts if the subdivision is necessary for the 
            mesh to meet the other meshing constraints. In particular, if 
            subSegmentCount = 0, then the curve is broken into mainSegmentCount 
            pieces and no further testing is performed.</param>
            <param name="subSegmentCount">An amount of subsegments.</param>
            <param name="maxAngleRadians">
            ( 0 to pi ) Maximum angle (in radians) between unit tangents at 
            adjacent vertices.</param>
            <param name="maxChordLengthRatio">Maximum permitted value of 
            (distance chord midpoint to curve) / (length of chord).</param>
            <param name="maxAspectRatio">If maxAspectRatio &lt; 1.0, the parameter is ignored. 
            If 1 &lt;= maxAspectRatio &lt; sqrt(2), it is treated as if maxAspectRatio = sqrt(2). 
            This parameter controls the maximum permitted value of 
            (length of longest chord) / (length of shortest chord).</param>
            <param name="tolerance">If tolerance = 0, the parameter is ignored. 
            This parameter controls the maximum permitted value of the 
            distance from the curve to the polyline.</param>
            <param name="minEdgeLength">The minimum permitted edge length.</param>
            <param name="maxEdgeLength">If maxEdgeLength = 0, the parameter 
            is ignored. This parameter controls the maximum permitted edge length.
            </param>
            <param name="keepStartPoint">If true the starting point of the curve 
            is added to the polyline. If false the starting point of the curve is 
            not added to the polyline.</param>
            <param name="curveDomain">This subdomain of the NURBS curve is approximated.</param>
            <returns>PolylineCurve on success, null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.PullToMesh(Rhino.Geometry.Mesh,System.Double)">
            <summary>
            Makes a polyline approximation of the curve and gets the closest point on the mesh for each point on the curve. 
            Then it "connects the points" so that you have a polyline on the mesh.
            </summary>
            <param name="mesh">Mesh to project onto.</param>
            <param name="tolerance">Input tolerance (RhinoDoc.ModelAbsoluteTolerance is a good default)</param>
            <returns>A polyline curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Offset(Rhino.Geometry.Plane,System.Double,System.Double,Rhino.Geometry.CurveOffsetCornerStyle)">
            <summary>
            Offsets this curve. If you have a nice offset, then there will be one entry in 
            the array. If the original curve had kinks or the offset curve had self 
            intersections, you will get multiple segments in the offset_curves[] array.
            </summary>
            <param name="plane">Offset solution plane.</param>
            <param name="distance">The positive or negative distance to offset.</param>
            <param name="tolerance">The offset or fitting tolerance.</param>
            <param name="cornerStyle">Corner style for offset kinks.</param>
            <returns>Offset curves on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.Offset(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Double,System.Double,Rhino.Geometry.CurveOffsetCornerStyle)">
            <summary>
            Offsets this curve. If you have a nice offset, then there will be one entry in 
            the array. If the original curve had kinks or the offset curve had self 
            intersections, you will get multiple segments in the offset_curves[] array.
            </summary>
            <param name="directionPoint">A point that indicates the direction of the offset.</param>
            <param name="normal">The normal to the offset plane.</param>
            <param name="distance">The positive or negative distance to offset.</param>
            <param name="tolerance">The offset or fitting tolerance.</param>
            <param name="cornerStyle">Corner style for offset kinks.</param>
            <returns>Offset curves on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Curve.OffsetOnSurface(Rhino.Geometry.BrepFace,System.Double,System.Double)">
            <summary>
            Offset this curve on a brep face surface. This curve must lie on the surface.
            </summary>
            <param name="face">The brep face on which to offset.</param>
            <param name="distance">A distance to offset (+)left, (-)right.</param>
            <param name="fittingTolerance">A fitting tolerance.</param>
            <returns>Offset curves on success, or null on failure.</returns>
            <exception cref="T:System.ArgumentNullException">If face is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Curve.OffsetOnSurface(Rhino.Geometry.BrepFace,Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Offset a curve on a brep face surface. This curve must lie on the surface.
            <para>This overload allows to specify a surface point at which the offset will pass.</para>
            </summary>
            <param name="face">The brep face on which to offset.</param>
            <param name="throughPoint">2d point on the brep face to offset through.</param>
            <param name="fittingTolerance">A fitting tolerance.</param>
            <returns>Offset curves on success, or null on failure.</returns>
            <exception cref="T:System.ArgumentNullException">If face is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Curve.OffsetOnSurface(Rhino.Geometry.BrepFace,System.Double[],System.Double[],System.Double)">
            <summary>
            Offset a curve on a brep face surface. This curve must lie on the surface.
            <para>This overload allows to specify different offsets for different curve parameters.</para>
            </summary>
            <param name="face">The brep face on which to offset.</param>
            <param name="curveParameters">Curve parameters corresponding to the offset distances.</param>
            <param name="offsetDistances">distances to offset (+)left, (-)right.</param>
            <param name="fittingTolerance">A fitting tolerance.</param>
            <returns>Offset curves on success, or null on failure.</returns>
            <exception cref="T:System.ArgumentNullException">If face, curveParameters or offsetDistances are null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Curve.OffsetOnSurface(Rhino.Geometry.Surface,System.Double,System.Double)">
            <summary>
            Offset a curve on a surface. This curve must lie on the surface.
            </summary>
            <param name="surface">A surface on which to offset.</param>
            <param name="distance">A distance to offset (+)left, (-)right.</param>
            <param name="fittingTolerance">A fitting tolerance.</param>
            <returns>Offset curves on success, or null on failure.</returns>
            <exception cref="T:System.ArgumentNullException">If surface is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Curve.OffsetOnSurface(Rhino.Geometry.Surface,Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Offset a curve on a surface. This curve must lie on the surface.
            <para>This overload allows to specify a surface point at which the offset will pass.</para>
            </summary>
            <param name="surface">A surface on which to offset.</param>
            <param name="throughPoint">2d point on the brep face to offset through.</param>
            <param name="fittingTolerance">A fitting tolerance.</param>
            <returns>Offset curves on success, or null on failure.</returns>
            <exception cref="T:System.ArgumentNullException">If surface is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Curve.OffsetOnSurface(Rhino.Geometry.Surface,System.Double[],System.Double[],System.Double)">
            <summary>
            Offset this curve on a surface. This curve must lie on the surface.
            <para>This overload allows to specify different offsets for different curve parameters.</para>
            </summary>
            <param name="surface">A surface on which to offset.</param>
            <param name="curveParameters">Curve parameters corresponding to the offset distances.</param>
            <param name="offsetDistances">Distances to offset (+)left, (-)right.</param>
            <param name="fittingTolerance">A fitting tolerance.</param>
            <returns>Offset curves on success, or null on failure.</returns>
            <exception cref="T:System.ArgumentNullException">If surface, curveParameters or offsetDistances are null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Curve.PullToBrepFace(Rhino.Geometry.BrepFace,System.Double)">
            <summary>
            Pulls this curve to a brep face and returns the result of that operation.
            </summary>
            <param name="face">A brep face.</param>
            <param name="tolerance">A tolerance value.</param>
            <returns>An array containing the resulting curves after pulling. This array could be empty.</returns>
            <exception cref="T:System.ArgumentNullException">If face is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Curve.OffsetNormalToSurface(Rhino.Geometry.Surface,System.Double)">
            <summary>
            Finds a curve by offsetting an existing curve normal to a surface.
            The caller is responsible for ensuring that the curve lies on the input surface.
            </summary>
            <param name="surface">Surface from which normals are calculated.</param>
            <param name="height">offset distance (distance from surface to result curve)</param>
            <returns>
            Offset curve at distance height from the surface.  The offset curve is
            interpolated through a small number of points so if the surface is irregular
            or complicated, the result will not be a very accurate offset.
            </returns>
        </member>
        <member name="P:Rhino.Geometry.Curve.Domain">
            <summary>
            Gets or sets the domain of the curve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Curve.Dimension">
            <summary>
            Gets the dimension of the object.
            <para>The dimension is typically three. For parameter space trimming
            curves the dimension is two. In rare cases the dimension can
            be one or greater than three.</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Curve.SpanCount">
            <summary>
            Gets the number of non-empty smooth (c-infinity) spans in the curve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Curve.Degree">
            <summary>
            Gets the maximum algebraic degree of any span
            or a good estimate if curve spans are not algebraic.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Curve.IsClosed">
            <summary>
            Gets a value indicating whether or not this curve is a closed curve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Curve.IsPeriodic">
            <summary>
            Gets a value indicating whether or not this curve is considered to be Periodic.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Curve.PointAtStart">
            <summary>
            Evaluates point at the start of the curve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Curve.PointAtEnd">
            <summary>
            Evaluates point at the end of the curve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Curve.TangentAtStart">
            <summary>Evaluates the unit tangent vector at the start of the curve.</summary>
            <returns>Unit tangent vector of the curve at the start point.</returns>
            <remarks>No error handling.</remarks>
        </member>
        <member name="P:Rhino.Geometry.Curve.TangentAtEnd">
            <summary>Evaluate unit tangent vector at the end of the curve.</summary>
            <returns>Unit tangent vector of the curve at the end point.</returns>
            <remarks>No error handling.</remarks>
        </member>
        <member name="M:Rhino.Geometry.ArcCurve.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Geometry.ArcCurve"/> instance.
            <para>Radius is set to 1, position to Origin and Domain to full span (circle).</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.ArcCurve.#ctor(Rhino.Geometry.ArcCurve)">
            <summary>
            Initializes a new <see cref="T:Rhino.Geometry.ArcCurve"/> instance,
            copying values from another <see cref="T:Rhino.Geometry.ArcCurve"/>.
            </summary>
            <param name="other">Another ArcCurve.</param>
        </member>
        <member name="M:Rhino.Geometry.ArcCurve.#ctor(Rhino.Geometry.Arc)">
            <summary>
            Initializes a new <see cref="T:Rhino.Geometry.ArcCurve"/> instance,
            copying values from another <see cref="P:Rhino.Geometry.ArcCurve.Arc"/>.
            </summary>
            <param name="arc">Another Arc.</param>
        </member>
        <member name="M:Rhino.Geometry.ArcCurve.#ctor(Rhino.Geometry.Arc,System.Double,System.Double)">
            <summary>
            Initializes a new <see cref="T:Rhino.Geometry.ArcCurve"/> instance,
            copying values from another <see cref="P:Rhino.Geometry.ArcCurve.Arc"/> and specifying the 
            needed parametrization of the arc.
            <para>Arc will not be cut again at these parameterizations.</para>
            </summary>
            <param name="arc">An original arc.</param>
            <param name="t0">A new Domain.T0 value.</param>
            <param name="t1">A new Domain.T1 value.</param>
        </member>
        <member name="M:Rhino.Geometry.ArcCurve.#ctor(Rhino.Geometry.Circle)">
            <summary>
            Initializes a new <see cref="T:Rhino.Geometry.ArcCurve"/> instance,
            copying the shape of a <see cref="T:Rhino.Geometry.Circle"/>.
            <para>Parameterization will be [0;circle.Circumference]</para>
            </summary>
            <param name="circle">The original circle.</param>
        </member>
        <member name="M:Rhino.Geometry.ArcCurve.#ctor(Rhino.Geometry.Circle,System.Double,System.Double)">
            <summary>
            Initializes a new <see cref="T:Rhino.Geometry.ArcCurve"/> instance,
            copying values from a <see cref="T:Rhino.Geometry.Circle"/> and specifying the 
            needed parametrization of the arc.
            <para>Circle will not be newly cut at these parameterizations.</para>
            </summary>
            <param name="circle">A circle.</param>
            <param name="t0">A new Domain.T0 value.</param>
            <param name="t1">A new Domain.T1 value.</param>
        </member>
        <member name="M:Rhino.Geometry.ArcCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ArcCurve.Arc">
            <summary>
            Gets the arc that is contained within this ArcCurve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ArcCurve.IsCompleteCircle">
            <summary>
            Gets a value indicating whether or not this curve can be represented by a complete circle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ArcCurve.Radius">
            <summary>
            Gets the radius of this ArcCurve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ArcCurve.AngleRadians">
            <summary>
            Gets the angles of this arc in radians.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ArcCurve.AngleDegrees">
            <summary>
            Gets the angles of this arc in degrees.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.StringHolder">
            <summary>
            This class is used to pass strings back and forth between managed
            and unmanaged code.  This should not be be needed by plug-ins.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringHolder.ConstPointer">
            <summary>
            C++ pointer used to access the ON_wString, managed plug-ins should
            never need this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringHolder.NonConstPointer">
            <summary>
            C++ pointer used to access the ON_wString, managed plug-ins should
            never need this.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringHolder.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringHolder.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringHolder.Dispose">
            <summary>
            IDispose implementation
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringHolder.Dispose(System.Boolean)">
            <summary>
            Called by Dispose and finalizer
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringHolder.ToString">
            <summary>
            Marshal unmanaged ON_wString to a managed .NET string
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringHolder.GetString(System.IntPtr)">
            <summary>
            Get managed string from unmanaged ON_wString pointer.
            </summary>
            <param name="pStringHolder"></param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayInt">
            <summary>
            Wrapper for ON_SimpleArray&lt;int&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInt.ConstPointer">
            <summary>
            Gets the const (immutable) pointer of this array.
            </summary>
            <returns>The const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInt.NonConstPointer">
            <summary>
            Gets the non-const pointer (for modification) of this array.
            </summary>
            <returns>The non-const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInt.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayInt"/> class.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInt.#ctor(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayInt"/> class
            </summary>
            <param name="values">initial set of integers to add to the array</param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInt.ToArray">
            <summary>
            Returns the managed counterpart of the unmanaged array.
            </summary>
            <returns>The managed array.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInt.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInt.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayInt.Count">
            <summary>
            Gets the amount of elements in this array.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayGuid">
            <summary>
            Wrapper for ON_SimpleArray&lt;ON_UUID&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuid.ConstPointer">
            <summary>
            Gets the const (immutable) pointer of this array.
            </summary>
            <returns>The const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuid.NonConstPointer">
            <summary>
            Gets the non-const pointer (for modification) of this array.
            </summary>
            <returns>The non-const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuid.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayGuid"/> class.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuid.ToArray">
            <summary>
            Returns the managed counterpart of the unmanaged array.
            </summary>
            <returns>The managed array.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuid.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGuid.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayGuid.Count">
            <summary>
            Gets the amount of elements in this array.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayInterval">
            <summary>
            Wrapper for ON_SimpleArray&lt;ON_Imterval&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInterval.ConstPointer">
            <summary>
            Gets the const (immutable) pointer of this array.
            </summary>
            <returns>The const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInterval.NonConstPointer">
            <summary>
            Gets the non-const pointer (for modification) of this array.
            </summary>
            <returns>The non-const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInterval.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayInterval"/> class.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInterval.ToArray">
            <summary>
            Returns the managed counterpart of the unmanaged array.
            </summary>
            <returns>The managed array.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInterval.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayInterval.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayInterval.Count">
            <summary>
            Gets the amount of elements in this array.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayDouble">
            <summary>
            Wrapper for ON_SimpleArray&lt;double&gt;. If you are not writing C++ code,
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayDouble.ConstPointer">
            <summary>
            Gets the const (immutable) pointer of this array.
            </summary>
            <returns>The const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayDouble.NonConstPointer">
            <summary>
            Gets the non-const pointer (for modification) of this array.
            </summary>
            <returns>The non-const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayDouble.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayDouble"/> instance.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayDouble.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayDouble"/> instance, with items.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayDouble.ToArray">
            <summary>
            Returns the managed counterpart of the unmanaged array.
            </summary>
            <returns>The managed array.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayDouble.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayDouble.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayDouble.Count">
            <summary>
            Gets the amount of elements in this array.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d">
            <summary>
            ON_SimpleArray&lt;ON_2dPoint&gt; class wrapper.  If you are not writing
            C++ code then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.ConstPointer">
            <summary>
            Gets the const (immutable) pointer of this array.
            </summary>
            <returns>The const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.NonConstPointer">
            <summary>
            Gets the non-const pointer (for modification) of this array.
            </summary>
            <returns>The non-const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.#ctor">
            <summary>
            Initializes a new empty <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d"/> instance.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.ToArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayPoint2d.Count">
            <summary>
            Gets the amount of points in this array.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d">
            <summary>
            ON_SimpleArray&lt;ON_3dPoint&gt;, ON_3dPointArray, ON_PolyLine all have the same size
            This class wraps all of these C++ versions.  If you are not writing C++ code then this
            class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.ConstPointer">
            <summary>
            Gets the const (immutable) pointer of this array.
            </summary>
            <returns>The const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.NonConstPointer">
            <summary>
            Gets the non-const pointer (for modification) of this array.
            </summary>
            <returns>The non-const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.#ctor">
            <summary>
            Initializes a new empty <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d"/> instance.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.ToArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayPoint3d.Count">
            <summary>
            Gets the amount of points in this array.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayLine">
            <summary>
            Wrapper for ON_SimpleArray&lt;ON_Line&gt;. If you are not writing C++ code
            then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLine.ConstPointer">
            <summary>
            Gets the const (immutable) pointer of this array.
            </summary>
            <returns>The const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLine.NonConstPointer">
            <summary>
            Gets the non-const pointer (for modification) of this array.
            </summary>
            <returns>The non-const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLine.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayLine"/> instance.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLine.ToArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLine.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayLine.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayLine.Count">
            <summary>
            Gets the amount of lines in this array.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer">
            <summary>
            Wrapper for a C++ ON_SimpleArray of ON_Surface* or const ON_Surface*.  If
            you are not writing C++ code then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.ConstPointer">
            <summary>
            Gets the const (immutable) pointer of this array.
            </summary>
            <returns>The const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.NonConstPointer">
            <summary>
            Gets the non-const pointer (for modification) of this array.
            </summary>
            <returns>The non-const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer"/> instance.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.ToNonConstArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            Elements are made non-const.
            </summary>
            <returns>The managed array.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArraySurfacePointer.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer">
            <summary>
            Wrapper for a C++ ON_SimpleArray of ON_Curve* or const ON_Curve*.  If you are not
            writing C++ code, then you can ignore this class.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.ConstPointer">
            <summary>
            Gets the const (immutable) pointer of this array.
            </summary>
            <returns>The const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.NonConstPointer">
            <summary>
            Gets the non-const pointer (for modification) of this array.
            </summary>
            <returns>The non-const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer"/> instance.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer"/> instance, from a set of input curves.
            </summary>
            <param name="curves">A list, an array or any collection of curves that implements the enumerable interface.</param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.ToNonConstArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayCurvePointer.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer">
            <summary>
            Wrapper for a C++ ON_SimpleArray&lt;ON_Geometry*&gt;* or ON_SimpleArray&lt;const ON_Geometry*&gt;.
            If you are not writing C++ code, then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.ConstPointer">
            <summary>
            Gets the const (immutable) pointer of this array.
            </summary>
            <returns>The const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.NonConstPointer">
            <summary>
            Gets the non-const pointer (for modification) of this array.
            </summary>
            <returns>The non-const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer"/> instance.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase})">
            <summary>
            Create an ON_SimpleArray&lt;ON_Geometry*&gt; filled with items in geometry
            </summary>
            <param name="geometry"></param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.#ctor(System.Collections.IEnumerable)">
            <summary>
            Expects all of the items in the IEnumerable to be GeometryBase types
            </summary>
            <param name="geometry"></param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.ToNonConstArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayGeometryPointer.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer">
            <summary>
            Represents a wrapper to an unmanaged array of mesh pointers.
            <para>Wrapper for a C++ ON_SimpleArray of ON_Mesh* or const ON_Mesh*. If you are not
            writing C++ code then this class is not for you.</para>
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.ConstPointer">
            <summary>
            Gets the const (immutable) pointer of this array.
            </summary>
            <returns>The const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.NonConstPointer">
            <summary>
            Gets the non-const pointer (for modification) of this array.
            </summary>
            <returns>The non-const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer"/> instance.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Add(Rhino.Geometry.Mesh,System.Boolean)">
            <summary>
            Adds a mesh to the list.
            </summary>
            <param name="mesh">A mesh to add.</param>
            <param name="asConst">Whether this mesh should be treated as non-modifiable.</param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.ToNonConstArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayMeshPointer.Count">
            <summary>
            Gets the amount of meshes in this array.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer">
            <summary>
            Wrapper for a C++ ON_SimpleArray&lt;ON_Brep*&gt; or ON_SimpleArray&lt;const ON_Brep*&gt;
            If you are not writing C++ code then this class is not for you.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.ConstPointer">
            <summary>
            Gets the const (immutable) pointer of this array.
            </summary>
            <returns>The const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.NonConstPointer">
            <summary>
            Gets the non-const pointer (for modification) of this array.
            </summary>
            <returns>The non-const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer"/> instance.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Add(Rhino.Geometry.Brep,System.Boolean)">
            <summary>
            Adds a brep to the list.
            </summary>
            <param name="brep">A brep to add.</param>
            <param name="asConst">Whether this brep should be treated as non-modifiable.</param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Dispose(System.Boolean)">
            <summary>
            
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.ToNonConstArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.SimpleArrayBrepPointer.Count">
            <summary>
            Gets the amount of breps in this array.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.ClassArrayObjRef">
            <summary>
            Represents a wrapper to an unmanaged "array" (list) of CRhinoObjRef instances.
            <para>Wrapper for a C++ ON_ClassArray of CRhinoObjRef</para>
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayObjRef.ConstPointer">
            <summary>
            Gets the const (immutable) pointer of this array.
            </summary>
            <returns>The const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayObjRef.NonConstPointer">
            <summary>
            Gets the non-const pointer (for modification) of this array.
            </summary>
            <returns>The non-const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayObjRef.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.ClassArrayObjRef"/> instance.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayObjRef.#ctor(System.Collections.Generic.IEnumerable{Rhino.DocObjects.ObjRef})">
            <summary>
            Initializes a new instances from a set of ObjRefs
            </summary>
            <param name="objrefs">An array, a list or any enumerable set of Rhino object references.</param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayObjRef.Add(Rhino.DocObjects.ObjRef)">
            <summary>
            Adds an ObjRef to the list.
            </summary>
            <param name="objref">An ObjRef to add.</param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayObjRef.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayObjRef.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayObjRef.ToNonConstArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.ClassArrayObjRef.Count">
            <summary>
            Gets the number of CRhinoObjRef instances in this array.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef">
            <summary>
            Represents a wrapper to an unmanaged "array" (list) of ON_ObjRef instances.
            <para>Wrapper for a C++ ON_ClassArray of ON_ObjRef</para>
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.ConstPointer">
            <summary>
            Gets the const (immutable) pointer of this array.
            </summary>
            <returns>The const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.NonConstPointer">
            <summary>
            Gets the non-const pointer (for modification) of this array.
            </summary>
            <returns>The non-const pointer.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.#ctor">
            <summary>
            Initializes a new <see cref="T:Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef"/> instance.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.#ctor(System.Collections.Generic.IEnumerable{Rhino.DocObjects.ObjRef})">
            <summary>
            Initializes a new instances from a set of ObjRefs
            </summary>
            <param name="objrefs">An array, a list or any enumerable set of Rhino object references.</param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.Add(Rhino.DocObjects.ObjRef)">
            <summary>
            Adds an ObjRef to the list.
            </summary>
            <param name="objref">An ObjRef to add.</param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.ToNonConstArray">
            <summary>
            Copies the unmanaged array to a managed counterpart.
            </summary>
            <returns>The managed array.</returns>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.ClassArrayOnObjRef.Count">
            <summary>
            Gets the number of ObjRef instances in this array.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Extrusion">
            <summary>
            Represents an extrusion, or objects such as beams or linearly extruded elements,
            that can be represented by profile curves and two miter planes at the extremes.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Surface">
            <summary>
            Represents a base class that is common to most RhinoCommon surface types.
            <para>A surface represents an entity that can be all visited by providing
            two independent parameters, usually called (u, v), or sometimes (s, t).</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Surface.CreateRollingBallFillet(Rhino.Geometry.Surface,Rhino.Geometry.Surface,System.Double,System.Double)">
            <summary>
            Constructs a rolling ball fillet between two surfaces.
            </summary>
            <param name="surfaceA">A first surface.</param>
            <param name="surfaceB">A second surface.</param>
            <param name="radius">A radius value.</param>
            <param name="tolerance">A tolerance value.</param>
            <returns>A new array of rolling ball fillet surfaces; this array can be empty on failure.</returns>
            <exception cref="T:System.ArgumentNullException">If surfaceA or surfaceB are null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Surface.CreateRollingBallFillet(Rhino.Geometry.Surface,System.Boolean,Rhino.Geometry.Surface,System.Boolean,System.Double,System.Double)">
            <summary>
            Constructs a rolling ball fillet between two surfaces.
            </summary>
            <param name="surfaceA">A first surface.</param>
            <param name="flipA">A value that indicates whether A should be used in flipped mode.</param>
            <param name="surfaceB">A second surface.</param>
            <param name="flipB">A value that indicates whether B should be used in flipped mode.</param>
            <param name="radius">A radius value.</param>
            <param name="tolerance">A tolerance value.</param>
            <returns>A new array of rolling ball fillet surfaces; this array can be empty on failure.</returns>
            <exception cref="T:System.ArgumentNullException">If surfaceA or surfaceB are null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Surface.CreateRollingBallFillet(Rhino.Geometry.Surface,Rhino.Geometry.Point2d,Rhino.Geometry.Surface,Rhino.Geometry.Point2d,System.Double,System.Double)">
            <summary>
            Constructs a rolling ball fillet between two surfaces.
            </summary>
            <param name="surfaceA">A first surface.</param>
            <param name="uvA">A point in the parameter space of FaceA near where the fillet is expected to hit the surface.</param>
            <param name="surfaceB">A second surface.</param>
            <param name="uvB">A point in the parameter space of FaceB near where the fillet is expected to hit the surface.</param>
            <param name="radius">A radius value.</param>
            <param name="tolerance">A tolerance value used for approximating and intersecting offset surfaces.</param>
            <returns>A new array of rolling ball fillet surfaces; this array can be empty on failure.</returns>
            <exception cref="T:System.ArgumentNullException">If surfaceA or surfaceB are null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Surface.CreateExtrusion(Rhino.Geometry.Curve,Rhino.Geometry.Vector3d)">
            <summary>
            Constructs a surface by extruding a curve along a vector.
            </summary>
            <param name="profile">Profile curve to extrude.</param>
            <param name="direction">Direction and length of extrusion.</param>
            <returns>A surface on success or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.CreateExtrusionToPoint(Rhino.Geometry.Curve,Rhino.Geometry.Point3d)">
            <summary>
            Constructs a surface by extruding a curve to a point.
            </summary>
            <param name="profile">Profile curve to extrude.</param>
            <param name="apexPoint">Apex point of extrusion.</param>
            <returns>A Surface on success or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.CreatePeriodicSurface(Rhino.Geometry.Surface,System.Int32)">
            <summary>
            Constructs a periodic surface from a base surface and a direction.
            </summary>
            <param name="baseSurface">A base surface.</param>
            <param name="direction">0 is first parameter, 1 is second parameter.</param>
            <returns>A new surface; or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.#ctor">
            <summary>
            Protected constructor for internal use.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Surface.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.Surface.Domain(System.Int32)">
            <summary>Gets the domain in a direction.</summary>
            <param name="direction">0 gets first parameter, 1 gets second parameter.</param>
            <returns>An interval value.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.SetDomain(System.Int32,Rhino.Geometry.Interval)">
            <summary>
            Sets the domain in a direction.
            </summary>
            <param name="direction">
            0 sets first parameter's domain, 1 sets second parameter's domain.
            </param>
            <param name="domain">A new domain to be assigned.</param>
            <returns>true if setting succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Degree(System.Int32)">
            <summary>
            Returns the maximum algebraic degree of any span
            (or a good estimate if curve spans are not algebraic).
            </summary>
            <param name="direction">
            0 gets first parameter's domain, 1 gets second parameter's domain.
            </param>
            <returns>The maximum degree.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.GetSurfaceSize(System.Double@,System.Double@)">
            <summary>
            Gets an estimate of the size of the rectangle that would be created
            if the 3d surface where flattened into a rectangle.
            </summary>
            <param name="width">corresponds to the first surface parameter.</param>
            <param name="height">corresponds to the second surface parameter.</param>
            <returns>true if successful.</returns>
            <example>
            Reparameterize a surface to minimize distortion in the map from parameter space to 3d.
            Surface surf = ...;
            double width, height;
            if ( surf.GetSurfaceSize( out width, out height ) )
            {
              surf.SetDomain( 0, new ON_Interval( 0.0, width ) );
              surf.SetDomain( 1, new ON_Interval( 0.0, height ) );
            }
            </example>
        </member>
        <member name="M:Rhino.Geometry.Surface.SpanCount(System.Int32)">
            <summary>
            Gets number of smooth nonempty spans in the parameter direction.
            </summary>
            <param name="direction">
            0 gets first parameter's domain, 1 gets second parameter's domain.
            </param>
            <returns>The span count.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.GetSpanVector(System.Int32)">
            <summary>
            Gets array of span "knots".
            </summary>
            <param name="direction">
            0 gets first parameter's domain, 1 gets second parameter's domain.
            </param>
            <returns>An array with span vectors; or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.ClosestSide(System.Double,System.Double)">
            <summary>
            Gets the side that is closest, in terms of 3D-distance, to a U and V parameter.
            </summary>
            <param name="u">A u parameter.</param>
            <param name="v">A v parameter.</param>
            <returns>A side.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Extend(Rhino.Geometry.IsoStatus,System.Double,System.Boolean)">
            <summary>
            Extends an untrimmed surface along one edge.
            </summary>
            <param name="edge">
            Edge to extend.  Must be North, South, East, or West.
            </param>
            <param name="extensionLength">distance to extend.</param>
            <param name="smooth">
            true for smooth (C-infinity) extension. 
            false for a C1- ruled extension.
            </param>
            <returns>New extended surface on success.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Rebuild(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Rebuilds an existing surface to a given degree and point count.
            </summary>
            <param name="uDegree">the output surface u degree.</param>
            <param name="vDegree">the output surface u degree.</param>
            <param name="uPointCount">
            The number of points in the output surface u direction. Must be bigger
            than uDegree (maximum value is 1000)
            </param>
            <param name="vPointCount">
            The number of points in the output surface v direction. Must be bigger
            than vDegree (maximum value is 1000)
            </param>
            <returns>new rebuilt surface on success. null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Reverse(System.Int32)">
            <summary>
            Reverses parameterization Domain changes from [a,b] to [-b,-a]
            </summary>
            <param name="direction">
            0 for first parameter's domain, 1 for second parameter's domain.
            </param>
            <returns>a new reversed surface on success.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Reverse(System.Int32,System.Boolean)">
            <summary>
            Same as Reverse, but if inPlace is set to true this Surface is modified
            instead of a new copy being created.
            </summary>
            <param name="direction">
            0 for first parameter's domain, 1 for second parameter's domain.
            </param>
            <param name="inPlace"></param>
            <returns>
            If inPlace is False, a new reversed surface on success. If inPlace is
            true, this surface instance is returned on success.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Transpose">
            <summary>
            Transposes surface parameterization (swap U and V)
            </summary>
            <returns>New transposed surface on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Transpose(System.Boolean)">
            <summary>
            Transposes surface parameterization (swap U and V)
            </summary>
            <param name="inPlace"></param>
            <returns>New transposed surface on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.PointAt(System.Double,System.Double)">
            <summary>
            Evaluates a point at a given parameter.
            </summary>
            <param name="u">evaluation parameters.</param>
            <param name="v">evaluation parameters.</param>
            <returns>Point3d.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.NormalAt(System.Double,System.Double)">
            <summary>
            Computes the surface normal at a point.
            <para>This is the simple evaluation call - it does not support error handling.</para>
            </summary>
            <param name="u">A U parameter.</param>
            <param name="v">A V parameter.</param>
            <returns>The normal.</returns>
            <example>
            <code source='examples\vbnet\ex_evnormal.vb' lang='vbnet'/>
            <code source='examples\cs\ex_evnormal.cs' lang='cs'/>
            <code source='examples\py\ex_evnormal.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Surface.FrameAt(System.Double,System.Double,Rhino.Geometry.Plane@)">
            <summary>
            Computes the orient plane on a surface given a U and V parameter.
            <para>This is the simple evaluation call with no error handling.</para>
            </summary>
            <param name="u">A first parameter.</param>
            <param name="v">A second parameter.</param>
            <param name="frame">A frame plane that will be computed during this call.</param>
            <returns>true if this operation succeeded; otherwise false.</returns>
            <example>
            <code source='examples\vbnet\ex_orientonsrf.vb' lang='vbnet'/>
            <code source='examples\cs\ex_orientonsrf.cs' lang='cs'/>
            <code source='examples\py\ex_orientonsrf.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Surface.CurvatureAt(System.Double,System.Double)">
            <summary>
            Computes the curvature at the given UV coordinate.
            </summary>
            <param name="u">U parameter for evaluation.</param>
            <param name="v">V parameter for evaluation.</param>
            <returns>Surface Curvature data for the point at uv or null on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_principalcurvature.vb' lang='vbnet'/>
            <code source='examples\cs\ex_principalcurvature.cs' lang='cs'/>
            <code source='examples\py\ex_principalcurvature.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsIsoparametric(Rhino.Geometry.Curve,Rhino.Geometry.Interval)">
            <summary>
            Determines if a 2D curve is iso-parameteric in the parameter space of this surface.
            </summary>
            <param name="curve">Curve to test.</param>
            <param name="curveDomain">Sub domain of the curve.</param>
            <returns>IsoStatus flag describing the iso-parametric relationship between the surface and the curve.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsIsoparametric(Rhino.Geometry.Curve)">
            <summary>
            Determines if a 2d curve is iso-parameteric in the parameter space of this surface.
            </summary>
            <param name="curve">Curve to test.</param>
            <returns>IsoStatus flag describing the iso-parametric relationship between the surface and the curve.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsIsoparametric(Rhino.Geometry.BoundingBox)">
            <summary>
            Determines if a 2d bounding box is iso-parameteric in the parameter space of this surface.
            </summary>
            <param name="bbox">Bounding box to test.</param>
            <returns>IsoStatus flag describing the iso-parametric relationship between the surface and the bounding box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsClosed(System.Int32)">
            <summary>
            Gets a value indicating if the surface is closed in a direction.
            </summary>
            <param name="direction">0 = U, 1 = V.</param>
            <returns>The indicating boolean value.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsPeriodic(System.Int32)">
            <summary>
            Gets a value indicating if thr surface is periodic in a direction (default is false).
            </summary>
            <param name="direction">0 = U, 1 = V.</param>
            <returns>The indicating boolean value.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsSingular(System.Int32)">
            <summary>
            true if surface side is collapsed to a point.
            </summary>
            <param name="side">
            side of parameter space to test
            0 = south, 1 = east, 2 = north, 3 = west.
            </param>
            <returns>True if this specific side of the surface is singular; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsAtSingularity(System.Double,System.Double,System.Boolean)">
            <summary>
            Tests if a surface parameter value is at a singularity.
            </summary>
            <param name="u">Surface u parameter to test.</param>
            <param name="v">Surface v parameter to test.</param>
            <param name="exact">
            If true, test if (u,v) is exactly at a singularity.
            If false, test if close enough to cause numerical problems.
            </param>
            <returns>true if surface is singular at (s,t)</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsAtSeam(System.Double,System.Double)">
            <summary>
            Tests if a surface parameter value is at a seam.
            </summary>
            <param name="u">Surface u parameter to test.</param>
            <param name="v">Surface v parameter to test.</param>
            <returns>
            0 if not a seam,
            1 if u == Domain(0)[i] and srf(u, v) == srf(Domain(0)[1-i], v)
            2 if v == Domain(1)[i] and srf(u, v) == srf(u, Domain(1)[1-i])
            3 if 1 and 2 are true.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsContinuous(Rhino.Geometry.Continuity,System.Double,System.Double)">
            <summary>
            Tests continuity at a surface parameter value.
            </summary>
            <param name="continuityType">The continuity type to sample.</param>
            <param name="u">Surface u parameter to test.</param>
            <param name="v">Surface v parameter to test.</param>
            <returns>true if the surface has at least the specified continuity at the (u,v) parameter.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.GetNextDiscontinuity(System.Int32,Rhino.Geometry.Continuity,System.Double,System.Double,System.Double@)">
            <summary>
            Searches for a derivative, tangent, or curvature discontinuity.
            </summary>
            <param name="direction">
            If 0, then "u" parameter is checked. If 1, then the "v" parameter is checked.
            </param>
            <param name="continuityType">The desired continuity.</param>
            <param name="t0">
            Search begins at t0. If there is a discontinuity at t0, it will be ignored. 
            This makes it possible to repeatedly call GetNextDiscontinuity and step through the discontinuities.
            </param>
            <param name="t1">
            (t0 != t1) If there is a discontinuity at t1 is will be ingored unless c is a locus discontinuity
            type and t1 is at the start or end of the curve.
            </param>
            <param name="t">
            if a discontinuity is found, then t reports the parameter at the discontinuity.
            </param>
            <returns>
            Parametric continuity tests c = (C0_continuous, ..., G2_continuous):
            TRUE if a parametric discontinuity was found strictly between t0 and t1.
            Note well that all curves are parametrically continuous at the ends of their domains.
            
            Locus continuity tests c = (C0_locus_continuous, ...,G2_locus_continuous):
            TRUE if a locus discontinuity was found strictly between t0 and t1 or at t1 is the
            at the end of a curve. Note well that all open curves (IsClosed()=false) are locus
            discontinuous at the ends of their domains.  All closed curves (IsClosed()=true) are
            at least C0_locus_continuous at the ends of their domains.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.ClosestPoint(Rhino.Geometry.Point3d,System.Double@,System.Double@)">
            <summary>
            Input the parameters of the point on the surface that is closest to testPoint.
            </summary>
            <param name="testPoint">A point to test against.</param>
            <param name="u">U parameter of the surface that is closest to testPoint.</param>
            <param name="v">V parameter of the surface that is closest to testPoint.</param>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_orientonsrf.vb' lang='vbnet'/>
            <code source='examples\cs\ex_orientonsrf.cs' lang='cs'/>
            <code source='examples\py\ex_orientonsrf.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Surface.Trim(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Constructs a sub-surface that covers the specified UV trimming domain.
            </summary>
            <param name="u">Domain of surface along U direction to include in the subsurface.</param>
            <param name="v">Domain of surface along V direction to include in the subsurface.</param>
            <returns>SubSurface on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Offset(System.Double,System.Double)">
            <summary>
            Constructs a new surface which is offset from the current surface.
            </summary>
            <param name="distance">Distance (along surface normal) to offset.</param>
            <param name="tolerance">Offset accuracy.</param>
            <returns>The offsetted surface or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Fit(System.Int32,System.Int32,System.Double)">
            <summary>Fits a new surface through an existing surface.</summary>
            <param name="uDegree">the output surface U degree. Must be bigger than 1.</param>
            <param name="vDegree">the output surface V degree. Must be bigger than 1.</param>
            <param name="fitTolerance">The fitting tolerance.</param>
            <returns>A surface, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Evaluate(System.Double,System.Double,System.Int32,Rhino.Geometry.Point3d@,Rhino.Geometry.Vector3d[]@)">
            <summary>
            Evaluates a surface mathematically.
            </summary>
            <param name="u">A U parameter.</param>
            <param name="v">A V parameter.</param>
            <param name="numberDerivatives">The number of derivatives.</param>
            <param name="point">A point. This out parameter will be assigned during this call.</param>
            <param name="derivatives">A vector array. This out parameter will be assigned during this call. This can be null.</param>
            <returns>true if the operation succeeded; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsoCurve(System.Int32,System.Double)">
            <summary>Gets isoparametric curve.</summary>
            <param name="direction">
            0 first parameter varies and second parameter is constant
            e.g., point on IsoCurve(0,c) at t is srf(t,c)
            This is a horizontal line from left to right
            
            1 first parameter is constant and second parameter varies
            e.g., point on IsoCurve(1,c) at t is srf(c,t
            This is a vertical line from bottom to top.
            </param>
            <param name="constantParameter">The parameter that was constant on the original surface.</param>
            <returns>An isoparametric curve or null on error.</returns>
            <remarks>
            In this function "direction" indicates which direction the resulting curve runs.
            0: horizontal, 1: vertical
            In the other Surface functions that take a "direction" argument,
            "direction" indicates if "constantParameter" is a "u" or "v" parameter.
            </remarks>
            <example>
            <code source='examples\vbnet\ex_extractisocurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_extractisocurve.cs' lang='cs'/>
            <code source='examples\py\ex_extractisocurve.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Surface.InterpolatedCurveOnSurfaceUV(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d},System.Double)">
            <summary>
            Constructs an interpolated curve on a surface, using 2D surface points.
            </summary>
            <param name="points">A list, an array or any enumerable set of 2D points.</param>
            <param name="tolerance">A tolerance value.</param>
            <returns>A new nurbs curve, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.InterpolatedCurveOnSurface(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double)">
            <summary>
            Constructs an interpolated curve on a surface, using 3D points.
            </summary>
            <param name="points">A list, an array or any enumerable set of points.</param>
            <param name="tolerance">A tolerance value.</param>
            <returns>A new nurbs curve, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.ShortPath(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Constructs a geodesic between 2 points, used by ShortPath command in Rhino.
            </summary>
            <param name="start">start point of curve in parameter space. Points must be distinct in the domain of thie surface.</param>
            <param name="end">end point of curve in parameter space. Points must be distinct in the domain of thie surface.</param>
            <param name="tolerance">tolerance used in fitting discrete solution.</param>
            <returns>a geodesic curve on the surface on success. null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Pushup(Rhino.Geometry.Curve,System.Double,Rhino.Geometry.Interval)">
            <summary>
            Computes a 3d curve that is the composite of a 2d curve and the surface map.
            </summary>
            <param name="curve2d">a 2d curve whose image is in the surface's domain.</param>
            <param name="tolerance">
            the maximum acceptable distance from the returned 3d curve to the image of curve_2d on the surface.
            </param>
            <param name="curve2dSubdomain">The curve interval (a sub-domain of the original curve) to use.</param>
            <returns>3d curve.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Pushup(Rhino.Geometry.Curve,System.Double)">
            <summary>
            Computes a 3d curve that is the composite of a 2d curve and the surface map.
            </summary>
            <param name="curve2d">a 2d curve whose image is in the surface's domain.</param>
            <param name="tolerance">
            the maximum acceptable distance from the returned 3d curve to the image of curve_2d on the surface.
            </param>
            <returns>3d curve.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Pullback(Rhino.Geometry.Curve,System.Double)">
            <summary>
            Pulls a 3d curve back to the surface's parameter space.
            </summary>
            <param name="curve3d">The curve to pull.</param>
            <param name="tolerance">
            the maximum acceptable 3d distance between from surface(curve_2d(t))
            to the locus of points on the surface that are closest to curve_3d.
            </param>
            <returns>2d curve.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Pullback(Rhino.Geometry.Curve,System.Double,Rhino.Geometry.Interval)">
            <summary>
            Pulls a 3d curve back to the surface's parameter space.
            </summary>
            <param name="curve3d">A curve.</param>
            <param name="tolerance">
            the maximum acceptable 3d distance between from surface(curve_2d(t))
            to the locus of points on the surface that are closest to curve_3d.
            </param>
            <param name="curve3dSubdomain">A subdomain of the curve to sample.</param>
            <returns>2d curve.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.ToBrep">
            <summary>
            Converts the surface into a Brep.
            </summary>
            <returns>A Brep with a similar shape like this surface or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.HasNurbsForm">
            <summary>
            Is there a NURBS surface representation of this surface.
            </summary>
            <returns>
            0 unable to create NURBS representation with desired accuracy.
            1 success - NURBS parameterization matches the surface's
            2 success - NURBS point locus matches the surface's and the
            domain of the NURBS surface is correct. However, This surface's
            parameterization and the NURBS surface parameterization may not
            match.  This situation happens when getting NURBS representations
            of surfaces that have a transendental parameterization like spheres,
            cylinders, and cones.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.ToNurbsSurface">
            <summary>
            Gets a NURBS surface representation of this surface. Default 
            tolerance of 0.0 is used. 
            </summary>
            <returns>NurbsSurface on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.ToNurbsSurface(System.Double,System.Int32@)">
            <summary>
            Gets a NURBS surface representation of this surface.
            </summary>
            <param name="tolerance">tolerance to use when creating NURBS representation.</param>
            <param name="accuracy">
            <para>
            0 = unable to create NURBS representation with desired accuracy.
            </para>
            <para>
            1 = success - returned NURBS parameterization matches the surface's
            to the desired accuracy.
            </para>
            <para>
            2 = success - returned NURBS point locus matches the surface's to the
            desired accuracy and the domain of the NURBS surface is correct. 
            However, this surface's parameterization and the NURBS surface
            parameterization may not match to the desired accuracy. This 
            situation happens when getting NURBS representations of surfaces
            that have a transendental parameterization like spheres, cylinders,
            and cones.
            </para>
            </param>
            <returns>NurbsSurface on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsPlanar">
            <summary>
            Tests a surface to see if it is planar to zero tolerance.
            </summary>
            <returns>
            true if the surface is planar (flat) to within RhinoMath.ZeroTolerance units (1e-12).
            </returns>
            <example>
            <code source='examples\vbnet\ex_issurfaceinplane.vb' lang='vbnet'/>
            <code source='examples\cs\ex_issurfaceinplane.cs' lang='cs'/>
            <code source='examples\py\ex_issurfaceinplane.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsPlanar(System.Double)">
            <summary>
            Tests a surface to see if it is planar to a given tolerance.
            </summary>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>
            true if there is a plane such that the maximum distance from
            the surface to the plane is &lt;= tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetPlane(Rhino.Geometry.Plane@)">
            <summary>Tests a surface for planarity and return the plane.</summary>
            <param name="plane">On success, the plane parameters are filled in.</param>
            <returns>
            true if there is a plane such that the maximum distance from the surface to the plane is &lt;= RhinoMath.ZeroTolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetPlane(Rhino.Geometry.Plane@,System.Double)">
            <summary>Tests a surface for planarity and return the plane.</summary>
            <param name="plane">On success, the plane parameters are filled in.</param>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>
            true if there is a plane such that the maximum distance from the surface to the plane is &lt;= tolerance.
            </returns>
            <example>
            <code source='examples\vbnet\ex_isbrepbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_isbrepbox.cs' lang='cs'/>
            <code source='examples\py\ex_isbrepbox.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsSphere">
            <summary>
            Determines if the surface is a portion of a sphere within RhinoMath.ZeroTolerance.
            </summary>
            <returns>true if the surface is a portion of a sphere.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsSphere(System.Double)">
            <summary>
            Determines if the surface is a portion of a sphere within a given tolerance.
            </summary>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>true if the surface is a portion of a sphere.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetSphere(Rhino.Geometry.Sphere@)">
            <summary>Test a surface to see if it is a portion of a sphere and return the sphere.</summary>
            <param name="sphere">On success, the sphere parameters are filled in.</param>
            <returns>true if the surface is a portion of a sphere.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetSphere(Rhino.Geometry.Sphere@,System.Double)">
            <summary>Test a surface to see if it is a portion of a sphere and return the sphere.</summary>
            <param name="sphere">On success, the sphere parameters are filled in.</param>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>true if the surface is a portion of a sphere.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsCylinder">
            <summary>
            Determines if the surface is a portion of a cylinder within RhinoMath.ZeroTolerance.
            </summary>
            <returns>true if the surface is a portion of a cylinder.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsCylinder(System.Double)">
            <summary>Determines if the surface is a portion of a cylinder within a given tolerance.</summary>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>true if the surface is a portion of a cylinder.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetCylinder(Rhino.Geometry.Cylinder@)">
            <summary>Tests a surface to see if it is a portion of a cylinder within RhinoMath.ZeroTolerance and return the cylinder.</summary>
            <param name="cylinder">On success, the cylinder parameters are filled in.</param>
            <returns>true if the surface is a portion of a cylinder.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetCylinder(Rhino.Geometry.Cylinder@,System.Double)">
            <summary>Tests a surface to see if it is a portion of a cylinder and return the cylinder.</summary>
            <param name="cylinder">On success, the cylinder parameters are filled in.</param>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>true if the surface is a portion of a cylinder.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsCone">
            <summary>
            Determines if the surface is a portion of a cone within RhinoMath.ZeroTolerance.
            </summary>
            <returns>true if the surface is a portion of a cone.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsCone(System.Double)">
            <summary>Determines if the surface is a portion of a cone within a given tolerance.</summary>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>true if the surface is a portion of a cone.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetCone(Rhino.Geometry.Cone@)">
            <summary>Tests a surface to see if it is a portion of a cone within RhinoMath.ZeroTolerance and return the cone.</summary>
            <param name="cone">On success, the cone parameters are filled in.</param>
            <returns>true if the surface is a portion of a cone.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetCone(Rhino.Geometry.Cone@,System.Double)">
            <summary>Tests a surface to see if it is a portion of a cone and returns the cone.</summary>
            <param name="cone">On success, the cone parameters are filled in.</param>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>true if the surface is a portion of a cone.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsTorus">
            <summary>Determines if the surface is a portion of a torus within RhinoMath.ZeroTolerance.</summary>
            <returns>true if the surface is a portion of a torus.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.IsTorus(System.Double)">
            <summary>Determines if the surface is a portion of a torus within a given tolerance.</summary>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>true if the surface is a portion of a torus.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetTorus(Rhino.Geometry.Torus@)">
            <summary>Tests a surface to see if it is a portion of a torus within RhinoMath.ZeroTolerance and returns the torus.</summary>
            <param name="torus">On success, the torus parameters are filled in.</param>
            <returns>true if the surface is a portion of a torus.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.TryGetTorus(Rhino.Geometry.Torus@,System.Double)">
            <summary>Tests a surface to see if it is a portion of a torus and returns the torus.</summary>
            <param name="torus">On success, the torus parameters are filled in.</param>
            <param name="tolerance">tolerance to use when checking.</param>
            <returns>true if the surface is a portion of a torus.</returns>
        </member>
        <member name="M:Rhino.Geometry.Surface.Split(System.Int32,System.Double)">
            <summary>
            Splits (divides) the surface into two parts at the specified parameter
            </summary>
            <param name="direction">
            0 = The surface is split vertically. The "west" side is returned as the first
            surface in the array and the "east" side is returned as the second surface in
            the array.
            1 = The surface is split horizontally. The "south" side is returned as the first surface in the array and the "north"
            side is returned as the second surfae in the array
            </param>
            <param name="parameter">
            value of constant parameter in interval returned by Domain(direction)
            </param>
            <returns>Array of two surfaces on success</returns>
        </member>
        <member name="P:Rhino.Geometry.Surface.IsSolid">
            <summary>
            Gets a values indicating whether a surface is solid.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected serialization constructor.
            </summary>
            <param name="info">The serialization data.</param>
            <param name="context">The serialization context stream.</param>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.Create(Rhino.Geometry.Curve,System.Double,System.Boolean)">
            <summary>
            Creates an extrusion of a 3d curve (which must be planar) and a height.
            </summary>
            <param name="planarCurve">
            Planar curve used as profile
            </param>
            <param name="height">
            If the height &gt; 0, the bottom of the extrusion will be in plane and
            the top will be height units above the plane.
            If the height &lt; 0, the top of the extrusion will be in plane and
            the bottom will be height units below the plane.
            The plane used is the one that is returned from the curve's TryGetPlane function.
            </param>
            <param name="cap">
            If the curve is closed and cap is true, then the resulting extrusion is capped.
            </param>
            <returns>
            If the input is valid, then a new extrusion is returned. Otherwise null is returned
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.CreateCylinderExtrusion(Rhino.Geometry.Cylinder,System.Boolean,System.Boolean)">
            <summary>
            Gets an extrusion form of a cylinder.
            </summary>
            <param name="cylinder">IsFinite must be true.</param>
            <param name="capBottom">If true, the end at cylinder.Height1 will be capped.</param>
            <param name="capTop">If true, the end at cylinder.Height2 will be capped.</param>
            <returns>Extrusion on success. null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.CreatePipeExtrusion(Rhino.Geometry.Cylinder,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Gets an extrusion form of a pipe.
            </summary>
            <param name="cylinder">IsFinite must be true.</param>
            <param name="otherRadius">
            If cylinder.Radius is less than other radius, then the cylinder will be the inside
            of the pipe.
            </param>
            <param name="capBottom">If true, the end at cylinder.Height1 will be capped.</param>
            <param name="capTop">If true, the end at cylinder.Height2 will be capped.</param>
            <returns>Extrusion on success. null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.Extrusion"/> class.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.ToBrep(System.Boolean)">
            <summary>
            Constructs a brep form of the extrusion. The outer profile is always the first face of the brep.
            If there are inner profiles, additional brep faces are created for each profile. If the
            outer profile is closed, then end caps are added as the last two faces of the brep.
            </summary>
            <param name="splitKinkyFaces">
            If true and the profiles have kinks, then the faces corresponding to those profiles are split
            so they will be G1.
            </param>
            <returns>A brep with a similar shape like this extrustion, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.SetPathAndUp(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Allows to set the two points at the extremes and the up vector.
            </summary>
            <param name="a">The start point.</param>
            <param name="b">The end point.</param>
            <param name="up">The up vector.</param>
            <returns>true if the operation succeeded; otherwise false.
            Setting up=a-b will make the operation fail.</returns>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.GetProfileTransformation(System.Double)">
            <summary>
            Gets the transformation that maps the xy profile curve to its 3d location.
            </summary>
            <param name="s">
            0.0 = starting profile
            1.0 = ending profile.
            </param>
            <returns>A Transformation. The transform is Invalid on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.GetProfilePlane(System.Double)">
            <summary>
            Gets the 3D plane containing the profile curve at a normalized path parameter.
            </summary>
            <param name="s">
            0.0 = starting profile
            1.0 = ending profile.
            </param>
            <returns>A plane. The plane is Invalid on failure.</returns>
            <remarks>
             When no mitering is happening, GetPathPlane() and GetProfilePlane() return the same plane.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.GetPathPlane(System.Double)">
            <summary>
            Gets the 3D plane perpendicular to the path at a normalized path parameter.
            </summary>
            <param name="s">
            0.0 = starting profile
            1.0 = ending profile.
            </param>
            <returns>A plane. The plane is Invalid on failure.</returns>
            <remarks>
             When no mitering is happening, GetPathPlane() and GetProfilePlane() return the same plane.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.SetOuterProfile(Rhino.Geometry.Curve,System.Boolean)">
            <summary>
            Sets the outer profile of the extrusion.
            </summary>
            <param name="outerProfile">curve in the XY plane or a 2D curve.</param>
            <param name="cap">
            If outerProfile is a closed curve, then cap determines if the extrusion
            has end caps. If outerProfile is an open curve, cap is ignored.
            </param>
            <returns>
            true if the profile was set. If the outer profile is closed, then the
            extrusion may also have inner profiles. If the outer profile is open,
            the extrusion may not have inner profiles. If the extrusion already
            has a profile, the set will fail.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.AddInnerProfile(Rhino.Geometry.Curve)">
            <summary>
            Adds an inner profile.
            </summary>
            <param name="innerProfile">Closed curve in the XY plane or a 2d curve.</param>
            <returns>true if the profile was set.</returns>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.Profile3d(System.Int32,System.Double)">
            <summary>
            Gets a transversal isocurve of the extruded profile.
            </summary>
            <param name="profileIndex">
            0 &lt;= profileIndex &lt; ProfileCount
            The outer profile has index 0.
            </param>
            <param name="s">
            0.0 &lt;= s &lt;= 1.0
            A relative parameter controling which profile is returned.
            0 = bottom profile and 1 = top profile.
            </param>
            <returns>The profile.</returns>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.Profile3d(Rhino.Geometry.ComponentIndex)">
            <summary>
            Gets one of the profiles.
            </summary>
            <param name="ci">The index of this profile.</param>
            <returns>The profile.</returns>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.WallEdge(Rhino.Geometry.ComponentIndex)">
            <summary>
            Gets one of the longitudinal curves along the beam or extrusion.
            </summary>
            <param name="ci">The index of this profile.</param>
            <returns>The profile.</returns>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.WallSurface(Rhino.Geometry.ComponentIndex)">
            <summary>
            Gets one of the longitudinal surfaces of the extrusion.
            </summary>
            <param name="ci">The index specifying which precise item to retrieve.</param>
            <returns>The surface.</returns>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.PathLineCurve">
            <summary>
            Gets the line-like curve that is the conceptual axis of the extrusion.
            </summary>
            <returns>The path as a line curve.</returns>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.ProfileIndex(System.Double)">
            <summary>
            Gets the index of the profile curve at a domain related to a parameter. 
            </summary>
            <param name="profileParameter">Parameter on profile curve.</param>
            <returns>
            -1 if profileParameter does not correspond to a point on the profile curve.
            When the profileParameter corresponds to the end of one profile and the
            beginning of the next profile, the index of the next profile is returned.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.GetMesh(Rhino.Geometry.MeshType)">
            <summary>
            Obtains a reference to a specified type of mesh for this extrusion.
            </summary>
            <param name="meshType">The mesh type.</param>
            <returns>A mesh.</returns>
        </member>
        <member name="M:Rhino.Geometry.Extrusion.GetWireframe">
            <summary>
            Constructs all the Wireframe curves for this Extrusion.
            </summary>
            <returns>An array of Wireframe curves.</returns>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.PathStart">
            <summary>
            Gets the start point of the path.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.PathEnd">
            <summary>
            Gets the end point of the path.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.PathTangent">
            <summary>
            Gets the up vector of the path.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.MiterPlaneNormalAtStart">
            <summary>
            Gets or sets the normal of the miter plane at the start in profile coordinates.
            In profile coordinates, 0,0,1 always maps to the extrusion axis
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.MiterPlaneNormalAtEnd">
            <summary>
            Gets or sets the normal of the miter plane at the end in profile coordinates.
            In profile coordinates, 0,0,1 always maps to the extrusion axis
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.IsMiteredAtStart">
            <summary>
            Returns a value indicating whether a miter plane at start is defined.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.IsMiteredAtEnd">
            <summary>
            Gets a value indicating whether a miter plane at the end is defined.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.IsSolid">
            <summary>
            Gets a value indicating whether there is no gap among all surfaces constructing this object.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.IsCappedAtBottom">
            <summary>
            Gets a value indicating whether the surface that fills the bottom profile is existing.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.IsCappedAtTop">
            <summary>
            Gets a value indicating whether the surface that fills the top profile is existing.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.CapCount">
            <summary>
            Gets the amount of capping surfaces.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Extrusion.ProfileCount">
            <summary>
            Gets the amount of profile curves.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.BezierCurve">
            <summary>
            Represents a Bezier curve.
            <para>Note: as an exception, the bezier curve <b>is not</b> derived from <see cref="T:Rhino.Geometry.Curve"/>.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d})">
            <summary>
            Create bezier curve with controls defined by a list of 2d points
            </summary>
            <param name="controlPoints"></param>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Create bezier curve with controls defined by a list of 3d points
            </summary>
            <param name="controlPoints"></param>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point4d})">
            <summary>
            Create bezier curve with controls defined by a list of 4d points
            </summary>
            <param name="controlPoints"></param>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.CreateLoftedBezier(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Loft a bezier through a list of points
            </summary>
            <param name="points">2 or more points to interpolate</param>
            <returns>new bezier curve if successful</returns>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.CreateLoftedBezier(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d})">
            <summary>
            Loft a bezier through a list of points
            </summary>
            <param name="points">2 or more points to interpolate</param>
            <returns>new bezier curve if successful</returns>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.GetBoundingBox(System.Boolean)">
            <summary>
            Boundingbox solver. Gets the world axis aligned boundingbox for the curve.
            </summary>
            <param name="accurate">If true, a physically accurate boundingbox will be computed. 
            If not, a boundingbox estimate will be computed. For some geometry types there is no 
            difference between the estimate and the accurate boundingbox. Estimated boundingboxes 
            can be computed much (much) faster than accurate (or "tight") bounding boxes. 
            Estimated bounding boxes are always similar to or larger than accurate bounding boxes.</param>
            <returns>
            The boundingbox of the geometry in world coordinates or BoundingBox.Empty 
            if not bounding box could be found.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.PointAt(System.Double)">
            <summary>Evaluates point at a curve parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <returns>Point (location of curve at the parameter t).</returns>
            <remarks>No error handling.</remarks>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.TangentAt(System.Double)">
            <summary>Evaluates the unit tangent vector at a curve parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <returns>Unit tangent vector of the curve at the parameter t.</returns>
            <remarks>No error handling.</remarks>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.CurvatureAt(System.Double)">
            <summary>Evaluate the curvature vector at a curve parameter.</summary>
            <param name="t">Evaluation parameter.</param>
            <returns>Curvature vector of the curve at the parameter t.</returns>
            <remarks>No error handling.</remarks>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.ToNurbsCurve">
            <summary>
            Constructs a NURBS curve representation of this curve.
            </summary>
            <returns>NURBS representation of the curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.GetControlVertex2d(System.Int32)">
            <summary>Get location of a control vertex.</summary>
            <param name="index">
            Control vertex index (0 &lt;= index &lt; ControlVertexCount)
            </param>
            <returns>
            If the bezier is rational, the euclidean location is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">when index is out of range</exception>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.GetControlVertex3d(System.Int32)">
            <summary>Get location of a control vertex.</summary>
            <param name="index">
            Control vertex index (0 &lt;= index &lt; ControlVertexCount)
            </param>
            <returns>
            If the bezier is rational, the euclidean location is returned.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">when index is out of range</exception>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.GetControlVertex4d(System.Int32)">
            <summary>Get location of a control vertex.</summary>
            <param name="index">
            Control vertex index (0 &lt;= index &lt; ControlVertexCount)
            </param>
            <returns>
            Homogenous value of control vertex. If the bezier is not
            rational, the weight is 1.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">when index is out of range</exception>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.MakeRational">
            <summary>Make bezier rational</summary>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.MakeNonRational">
            <summary>Make bezier non-rational</summary>
            <returns>treu if successful</returns>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.IncreaseDegree(System.Int32)">
            <summary>Increase degree of bezier</summary>
            <param name="desiredDegree"></param>
            <returns>true if successful.  false if desiredDegree &lt; current degree.</returns>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.ChangeDimension(System.Int32)">
            <summary>Change dimension of bezier.</summary>
            <param name="desiredDimension"></param>
            <returns>true if successful.  false if desired_dimension &lt; 1</returns>
        </member>
        <member name="M:Rhino.Geometry.BezierCurve.CreateCubicBeziers(Rhino.Geometry.Curve,System.Double,System.Double)">
            <summary>
            Constructs an array of cubic, non-rational beziers that fit a curve to a tolerance.
            </summary>
            <param name="sourceCurve">A curve to approximate.</param>
            <param name="distanceTolerance">
            The max fitting error. Use RhinoMath.SqrtEpsilon as a minimum.
            </param>
            <param name="kinkTolerance">
            If the input curve has a g1-discontinuity with angle radian measure
            greater than kinkTolerance at some point P, the list of beziers will
            also have a kink at P.
            </param>
            <returns>A new array of bezier curves. The array can be empty and might contain null items.</returns>
        </member>
        <member name="P:Rhino.Geometry.BezierCurve.IsValid">
            <summary>Tests an object to see if it is valid.</summary>
        </member>
        <member name="P:Rhino.Geometry.BezierCurve.IsRational">
            <summary>
            Gets a value indicating whether or not the curve is rational. 
            Rational curves have control-points with custom weights.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BezierCurve.ControlVertexCount">
            <summary>
            Number of control vertices in this curve
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Box">
            <summary>
            Represents the value of a plane and three intervals in
            an orthogonal, oriented box that is not necessarily parallel to the world Y, X, Z axes.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Box.#ctor(Rhino.Geometry.BoundingBox)">
            <summary>
            Initializes a new Box that mimics a BoundingBox struct. 
            <para>The orientation plane of the Box is coincident with the 
            World XY plane.</para>
            </summary>
            <param name="bbox">BoundingBox to mimic.</param>
        </member>
        <member name="M:Rhino.Geometry.Box.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Initializes a new box from a base Plane and three Intervals.
            </summary>
            <param name="basePlane">Orientation plane of the box.</param>
            <param name="xSize">Dimensions along the base plane X-Axis.</param>
            <param name="ySize">Dimensions along the base plane Y-Axis.</param>
            <param name="zSize">Dimensions along the base plane Z-Axis.</param>
        </member>
        <member name="M:Rhino.Geometry.Box.#ctor(Rhino.Geometry.Plane,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Initializes the smallest box that contains a set of points.
            </summary>
            <param name="basePlane">Orientation of the box.</param>
            <param name="points">Points to include, Invalid points will be ignored.</param>
        </member>
        <member name="M:Rhino.Geometry.Box.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.GeometryBase)">
            <summary>
            Initializes a box that contains a generic piece of geometry.
            This box will be aligned with an arbitrary plane.
            </summary>
            <param name="basePlane">Base plane for aligned bounding box.</param>
            <param name="geometry">Geometry to box.</param>
        </member>
        <member name="M:Rhino.Geometry.Box.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.BoundingBox)">
            <summary>
            Initializes a world aligned box from a base plane and a boundingbox.
            </summary>
            <param name="basePlane">Base plane of bounging box.</param>
            <param name="boundingbox">Bounding Box in plane coordinates.</param>
        </member>
        <member name="M:Rhino.Geometry.Box.PointAt(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the box volume at the given unitized parameters.
            <para>The box has idealized side length of 1x1x1.</para>
            </summary>
            <param name="x">Unitized parameter (between 0 and 1 is inside the box) along box X direction.</param>
            <param name="y">Unitized parameter (between 0 and 1 is inside the box) along box Y direction.</param>
            <param name="z">Unitized parameter (between 0 and 1 is inside the box) along box Z direction.</param>
            <returns>The point at (x,y,z).</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Finds the closest point on or in the Box. The box should be Valid for this to work.
            </summary>
            <param name="point">Sample point.</param>
            <returns>The point on or in the box that is closest to the sample point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.FurthestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Finds the furthest point on the Box. The Box should be Valid for this to work properly.
            </summary>
            <param name="point">Sample point.</param>
            <returns>The point on the box that is furthest from the sample point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.Inflate(System.Double)">
            <summary>
            Inflates the box by a given offset in each direction.
            Inflating with negative amounts may result in decreasing boxes. 
            InValid boxes cannot be inflated.
            </summary>
            <param name="amount">Amount (in model units) to inflate this box in all directions.</param>
        </member>
        <member name="M:Rhino.Geometry.Box.Inflate(System.Double,System.Double,System.Double)">
            <summary>
            Inflates the box by a given offset in each direction.
            Inflating with negative amounts may result in decreasing boxes.
            InValid boxes cannot be inflated.
            </summary>
            <param name="xAmount">Amount (in model units) to inflate this box in the x direction.</param>
            <param name="yAmount">Amount (in model units) to inflate this box in the y direction.</param>
            <param name="zAmount">Amount (in model units) to inflate this box in the z direction.</param>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.Point3d)">
            <summary>
            Determines whether a point is included in this box. This is the same as calling Contains(point,false)
            </summary>
            <param name="point">Point to test.</param>
            <returns>true if the point is on the inside of or coincident with this Box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Determines whether a point is included in this box. 
            </summary>
            <param name="point">Point to test.</param>
            <param name="strict">If true, the point needs to be fully on the inside of the Box. 
            I.e. coincident points will be considered 'outside'.</param>
            <returns>true if the point is (strictly) on the inside of this Box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.BoundingBox)">
            <summary>
            Test a boundingbox for Box inclusion. This is the same as calling Contains(box,false)
            </summary>
            <param name="box">Box to test.</param>
            <returns>true if the box is on the inside of or coincident with this Box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.BoundingBox,System.Boolean)">
            <summary>
            Test a boundingbox for Box inclusion.
            </summary>
            <param name="box">Box to test.</param>
            <param name="strict">If true, the boundingbox needs to be fully on the inside of this Box. 
            I.e. coincident boxes will be considered 'outside'.</param>
            <returns>true if the box is (strictly) on the inside of this Box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.Box)">
            <summary>
            Test a box for Box inclusion. This is the same as calling Contains(box,false)
            </summary>
            <param name="box">Box to test.</param>
            <returns>true if the box is on the inside of or coincident with this Box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.Contains(Rhino.Geometry.Box,System.Boolean)">
            <summary>
            Test a box for Box inclusion.
            </summary>
            <param name="box">Box to test.</param>
            <param name="strict">If true, the box needs to be fully on the inside of this Box. 
            I.e. coincident boxes will be considered 'outside'.</param>
            <returns>true if the box is (strictly) on the inside of this Box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.Union(Rhino.Geometry.Point3d)">
            <summary>
            Constructs a union between this Box and the given point. 
            This grows the box in directions so it contains the point.
            </summary>
            <param name="point">Point to include.</param>
        </member>
        <member name="M:Rhino.Geometry.Box.MakeValid">
            <summary>
            Attempts to make the Box valid. This is not always possible.
            </summary>
            <returns>true if the box was made valid, or if it was valid to begin with. 
            false if the box remains in a differently abled state.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.GetCorners">
            <summary>
            Gets an array of the 8 corner points of this box.
            </summary>
            <returns>An array of 8 corners.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms this Box using a Transformation matrix. If the Transform does not preserve 
            Similarity, the dimensions of the resulting box cannot be trusted.
            </summary>
            <param name="xform">Transformation matrix to apply to this Box.</param>
            <returns>true if the Box was successfully transformed, false if otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.RepositionBasePlane(Rhino.Geometry.Point3d)">
            <summary>
            Repositions the origin of the Base plane for this box without affecting 
            the physical dimensions.
            </summary>
            <param name="origin">The new base plane origin.</param>
        </member>
        <member name="M:Rhino.Geometry.Box.ToBrep">
            <summary>
            Constructs a brep representation of this box.
            </summary>
            <returns>A Brep representation of this box or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Box.EpsilonEquals(Rhino.Geometry.Box,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.Box.Empty">
            <summary>
            Empty Box. Empty boxes are considered to be invalid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.Unset">
            <summary>
            Gets a Box whose base plane and axis dimensions are all Unset.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.IsValid">
            <summary>
            Gets the validity of this Box. Boxes are invalid when the base plane or any of 
            the dimension intervals are invalid or decreasing.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.Plane">
            <summary>
            Gets or sets the orientation plane for this Box.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.X">
            <summary>
            Gets or sets the Interval that describes the dimension of the 
            Box along the orientation plane X-Axis. Otherwise known as the Width of the Box.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.Y">
            <summary>
            Gets or sets the Interval that describes the dimension of the 
            Box along the orientation plane Y-Axis. Otherwise known as the Depth of the Box.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.Z">
            <summary>
            Gets or sets the Interval that describes the dimension of the 
            Box along the orientation plane Z-Axis. Otherwise known as the Height of the Box.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.Center">
            <summary>
            Gets the point that is in the center of the box.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.BoundingBox">
            <summary>
            Gets the world axis aligned Bounding box for this oriented box.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.Area">
            <summary>
            Gets the total surface area of this box.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Box.Volume">
            <summary>
            Gets the total volume of this box.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.PipeCapMode">
            <summary> constansts used for CreatePipe functions </summary>
        </member>
        <member name="F:Rhino.Geometry.PipeCapMode.None">
            <summary> No cap </summary>
        </member>
        <member name="F:Rhino.Geometry.PipeCapMode.Flat">
            <summary> Cap with planar surface </summary>
        </member>
        <member name="F:Rhino.Geometry.PipeCapMode.Round">
            <summary> Cap with hemispherical surface </summary>
        </member>
        <member name="T:Rhino.Geometry.LoftType">
            <summary>
            Specifies enumerated constants for all supported loft types.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LoftType.Normal">
            <summary>
            Uses chord-length parameterization in the loft direction.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LoftType.Loose">
            <summary>
            The surface is allowed to move away from the original curves to make a smoother surface.
            The surface control points are created at the same locations as the control points
            of the loft input curves.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LoftType.Tight">
            <summary>
            The surface sticks closely to the original curves. Uses square root of chord-length
            parameterization in the loft direction.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LoftType.Straight">
            <summary>
            The sections between the curves are straight. This is also known as a ruled surface.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LoftType.Developable">
            <summary>
            Constructs a separate developable surface or polysurface from each pair of curves.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LoftType.Uniform">
            <summary>
            Constructs a uniform loft. The object knot vectors will be uniform.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.ExtrudeCornerType">
            <summary>
            Corner types used for creating a tapered extrusion
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ExtrudeCornerType.None">
            <summary>No Corner</summary>
        </member>
        <member name="F:Rhino.Geometry.ExtrudeCornerType.Sharp">
            <summary></summary>
        </member>
        <member name="F:Rhino.Geometry.ExtrudeCornerType.Round">
            <summary></summary>
        </member>
        <member name="F:Rhino.Geometry.ExtrudeCornerType.Smooth">
            <summary></summary>
        </member>
        <member name="F:Rhino.Geometry.ExtrudeCornerType.Chamfer">
            <summary></summary>
        </member>
        <member name="T:Rhino.Geometry.Brep">
            <summary>
            Boundary Representation. A surface or polysurface along with trim curve information.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Brep.TryConvertBrep(Rhino.Geometry.GeometryBase)">
            <summary>
            Attempts to convert a generic Geometry object into a Brep.
            </summary>
            <param name="geometry">Geometry to convert, not all types of GeometryBase can be represented by BReps.</param>
            <returns>Brep if a brep form could be created or null if this is not possible. If geometry was of type Brep to 
            begin with, the same object is returned, i.e. it is not duplicated.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CopyTrimCurves(Rhino.Geometry.BrepFace,Rhino.Geometry.Surface,System.Double)">
            <summary>
            Copy all trims from a Brep face onto a surface.
            </summary>
            <param name="trimSource">Brep face which defines the trimming curves.</param>
            <param name="surfaceSource">The surface to trim.</param>
            <param name="tolerance">Tolerance to use for rebuilding 3D trim curves.</param>
            <returns>A brep with the shape of surfaceSource and the trims of trimSource or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromMesh(Rhino.Geometry.Mesh,System.Boolean)">
            <summary>
            Create a brep representation of a mesh
            </summary>
            <param name="mesh"></param>
            <param name="trimmedTriangles">
            if true, triangles in the mesh will be represented by trimmed planes in
            the brep. If false, triangles in the mesh will be represented by
            untrimmed singular bilinear NURBS surfaces in the brep.
            </param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromBox(Rhino.Geometry.BoundingBox)">
            <summary>
            Constructs new brep that matches a bounding box.
            </summary>
            <param name="box">A box to use for creation.</param>
            <returns>A new brep; or null on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_curvebrepbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_curvebrepbox.cs' lang='cs'/>
            <code source='examples\py\ex_curvebrepbox.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromBox(Rhino.Geometry.Box)">
            <summary>
            Constructs new brep that matches an aligned box.
            </summary>
            <param name="box">Box to match.</param>
            <returns>A Brep with 6 faces that is similar to the Box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromBox(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Constructs new brep from 8 corner points.
            </summary>
            <param name="corners">
            8 points defining the box corners arranged as the vN labels indicate.
            <pre>
            <para>v7_______e6____v6</para>
            <para>|\             |\</para>
            <para>| e7           | e5</para>
            <para>|  \ ______e4_____\</para>
            <para>e11 v4         |   v5</para>
            <para>|   |        e10   |</para>
            <para>|   |          |   |</para>
            <para>v3--|---e2----v2   e9</para>
            <para> \  e8          \  |</para>
            <para> e3 |            e1|</para>
            <para>   \|             \|</para>
            <para>    v0_____e0______v1</para>
            </pre>
            </param>
            <returns>A new box brep, on null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromCylinder(Rhino.Geometry.Cylinder,System.Boolean,System.Boolean)">
            <summary>
            Constructs a Brep definition of a cylinder.
            </summary>
            <param name="cylinder">cylinder.IsFinite() must be true.</param>
            <param name="capBottom">if true end at cylinder.m_height[0] should be capped.</param>
            <param name="capTop">if true end at cylinder.m_height[1] should be capped.</param>
            <returns>
            A Brep representation of the cylinder with a single face for the cylinder,
            an edge along the cylinder seam, and vertices at the bottom and top ends of this
            seam edge. The optional bottom/top caps are single faces with one circular edge
            starting and ending at the bottom/top vertex.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromSphere(Rhino.Geometry.Sphere)">
            <summary>
            Constructs a Brep definition of a sphere.
            </summary>
            <param name="sphere"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromCone(Rhino.Geometry.Cone,System.Boolean)">
            <summary>
            Constructs a Brep representation of the cone with a single
            face for the cone, an edge along the cone seam, 
            and vertices at the base and apex ends of this seam edge.
            The optional cap is a single face with one circular edge 
            starting and ending at the base vertex.
            </summary>
            <param name="cone">A cone value.</param>
            <param name="capBottom">if true the base of the cone should be capped.</param>
            <returns>A new brep, on null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromRevSurface(Rhino.Geometry.RevSurface,System.Boolean,System.Boolean)">
            <summary>
            Constructs a brep form of a surface of revolution.
            </summary>
            <param name="surface">The surface of revolution.</param>
            <param name="capStart">
            if true, the start of the revolute is not on the axis of revolution,
            and the surface of revolution is closed, then a circular cap will be
            added to close of the hole at the start of the revolute.
            </param>
            <param name="capEnd">
            if true, the end of the revolute is not on the axis of revolution,
            and the surface of revolution is closed, then a circular cap will be
            added to close of the hole at the end of the revolute.
            </param>
            <returns>A new brep, on null on error.</returns>
            <example>
            <code source='examples\vbnet\ex_addtruncatedcone.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addtruncatedcone.cs' lang='cs'/>
            <code source='examples\py\ex_addtruncatedcone.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreatePlanarBreps(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Constructs a set of planar breps as outlines by the loops.
            </summary>
            <param name="inputLoops">Curve loops that delineate the planar boundaries.</param>
            <returns>An array of Planar Breps.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreatePlanarBreps(Rhino.Geometry.Curve)">
            <summary>
            Constructs a set of planar breps as outlines by the loops.
            </summary>
            <param name="inputLoop">A curve that should form the boundaries of the surfaces or polysurfaces.</param>
            <returns>An array of Planar Breps.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromSurface(Rhino.Geometry.Surface)">
            <summary>
            Constructs a Brep from a surface. The resulting Brep has an outer boundary made
            from four trims. The trims are ordered so that they run along the south, east,
            north, and then west side of the surface's parameter space.
            </summary>
            <param name="surface">A surface to convert.</param>
            <returns>Resulting brep or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateTrimmedSurface(Rhino.Geometry.BrepFace,Rhino.Geometry.Surface)">
            <summary>
            Constructs a Brep using the trimming information of a brep face and a surface. 
            Surface must be roughly the same shape and in the same location as the trimming brep face.
            </summary>
            <param name="trimSource">BrepFace which contains trimmingSource brep.</param>
            <param name="surfaceSource">Surface that trims of BrepFace will be applied to.</param>
            <returns>A brep with the shape of surfaceSource and the trims of trimSource or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromCornerPoints(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Makes a brep with one face.
            </summary>
            <param name="corner1">A first corner.</param>
            <param name="corner2">A second corner.</param>
            <param name="corner3">A third corner.</param>
            <param name="tolerance">
            Minimum edge length without collapsing to a singularity.
            </param>
            <returns>A boundary representation, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromCornerPoints(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            make a Brep with one face.
            </summary>
            <param name="corner1">A first corner.</param>
            <param name="corner2">A second corner.</param>
            <param name="corner3">A third corner.</param>
            <param name="corner4">A fourth corner.</param>
            <param name="tolerance">
            Minimum edge length allowed before collapsing the side into a singularity.
            </param>
            <returns>A boundary representation, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateEdgeSurface(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Constructs a coons patch from 2, 3, or 4 curves.
            </summary>
            <param name="curves">A list, an array or any enumerable set of curves.</param>
            <returns>resulting brep or null on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_edgesrf.vb' lang='vbnet'/>
            <code source='examples\cs\ex_edgesrf.cs' lang='cs'/>
            <code source='examples\py\ex_edgesrf.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreatePlanarBreps(Rhino.Collections.CurveList)">
            <summary>
            Constructs a set of planar Breps as outlines by the loops.
            </summary>
            <param name="inputLoops">Curve loops that delineate the planar boundaries.</param>
            <returns>An array of Planar Breps or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromOffsetFace(Rhino.Geometry.BrepFace,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Offsets a face including trim information to create a new brep.
            </summary>
            <param name="face">the face to offset.</param>
            <param name="offsetDistance">An offset distance.</param>
            <param name="offsetTolerance">
             Use 0.0 to make a loose offset. Otherwise, the document's absolute tolerance is usually sufficient.
            </param>
            <param name="bothSides">When true, offset to both sides of the input face.</param>
            <param name="createSolid">When true, make a solid object.</param>
            <returns>
            A new brep if successful. The brep can be disjoint if bothSides is true and createSolid is false,
            or if createSolid is true and connecting the offsets with side surfaces fails.
            null if unsuccessful.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateSolid(System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Double)">
            <summary>
            Constructs closed polysurfaces from surfaces and polysurfaces that bound a region in space.
            </summary>
            <param name="breps">
            The intersecting surfaces and polysurfaces to automatically trim and join into closed polysurfaces.
            </param>
            <param name="tolerance">
            The trim and join tolerance. If set to RhinoMath.UnsetValue, Rhino's global absolute tolerance is used.
            </param>
            <returns>The resulting polysurfaces on success or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreatePatch(System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase},Rhino.Geometry.Surface,System.Double)">
            <summary>
            Constructs a brep patch.
            <para>This is the simple version of fit that uses a specified starting surface.</para>
            </summary>
            <param name="geometry">
            Combination of Curves, BrepTrims, Points, PointClouds or Meshes.
            Curves and trims are sampled to get points. Trims are sampled for
            points and normals.
            </param>
            <param name="startingSurface">A starting surface (can be null).</param>
            <param name="tolerance">
            Tolerance used by input analysis functions for loop finding, trimming, etc.
            </param>
            <returns>
            Brep fit through input on success, or null on error.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreatePatch(System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase},System.Int32,System.Int32,System.Double)">
            <summary>
            Constructs a brep patch.
            <para>This is the simple version of fit that uses a plane with u x v spans.
            It makes a plane by fitting to the points from the input geometry to use as the starting surface.
            The surface has the specified u and v span count.</para>
            </summary>
            <param name="geometry">
            A combination of <see cref="T:Rhino.Geometry.Curve">curves</see>, brep trims,
            <see cref="T:Rhino.Geometry.Point">points</see>, <see cref="T:Rhino.Geometry.PointCloud">point clouds</see> or <see cref="T:Rhino.Geometry.Mesh">meshes</see>.
            Curves and trims are sampled to get points. Trims are sampled for
            points and normals.
            </param>
            <param name="uSpans">The number of spans in the U direction.</param>
            <param name="vSpans">The number of spans in the V direction.</param>
            <param name="tolerance">
            Tolerance used by input analysis functions for loop finding, trimming, etc.
            </param>
            <returns>
            A brep fit through input on success, or null on error.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreatePatch(System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase},Rhino.Geometry.Surface,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Double,System.Double,System.Double,System.Boolean[],System.Double)">
             <summary>
             Constructs a brep patch using all controls
             </summary>
             <param name="geometry">
             A combination of <see cref="T:Rhino.Geometry.Curve">curves</see>, brep trims,
             <see cref="T:Rhino.Geometry.Point">points</see>, <see cref="T:Rhino.Geometry.PointCloud">point clouds</see> or <see cref="T:Rhino.Geometry.Mesh">meshes</see>.
             Curves and trims are sampled to get points. Trims are sampled for
             points and normals.
             </param>
             <param name="startingSurface">A starting surface (can be null).</param>
             <param name="uSpans">
             Number of surface spans used when a plane is fit through points to start in the U direction.
             </param>
             <param name="vSpans">
             Number of surface spans used when a plane is fit through points to start in the U direction.
             </param>
             <param name="trim">
             If true, try to find an outer loop from among the input curves and trim the result to that loop
             </param>
             <param name="tangency">
             If true, try to find brep trims in the outer loop of curves and try to
             fit to the normal direction of the trim's surface at those locations.
             </param>
             <param name="pointSpacing">
             Basic distance between points sampled from input curves.
             </param>
             <param name="flexibility">
             Determines the behavior of the surface in areas where its not otherwise
             controlled by the input.  Lower numbers make the surface behave more
             like a stiff material; higher, less like a stiff material.  That is,
             each span is made to more closely match the spans adjacent to it if there
             is no input geometry mapping to that area of the surface when the
             flexibility value is low.  The scale is logrithmic. Numbers around 0.001
             or 0.1 make the patch pretty stiff and numbers around 10 or 100 make the
             surface flexible.
             </param>
             <param name="surfacePull">
             Tends to keep the result surface where it was before the fit in areas where
             there is on influence from the input geometry
             </param>
             <param name="fixEdges">
             Array of four elements. Flags to keep the edges of a starting (untrimmed)
             surface in place while fitting the interior of the surface.  Order of
             flags is left, bottom, right, top
            </param>
             <param name="tolerance">
             Tolerance used by input analysis functions for loop finding, trimming, etc.
             </param>
             <returns>
             A brep fit through input on success, or null on error.
             </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreatePipe(Rhino.Geometry.Curve,System.Double,System.Boolean,Rhino.Geometry.PipeCapMode,System.Boolean,System.Double,System.Double)">
            <summary>
            Creates a single walled pipe
            </summary>
            <param name="rail">the path curve for the pipe</param>
            <param name="radius">radius of the pipe</param>
            <param name="localBlending">
            If True, Local (pipe radius stays constant at the ends and changes more rapidly in the middle) is applied.
            If False, Global (radius is linearly blended from one end to the other, creating pipes that taper from one radius to the other) is applied
            </param>
            <param name="cap">end cap mode</param>
            <param name="fitRail">
            If the curve is a polycurve of lines and arcs, the curve is fit and a single surface is created;
            otherwise the result is a polysurface with joined surfaces created from the polycurve segments.
            </param>
            <param name="absoluteTolerance">
            The sweeping and fitting tolerance. If you are unsure what to use, then use the document's absolute tolerance
            </param>
            <param name="angleToleranceRadians">
            The angle tolerance. If you are unsure what to use, then either use the document's angle tolerance in radians
            </param>
            <returns>Array of created pipes on success</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreatePipe(Rhino.Geometry.Curve,System.Collections.Generic.IEnumerable{System.Double},System.Collections.Generic.IEnumerable{System.Double},System.Boolean,Rhino.Geometry.PipeCapMode,System.Boolean,System.Double,System.Double)">
            <summary>
            Creates a single walled pipe
            </summary>
            <param name="rail">the path curve for the pipe</param>
            <param name="railRadiiParameters">
            one or more normalized curve parameters where changes in radius occur.
            Important: curve parameters must be normalized - ranging between 0.0 and 1.0.
            </param>
            <param name="radii">An array of radii - one at each normalized curve parameter in railRadiiParameters.</param>
            <param name="localBlending">
            If True, Local (pipe radius stays constant at the ends and changes more rapidly in the middle) is applied.
            If False, Global (radius is linearly blended from one end to the other, creating pipes that taper from one radius to the other) is applied
            </param>
            <param name="cap">end cap mode</param>
            <param name="fitRail">
            If the curve is a polycurve of lines and arcs, the curve is fit and a single surface is created;
            otherwise the result is a polysurface with joined surfaces created from the polycurve segments.
            </param>
            <param name="absoluteTolerance">
            The sweeping and fitting tolerance. If you are unsure what to use, then use the document's absolute tolerance
            </param>
            <param name="angleToleranceRadians">
            The angle tolerance. If you are unsure what to use, then either use the document's angle tolerance in radians
            </param>
            <returns>Array of created pipes on success</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromSweep(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Boolean,System.Double)">
            <summary>
            General 1 rail sweep. If you are not producing the sweep results that you are after, then
            use the SweepOneRail class with options to generate the swept geometry
            </summary>
            <param name="rail">Rail to sweep shapes along</param>
            <param name="shape">Shape curve</param>
            <param name="closed">Only matters if shape is closed</param>
            <param name="tolerance">Tolerance for fitting surface and rails</param>
            <returns>Array of Brep sweep results</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromSweep(Rhino.Geometry.Curve,System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Boolean,System.Double)">
            <summary>
            General 1 rail sweep. If you are not producing the sweep results that you are after, then
            use the SweepOneRail class with options to generate the swept geometry
            </summary>
            <param name="rail">Rail to sweep shapes along</param>
            <param name="shapes">Shape curves</param>
            <param name="closed">Only matters if shapes are closed</param>
            <param name="tolerance">Tolerance for fitting surface and rails</param>
            <returns>Array of Brep sweep results</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromSweep(Rhino.Geometry.Curve,Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Boolean,System.Double)">
            <summary>
            General 2 rail sweep. If you are not producing the sweep results that you are after, then
            use the SweepTwoRail class with options to generate the swept geometry
            </summary>
            <param name="rail1">Rail to sweep shapes along</param>
            <param name="rail2">Rail to sweep shapes along</param>
            <param name="shape">Shape curve</param>
            <param name="closed">Only matters if shape is closed</param>
            <param name="tolerance">Tolerance for fitting surface and rails</param>
            <returns>Array of Brep sweep results</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromSweep(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Boolean,System.Double)">
            <summary>
            General 2 rail sweep. If you are not producing the sweep results that you are after, then
            use the SweepTwoRail class with options to generate the swept geometry
            </summary>
            <param name="rail1">Rail to sweep shapes along</param>
            <param name="rail2">Rail to sweep shapes along</param>
            <param name="shapes">Shape curves</param>
            <param name="closed">Only matters if shapes are closed</param>
            <param name="tolerance">Tolerance for fitting surface and rails</param>
            <returns>Array of Brep sweep results</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromTaperedExtrude(Rhino.Geometry.Curve,System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d,System.Double,Rhino.Geometry.ExtrudeCornerType)">
            <summary>
            Extrude a curve to a taper making a brep (potentially more than 1)
            </summary>
            <param name="curveToExtrude">the curve to extrude</param>
            <param name="distance">the distance to extrude</param>
            <param name="direction">the direction of the extrusion</param>
            <param name="basePoint">the basepoint of the extrusion</param>
            <param name="draftAngleRadians">angle of the extrusion</param>
            <param name="cornerType"></param>
            <returns>array of breps on success</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromLoft(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.LoftType,System.Boolean)">
            <summary>
            Constructs one or more Breps by lofting through a set of curves.
            </summary>
            <param name="curves">
            The curves to loft through. This function will not perform any curve sorting. You must pass in
            curves in the order you want them lofted. This function will not adjust the directions of open
            curves. Use Curve.DoDirectionsMatch and Curve.Reverse to adjust the directions of open curves.
            This function will not adjust the seams of closed curves. Use Curve.ChangeClosedCurveSeam to
            adjust the seam of closed curves.
            </param>
            <param name="start">
            Optional starting point of loft. Use Point3d.Unset if you do not want to include a start point.
            </param>
            <param name="end">
            Optional ending point of loft. Use Point3d.Unset if you do not want to include an end point.
            </param>
            <param name="loftType">type of loft to perform.</param>
            <param name="closed">true if the last curve in this loft should be connected back to the first one.</param>
            <returns>
            Constructs a closed surface, continuing the surface past the last curve around to the
            first curve. Available when you have selected three shape curves.
            </returns>
            <example>
            <code source='examples\vbnet\ex_loft.vb' lang='vbnet'/>
            <code source='examples\cs\ex_loft.cs' lang='cs'/>
            <code source='examples\py\ex_loft.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromLoftRebuild(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.LoftType,System.Boolean,System.Int32)">
            <summary>
            Constructs one or more Breps by lofting through a set of curves. Input for the loft is simplified by
            rebuilding to a specified number of control points.
            </summary>
            <param name="curves">
            The curves to loft through. This function will not perform any curve sorting. You must pass in
            curves in the order you want them lofted. This function will not adjust the directions of open
            curves. Use Curve.DoDirectionsMatch and Curve.Reverse to adjust the directions of open curves.
            This function will not adjust the seams of closed curves. Use Curve.ChangeClosedCurveSeam to
            adjust the seam of closed curves.
            </param>
            <param name="start">
            Optional starting point of loft. Use Point3d.Unset if you do not want to include a start point.
            </param>
            <param name="end">
            Optional ending point of lost. Use Point3d.Unset if you do not want to include an end point.
            </param>
            <param name="loftType">type of loft to perform.</param>
            <param name="closed">true if the last curve in this loft should be connected back to the first one.</param>
            <param name="rebuildPointCount">A number of points to use while rebuilding the curves. 0 leaves turns this parameter off.</param>
            <returns>
            Constructs a closed surface, continuing the surface past the last curve around to the
            first curve. Available when you have selected three shape curves.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateFromLoftRefit(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.LoftType,System.Boolean,System.Double)">
            <summary>
            Constructs one or more Breps by lofting through a set of curves. Input for the loft is simplified by
            refitting to a specified tolerance.
            </summary>
            <param name="curves">
            The curves to loft through. This function will not perform any curve sorting. You must pass in
            curves in the order you want them lofted. This function will not adjust the directions of open
            curves. Use Curve.DoDirectionsMatch and Curve.Reverse to adjust the directions of open curves.
            This function will not adjust the seams of closed curves. Use Curve.ChangeClosedCurveSeam to
            adjust the seam of closed curves.
            </param>
            <param name="start">
            Optional starting point of loft. Use Point3d.Unset if you do not want to include a start point.
            </param>
            <param name="end">
            Optional ending point of lost. Use Point3d.Unset if you do not want to include an end point.
            </param>
            <param name="loftType">type of loft to perform.</param>
            <param name="closed">true if the last curve in this loft should be connected back to the first one.</param>
            <param name="refitTolerance">A distance to use in refitting, or 0 if you want to turn this parameter off.</param>
            <returns>
            Constructs a closed surface, continuing the surface past the last curve around to the
            first curve. Available when you have selected three shape curves.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateBooleanUnion(System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Double)">
            <summary>
            Compute the Boolean Union of a set of Breps.
            </summary>
            <param name="breps">Breps to union.</param>
            <param name="tolerance">Tolerance to use for union operation.</param>
            <returns>An array of Brep results or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateBooleanIntersection(System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Double)">
            <summary>
            Compute the Solid Intersection of two sets of Breps.
            </summary>
            <param name="firstSet">First set of Breps.</param>
            <param name="secondSet">Second set of Breps.</param>
            <param name="tolerance">Tolerance to use for intersection operation.</param>
            <returns>An array of Brep results or null on failure.</returns>
            <remarks>The solid orientation of the breps make a difference when calling this function</remarks>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateBooleanIntersection(Rhino.Geometry.Brep,Rhino.Geometry.Brep,System.Double)">
            <summary>
            Compute the Solid Intersection of two Breps.
            </summary>
            <param name="firstBrep">First Brep for boolean intersection.</param>
            <param name="secondBrep">Second Brep for boolean intersection.</param>
            <param name="tolerance">Tolerance to use for intersection operation.</param>
            <returns>An array of Brep results or null on failure.</returns>
            <remarks>The solid orientation of the breps make a difference when calling this function</remarks>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateBooleanDifference(System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Double)">
            <summary>
            Compute the Solid Difference of two sets of Breps.
            </summary>
            <param name="firstSet">First set of Breps (the set to subtract from).</param>
            <param name="secondSet">Second set of Breps (the set to subtract).</param>
            <param name="tolerance">Tolerance to use for difference operation.</param>
            <returns>An array of Brep results or null on failure.</returns>
            <remarks>The solid orientation of the breps make a difference when calling this function</remarks>
            <example>
            <code source='examples\vbnet\ex_booleandifference.vb' lang='vbnet'/>
            <code source='examples\cs\ex_booleandifference.cs' lang='cs'/>
            <code source='examples\py\ex_booleandifference.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateBooleanDifference(Rhino.Geometry.Brep,Rhino.Geometry.Brep,System.Double)">
            <summary>
            Compute the Solid Difference of two Breps.
            </summary>
            <param name="firstBrep">First Brep for boolean difference.</param>
            <param name="secondBrep">Second Brep for boolean difference.</param>
            <param name="tolerance">Tolerance to use for difference operation.</param>
            <returns>An array of Brep results or null on failure.</returns>
            <remarks>The solid orientation of the breps make a difference when calling this function</remarks>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateShell(Rhino.Geometry.Brep,System.Collections.Generic.IEnumerable{System.Int32},System.Double,System.Double)">
            <summary>
            Creates a hollowed out shell from a solid Brep. Function only operates on simple, solid, manifold Breps.
            </summary>
            <param name="brep">The solid Brep to shell.</param>
            <param name="facesToRemove">The indices of the Brep faces to remove. These surfaces are removed and the remainder is offset inward, using the outer parts of the removed surfaces to join the inner and outer parts.</param>
            <param name="distance">The distance, or thickness, for the shell. This is a signed distance value with respect to face normals and flipped faces.</param>
            <param name="tolerance">The offset tolerane. When in doubt, use the document's absolute tolerance.</param>
            <returns>An array of Brep results or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.JoinBreps(System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Double)">
            <summary>
            Joins the breps in the input array at any overlapping edges to form
            as few as possible resulting breps. There may be more than one brep in the result array.
            </summary>
            <param name="brepsToJoin">A list, an array or any enumerable set of breps to join.</param>
            <param name="tolerance">3d distance tolerance for detecting overlapping edges.</param>
            <returns>new joined breps on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.MergeBreps(System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Double)">
            <summary>
            Combines two or more breps into one. A merge is like a boolean union that keeps the inside pieces. This
            function creates non-manifold Breps which in general are unusual in Rhino. You may want to consider using
            JoinBreps or CreateBooleanUnion functions instead.
            </summary>
            <param name="brepsToMerge">must contain more than one Brep.</param>
            <param name="tolerance">the tolerance to use when merging.</param>
            <returns>Single merged Brep on success. Null on error.</returns>
            <seealso cref="M:Rhino.Geometry.Brep.JoinBreps(System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Double)"/>
            <seealso cref="M:Rhino.Geometry.Brep.CreateBooleanUnion(System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Double)"/>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateContourCurves(Rhino.Geometry.Brep,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Constructs the contour curves for a brep at a specified interval.
            </summary>
            <param name="brepToContour">A brep or polysurface.</param>
            <param name="contourStart">A point to start.</param>
            <param name="contourEnd">A point to use as the end.</param>
            <param name="interval">The interaxial offset in world units.</param>
            <returns>An array with intersected curves. This array can be empty.</returns>
            <example>
            <code source='examples\vbnet\ex_makerhinocontours.vb' lang='vbnet'/>
            <code source='examples\cs\ex_makerhinocontours.cs' lang='cs'/>
            <code source='examples\py\ex_makerhinocontours.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Brep.CreateContourCurves(Rhino.Geometry.Brep,Rhino.Geometry.Plane)">
            <summary>
            Constructs the contour curves for a brep, using a slicing plane.
            </summary>
            <param name="brepToContour">A brep or polysurface.</param>
            <param name="sectionPlane">A plane.</param>
            <returns>An array with intersected curves. This array can be empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.#ctor">
            <summary>Initializes a new empty brep</summary>
        </member>
        <member name="M:Rhino.Geometry.Brep.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Brep.GetRegions">
            <summary>
            Gets an array containing all regions in this brep.
            </summary>
            <returns>An array of regions in this brep. This array can be empty, but not null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.Duplicate">
            <summary>
            Copies this brep.
            </summary>
            <returns>A brep.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.DuplicateBrep">
            <summary>
            Same as <see cref="M:Rhino.Geometry.Brep.Duplicate"/>, but already performs a cast to a brep.
            <para>This cast always succeeds.</para>
            </summary>
            <returns>A brep.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.DuplicateSubBrep(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Copy a subset of this Brep into another Brep.
            </summary>
            <param name="faceIndices">
            array of face indices in this brep to copy.
            (If any values in faceIndices are out of range or if faceIndices contains
            duplicates, this function will return null.)
            </param>
            <returns>A brep, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.DuplicateEdgeCurves">
            <summary>
            Duplicate all the edges of this Brep.
            </summary>
            <returns>An array of edge curves.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.DuplicateEdgeCurves(System.Boolean)">
            <summary>
            Duplicate edges of this Brep.
            </summary>
            <param name="nakedOnly">
            If true, then only the "naked" edges are duplicated.
            If false, then all edges are duplicated.
            </param>
            <returns>Array of edge curves on success.</returns>
            <example>
            <code source='examples\vbnet\ex_dupborder.vb' lang='vbnet'/>
            <code source='examples\cs\ex_dupborder.cs' lang='cs'/>
            <code source='examples\py\ex_dupborder.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Brep.DuplicateNakedEdgeCurves(System.Boolean,System.Boolean)">
            <summary>
            Duplicate naked edges of this Brep
            </summary>
            <param name="outer"></param>
            <param name="inner"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.GetWireframe(System.Int32)">
            <summary>
            Constructs all the Wireframe curves for this Brep.
            </summary>
            <param name="density">Wireframe density. Valid values range between -1 and 99.</param>
            <returns>An array of Wireframe curves or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.DuplicateVertices">
            <summary>
            Duplicate all the corner vertices of this Brep.
            </summary>
            <returns>An array or corner vertices.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.Flip">
            <summary>
            Reverses entire brep orientation of all faces.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Brep.IsDuplicate(Rhino.Geometry.Brep,System.Double)">
            <summary>See if this and other are same brep geometry.</summary>
            <param name="other">other brep.</param>
            <param name="tolerance">tolerance to use when comparing control points.</param>
            <returns>true if breps are the same.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.IsValidTopology(System.String@)">
            <summary>
            Tests the brep to see if its topology information is valid.
            </summary>
            <param name="log">
            If the brep topology is not valid, then a brief english description of
            the problem is appended to the log.  The information appended to log is
            suitable for low-level debugging purposes by programmers and is not
            intended to be useful as a high level user interface tool.
            </param>
            <returns>true if the topology is valid; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.IsValidGeometry(System.String@)">
            <summary>
            Expert user function that tests the brep to see if its geometry information is valid.
            The value of brep.IsValidTopology() must be true before brep.IsValidGeometry() can be
            safely called.
            </summary>
            <param name="log">
            If the brep geometry is not valid, then a brief description of the problem
            in English is assigned to this out parameter. The information is suitable for
            low-level debugging purposes by programmers and is not intended to be
            useful as a high level user interface tool. Otherwise, <see cref="F:System.String.Empty"/>.
            </param>
            <returns>A value that indicates whether the geometry is valid.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.IsValidTolerancesAndFlags(System.String@)">
            <summary>
            Expert user function that tests the brep to see if its tolerances and
            flags are valid.  The values of brep.IsValidTopology() and
            brep.IsValidGeometry() must be true before brep.IsValidTolerancesAndFlags()
            can be safely called.
            </summary>
            <param name="log">
            If the brep tolerance or flags are not valid, then a brief description 
            of the problem in English is assigned to this out parameter. The information is
            suitable for low-level debugging purposes by programmers and is not
            intended to be useful as a high level user interface tool. Otherwise, <see cref="F:System.String.Empty"/>.
            </param>
            <returns>A value that indicates </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Finds a point on the brep that is closest to testPoint.
            </summary>
            <param name="testPoint">Base point to project to brep.</param>
            <returns>The point on the Brep closest to testPoint or Point3d.Unset if the operation failed.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.ClosestPoint(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d@,Rhino.Geometry.ComponentIndex@,System.Double@,System.Double@,System.Double,Rhino.Geometry.Vector3d@)">
            <summary>
            Finds a point on a brep that is closest to testPoint.
            </summary>
            <param name="testPoint">base point to project to surface.</param>
            <param name="closestPoint">location of the closest brep point.</param>
            <param name="ci">Component index of the brep component that contains
            the closest point. Possible types are brep_face, brep_edge or brep_vertex.</param>
            <param name="s">If the ci type is brep_edge, then s is the parameter
            of the closest edge point.</param>
            <param name="t">If the ci type is brep_face, then (s,t) is the parameter
            of the closest edge point.</param>
            <param name="maximumDistance">
            If maximumDistance &gt; 0, then only points whose distance
            is &lt;= maximumDistance will be returned. Using a positive
            value of maximumDistance can substantially speed up the search.</param>
            <param name="normal">The normal to the face if ci is a brep_face
            and the tangent to the edge if ci is brep_edge.
            </param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.IsPointInside(Rhino.Geometry.Point3d,System.Double,System.Boolean)">
            <summary>
            Determines if point is inside Brep.  This question only makes sense when
            the brep is a closed manifold.  This function does not not check for
            closed or manifold, so result is not valid in those cases.  Intersects
            a line through point with brep, finds the intersection point Q closest
            to point, and looks at face normal at Q.  If the point Q is on an edge
            or the intersection is not transverse at Q, then another line is used.
            </summary>
            <param name="point">3d point to test.</param>
            <param name="tolerance">
            3d distance tolerance used for intersection and determining strict inclusion.
            A good default is RhinoMath.SqrtEpsilon.
            </param>
            <param name="strictlyIn">
            if true, point is in if inside brep by at least tolerance.
            if false, point is in if truly in or within tolerance of boundary.
            </param>
            <returns>
            true if point is in, false if not.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CapPlanarHoles(System.Double)">
            <summary>
            Returns a new Brep that is equivalent to this Brep with all planar holes capped.
            </summary>
            <param name="tolerance">Tolerance to use for capping.</param>
            <returns>New brep on success. null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.Join(Rhino.Geometry.Brep,System.Double,System.Boolean)">
            <summary>
            If any edges of this brep overlap edges of otherBrep, merge a copy of otherBrep into this
            brep joining all edges that overlap within tolerance.
            </summary>
            <param name="otherBrep">Brep to be added to this brep.</param>
            <param name="tolerance">3d distance tolerance for detecting overlapping edges.</param>
            <param name="compact">if true, set brep flags and tolerances, remove unused faces and edges.</param>
            <returns>true if any edges were joined.</returns>
            <remarks>
            if no edges overlap, this brep is unchanged.
            otherBrep is copied if it is merged with this, and otherBrep is always unchanged
            Use this to join a list of breps in a series.
            When joining multiple breps in series, compact should be set to false.
            Call compact on the last Join.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Brep.JoinNakedEdges(System.Double)">
            <summary>
            Joins naked edge pairs within the same brep that overlap within tolerance.
            </summary>
            <param name="tolerance">The tolerance value.</param>
            <returns>number of joins made.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.MergeCoplanarFaces(System.Double)">
            <summary>
            Merges adjacent coplanar faces into single faces.
            </summary>
            <param name="tolerance">3d tolerance for determining when edges are adjacent.</param>
            <returns>true if faces were merged.  false if no faces were merged.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.Split(Rhino.Geometry.Brep,System.Double)">
            <summary>
            Splits a Brep into pieces.
            </summary>
            <param name="splitter">A splitting surface or polysurface.</param>
            <param name="intersectionTolerance">The tolerance with which to compute intersections.</param>
            <returns>A new array of breps. This array can be empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.Split(Rhino.Geometry.Brep,System.Double,System.Boolean@)">
            <summary>
            Splits a Brep into pieces.
            </summary>
            <param name="splitter">The splitting polysurface.</param>
            <param name="intersectionTolerance">The tolerance with which to compute intersections.</param>
            <param name="toleranceWasRaised">
            set to true if the split failed at intersectionTolerance but succeeded
            when the tolerance was increased to twice intersectionTolerance.
            </param>
            <returns>A new array of breps. This array can be empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.Trim(Rhino.Geometry.Brep,System.Double)">
            <summary>
            Trims a brep with an oriented cutter. The parts of the brep that lie inside
            (opposite the normal) of the cutter are retained while the parts to the
            outside (in the direction of the normal) are discarded.  If the Cutter is
            closed, then a connected component of the Brep that does not intersect the
            cutter is kept if and only if it is contained in the inside of cutter.
            That is the region bounded by cutter opposite from the normal of cutter,
            If cutter is not closed all these components are kept.
            </summary>
            <param name="cutter">A cutting brep.</param>
            <param name="intersectionTolerance">A tolerance value with which to compute intersections.</param>
            <returns>This Brep is not modified, the trim results are returned in an array.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.Trim(Rhino.Geometry.Plane,System.Double)">
            <summary>
            Trims a Brep with an oriented cutter.  The parts of Brep that lie inside
            (opposite the normal) of the cutter are retained while the parts to the
            outside ( in the direction of the normal ) are discarded. A connected
            component of Brep that does not intersect the cutter is kept if and only
            if it is contained in the inside of Cutter.  That is the region bounded by
            cutter opposite from the normal of cutter, or in the case of a Plane cutter
            the halfspace opposite from the plane normal.
            </summary>
            <param name="cutter">A cutting plane.</param>
            <param name="intersectionTolerance">A tolerance value with which to compute intersections.</param>
            <returns>This Brep is not modified, the trim results are returned in an array.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.GetArea">
            <summary>
            Compute the Area of the Brep. If you want proper Area data with moments 
            and error information, use the AreaMassProperties class.
            </summary>
            <returns>The area of the Brep.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.GetArea(System.Double,System.Double)">
            <summary>
            Compute the Area of the Brep. If you want proper Area data with moments 
            and error information, use the AreaMassProperties class.
            </summary>
            <param name="relativeTolerance">Relative tolerance to use for area calculation.</param>
            <param name="absoluteTolerance">Absolute tolerance to use for area calculation.</param>
            <returns>The area of the Brep.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.GetVolume">
            <summary>
            Compute the Volume of the Brep. If you want proper Volume data with moments 
            and error information, use the VolumeMassProperties class.
            </summary>
            <returns>The volume of the Brep.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.GetVolume(System.Double,System.Double)">
            <summary>
            Compute the Volume of the Brep. If you want proper Volume data with moments 
            and error information, use the VolumeMassProperties class.
            </summary>
            <param name="relativeTolerance">Relative tolerance to use for area calculation.</param>
            <param name="absoluteTolerance">Absolute tolerance to use for area calculation.</param>
            <returns>The volume of the Brep.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.AddTrimCurve(Rhino.Geometry.Curve)">
            <summary>
            Add a 2d curve used by the brep trims
            </summary>
            <param name="curve"></param>
            <returns>
            Index used to reference this geometry in the trimming curve list
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.AddEdgeCurve(Rhino.Geometry.Curve)">
            <summary>
            Add a 3d curve used by the brep edges
            </summary>
            <param name="curve"></param>
            <returns>
            Index used to reference this geometry in the edge curve list
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.AddSurface(Rhino.Geometry.Surface)">
            <summary>
            Adds a 3D surface used by BrepFace.
            </summary>
            <param name="surface">A copy of the surface is added to this brep.</param>
            <returns>
            Index that should be used to reference the geometry.
            <para>-1 is returned if the input is not acceptable.</para>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.Append(Rhino.Geometry.Brep)">
            <summary>
            Appends a copy of another brep to this and updates indices of appended
            brep parts.  Duplicates are not removed
            </summary>
            <param name="other"></param>
        </member>
        <member name="M:Rhino.Geometry.Brep.SetVertices">
            <summary>
            This function can be used to compute vertex information for a
            b-rep when everything but the Vertices array is properly filled in.
            It is intended to be used when creating a Brep from a 
            definition that does not include explicit vertex information.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Brep.SetTrimIsoFlags">
            <summary>
            This function can be used to set the BrepTrim::m_iso
            flag. It is intended to be used when creating a Brep from
            a definition that does not include compatible parameter space
            type information.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Brep.RebuildTrimsForV2(Rhino.Geometry.BrepFace,Rhino.Geometry.NurbsSurface)">
            <summary>
            No support is available for this function.
            <para>Expert user function used by MakeValidForV2 to convert trim
            curves from one surface to its NURBS form. After calling this function,
            you need to change the surface of the face to a NurbsSurface.</para>
            </summary>
            <param name="face">
            Face whose underlying surface has a parameterization that is different
            from its NURBS form.
            </param>
            <param name="nurbsSurface">NURBS form of the face's underlying surface.</param>
            <remarks>
            Don't call this function unless you know exactly what you are doing.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Brep.Compact">
            <summary>
            Deletes any unreferenced objects from arrays, reindexes as needed, and
            shrinks arrays to minimum required size. Uses CUllUnused* members to
            delete any unreferenced objects from arrays.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Brep.CullUnusedFaces">
            <summary>Culls faces with m_face_index == -1.</summary>
            <returns>true if operation succeeded; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CullUnusedLoops">
            <summary>Culls loops with m_loop_index == -1.</summary>
            <returns>true if operation succeeded; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CullUnusedTrims">
            <summary>Culls trims with m_trim_index == -1.</summary>
            <returns>true if operation succeeded; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CullUnusedEdges">
            <summary>Culls edges with m_edge_index == -1.</summary>
            <returns>true if operation succeeded; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CullUnusedVertices">
            <summary>Culls vertices with m_vertex_index == -1.</summary>
            <returns>true if operation succeeded; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CullUnused3dCurves">
            <summary>Culls 2d curves not referenced by a trim.</summary>
            <returns>true if operation succeeded; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CullUnused2dCurves">
            <summary>Culls 3d curves not referenced by an edge.</summary>
            <returns>true if operation succeeded; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.CullUnusedSurfaces">
            <summary>Culls surfaces not referenced by a face.</summary>
            <returns>true if operation succeeded; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Brep.Standardize">
            <summary>
            Standardizes all trims, edges, and faces in the brep.
            After standardizing, there may be unused curves and surfaces in the
            brep.  Call Brep.Compact to remove these unused curves and surfaces.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Brep.Vertices">
            <summary>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Brep.Surfaces">
            <summary> Parametric surfaces used by faces </summary>
        </member>
        <member name="P:Rhino.Geometry.Brep.Edges">
            <summary>
            Gets the brep edges list accessor.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Brep.Trims">
            <summary>
            Gets the brep trims list accessor.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Brep.Loops">
            <summary>
            Gets the brep loop list accessor.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Brep.Faces">
            <summary>
            Gets the brep faces list accessor.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Brep.Curves2D">
            <summary>
            Parameter space trimming curves (used by trims)
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Brep.Curves3D">
            <summary>
            Pointers to 3d curves (used by edges)
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Brep.IsSolid">
            <summary>
            Determines whether this brep is a solid, or a closed oriented manifold.
            </summary>
            <example>
            <code source='examples\vbnet\ex_isbrepbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_isbrepbox.cs' lang='cs'/>
            <code source='examples\py\ex_isbrepbox.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.Brep.SolidOrientation">
            <summary>
            Gets the solid orientation state of this Brep.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Brep.IsManifold">
            <summary>
            Gets a value indicating whether or not the Brep is manifold. 
            Non-Manifold breps have at least one edge that is shared among three or more faces.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Brep.IsSurface">
            <summary>
            Returns true if the Brep has a single face and that face is geometrically the same
            as the underlying surface.  I.e., the face has trivial trimming.
            <para>In this case, the surface is the first face surface. The flag
            Brep.Faces[0].OrientationIsReversed records the correspondence between the surface's
            natural parametric orientation and the orientation of the Brep.</para>
            <para>trivial trimming here means that there is only one loop curve in the brep
            and that loop curve is the same as the underlying surface boundary.</para>
            </summary>
        </member>
        <member name="T:Rhino.Geometry.PointFaceRelation">
            <summary>
            Enumerates the possible point/BrepFace spatial relationships.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointFaceRelation.Exterior">
            <summary>
            Point is on the exterior (the trimmed part) of the face.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointFaceRelation.Interior">
            <summary>
            Point is on the interior (the existing part) of the face.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointFaceRelation.Boundary">
            <summary>
            Point is in limbo.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.BrepSolidOrientation">
            <summary>
            Enumerates all possible Solid Orientations for a Brep.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepSolidOrientation.None">
            <summary>
            Brep is not a Solid.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepSolidOrientation.Inward">
            <summary>
            Brep is a Solid with inward facing normals.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepSolidOrientation.Outward">
            <summary>
            Brep is a Solid with outward facing normals.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepSolidOrientation.Unknown">
            <summary>
            Breps is a Solid but no orientation could be computed.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.EdgeAdjacency">
            <summary>
            Enumerates all possible Topological Edge adjacency types.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.EdgeAdjacency.None">
            <summary>
            Edge is not used by any faces and is therefore superfluous.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.EdgeAdjacency.Naked">
            <summary>
            Edge is used by a single face.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.EdgeAdjacency.Interior">
            <summary>
            Edge is used by two adjacent faces.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.EdgeAdjacency.NonManifold">
            <summary>
            Edge is used by three or more adjacent faces.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.BrepVertex">
            <summary>
            Brep vertex information
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Point">
            <summary>
            Represents a geometric point.
            <para>This is fundamentally a class that derives from
            <see cref="T:Rhino.Geometry.GeometryBase"/> and contains a single <see cref="T:Rhino.Geometry.Point3d"/> location.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point.#ctor(Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new point instance with a location.
            </summary>
            <param name="location">A position in 3D space.</param>
        </member>
        <member name="M:Rhino.Geometry.Point.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="P:Rhino.Geometry.Point.Location">
            <summary>
            Gets or sets the location (position) of this point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepVertex.Brep">
            <summary>
            Gets the Brep that owns this vertex.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepVertex.VertexIndex">
            <summary>
            Gets the index of this vertex in the Brep.Vertices collection.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.BrepEdge">
            <summary>
            Represents a single edge curve in a Brep object.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveProxy">
            <summary>
            Provides strongly-typed access to Brep edges.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.CurveProxy.#ctor">
            <summary>
            Protected constructor for internal use.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.CurveProxy.ProxyCurveIsReversed">
            <summary>
            True if "this" is a curve is reversed from the "real" curve geometry
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BrepEdge.IsSmoothManifoldEdge(System.Double)">
            <summary>
            For a manifold, non-boundary edge, decides whether or not the two surfaces
            on either side meet smoothly.
            </summary>
            <param name="angleToleranceRadians">
            used to decide if surface normals on either side are parallel.
            </param>
            <returns>
            true if edge is manifold, has exactly 2 trims, and surface normals on either
            side agree to within angle_tolerance.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.BrepEdge.AdjacentFaces">
            <summary>
            Gets the indices of all the BrepFaces that use this edge.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BrepEdge.SetEdgeCurve(System.Int32)">
            <summary>
            Set 3d curve geometry used by a b-rep edge.
            </summary>
            <param name="curve3dIndex">index of 3d curve in m_C3[] array</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepEdge.SetEdgeCurve(System.Int32,Rhino.Geometry.Interval)">
            <summary>
            Set 3d curve geometry used by a b-rep edge.
            </summary>
            <param name="curve3dIndex">index of 3d curve in m_C3[] array</param>
            <param name="subDomain"></param>
            <returns>true if successful</returns>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.Tolerance">
             <summary>
             Gets or sets the accuracy of the edge curve (>=0.0 or RhinoMath.UnsetValue)
             A value of UnsetValue indicates that the tolerance should be computed.
            
             The maximum distance from the edge's 3d curve to any surface of a face
             that has this edge as a portion of its boundary must be &lt;= this tolerance.
             </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.TrimCount">
            <summary>
            Gets the number of trim-curves that use this edge.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.Valence">
            <summary>
            Gets the topological valency of this edge. The topological valency 
            is defined by how many adjacent faces share this edge.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.Brep">
            <summary>
            Gets the Brep that owns this edge.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.EdgeIndex">
            <summary>
            Gets the index of this edge in the Brep.Edges collection.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.StartVertex">
            <summary>
            BrepVertex at start of edge
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepEdge.EndVertex">
            <summary>
            BrepVertex at end of edge
            </summary>
        </member>
        <member name="T:Rhino.Geometry.BrepTrimType">
            <summary>
            Each brep trim has a defined type.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepTrimType.Unknown">
            <summary>Unknown type</summary>
        </member>
        <member name="F:Rhino.Geometry.BrepTrimType.Boundary">
            <summary>
            Trim is connected to an edge, is part of an outer, inner or
            slit loop, and is the only trim connected to the edge.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepTrimType.Mated">
            <summary>
            Trim is connected to an edge, is part of an outer, inner or slit loop,
            no other trim from the same loop is connected to the edge, and at least
            one trim from a different loop is connected to the edge.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepTrimType.Seam">
            <summary>
            trim is connected to an edge, is part of an outer, inner or slit loop,
            and one other trim from the same loop is connected to the edge.
            (There can be other mated trims that are also connected to the edge.
            For example, the non-mainfold edge that results when a surface edge lies
            in the middle of another surface.)  Non-mainfold "cuts" have seam trims too.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepTrimType.Singular">
            <summary>
            Trim is part of an outer loop, the trim's 2d curve runs along the singular
            side of a surface, and the trim is NOT connected to an edge. (There is
            no 3d edge because the surface side is singular.)
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepTrimType.CurveOnSurface">
            <summary>
            Trim is connected to an edge, is the only trim in a crfonsrf loop, and
            is the only trim connected to the edge.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepTrimType.PointOnSurface">
            <summary>
            Trim is a point on a surface, trim.m_pbox is records surface parameters,
            and is the only trim in a ptonsrf loop.  This trim is not connected to
            an edge and has no 2d curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepTrimType.Slit">
            <summary></summary>
        </member>
        <member name="T:Rhino.Geometry.BrepTrim">
            <summary>
            Brep trim information is stored in BrepTrim classes. Brep.Trims is an
            array of all the trims in the brep. A BrepTrim is derived from CurveProxy
            so the trim can supply easy to use evaluation tools via the Curve virtual
            member functions.
            Note well that the domains and orientations of the curve m_C2[trim.m_c2i]
            and the trim as a curve may not agree.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BrepTrim.GetTolerances(System.Double@,System.Double@)">
             <summary>
             The values in tolerance[] record the accuracy of the parameter space
             trimming curves.
             </summary>
             <remarks>
             <para>tolerance[0] = accuracy of parameter space curve in first ("u") parameter</para>
             <para>tolerance[1] = accuracy of parameter space curve in second ("v") parameter</para>
             <para>
             A value of RhinoMath.UnsetValue indicates that the tolerance should be computed.
             If the value &gt;= 0.0, then the tolerance is set.
             If the value is RhinoMath.UnsetValue, then the tolerance needs to be computed.
             </para>
             <para>
             If the trim is not singular, then the trim must have an edge. If P is a
             3d point on the edge's curve and surface(u,v) = Q is the point on the
             surface that is closest to P, then there must be a parameter t in the
             interval [m_t[0], m_t[1]] such that
              |u - curve2d(t)[0]| &lt;= tolerance[0]
             and
              |v - curve2d(t)[1]| &lt;= tolerance[1]
            
             If P is the 3d point for the vertex brep.m_V[m_vi[k]] and (uk,vk) is the
             corresponding end of the trim's parameter space curve, then there must be
             a surface parameter (u,v) such that:
             </para>
             <list type="bullet">
             <item><description>
             the distance from the 3d point surface(u,v) to P is &lt;= brep.m_V[m_vi[k]].m_tolerance,
             </description></item>
             <item><description>|u-uk| &lt;= tolerance[0].</description></item>
             <item><description>|v-vk| &lt;= tolerance[1].</description></item>
             </list>
             </remarks>
             <param name="toleranceU"></param>
             <param name="toleranceV"></param>
        </member>
        <member name="M:Rhino.Geometry.BrepTrim.SetTolerances(System.Double,System.Double)">
             <summary>
             The values in tolerance[] record the accuracy of the parameter space
             trimming curves.
             </summary>
             <remarks>
             <para>tolerance[0] = accuracy of parameter space curve in first ("u") parameter</para>
             <para>tolerance[1] = accuracy of parameter space curve in second ("v") parameter</para>
             <para>
             A value of RhinoMath.UnsetValue indicates that the tolerance should be computed.
             If the value &gt;= 0.0, then the tolerance is set.
             If the value is RhinoMath.UnsetValue, then the tolerance needs to be computed.
             </para>
             <para>
             If the trim is not singular, then the trim must have an edge. If P is a
             3d point on the edge's curve and surface(u,v) = Q is the point on the
             surface that is closest to P, then there must be a parameter t in the
             interval [m_t[0], m_t[1]] such that
              |u - curve2d(t)[0]| &lt;= tolerance[0]
             and
              |v - curve2d(t)[1]| &lt;= tolerance[1]
            
             If P is the 3d point for the vertex brep.m_V[m_vi[k]] and (uk,vk) is the
             corresponding end of the trim's parameter space curve, then there must be
             a surface parameter (u,v) such that:
             </para>
             <list type="bullet">
             <item><description>
             the distance from the 3d point surface(u,v) to P is &lt;= brep.m_V[m_vi[k]].m_tolerance,
             </description></item>
             <item><description>|u-uk| &lt;= tolerance[0].</description></item>
             <item><description>|v-vk| &lt;= tolerance[1].</description></item>
             </list>
             </remarks>
             <param name="toleranceU"></param>
             <param name="toleranceV"></param>
        </member>
        <member name="M:Rhino.Geometry.BrepTrim.SetTrimCurve(System.Int32)">
            <summary>
            Set 2d curve geometry used by a b-rep trim.
            </summary>
            <param name="curve2dIndex">index of 2d curve in m_C2[] array</param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepTrim.SetTrimCurve(System.Int32,Rhino.Geometry.Interval)">
            <summary>
            Set 2d curve geometry used by a b-rep trim.
            </summary>
            <param name="curve2dIndex">index of 2d curve in m_C2[] array</param>
            <param name="subDomain"></param>
            <returns>true if successful</returns>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.Brep">
            <summary>
            Gets the Brep that owns this trim.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.Loop">
            <summary>
            Loop that this trim belongs to
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.Face">
            <summary>
            Brep face this trim belongs to
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.Edge">
            <summary>
            Brep edge this trim belongs to. This will be null for singular trims
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.TrimIndex">
            <summary>
            Gets the index of this trim in the Brep.Trims collection.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.TrimType">
            <summary>Type of trim</summary>
        </member>
        <member name="P:Rhino.Geometry.BrepTrim.IsoStatus">
            <summary></summary>
        </member>
        <member name="T:Rhino.Geometry.BrepLoopType">
            <summary>
            Each brep loop has a defined type, e.g. outer, inner or point on surface.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepLoopType.Unknown">
            <summary>
            Unknown loop type.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepLoopType.Outer">
            <summary>
            2d loop curves form a simple closed curve with a counterclockwise orientation.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepLoopType.Inner">
            <summary>
            2d loop curves form a simple closed curve with a clockwise orientation.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepLoopType.Slit">
            <summary>
            Always closed - used internally during splitting operations.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepLoopType.CurveOnSurface">
            <summary>
            "loop" is a curveonsrf made from a single (open or closed) trim that
            has type TrimType.CurveOnSurface.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BrepLoopType.PointOnSurface">
            <summary>
            "loop" is a PointOnSurface made from a single trim that has
            type TrimType.PointOnSurface.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.BrepLoop">
            <summary>
            Represent a single loop in a Brep object. A loop is composed
            of a list of trim curves.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BrepLoop.To3dCurve">
            <summary>
            Create a 3D curve that approximates the loop geometry.
            </summary>
            <returns>A 3D curve that approximates the loop or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepLoop.To2dCurve">
            <summary>
            Create a 2d curve that traces the entire loop
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.BrepLoop.Brep">
            <summary>
            Gets the Brep that owns this loop.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepLoop.LoopIndex">
            <summary>
            Gets the index of this loop in the Brep.Loops collection.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepLoop.Face">
            <summary>
            BrepFace this loop belongs to.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepLoop.LoopType">
            <summary>
            type of loop.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepLoop.Trims">
            <summary>
            List of trims for this loop
            </summary>
        </member>
        <member name="T:Rhino.Geometry.BrepFace">
            <summary>
            Provides strongly-typed access to brep faces.
            <para>A Brep face is composed of one surface and trimming curves.</para>
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SurfaceProxy">
            <summary>
            Provides a base class to brep faces and other surface proxies.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SurfaceProxy.#ctor">
            <summary>
            Protected constructor for internal use.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.PullPointsToFace(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double)">
            <summary>
            Pulls one or more points to a brep face.
            </summary>
            <param name="points">Points to pull.</param>
            <param name="tolerance">Tolerance for pulling operation. Only points that are closer than tolerance will be pulled to the face.</param>
            <returns>An array of pulled points.</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.CreateExtrusion(Rhino.Geometry.Curve,System.Boolean)">
            <summary>
            Extrude a face in a Brep.
            </summary>
            <param name="pathCurve">The path to extrude along.</param>
            <param name="cap">If true, the extrusion is capped with a translation of the face being extruded</param>
            <returns>A Brep on success or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.SetDomain(System.Int32,Rhino.Geometry.Interval)">
            <summary>
            Sets the surface domain of this face.
            </summary>
            <param name="direction">Direction of face to set (0 = U, 1 = V).</param>
            <param name="domain">Domain to apply.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.DuplicateFace(System.Boolean)">
            <summary>
            Duplicate a face from the brep to create new single face brep.
            </summary>
            <param name="duplicateMeshes">If true, shading meshes will be copied as well.</param>
            <returns>A new single-face brep synonymous with the current Face.</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.DuplicateSurface">
            <summary>
            Gets a copy to the untrimmed surface that this face is based on.
            </summary>
            <returns>A copy of this face's underlying surface.</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.UnderlyingSurface">
            <summary>
            Gets the untrimmed surface that is the base of this face.
            </summary>
            <returns>A surface, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.Split(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Double)">
            <summary>
            Split this face using 3D trimming curves.
            </summary>
            <param name="curves">Curves to split with.</param>
            <param name="tolerance">Tolerance for splitting, when in doubt use the Document Absolute Tolerance.</param>
            <returns>A brep consisting of all the split fragments, or null on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_tightboundingbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_tightboundingbox.cs' lang='cs'/>
            <code source='examples\py\ex_tightboundingbox.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.IsPointOnFace(System.Double,System.Double)">
            <summary>
            Tests if a parameter space point is on the interior of a trimmed face.
            </summary>
            <param name="u">Parameter space point u value.</param>
            <param name="v">Parameter space point v value.</param>
            <returns>A value describing the spatial relationship between the point and the face.</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.TrimAwareIsoIntervals(System.Int32,System.Double)">
            <summary>
            Gets intervals where the iso curve exists on a BrepFace (trimmed surface)
            </summary>
            <param name="direction">Direction of isocurve.
            <para>0 = Isocurve connects all points with a constant U value.</para>
            <para>1 = Isocurve connects all points with a constant V value.</para>
            </param>
            <param name="constantParameter">Surface parameter that remains identical along the isocurves.</param>
            <returns>
            If direction = 0, the parameter space iso interval connects the 2d points
            (intervals[i][0],iso_constant) and (intervals[i][1],iso_constant).
            If direction = 1, the parameter space iso interval connects the 2d points
            (iso_constant,intervals[i][0]) and (iso_constant,intervals[i][1]).
            </returns>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.TrimAwareIsoCurve(System.Int32,System.Double)">
            <summary>
            Similar to IsoCurve function, except this function pays attention to trims on faces 
            and may return multiple curves.
            </summary>
            <param name="direction">Direction of isocurve.
            <para>0 = Isocurve connects all points with a constant U value.</para>
            <para>1 = Isocurve connects all points with a constant V value.</para>
            </param>
            <param name="constantParameter">Surface parameter that remains identical along the isocurves.</param>
            <returns>Isoparametric curves connecting all points with the constantParameter value.</returns>
            <remarks>
            In this function "direction" indicates which direction the resulting curve runs.
            0: horizontal, 1: vertical
            In the other Surface functions that take a "direction" argument,
            "direction" indicates if "constantParameter" is a "u" or "v" parameter.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.GetMesh(Rhino.Geometry.MeshType)">
            <summary>
            Obtains a reference to a specified type of mesh for this brep face.
            </summary>
            <param name="meshType">The mesh type.</param>
            <returns>A mesh.</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.SetMesh(Rhino.Geometry.MeshType,Rhino.Geometry.Mesh)">
            <summary>
            Sets a reference to a specified type of mesh for this brep face.
            </summary>
            <param name="meshType">The mesh type.</param>
            <param name="mesh">The new mesh.</param>
            <returns>true if the operation succeeded; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.AdjacentEdges">
            <summary>
            Gets the indices of all the BrepEdges that delineate this Face.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.AdjacentFaces">
            <summary>
            Gets the indices of all the BrepFaces that surround (are adjacent to) this face.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.ChangeSurface(System.Int32)">
            <summary>
            Expert user tool that replaces the 3d surface geometry use by the face.
            </summary>
            <param name="surfaceIndex">brep surface index of new surface.</param>
            <returns>true if successful.</returns>
            <remarks>
            If the face had a surface and new surface has a different shape, then
            you probably want to call something like RebuildEdges() to move
            the 3d edge curves so they will lie on the new surface. This doesn't
            delete the old surface; call Brep.CullUnusedSurfaces() or Brep.Compact()
            to remove unused surfaces.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.BrepFace.RebuildEdges(System.Double,System.Boolean,System.Boolean)">
            <summary>
            Rebuild the edges used by a face so they lie on the surface.
            </summary>
            <param name="tolerance">tolerance for fitting 3d edge curves.</param>
            <param name="rebuildSharedEdges">
            if false and and edge is used by this face and a neighbor, then the edge
            will be skipped.
            </param>
            <param name="rebuildVertices">
            if true, vertex locations are updated to lie on the surface.
            </param>
            <returns>true on success.</returns>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.OrientationIsReversed">
            <summary>
            true if face orientation is opposite of natural surface orientation.
            </summary>
            <example>
            <code source='examples\vbnet\ex_evnormal.vb' lang='vbnet'/>
            <code source='examples\cs\ex_evnormal.cs' lang='cs'/>
            <code source='examples\py\ex_evnormal.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.IsSurface">
            <summary>
            Gets a value indicating whether the face is synonymous with the underlying surface. 
            If a Face has no trimming curves then it is considered a Surface.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.FaceIndex">
            <summary>Index of face in Brep.Faces array.</summary>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.SurfaceIndex">
            <summary>
            Surface index of the 3d surface geometry used by this face or -1
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.Loops">
            <summary>
            Loops in this face.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepFace.OuterLoop">
            <summary>
            Every face has a single outer loop.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.BrepRegion">
            <summary>
            Represents a brep topological region that has sides.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BrepRegion.BoundaryBrep">
            <summary>
            Gets the boundary of a region as a brep object. If the region is finite,
            the boundary will be a closed  manifold brep. The boundary may have more than one
            connected component.
            </summary>
            <returns>A brep or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.BrepRegion.GetFaceSides">
            <summary>
            Gets an array of <see cref="T:Rhino.Geometry.BrepRegionFaceSide"/> entities delimiting this region.
            </summary>
            <returns>An array of region face sides. This array might be empty on failure.</returns>
        </member>
        <member name="P:Rhino.Geometry.BrepRegion.Brep">
            <summary>Gets a reference to the Brep this region belongs to.</summary>
        </member>
        <member name="P:Rhino.Geometry.BrepRegion.Index">
            <summary>Gets the index of region in the RegionTopology array.</summary>
        </member>
        <member name="P:Rhino.Geometry.BrepRegion.IsFinite">
            <summary>
            Gets a value indicating whether this region is finite.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepRegion.BoundingBox">
            <summary>Gets the region bounding box.</summary>
        </member>
        <member name="T:Rhino.Geometry.BrepRegionFaceSide">
            <summary>
            Represents a side of a <see cref="T:Rhino.Geometry.BrepRegion"/> entity.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepRegionFaceSide.Brep">
            <summary>
            The brep this side belongs to.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepRegionFaceSide.Region">
            <summary>
            The region this side belongs to.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepRegionFaceSide.SurfaceNormalPointsIntoRegion">
            <summary>
            Gets true if BrepFace's surface normal points into region; false otherwise.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BrepRegionFaceSide.Face">
            <summary>Gets the face this side belongs to.</summary>
        </member>
        <member name="T:Rhino.Geometry.Collections.BrepVertexList">
            <summary>
            Provides access to all the Vertices in a Brep object
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepVertexList.Add">
            <summary>
            Create and add a new vertex to this list
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepVertexList.Add(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Create and add a new vertex to this list
            </summary>
            <param name="point"></param>
            <param name="vertexTolerance">Use RhinoMath.UnsetTolerance if you are unsure</param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepVertexList.AddPointOnFace(Rhino.Geometry.BrepFace,System.Double,System.Double)">
            <summary>Adds a new point on face to the brep</summary>
            <param name="face">face that vertex lies on</param>
            <param name="s">surface parameters</param>
            <param name="t">surface parameters</param>
            <returns>new vertex that represents the point on face</returns>
            <remarks>
            If a vertex is a point on a face, then brep.Edges[m_ei] will
            be an edge with no 3d curve.  This edge will have a single
            trim with type ON_BrepTrim::ptonsrf.  There will be a loop
            containing this single trim.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepVertexList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the same enumerator as <see cref="M:Rhino.Geometry.Collections.BrepVertexList.GetEnumerator"/>.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepVertexList.GetEnumerator">
            <summary>
            Gets an enumerator that visits all surfaces.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepVertexList.Count">
            <summary>
            Gets the number of brep vertices.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepVertexList.Item(System.Int32)">
            <summary>
            Gets the BrepVertex at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of BrepVertex to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The BrepVertex at [index].</returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.BrepFaceList">
            <summary>
            Provides access to all the Faces in a Brep object.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.ShrinkFaces">
            <summary>
            Shrinks all the faces in this Brep. Sometimes the surfaces extend far beyond the trimming 
            boundaries of the Brep Face. This function will remove those portions of the surfaces 
            that are not used.
            </summary>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFaces">
            <summary>
            Splits any faces with creases into G1 pieces.
            </summary>
            <returns>true on success, false on failure.</returns>
            <remarks>If you need to detect whether splitting occured, 
            compare the before and after values of Faces.Count </remarks>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFaces(System.Double)">
            <summary>
            Splits any faces with creases into G1 pieces.
            </summary>
            <param name="kinkTolerance">Tolerance (in radians) to use for crease detection.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>If you need to detect whether splitting occured, 
            compare the before and after values of Faces.Count </remarks>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFaces(System.Double,System.Boolean)">
            <summary>
            Splits any faces with creases into G1 pieces.
            </summary>
            <param name="kinkTolerance">Tolerance (in radians) to use for crease detection.</param>
            <param name="compact">If true, the Brep will be compacted if possible.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>If you need to detect whether splitting occured, 
            compare the before and after values of Faces.Count </remarks>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.SplitKinkyFace(System.Int32,System.Double)">
            <summary>
            Splits a single face into G1 pieces.
            </summary>
            <param name="faceIndex">The index of the face to split.</param>
            <param name="kinkTolerance">Tolerance (in radians) to use for crease detection.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>
            This function leaves deleted stuff in the brep.  Call Brep.Compact() to
            remove deleted stuff.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.SplitClosedFaces(System.Int32)">
            <summary>
            Splits closed surfaces so they are not closed.
            </summary>
            <param name="minimumDegree">
            If the degree of the surface &lt; min_degree, the surface is not split.
            In some cases, minimumDegree = 2 is useful to preserve piecewise linear
            surfaces.
            </param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.SplitBipolarFaces">
            <summary>
            Splits surfaces with two singularities, like spheres, so the results
            have at most one singularity.
            </summary>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.Flip(System.Boolean)">
            <summary>
            Flips the orientation of faces.
            </summary>
            <param name="onlyReversedFaces">
            If true, clears all BrepFace.OrientationIsReversed flags by calling BrepFace.Transpose()
            on each face with a true OrientationIsReversed setting.
            If false, all of the faces are flipped regardless of their orientation.
            </param>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.RemoveAt(System.Int32)">
            <summary>
            Deletes a face at a specified index.
            </summary>
            <param name="faceIndex">The index of the mesh face.</param>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.ExtractFace(System.Int32)">
            <summary>
            Extracts a face from a Brep.
            </summary>
            <param name="faceIndex">A face index</param>
            <returns>A brep. This can be null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.StandardizeFaceSurface(System.Int32)">
            <summary>
            Standardizes the relationship between a BrepFace and the 3d surface it
            uses.  When done, the face will be the only face that references its 3d
            surface, and the orientations of the face and 3d surface will be the same. 
            </summary>
            <param name="faceIndex">The index of the face.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.StandardizeFaceSurfaces">
            <summary>Standardize all faces in the brep.</summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.Add(System.Int32)">
            <summary>
            Create and add a new face to this list. An incomplete face is added.
            The caller must create and fill in the loops used by the face.
            </summary>
            <param name="surfaceIndex">index of surface in brep's Surfaces list</param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.Add(Rhino.Geometry.Surface)">
            <summary>
            Add a new face to a brep.  This creates a complete face with
            new vertices at the surface corners, new edges along the surface
            boundary, etc.  The loop of the returned face has four trims that
            correspond to the south, east, north, and west side of the 
            surface in that order.  If you use this version of Add to
            add an exiting brep, then you are responsible for using a tool
            like JoinEdges() to hook the new face to its neighbors.
            </summary>
            <param name="surface">surface is copied</param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.AddRuledFace(Rhino.Geometry.BrepEdge,System.Boolean,Rhino.Geometry.BrepEdge,System.Boolean)">
            <summary>
            Add a new face to the brep whose surface geometry is a 
            ruled surface between two edges.
            </summary>
            <param name="edgeA">
            The south side of the face's surface will run along edgeA.
            </param>
            <param name="revEdgeA">
            true if the new face's outer boundary orientation along
            edgeA is opposite the orientation of edgeA.
            </param>
            <param name="edgeB">
            The north side of the face's surface will run along edgeA
            </param>
            <param name="revEdgeB">
            true if the new face's outer boundary orientation along
            edgeB is opposite the orientation of edgeB
            </param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.AddConeFace(Rhino.Geometry.BrepVertex,Rhino.Geometry.BrepEdge,System.Boolean)">
            <summary>
            Add a new face to the brep whose surface geometry is a 
            ruled cone with the edge as the base and the vertex as
            the apex point.
            </summary>
            <param name="vertex">
            The apex of the cone will be at this vertex.
            The north side of the surface's parameter
            space will be a singular point at the vertex.
            </param>
            <param name="edge">
            The south side of the face's surface will run along this edge.
            </param>
            <param name="revEdge">
            true if the new face's outer boundary orientation along
            the edge is opposite the orientation of edge.
            </param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.RemoveSlits">
            <summary>
            Remove slit trims and slit boundaries from each face.
            </summary>
            <returns>true if any slits were removed</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the same enumerator as <see cref="M:Rhino.Geometry.Collections.BrepFaceList.GetEnumerator"/>.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepFaceList.GetEnumerator">
            <summary>
            Gets an enumerators that yields <see cref="T:Rhino.Geometry.BrepFace"/> objects.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepFaceList.Count">
            <summary>
            Gets the number of brep faces.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepFaceList.Item(System.Int32)">
            <summary>
            Gets the BrepFace at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of BrepFace to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The BrepFace at [index].</returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.BrepSurfaceList">
            <summary>
            Provides access to all the underlying surfaces in a Brep object.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepSurfaceList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the same enumerator as <see cref="M:Rhino.Geometry.Collections.BrepSurfaceList.GetEnumerator"/>.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepSurfaceList.GetEnumerator">
            <summary>
            Gets an enumerator that visits all surfaces.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepSurfaceList.Count">
            <summary>
            Gets the number of surfaces in a brep.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepSurfaceList.Item(System.Int32)">
            <summary>
            Gets the Surface at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of Surface to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The Surface at [index].</returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.BrepCurveList">
            <summary>
            Provides access to all the underlying curves in a Brep object.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepCurveList.Add(Rhino.Geometry.Curve)">
            <summary>Adds a curve</summary>
            <param name="curve">A copy of the curve is added to this brep</param>
            <returns>
            Index that should be used to reference the geometry.
            <para>-1 is returned if the input is not acceptable.</para>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepCurveList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the same enumerator as <see cref="M:Rhino.Geometry.Collections.BrepCurveList.GetEnumerator"/>.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepCurveList.GetEnumerator">
            <summary>Get an enumerator that visits all curves.</summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepCurveList.Count">
            <summary>Gets the number of curves in this list.</summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepCurveList.Item(System.Int32)">
            <summary>
            Gets the Curve at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of Curve to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The Curve at [index].</returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.BrepEdgeList">
            <summary>
            Provides access to all the Edges in a Brep object.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepEdgeList.SplitKinkyEdge(System.Int32,System.Double)">
            <summary>Splits the edge into G1 pieces.</summary>
            <param name="edgeIndex">Index of edge to test and split.</param>
            <param name="kinkToleranceRadians">The split tolerance in radians.</param>
            <returns>true if successful.</returns>
            <remarks>
            This function leaves deleted stuff in the brep.  Call Brep.Compact() to
            remove deleted stuff.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepEdgeList.SplitEdgeAtParameters(System.Int32,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Splits an edge at the specified parameters.
            </summary>
            <param name="edgeIndex">The index of the edge to be addressed.</param>
            <param name="edgeParameters">The parameter along that edge.</param>
            <returns>
            Number of splits applied to the edge.
            </returns>
            <remarks>
            This function leaves deleted stuff in the brep.  Call Brep.Compact() to
            remove deleted stuff.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepEdgeList.Add(System.Int32)">
            <summary>
            Create and add a new edge to this list
            </summary>
            <param name="curve3dIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepEdgeList.Add(Rhino.Geometry.BrepVertex,Rhino.Geometry.BrepVertex,System.Int32,Rhino.Geometry.Interval,System.Double)">
            <summary>
            Create and add a new edge to this list
            </summary>
            <param name="startVertex"></param>
            <param name="endVertex"></param>
            <param name="curve3dIndex"></param>
            <param name="subDomain"></param>
            <param name="edgeTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepEdgeList.Add(Rhino.Geometry.BrepVertex,Rhino.Geometry.BrepVertex,System.Int32,System.Double)">
            <summary>
            Create and add a new edge to this list
            </summary>
            <param name="startVertex"></param>
            <param name="endVertex"></param>
            <param name="curve3dIndex"></param>
            <param name="edgeTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepEdgeList.Add(System.Int32,System.Int32,System.Int32,Rhino.Geometry.Interval,System.Double)">
            <summary>
            Create and add a new edge to this list
            </summary>
            <param name="startVertexIndex"></param>
            <param name="endVertexIndex"></param>
            <param name="curve3dIndex"></param>
            <param name="subDomain"></param>
            <param name="edgeTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepEdgeList.Add(System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Create and add a new edge to this list
            </summary>
            <param name="startVertexIndex"></param>
            <param name="endVertexIndex"></param>
            <param name="curve3dIndex"></param>
            <param name="edgeTolerance"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepEdgeList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the same enumerator as <see cref="M:Rhino.Geometry.Collections.BrepEdgeList.GetEnumerator"/>.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepEdgeList.GetEnumerator">
            <summary>
            Gets an enumerator that visits all edges.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepEdgeList.Count">
            <summary>
            Gets the number of brep edges.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepEdgeList.Item(System.Int32)">
            <summary>
            Gets the BrepEdge at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of BrepEdge to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The BrepEdge at [index].</returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.BrepTrimList">
            <summary>
            Provides access to all the Trims in a Brep object
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.Add(System.Int32)">
            <summary>
            Add a new trim that will be part of an inner, outer, or slit loop
            to the brep.
            </summary>
            <param name="curve2dIndex">index of 2d trimming curve</param>
            <returns>New Trim</returns>
            <remarks>
            You should set the trim's tolerance, type, iso, li, and m_ei values.
            In general, you should try to use the
            Add( edge, bRev3d, loop, c2i ) version of NewTrim.
            If you want to add a singular trim, use AddSingularTrim.
            If you want to add a crvonsrf trim, use AddCurveOnFace.
            If you want to add a ptonsrf trim, use AddPointOnFace.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.Add(System.Boolean,Rhino.Geometry.BrepLoop,System.Int32)">
            <summary>
            Add a new trim that will be part of an inner, outer, or slit loop
            to the brep
            </summary>
            <param name="rev3d">
            true if the edge and trim have opposite directions
            </param>
            <param name="loop">trim is appended to this loop</param>
            <param name="curve2dIndex">index of 2d trimming curve</param>
            <returns>new trim</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.Add(System.Boolean,Rhino.Geometry.BrepEdge,System.Int32)">
            <summary>
            Add a new trim that will be part of an inner, outer, or slit loop
            to the brep
            </summary>
            <param name="rev3d">
            true if the edge and trim have opposite directions
            </param>
            <param name="edge">3d edge associated with this trim</param>
            <param name="curve2dIndex">index of 2d trimming curve</param>
            <returns>new trim</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.Add(Rhino.Geometry.BrepEdge,System.Boolean,Rhino.Geometry.BrepLoop,System.Int32)">
            <summary>
            Add a new trim that will be part of an inner, outer, or slit loop
            to the brep.
            </summary>
            <param name="edge">3d edge associated with this trim</param>
            <param name="rev3d">
            true if the edge and trim have opposite directions
            </param>
            <param name="loop">trim is appended to this loop</param>
            <param name="curve2dIndex">index of 2d trimming curve</param>
            <returns>new trim</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.AddSingularTrim(Rhino.Geometry.BrepVertex,Rhino.Geometry.BrepLoop,Rhino.Geometry.IsoStatus,System.Int32)">
            <summary> Add a new singular trim to the brep. </summary>
            <param name="vertex">vertex along collapsed surface edge</param>
            <param name="loop">trim is appended to this loop</param>
            <param name="iso"></param>
            <param name="curve2dIndex">index of 2d trimming curve</param>
            <returns>new trim</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.AddCurveOnFace(Rhino.Geometry.BrepFace,Rhino.Geometry.BrepEdge,System.Boolean,System.Int32)">
            <summary>Add a new curve on face to the brep</summary>
            <param name="face">face that curve lies on</param>
            <param name="edge">3d edge associated with this curve on surface</param>
            <param name="rev3d">
            true if the 3d edge and the 2d parameter space curve have opposite directions.
            </param>
            <param name="curve2dIndex">index of 2d curve in face's parameter space</param>
            <returns>new trim that represents the curve on surface</returns>
            <remarks>
            You should set the trim's tolerance and iso values.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the same enumerator as <see cref="M:Rhino.Geometry.Collections.BrepTrimList.GetEnumerator"/>.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepTrimList.GetEnumerator">
            <summary>
            Gets an enumerator that visits all edges.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepTrimList.Count">
            <summary>
            Gets the number of brep trims.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepTrimList.Item(System.Int32)">
            <summary>
            Gets the BrepTrim at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of BrepTrim to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The BrepTrim at [index].</returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.BrepLoopList">
            <summary>
            Provides access to all the Loops in a Brep object.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepLoopList.Add(Rhino.Geometry.BrepLoopType)">
            <summary>
            Create a new outer boundary loop that runs along the edges
            of the underlying surface.
            </summary>
            <param name="loopType"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepLoopList.Add(Rhino.Geometry.BrepLoopType,Rhino.Geometry.BrepFace)">
            <summary>
            Create a new boundary loop on a face.  After you get this
            BrepLoop, you still need to create the vertices, edges, 
            and trims that define the loop.
            </summary>
            <param name="loopType"></param>
            <param name="face"></param>
            <returns>New loop that needs to be filled in</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepLoopList.AddOuterLoop(System.Int32)">
            <summary>
            Create a new outer boundary loop that runs along the sides
            of the face's surface.  All the necessary trims, edges,
            and vertices are created and added to the brep.
            </summary>
            <param name="faceIndex">
            index of face that needs an outer boundary
            that runs along the sides of its surface.
            </param>
            <returns>New outer boundary loop that is complete.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepLoopList.AddPlanarFaceLoop(System.Int32,Rhino.Geometry.BrepLoopType,System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Add a planar trimming loop to a planar face
            </summary>
            <param name="faceIndex">
            index of planar face.  The underlying suface must be a PlaneSurface
            </param>
            <param name="loopType">
            type of loop to add.  If loopType is Unknown, then the loop direction
            is tested and the the new loops type will be set to Outer or Inner.
            If the loopType is Outer, then the direction of the new loop is tested
            and flipped if it is clockwise. If the loopType is Inner, then the
            direction of the new loop is tested and flipped if it is counter-clockwise.
            </param>
            <param name="boundaryCurves">
            list of 3d curves that form a simple (no self intersections) closed
            curve.  These curves define the 3d edge geometry and should be near
            the planar surface.
            </param>
            <returns>new loop if successful</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepLoopList.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the same enumerator as <see cref="M:Rhino.Geometry.Collections.BrepLoopList.GetEnumerator"/>.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.BrepLoopList.GetEnumerator">
            <summary>
            Gets an enumerator that visits all edges.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepLoopList.Count">
            <summary>
            Gets the number of brep loops.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.BrepLoopList.Item(System.Int32)">
            <summary>
            Gets the BrepLoop at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of BrepLoop to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The BrepLoop at [index].</returns>
        </member>
        <member name="T:Rhino.Geometry.DetailView">
            <summary>
            Represents a view of the model placed on a page layout.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.DetailView.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected serialization constructor for internal use.
            </summary>
            <param name="info">Data to be serialized.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.DetailView.SetScale(System.Double,Rhino.UnitSystem,System.Double,Rhino.UnitSystem)">
            <summary>
            Sets the detail viewport's projection so geometry is displayed at a certain scale.
            </summary>
            <param name="modelLength">Reference model length.</param>
            <param name="modelUnits">Units for model length.</param>
            <param name="pageLength">Length on page that the modelLength should equal.</param>
            <param name="pageUnits">Units for page length.</param>
            <returns>
            true on success. false if the DetailView projection is perspective or input values are incongruous.
            </returns>
            <example>
            <code source='examples\vbnet\ex_addlayout.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayout.cs' lang='cs'/>
            <code source='examples\py\ex_addlayout.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.DetailView.IsParallelProjection">
            <summary>
            Gets or sets whether the view is parallel.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.DetailView.IsPerspectiveProjection">
            <summary>
            Gets or sets whether the view is perspective.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.DetailView.IsProjectionLocked">
            <summary>
            Gets or sets whether the view projection is locked.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addlayout.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayout.cs' lang='cs'/>
            <code source='examples\py\ex_addlayout.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.DetailView.PageToModelRatio">
            <summary>
            Gets the page units/model units quotient.
            </summary>
        </member>
        <member name="T:Rhino.FileIO.File3dm">
            <summary>
            Represents a 3dm file, which is stored using the OpenNURBS file standard.
            <para>The 3dm format is the main Rhinoceros storage format.</para>
            <para>Visit http://www.opennurbs.com/ for more details.</para>
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Read(System.String)">
            <summary>
            Reads a 3dm file from a specified location.
            </summary>
            <param name="path">The file to read.</param>
            <returns>new File3dm on success, null on error.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If path does not exist.</exception>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Read(System.String,Rhino.FileIO.File3dm.TableTypeFilter,Rhino.FileIO.File3dm.ObjectTypeFilter)">
            <summary>
            Reads a 3dm file from a specified location.
            </summary>
            <param name="path">The file to read.</param>
            <param name="tableTypeFilterFilter">
            If tableTypeFilterFilter is None, then everything in the archive is read.
            Otherwise tableTypeFilterFilter identifies what tables should be read.
            </param>
            <param name="objectTypeFilter">
            If objectTypeFilter is not None, then is a filter made by bitwise oring
            values to select which types of objects will be read from the model object
            table.
            </param>
            <returns>new File3dm on success, null on error.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If path does not exist.</exception>
        </member>
        <member name="M:Rhino.FileIO.File3dm.ReadWithLog(System.String,Rhino.FileIO.File3dm.TableTypeFilter,Rhino.FileIO.File3dm.ObjectTypeFilter,System.String@)">
            <summary>
            Reads a 3dm file from a specified location.
            </summary>
            <param name="path">The file to read.</param>
            <param name="tableTypeFilterFilter">
            If tableTypeFilterFilter is None, then everything in the archive is read.
            Otherwise tableTypeFilterFilter identifies what tables should be read.
            </param>
            <param name="objectTypeFilter">
            If objectTypeFilter is not None, then is a filter made by bitwise oring
            values to select which types of objects will be read from the model object
            table.
            </param>
            <param name="errorLog">Any archive reading errors are logged here.</param>
            <returns>new File3dm on success, null on error.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If path does not exist.</exception>
        </member>
        <member name="M:Rhino.FileIO.File3dm.ReadWithLog(System.String,System.String@)">
            <summary>
            Read a 3dm file from a specified location and log any archive
            reading errors.
            </summary>
            <param name="path">The file to read.</param>
            <param name="errorLog">Any archive reading errors are logged here.</param>
            <returns>New File3dm on success, null on error.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If path does not exist.</exception>
        </member>
        <member name="M:Rhino.FileIO.File3dm.ReadNotes(System.String)">
            <summary>Reads only the notes from an existing 3dm file.</summary>
            <param name="path">The file from which to read the notes.</param>
            <returns>The 3dm file notes.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If path does not exist, is null or cannot be accessed because of permissions.</exception>
        </member>
        <member name="M:Rhino.FileIO.File3dm.ReadArchiveVersion(System.String)">
            <summary> Reads only the archive 3dm version from an existing 3dm file. </summary>
            <param name="path">The file from which to read the archive version.</param>
            <returns>The 3dm file archive version.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If path does not exist, is null or cannot be accessed because of permissions.</exception>
        </member>
        <member name="M:Rhino.FileIO.File3dm.ReadRevisionHistory(System.String,System.String@,System.String@,System.Int32@,System.DateTime@,System.DateTime@)">
            <summary>
            Quickly check a file for it's revision information.  This function does
            not read the entire file, just what it needs to get revision information out
            </summary>
            <param name="path">path to the 3dm file</param>
            <param name="createdBy">original author of the file</param>
            <param name="lastEditedBy">last person to edit the file</param>
            <param name="revision">which revision this file is at</param>
            <param name="createdOn">date file was created (DateTime.MinValue if not set in file)</param>
            <param name="lastEditedOn">date file was last edited (DateTime.MinValue if not set in file)</param>
            <returns>true on success</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dm.ReadApplicationData(System.String,System.String@,System.String@,System.String@)">
            <summary>
            Reads only the application information from an existing 3dm file.
            </summary>
            <param name="path">A location on disk or network.</param>
            <param name="applicationName">The application name. This out parameter is assigned during this call.</param>
            <param name="applicationUrl">The application URL. This out parameter is assigned during this call.</param>
            <param name="applicationDetails">The application details. This out parameter is assigned during this call.</param>
        </member>
        <member name="M:Rhino.FileIO.File3dm.ReadPreviewImage(System.String)">
            <summary>
            Attempts to read the preview image out of a 3dm file.
            </summary>
            <param name="path">The location of the file.</param>
            <returns>A bitmap, or null on failure.</returns>
            <exception cref="T:System.IO.FileNotFoundException">If the provided path is null, does not exist or cannot be accessed.</exception>
            <example>
            <code source="examples\vbnet\ex_extractthumbnail.vb" lang="vbnet"/>
            <code source="examples\cs\ex_extractthumbnail.cs" lang="cs"/>
            <code source="examples\py\ex_extractthumbnail.py" lang="py"/>
            </example>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Write(System.String,System.Int32)">
            <summary>
            Writes contents of this model to an openNURBS archive. I STRONGLY
            suggested that you call Polish() before calling Write so that your
            file has all the "fluff" that makes it complete.  If the model is
            not valid, then Write will refuse to write it.
            </summary>
            <param name="path">The file name to use for writing.</param>
            <param name="version">
            Version of the openNURBS archive to write.  Must be 2, 3, 4, or 5.
            Rhino 2.x can read version 2 files.
            Rhino 3.x can read version 2 and 3 files.
            Rhino 4.x can read version 2, 3 and 4 files.
            Rhino 5.x can read version 2, 3, 4, and 5 files.
            Use version 5 when possible.
            </param>
            <returns>
            true if archive is written with no error.
            false if errors occur.
            </returns>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Write(System.String,Rhino.FileIO.File3dmWriteOptions)">
            <summary>
            Writes contents of this model to an openNURBS archive. I STRONGLY
            suggested that you call Polish() before calling Write so that your
            file has all the "fluff" that makes it complete.  If the model is
            not valid, then Write will refuse to write it.
            </summary>
            <param name="path">The file name to use for writing.</param>
            <param name="options">
            </param>
            <returns>
            true if archive is written with no error.
            false if errors occur.
            </returns>
        </member>
        <member name="M:Rhino.FileIO.File3dm.WriteWithLog(System.String,System.Int32,System.String@)">
            <summary>
            Writes contents of this model to an openNURBS archive. I STRONGLY
            suggested that you call Polish() before calling Write so that your
            file has all the "fluff" that makes it complete.  If the model is
            not valid, then Write will refuse to write it.
            </summary>
            <param name="path">
            Version of the openNURBS archive to write.  Must be 2, 3, 4, or 5.
            Rhino 2.x can read version 2 files.
            Rhino 3.x can read version 2 and 3 files.
            Rhino 4.x can read version 2, 3 and 4 files.
            Rhino 5.x can read version 2, 3, 4, and 5 files.
            Use version 5 when possible.
            </param>
            <param name="version">A version number.</param>
            <param name="errorLog">. This argument will be filled by out reference.</param>
            <returns>
            true if archive is written with no error.
            false if errors occur.
            </returns>
        </member>
        <member name="M:Rhino.FileIO.File3dm.IsValid(System.String@)">
            <summary>
            Checks a model to make sure it is valid.
            </summary>
            <param name="errors">
            if errors are found, a description of the problem is put in this variable.
            </param>
            <returns>true if the model is valid.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dm.IsValid(Rhino.FileIO.TextLog)">
            <summary>
            Checks a model to make sure it is valid.
            </summary>
            <param name="errors">
            if errors are found, a description of the problem is put in this variable.
            </param>
            <returns>true if the model is valid.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Polish">
            <summary>
            Quickly fills in the little details, like making sure there is at least
            one layer and table indices make sense.  For a full blown check and repair,
            call Audit(true).
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Audit(System.Boolean,System.Int32@,System.String@,System.Int32[]@)">
            <summary>
            Check a model to make sure it is valid and, if possible
            and requested, attempt to repair.
            </summary>
            <param name="attemptRepair">
            if true and a problem is found, the problem is repaired.
            </param>
            <param name="repairCount">number of successful repairs.</param>
            <param name="errors">
            if errors are found, a description of the problem is put in this.
            </param>
            <param name="warnings">
            If problems were found, warning ids are appended to this list.
            1 (MaterialTable flaws), 2 (LayerTable is not perfect),
            3 (some ObjectTable.Attributes.Id was nil or not unique),
            4 (ObjectTable.IsValid() is false),
            5 (some IDefTable entry has an invalid or duplicate name),
            6 (some IDefTable.ObjectId is not valid),
            7 (some ObjectTable.Geometry is null),
            8 (some ObjectTable.Geometry.IsValid is false),
            9 (some ObjectTable.Attributes is not valid),
            10 (LinetypeTable is not perfect), 11 (LinetypeTable is not perfect),
            12 (some IDefTable.Id was Empty or not unique),
            13 (some TextureMappingTable.MappingId was Empty or not unique),
            14 (some MaterialTable.Id was Empty or not unique),
            15 (some LightTable.LightId was Empty or not unique)
            </param>
            <returns>
            &lt;0 (model has serious errors),
            0 (model is ok),
            &gt;0 (number of problems that were found)
            </returns>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Dump">
            <summary>Prepares a text dump of the entire model.</summary>
            <returns>The text dump.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dm.DumpSummary">
            <summary>Prepares a text dump of model properties and settings.</summary>
            <returns>The text dump.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dm.DumpToTextLog(Rhino.FileIO.TextLog)">
            <summary>Prepares a text dump of the entire model.</summary>
            <param name="log"></param>
        </member>
        <member name="M:Rhino.FileIO.File3dm.#ctor">
            <summary>
            Initializes a new instance of a 3dm file.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dm.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.FileIO.File3dm.StartSectionComments">
            <summary>
            Gets or sets the start section comments, which are the comments with which the 3dm file begins.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Notes">
            <summary>
            Gets or sets the model notes.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.ApplicationName">
            <summary>
            Gets or sets the name of the application that wrote this file.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.ApplicationUrl">
            <summary>
            Gets or sets a URL for the application that wrote this file.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.ApplicationDetails">
            <summary>
            Gets or sets details for the application that wrote this file.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.CreatedBy">
            <summary>
            Gets a string that names the user who created the file.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.LastEditedBy">
            <summary>
            Gets a string that names the user who last edited the file.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Created">
            <summary>
            Get the DateTime that this file was originally created. If the
            value is not set in the 3dm file, then DateTime.MinValue is returned
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.LastEdited">
            <summary>
            Get the DateTime that this file was last edited. If the
            value is not set in the 3dm file, then DateTime.MinValue is returned
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Revision">
            <summary>
            Gets or sets the revision number.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Settings">
            <summary>
            Settings include tolerance, and unit system, and defaults used
            for creating views and objects.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Objects">
            <summary>
            Gets access to the <see cref="T:Rhino.FileIO.File3dmObjectTable"/> class associated with this file,
            which contains all objects.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Materials">
            <summary>
            Materials in this file.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Linetypes">
            <summary>
            Linetypes in this file.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Layers">
            <summary>
            Layers in this file.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.DimStyles">
            <summary>
            Dimension Styles in this file
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.HatchPatterns">
            <summary>
            Hatch patterns in this file
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.InstanceDefinitions">
            <summary>
            Instance definitions in this file
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.Views">
            <summary>
            Views that represent the RhinoViews which are displayed when Rhino loads this file
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.NamedViews">
            <summary>
            Named view list
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.PlugInData">
            <summary>
            Custom plug-in data in this file.  This data is not attached to any geometry or attributes
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dm.HistoryRecords">
            <summary>
            History records stored in this file
            </summary>
        </member>
        <member name="T:Rhino.FileIO.File3dm.TableTypeFilter">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.None">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Properties">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Settings">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Bitmap">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.TextureMapping">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Material">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Linetype">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Layer">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Group">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Font">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.FutureFont">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Dimstyle">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Light">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Hatchpattern">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.InstanceDefinition">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.ObjectTable">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.Historyrecord">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.TableTypeFilter.UserTable">
            <summary></summary>
        </member>
        <member name="T:Rhino.FileIO.File3dm.ObjectTypeFilter">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.None">
            <summary></summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Point">
            <summary>some type of Point</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Pointset">
            <summary>some type of PointCloud, PointGrid, ...</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Curve">
            <summary>some type of Curve like LineCurve, NurbsCurve, etc.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Surface">
            <summary>some type of Surface like PlaneSurface, NurbsSurface, etc.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Brep">
            <summary>some type of Brep</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Mesh">
            <summary>some type of Mesh</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Annotation">
            <summary>some type of Annotation</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.InstanceDefinition">
            <summary>some type of InstanceDefinition</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.InstanceReference">
            <summary>some type of InstanceReference</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.TextDot">
            <summary>some type of TextDot</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.DetailView">
            <summary>some type of DetailView</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Hatch">
            <summary>some type of Hatch</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Extrusion">
            <summary>some type of Extrusion</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dm.ObjectTypeFilter.Any">
            <summary></summary>
        </member>
        <member name="T:Rhino.FileIO.File3dmWriteOptions">
            <summary>Options used by File3dm.Write</summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmWriteOptions.#ctor">
            <summary>
            Initializes properties to defaults
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmWriteOptions.Version">
            <summary>
            File version. Default is 5
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmWriteOptions.SaveRenderMeshes">
            <summary>
            Include Render meshes in the file. Default is true
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmWriteOptions.SaveAnalysisMeshes">
            <summary>
            Include analysis meshes in the file. Default is true
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmWriteOptions.SaveUserData">
            <summary>
            Include custom user data in the file. Default is true
            </summary>
        </member>
        <member name="T:Rhino.FileIO.File3dmObject">
            <summary>
            Used to store geometry table object definition and attributes in a File3dm.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmObject.Geometry">
            <summary>
            Gets the geometry that is linked with this document object.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmObject.Attributes">
            <summary>
            Gets the attributes that are linked with this document object.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmObject.Name">
            <summary>
            Gets or sets the Name of the object. Equivalent to this.Attributes.Name.
            </summary>
        </member>
        <member name="T:Rhino.FileIO.File3dmObjectTable">
            <summary>
            Represents a simple object table for a file that is open externally.
            <para>This class mimics Rhino.DocObjects.Tables.ObjectTable while providing external eccess to the file.</para>
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.Dump">
            <summary>Prepares a text dump of object table.</summary>
            <returns>A string containing the dump.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.FindByLayer(System.String)">
            <summary>
            Finds all File3dmObject that are in a given layer.
            </summary>
            <param name="layer">Layer to search.</param>
            <returns>
            Array of objects that belong to the specified group or null if no objects could be found.
            </returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.GetBoundingBox">
            <summary>Gets the bounding box containing every object in this table.</summary>
            <returns>The computed bounding box.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.GetEnumerator">
            <summary>
            Gets the enumerator that visits any <see cref="T:Rhino.FileIO.File3dmObject"/> in this table.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
            Adds a point object to the table.
            </summary>
            <param name="x">X component of point coordinate.</param>
            <param name="y">Y component of point coordinate.</param>
            <param name="z">Z component of point coordinate.</param>
            <returns>id of new object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoint(Rhino.Geometry.Point3d)">
            <summary>Adds a point object to the table.</summary>
            <param name="point">A location for point.</param>
            <returns>Id of new object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoint(Rhino.Geometry.Point3d,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a point object to the document.</summary>
            <param name="point">A location for point.</param>
            <param name="attributes">attributes to apply to point.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoint(Rhino.Geometry.Point3f)">
            <summary>Adds a point object to the document.</summary>
            <param name="point">location of point.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoint(Rhino.Geometry.Point3f,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a point object to the document.</summary>
            <param name="point">location of point.</param>
            <param name="attributes">attributes to apply to point.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Adds multiple points to the document.
            </summary>
            <param name="points">Points to add.</param>
            <returns>List of object ids.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds multiple points to the document.
            </summary>
            <param name="points">Points to add.</param>
            <param name="attributes">Attributes to apply to point objects.</param>
            <returns>An array of object unique identifiers.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3f})">
            <summary>
            Adds multiple points to the document.
            </summary>
            <param name="points">Points to add.</param>
            <returns>An array of object unique identifiers.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3f},Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds multiple points to the document.
            </summary>
            <param name="points">Points to add.</param>
            <param name="attributes">Attributes to apply to point objects.</param>
            <returns>An array of object unique identifiers.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPointCloud(Rhino.Geometry.PointCloud)">
            <summary>Adds a point cloud object to the document.</summary>
            <param name="cloud">PointCloud to add.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPointCloud(Rhino.Geometry.PointCloud,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a point cloud object to the document.</summary>
            <param name="cloud">PointCloud to add.</param>
            <param name="attributes">attributes to apply to point cloud.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPointCloud(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>Adds a point cloud object to the document.</summary>
            <param name="points">A list, an array or any enumerable set of <see cref="T:Rhino.Geometry.Point3d"/>.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPointCloud(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a point cloud object to the document.</summary>
            <param name="points">A list, an array or any enumerable set of <see cref="T:Rhino.Geometry.Point3d"/>.</param>
            <param name="attributes">Attributes to apply to point cloud.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddClippingPlane(Rhino.Geometry.Plane,System.Double,System.Double,System.Guid)">
            <summary>
            Adds a clipping plane object to Rhino.
            </summary>
            <param name="plane">A plane.</param>
            <param name="uMagnitude">The size in U direction.</param>
            <param name="vMagnitude">The size in V direction.</param>
            <param name="clippedViewportId">The viewport id that the new clipping plane will clip.</param>
            <returns>A unique identifier for the object.</returns>
            <example>
            <code source='examples\vbnet\ex_addclippingplane.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addclippingplane.cs' lang='cs'/>
            <code source='examples\py\ex_addclippingplane.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddClippingPlane(Rhino.Geometry.Plane,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Adds a clipping plane object to Rhino.
            </summary>
            <param name="plane">A plane.</param>
            <param name="uMagnitude">The size in U direction.</param>
            <param name="vMagnitude">The size in V direction.</param>
            <param name="clippedViewportIds">A list, an array or any enumerable of viewport ids that the new clipping plane will clip.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddClippingPlane(Rhino.Geometry.Plane,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Guid},Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds a clipping plane object to Rhino.
            </summary>
            <param name="plane">A plane.</param>
            <param name="uMagnitude">The size in U direction.</param>
            <param name="vMagnitude">The size in V direction.</param>
            <param name="clippedViewportIds">list of viewport ids that the new clipping plane will clip.</param>
            <param name="attributes">Attributes to apply to point cloud.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLinearDimension(Rhino.Geometry.LinearDimension)">
            <summary>
            Adds a linear dimension to the 3dm file object table.
            </summary>
            <param name="dimension">A dimension.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLinearDimension(Rhino.Geometry.LinearDimension,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds a linear dimension to the 3dm file object table.
            </summary>
            <param name="dimension">A dimension.</param>
            <param name="attributes">Attributes to apply to dimension.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLine(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>Adds a line object to Rhino.</summary>
            <param name="from">A line start point.</param>
            <param name="to">A line end point.</param>
            <returns>A unique identifier of new rhino object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLine(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a line object to Rhino.</summary>
            <param name="from">The start point of the line.</param>
            <param name="to">The end point of the line.</param>
            <param name="attributes">Attributes to apply to line.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLine(Rhino.Geometry.Line)">
            <summary>Adds a line object to Rhino.</summary>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLine(Rhino.Geometry.Line,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a line object to Rhino.</summary>
            <param name="line">A line.</param>
            <param name="attributes">Attributes to apply to line.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>Adds a polyline object to Rhino.</summary>
            <param name="points">A list, an array or any enumerable set of <see cref="T:Rhino.Geometry.Point3d"/>.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a polyline object to Rhino.</summary>
            <param name="points">A list, an array or any enumerable set of <see cref="T:Rhino.Geometry.Point3d"/>.</param>
            <param name="attributes">Attributes to apply to line.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddArc(Rhino.Geometry.Arc)">
            <summary>Adds a curve object to the document representing an arc.</summary>
            <param name="arc">An arc.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddArc(Rhino.Geometry.Arc,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a curve object to the document representing an arc.</summary>
            <param name="arc">An arc to add.</param>
            <param name="attributes">attributes to apply to arc.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddCircle(Rhino.Geometry.Circle)">
            <summary>Adds a curve object to the document representing a circle.</summary>
            <param name="circle">A circle to add.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddCircle(Rhino.Geometry.Circle,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a curve object to the document representing a circle.</summary>
            <param name="circle">A circle to add.</param>
            <param name="attributes">attributes to apply to circle.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddEllipse(Rhino.Geometry.Ellipse)">
            <summary>Adds a curve object to the document representing an ellipse.</summary>
            <param name="ellipse">An ellipse to add.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddEllipse(Rhino.Geometry.Ellipse,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a curve object to the document representing an ellipse.</summary>
            <param name="ellipse">An ellipse to add.</param>
            <param name="attributes">attributes to apply to ellipse.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddSphere(Rhino.Geometry.Sphere)">
            <summary>
            Adds a surface object to the document representing a sphere.
            </summary>
            <param name="sphere">A sphere to add.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddSphere(Rhino.Geometry.Sphere,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds a surface object to the document representing a sphere.
            </summary>
            <param name="sphere">A sphere to add.</param>
            <param name="attributes">Attributes to link with the sphere.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddCurve(Rhino.Geometry.Curve)">
            <summary>Adds a curve object to the table.</summary>
            <param name="curve">A curve to add.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddCurve(Rhino.Geometry.Curve,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a curve object to the table.</summary>
            <param name="curve">A duplicate of this curve is added to Rhino.</param>
            <param name="attributes">Attributes to apply to curve.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddTextDot(System.String,Rhino.Geometry.Point3d)">
            <summary>Adds a text dot object to the table.</summary>
            <param name="text">The text.</param>
            <param name="location">The location.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddTextDot(System.String,Rhino.Geometry.Point3d,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a text dot object to the table.</summary>
            <param name="text">The text.</param>
            <param name="location">The location.</param>
            <param name="attributes">Attributes to link with curve.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddTextDot(Rhino.Geometry.TextDot)">
            <summary>Adds a text dot object to Rhino.</summary>
            <param name="dot">The text dot.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddTextDot(Rhino.Geometry.TextDot,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a text dot object to Rhino.</summary>
            <param name="dot">The text dot.</param>
            <param name="attributes">Attributes to link with curve.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddText(Rhino.Display.Text3d)">
            <summary>
            Adds an annotation text object to the document.
            </summary>
            <param name="text3d">The text object to add.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddText(Rhino.Display.Text3d,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds an annotation text object to the document.
            </summary>
            <param name="text3d">The text object to add.</param>
            <param name="attributes">Attributes to link to the object.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddText(System.String,Rhino.Geometry.Plane,System.Double,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds an annotation text object to the document.
            </summary>
            <param name="text">Text string.</param>
            <param name="plane">Plane of text.</param>
            <param name="height">Height of text.</param>
            <param name="fontName">Name of FontFace.</param>
            <param name="bold">Bold flag.</param>
            <param name="italic">Italic flag.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddText(System.String,Rhino.Geometry.Plane,System.Double,System.String,System.Boolean,System.Boolean,Rhino.Geometry.TextJustification)">
            <summary>
            Adds an annotation text object to the document.
            </summary>
            <param name="text">Text string.</param>
            <param name="plane">Plane of text.</param>
            <param name="height">Height of text.</param>
            <param name="fontName">Name of FontFace.</param>
            <param name="bold">Bold flag.</param>
            <param name="italic">Italic flag.</param>
            <param name="justification">The justification of the text.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddText(System.String,Rhino.Geometry.Plane,System.Double,System.String,System.Boolean,System.Boolean,Rhino.Geometry.TextJustification,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds an annotation text object to the document.
            </summary>
            <param name="text">Text string.</param>
            <param name="plane">Plane of text.</param>
            <param name="height">Height of text.</param>
            <param name="fontName">Name of FontFace.</param>
            <param name="bold">Bold flag.</param>
            <param name="italic">Italic flag.</param>
            <param name="justification">The justification of the text.</param>
            <param name="attributes">Attributes to link to the object.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddText(System.String,Rhino.Geometry.Plane,System.Double,System.String,System.Boolean,System.Boolean,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds an annotation text object to the document.
            </summary>
            <param name="text">Text string.</param>
            <param name="plane">Plane of text.</param>
            <param name="height">Height of text.</param>
            <param name="fontName">Name of FontFace.</param>
            <param name="bold">Bold flag.</param>
            <param name="italic">Italic flag.</param>
            <param name="attributes">Object Attributes.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddSurface(Rhino.Geometry.Surface)">
            <summary>Adds a surface object to Rhino.</summary>
            <param name="surface">A duplicate of this surface is added to Rhino.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddSurface(Rhino.Geometry.Surface,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a surface object to Rhino.</summary>
            <param name="surface">A duplicate of this surface is added to Rhino.</param>
            <param name="attributes">Attributes to link to the object.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddExtrusion(Rhino.Geometry.Extrusion)">
            <summary>Adds an extrusion object to Rhino.</summary>
            <param name="extrusion">A duplicate of this extrusion is added to Rhino.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddExtrusion(Rhino.Geometry.Extrusion,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds an extrusion object to Rhino.</summary>
            <param name="extrusion">A duplicate of this extrusion is added to Rhino.</param>
            <param name="attributes">Attributes to link to the object.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddMesh(Rhino.Geometry.Mesh)">
            <summary>Adds a mesh object to Rhino.</summary>
            <param name="mesh">A duplicate of this mesh is added to Rhino.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddMesh(Rhino.Geometry.Mesh,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a mesh object to Rhino.</summary>
            <param name="mesh">A duplicate of this mesh is added to Rhino.</param>
            <param name="attributes">Attributes to link to the object.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddBrep(Rhino.Geometry.Brep)">
            <summary>Adds a brep object to Rhino.</summary>
            <param name="brep">A duplicate of this brep is added to Rhino.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddBrep(Rhino.Geometry.Brep,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a brep object to Rhino.</summary>
            <param name="brep">A duplicate of this brep is added to Rhino.</param>
            <param name="attributes">Attributes to apply to brep.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLeader(Rhino.Geometry.Plane,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d})">
            <summary>
            Adds an annotation leader to the document.
            </summary>
            <param name="plane">A plane.</param>
            <param name="points">A list, an array or any enumerable set of 2d points.</param>
            <returns>A unique identifier for the object; or <see cref="F:System.Guid.Empty"/> on failure.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLeader(Rhino.Geometry.Plane,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d},Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds an annotation leader to the document.
            </summary>
            <param name="plane">A plane.</param>
            <param name="points">A list, an array or any enumerable set of 2d points.</param>
            <param name="attributes">Attributes to apply to brep.</param>
            <returns>A unique identifier for the object; or <see cref="F:System.Guid.Empty"/> on failure.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLeader(System.String,Rhino.Geometry.Plane,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d},Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds an annotation leader to the document.
            </summary>
            <param name="text">The text.</param>
            <param name="plane">A plane.</param>
            <param name="points">A list, an array or any enumerable set of 2d points.</param>
            <param name="attributes">Attributes to apply to brep.</param>
            <returns>A unique identifier for the object; or <see cref="F:System.Guid.Empty"/> on failure.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLeader(System.String,Rhino.Geometry.Plane,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d})">
            <summary>
            Adds an annotation leader to the document.
            </summary>
            <param name="text">The text.</param>
            <param name="plane">A plane.</param>
            <param name="points">A list, an array or any enumerable set of 2d points.</param>
            <returns>A unique identifier for the object; or <see cref="F:System.Guid.Empty"/> on failure.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLeader(System.String,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Adds an annotation leader to the document. This overload is only provided in the Rhino SDK.
            </summary>
            <param name="text">The text.</param>
            <param name="points">A list, an array or any enumerable set of 2d points.</param>
            <returns>A unique identifier for the object; or <see cref="F:System.Guid.Empty"/> on failure.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddLeader(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Adds an annotation leader to the document. This overload is only provided in the Rhino SDK.
            </summary>
            <param name="points">A list, an array or any enumerable set of 2d points.</param>
            <returns>A unique identifier for the object; or <see cref="F:System.Guid.Empty"/> on failure.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddHatch(Rhino.Geometry.Hatch)">
            <summary>
            Adds a hatch to the document.
            </summary>
            <param name="hatch">A hatch.</param>
            <returns>A unique identifier for the hatch, or <see cref="F:System.Guid.Empty"/> on failure.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.AddHatch(Rhino.Geometry.Hatch,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds a hatch to the document.
            </summary>
            <param name="hatch">A hatch.</param>
            <param name="attributes">Attributes to apply to brep.</param>
            <returns>A unique identifier for the hatch, or <see cref="F:System.Guid.Empty"/> on failure.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.Delete(Rhino.FileIO.File3dmObject)">
            <summary>
            Deletes object from document.
            </summary>
            <param name="obj">The object to delete.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.Delete(System.Guid)">
            <summary>
            Deletes object from document.
            </summary>
            <param name="objectId">Id of the object to delete.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmObjectTable.Delete(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Deletes a collection of objects from the document.
            </summary>
            <param name="objectIds">Ids of all objects to delete.</param>
            <returns>The number of successfully deleted objects.</returns>
        </member>
        <member name="P:Rhino.FileIO.File3dmObjectTable.Count">
            <summary>
            Gets the number of File3dmObjects in this table.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmObjectTable.Item(System.Int32)">
            <summary>
            Gets the File3dmObject at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of File3dmObject to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The File3dmObject at [index].</returns>
        </member>
        <member name="T:Rhino.FileIO.File3dmPlugInData">
            <summary>
            Custom data in the file supplied by a plug-in
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmPlugInData.PlugInId">
            <summary>
            Plug-in this data is associated with
            </summary>
        </member>
        <member name="T:Rhino.FileIO.File3dmPlugInDataTable">
            <summary>
            Table of custom data provided by plug-ins
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmPlugInDataTable.Dump">
            <summary>Prepares a text dump of table.</summary>
            <returns>A string containing the dump.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmPlugInDataTable.Clear">
            <summary>
            Remove all entries from this table
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmPlugInDataTable.GetEnumerator">
            <summary>
            Gets the enumerator that visits any <see cref="T:Rhino.FileIO.File3dmPlugInData"/> in this table.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Rhino.FileIO.File3dmPlugInDataTable.Count">
            <summary>
            Gets the number of File3dmPlugInData in this table.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmPlugInDataTable.Item(System.Int32)">
            <summary>
            Gets the File3dmPlugInData at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of File3dmPlugInData to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The File3dmPlugInData at [index].</returns>
        </member>
        <member name="T:Rhino.FileIO.File3dmHistoryRecordTable">
            <summary>
            Table of custom data provided by plug-ins
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmHistoryRecordTable.Dump">
            <summary>Prepares a text dump of table.</summary>
            <returns>A string containing the dump.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmHistoryRecordTable.Clear">
            <summary>
            Remove all entries from this table
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmHistoryRecordTable.Count">
            <summary>
            Gets the number of history records in this table.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmInstanceDefinitionTable.Dump">
            <summary>Prepares a text dump of object table.</summary>
            <returns>A string containing the dump.</returns>
        </member>
        <member name="M:Rhino.FileIO.File3dmInstanceDefinitionTable.GetEnumerator">
            <summary>
            Gets the enumerator that visits any <see cref="T:Rhino.Geometry.InstanceDefinitionGeometry"/> in this table.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="T:Rhino.Geometry.Hatch">
            <summary>
            Represents a hatch in planar boundary loop or loops.
            This is a 2d entity with a plane defining a local coordinate system.
            The loops, patterns, angles, etc are all in this local coordinate system.
            The Hatch object manages the plane and loop array
            Fill definitions are in the HatchPattern or class derived from HatchPattern
            Hatch has an index to get the pattern definition from the pattern table.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Hatch.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.Hatch.Create(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Int32,System.Double,System.Double)">
            <summary>
            Constructs an array of <see cref="T:Rhino.Geometry.Hatch">hatches</see> from a set of curves.
            </summary>
            <param name="curves">An array, a list or any enumarable set of <see cref="T:Rhino.Geometry.Curve"/>.</param>
            <param name="hatchPatternIndex">The index of the hatch pattern in the document hatch pattern table.</param>
            <param name="rotationRadians">The relative rotation of the pattern.</param>
            <param name="scale">A scaling factor.</param>
            <returns>An array of hatches. The array might be empty on error.</returns>
            <exception cref="T:System.ArgumentNullException">If curves is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Hatch.Create(Rhino.Geometry.Curve,System.Int32,System.Double,System.Double)">
            <example>
            <code source="examples\vbnet\ex_hatchcurve.vb" lang="vbnet"/>
            <code source="examples\cs\ex_hatchcurve.cs" lang="cs"/>
            <code source="examples\py\ex_hatchcurve.py" lang="py"/>
            </example>
            <summary>
            Constructs an array of <see cref="T:Rhino.Geometry.Hatch">hatches</see> from one curve.
            </summary>
            <param name="curve">A <see cref="T:Rhino.Geometry.Curve"/>.</param>
            <param name="hatchPatternIndex">The index of the hatch pattern in the document hatch pattern table.</param>
            <param name="rotationRadians">The relative rotation of the pattern.</param>
            <param name="scale">A scaling factor.</param>
            <returns>An array of hatches. The array might be empty on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Hatch.CreateDisplayGeometry(Rhino.DocObjects.HatchPattern,System.Double,Rhino.Geometry.Curve[]@,Rhino.Geometry.Line[]@,Rhino.Geometry.Brep@)">
            <summary>
            Generate geometry that would be used to draw the hatch with a given hatch pattern
            </summary>
            <param name="pattern"></param>
            <param name="patternScale"></param>
            <param name="bounds"></param>
            <param name="lines"></param>
            <param name="solidBrep"></param>
        </member>
        <member name="M:Rhino.Geometry.Hatch.Explode">
            <summary>
            Decomposes the hatch pattern into an array of geometry.
            </summary>
            <returns>An array of geometry that formed the appearance of the original elements.</returns>
            <example>
            <code source='examples\vbnet\ex_explodehatch.vb' lang='vbnet'/>
            <code source='examples\cs\ex_explodehatch.cs' lang='cs'/>
            <code source='examples\py\ex_explodehatch.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Hatch.Get3dCurves(System.Boolean)">
            <summary>
            Gets 3d curves that define the boundaries of the hatch
            </summary>
            <param name="outer">true to get the outer curves, false to get the inner curves</param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.Hatch.PatternIndex">
            <summary>
            Gets or sets the index of the pattern in the document hatch pattern table.
            </summary>
            <example>
            <code source='examples\vbnet\ex_replacehatchpattern.vb' lang='vbnet'/>
            <code source='examples\cs\ex_replacehatchpattern.cs' lang='cs'/>
            <code source='examples\py\ex_replacehatchpattern.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.Hatch.PatternRotation">
            <summary>
            Gets or sets the relative rotation of the pattern.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Hatch.PatternScale">
            <summary>
            Gets or sets the scaling factor of the pattern.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.InstanceDefinitionGeometry">
            <summary>
            Represents the geometry in a block definition.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.InstanceDefinitionGeometry.#ctor">
            <summary>
            Initializes a new block definition.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.InstanceDefinitionGeometry.GetObjectIds">
            <summary>
            list of object ids in the instance geometry table
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.InstanceDefinitionGeometry.Name">
            <summary>
            Gets or sets the name of the definition.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.InstanceDefinitionGeometry.Description">
            <summary>
            Gets or sets the description of the definition.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.InstanceDefinitionGeometry.Id">
            <summary>
            unique id for this instance definition
            </summary>
        </member>
        <member name="T:Rhino.Geometry.InstanceReferenceGeometry">
            <summary>
            Represents a reference to the geometry in a block definition.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.InstanceReferenceGeometry.#ctor(System.Guid,Rhino.Geometry.Transform)">
            <summary>
            Constructor used when creating nested instance references.
            </summary>
            <param name="instanceDefinitionId"></param>
            <param name="transform"></param>
            <example>
            <code source='examples\cs\ex_nestedblock.cs' lang='cs'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.InstanceReferenceGeometry.ParentIdefId">
            <summary>
            The unique id for the parent instance definition of this instance reference.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.InstanceReferenceGeometry.Xform">
            <summary>Transformation for this reference.</summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.Intersection">
            <summary>
            Provides static methods for the computation of intersections, projections, sections and similar.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineLine(Rhino.Geometry.Line,Rhino.Geometry.Line,System.Double@,System.Double@,System.Double,System.Boolean)">
            <summary>
            Intersects two lines.
            </summary>
            <param name="lineA">First line for intersection.</param>
            <param name="lineB">Second line for intersection.</param>
            <param name="a">
            Parameter on lineA that is closest to LineB. 
            The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
            </param>
            <param name="b">
            Parameter on lineB that is closest to LineA. 
            The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
            </param>
            <param name="tolerance">
            If tolerance > 0.0, then an intersection is reported only if the distance between the points is &lt;= tolerance. 
            If tolerance &lt;= 0.0, then the closest point between the lines is reported.
            </param>
            <param name="finiteSegments">
            If true, the input lines are treated as finite segments. 
            If false, the input lines are treated as infinite lines.
            </param>
            <returns>
            true if a closest point can be calculated and the result passes the tolerance parameter test; otherwise false.
            </returns>
            <remarks>
            If the lines are exactly parallel, meaning the system of equations used to find a and b 
            has no numerical solution, then false is returned. If the lines are nearly parallel, which 
            is often numerically true even if you think the lines look exactly parallel, then the 
            closest points are found and true is returned. So, if you care about weeding out "parallel" 
            lines, then you need to do something like the following:
            <code lang="cs">
            bool rc = Intersect.LineLine(lineA, lineB, out a, out b, tolerance, segments);
            if (rc)
            {
              double angle_tol = RhinoMath.ToRadians(1.0); // or whatever
              double parallel_tol = Math.Cos(angle_tol);
              if ( Math.Abs(lineA.UnitTangent * lineB.UnitTangent) >= parallel_tol )
              {
                ... do whatever you think is appropriate
              }
            }
            </code>
            <code lang="vb">
            Dim rc As Boolean = Intersect.LineLine(lineA, lineB, a, b, tolerance, segments)
            If (rc) Then
              Dim angle_tol As Double = RhinoMath.ToRadians(1.0) 'or whatever
              Dim parallel_tolerance As Double = Math.Cos(angle_tol)
              If (Math.Abs(lineA.UnitTangent * lineB.UnitTangent) >= parallel_tolerance) Then
                ... do whatever you think is appropriate
              End If
            End If
            </code>
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineLine(Rhino.Geometry.Line,Rhino.Geometry.Line,System.Double@,System.Double@)">
            <summary>
            Finds the closest point between two infinite lines.
            </summary>
            <param name="lineA">First line.</param>
            <param name="lineB">Second line.</param>
            <param name="a">
            Parameter on lineA that is closest to lineB. 
            The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
            </param>
            <param name="b">
            Parameter on lineB that is closest to lineA. 
            The shortest distance between the lines is the chord from lineA.PointAt(a) to lineB.PointAt(b)
            </param>
            <returns>
            true if points are found and false if the lines are numerically parallel. 
            Numerically parallel means the 2x2 matrix:
            <para>+AoA  -AoB</para>
            <para>-AoB  +BoB</para>
            is numerically singular, where A = (lineA.To - lineA.From) and B = (lineB.To-lineB.From)
            </returns>
            <example>
            <code source='examples\vbnet\ex_intersectlines.vb' lang='vbnet'/>
            <code source='examples\cs\ex_intersectlines.cs' lang='cs'/>
            <code source='examples\py\ex_intersectlines.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LinePlane(Rhino.Geometry.Line,Rhino.Geometry.Plane,System.Double@)">
            <summary>
            Intersects a line and a plane. This function only returns true if the 
            intersection result is a single point (i.e. if the line is coincident with 
            the plane then no intersection is assumed).
            </summary>
            <param name="line">Line for intersection.</param>
            <param name="plane">Plane to intersect.</param>
            <param name="lineParameter">Parameter on line where intersection occurs. 
            If the parameter is not within the {0, 1} Interval then the finite segment 
            does not intersect the plane.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.PlanePlane(Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Line@)">
            <summary>
            Intersects two planes and return the intersection line. If the planes are 
            parallel or coincident, no intersection is assumed.
            </summary>
            <param name="planeA">First plane for intersection.</param>
            <param name="planeB">Second plane for intersection.</param>
            <param name="intersectionLine">If this function returns true, 
            the intersectionLine parameter will return the line where the planes intersect.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.PlanePlanePlane(Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Plane,Rhino.Geometry.Point3d@)">
            <summary>
            Intersects three planes to find the single point they all share.
            </summary>
            <param name="planeA">First plane for intersection.</param>
            <param name="planeB">Second plane for intersection.</param>
            <param name="planeC">Third plane for intersection.</param>
            <param name="intersectionPoint">Point where all three planes converge.</param>
            <returns>true on success, false on failure. If at least two out of the three planes 
            are parallel or coincident, failure is assumed.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.PlaneCircle(Rhino.Geometry.Plane,Rhino.Geometry.Circle,System.Double@,System.Double@)">
            <summary>
            Intersects a plane with a circle using exact calculations.
            </summary>
            <param name="plane">Plane to intersect.</param>
            <param name="circle">Circe to intersect.</param>
            <param name="firstCircleParameter">First intersection parameter on circle if successful or RhinoMath.UnsetValue if not.</param>
            <param name="secondCircleParameter">Second intersection parameter on circle if successful or RhinoMath.UnsetValue if not.</param>
            <returns>The type of intersection that occured.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.PlaneSphere(Rhino.Geometry.Plane,Rhino.Geometry.Sphere,Rhino.Geometry.Circle@)">
            <summary>
            Intersects a plane with a sphere using exact calculations.
            </summary>
            <param name="plane">Plane to intersect.</param>
            <param name="sphere">Sphere to intersect.</param>
            <param name="intersectionCircle">Intersection result.</param>
            <returns>If <see cref="F:Rhino.Geometry.Intersect.PlaneSphereIntersection.None"/> is returned, the intersectionCircle has a radius of zero and the center point 
            is the point on the plane closest to the sphere.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineCircle(Rhino.Geometry.Line,Rhino.Geometry.Circle,System.Double@,Rhino.Geometry.Point3d@,System.Double@,Rhino.Geometry.Point3d@)">
            <summary>
            Intersects a line with a circle using exact calculations.
            </summary>
            <param name="line">Line for intersection.</param>
            <param name="circle">Circle for intersection.</param>
            <param name="t1">Parameter on line for first intersection.</param>
            <param name="point1">Point on circle closest to first intersection.</param>
            <param name="t2">Parameter on line for second intersection.</param>
            <param name="point2">Point on circle closest to second intersection.</param>
            <returns>
            If <see cref="F:Rhino.Geometry.Intersect.LineCircleIntersection.Single"/> is returned, only t1 and point1 will have valid values. 
            If <see cref="F:Rhino.Geometry.Intersect.LineCircleIntersection.Multiple"/> is returned, t2 and point2 will also be filled out.
            </returns>
            <example>
            <code source="examples\vbnet\ex_intersectlinecircle.vb" lang="vbnet"/>
            <code source="examples\cs\ex_intersectlinecircle.cs" lang="cs"/>
            <code source="examples\py\ex_intersectlinecircle.py" lang="py"/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineSphere(Rhino.Geometry.Line,Rhino.Geometry.Sphere,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@)">
            <summary>
            Intersects a line with a sphere using exact calculations.
            </summary>
            <param name="line">Line for intersection.</param>
            <param name="sphere">Sphere for intersection.</param>
            <param name="intersectionPoint1">First intersection point.</param>
            <param name="intersectionPoint2">Second intersection point.</param>
            <returns>If <see cref="F:Rhino.Geometry.Intersect.LineSphereIntersection.None"/> is returned, the first point is the point on the line closest to the sphere and 
            the second point is the point on the sphere closest to the line. 
            If <see cref="F:Rhino.Geometry.Intersect.LineSphereIntersection.Single"/> is returned, the first point is the point on the line and the second point is the 
            same point on the sphere.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineCylinder(Rhino.Geometry.Line,Rhino.Geometry.Cylinder,Rhino.Geometry.Point3d@,Rhino.Geometry.Point3d@)">
            <summary>
            Intersects a line with a cylinder using exact calculations.
            </summary>
            <param name="line">Line for intersection.</param>
            <param name="cylinder">Cylinder for intersection.</param>
            <param name="intersectionPoint1">First intersection point.</param>
            <param name="intersectionPoint2">Second intersection point.</param>
            <returns>If None is returned, the first point is the point on the line closest
            to the cylinder and the second point is the point on the cylinder closest to
            the line. 
            <para>If <see cref="F:Rhino.Geometry.Intersect.LineCylinderIntersection.Single"/> is returned, the first point
            is the point on the line and the second point is the  same point on the
            cylinder.</para></returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.SphereSphere(Rhino.Geometry.Sphere,Rhino.Geometry.Sphere,Rhino.Geometry.Circle@)">
            <summary>
            Intersects two spheres using exact calculations.
            </summary>
            <param name="sphereA">First sphere to intersect.</param>
            <param name="sphereB">Second sphere to intersect.</param>
            <param name="intersectionCircle">
            If intersection is a point, then that point will be the center, radius 0.
            </param>
            <returns>
            The intersection type.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineBox(Rhino.Geometry.Line,Rhino.Geometry.BoundingBox,System.Double,Rhino.Geometry.Interval@)">
            <summary>
            Intersects an infinite line and an axis aligned bounding box.
            </summary>
            <param name="box">BoundingBox to intersect.</param>
            <param name="line">Line for intersection.</param>
            <param name="tolerance">
            If tolerance &gt; 0.0, then the intersection is performed against a box 
            that has each side moved out by tolerance.
            </param>
            <param name="lineParameters">
            The chord from line.PointAt(lineParameters.T0) to line.PointAt(lineParameters.T1) is the intersection.
            </param>
            <returns>true if the line intersects the box, false if no intersection occurs.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.LineBox(Rhino.Geometry.Line,Rhino.Geometry.Box,System.Double,Rhino.Geometry.Interval@)">
            <summary>
            Intersects an infinite line with a box volume.
            </summary>
            <param name="box">Box to intersect.</param>
            <param name="line">Line for intersection.</param>
            <param name="tolerance">
            If tolerance &gt; 0.0, then the intersection is performed against a box 
            that has each side moved out by tolerance.
            </param>
            <param name="lineParameters">
            The chord from line.PointAt(lineParameters.T0) to line.PointAt(lineParameters.T1) is the intersection.
            </param>
            <returns>true if the line intersects the box, false if no intersection occurs.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.CurvePlane(Rhino.Geometry.Curve,Rhino.Geometry.Plane,System.Double)">
            <summary>
            Intersects a curve with an (infinite) plane.
            </summary>
            <param name="curve">Curve to intersect.</param>
            <param name="plane">Plane to intersect with.</param>
            <param name="tolerance">Tolerance to use during intersection.</param>
            <returns>A list of intersection events or null if no intersections were recorded.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.MeshPlane(Rhino.Geometry.Mesh,Rhino.Geometry.Plane)">
            <summary>
            Intersects a mesh with an (infinite) plane.
            </summary>
            <param name="mesh">Mesh to intersect.</param>
            <param name="plane">Plane to intersect with.</param>
            <returns>An array of polylines describing the intersection loops or null (Nothing in Visual Basic) if no intersections could be found.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.MeshPlane(Rhino.Geometry.Mesh,System.Collections.Generic.IEnumerable{Rhino.Geometry.Plane})">
            <summary>
            Intersects a mesh with a collection of (infinite) planes.
            </summary>
            <param name="mesh">Mesh to intersect.</param>
            <param name="planes">Planes to intersect with.</param>
            <returns>An array of polylines describing the intersection loops or null (Nothing in Visual Basic) if no intersections could be found.</returns>
            <exception cref="T:System.ArgumentNullException">If planes is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.BrepPlane(Rhino.Geometry.Brep,Rhino.Geometry.Plane,System.Double,Rhino.Geometry.Curve[]@,Rhino.Geometry.Point3d[]@)">
            <summary>
            Intersects a Brep with an (infinite) plane.
            </summary>
            <param name="brep">Brep to intersect.</param>
            <param name="plane">Plane to intersect with.</param>
            <param name="tolerance">Tolerance to use for intersections.</param>
            <param name="intersectionCurves">The intersection curves will be returned here.</param>
            <param name="intersectionPoints">The intersection points will be returned here.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.ExtendThroughBox(Rhino.Geometry.Plane,Rhino.Geometry.BoundingBox,System.Double)">
            <summary>
            Utility function for creating a PlaneSurface through a Box.
            </summary>
            <param name="plane">Plane to extend.</param>
            <param name="box">Box to extend through.</param>
            <param name="fuzzyness">Box will be inflated by this amount.</param>
            <returns>A Plane surface through the box or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.CurveSelf(Rhino.Geometry.Curve,System.Double)">
            <summary>
            Finds the places where a curve intersects itself. 
            </summary>
            <param name="curve">Curve for self-intersections.</param>
            <param name="tolerance">Intersection tolerance. If the curve approaches itself to within tolerance, 
            an intersection is assumed.</param>
            <returns>A collection of intersection events.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.CurveCurve(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Double,System.Double)">
            <summary>
            Finds the intersections between two curves. 
            </summary>
            <param name="curveA">First curve for intersection.</param>
            <param name="curveB">Second curve for intersection.</param>
            <param name="tolerance">Intersection tolerance. If the curves approach each other to within tolerance, 
            an intersection is assumed.</param>
            <param name="overlapTolerance">The tolerance with which the curves are tested.</param>
            <returns>A collection of intersection events.</returns>
            <example>
            <code source='examples\vbnet\ex_intersectcurves.vb' lang='vbnet'/>
            <code source='examples\cs\ex_intersectcurves.cs' lang='cs'/>
            <code source='examples\py\ex_intersectcurves.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.CurveSurface(Rhino.Geometry.Curve,Rhino.Geometry.Surface,System.Double,System.Double)">
            <summary>
            Intersects a curve and a surface.
            </summary>
            <param name="curve">Curve for intersection.</param>
            <param name="surface">Surface for intersection.</param>
            <param name="tolerance">Intersection tolerance. If the curve approaches the surface to within tolerance, 
            an intersection is assumed.</param>
            <param name="overlapTolerance">The tolerance with which the curves are tested.</param>
            <returns>A collection of intersection events.</returns>
            <example>
            <code source='examples\vbnet\ex_curvesurfaceintersect.vb' lang='vbnet'/>
            <code source='examples\cs\ex_curvesurfaceintersect.cs' lang='cs'/>
            <code source='examples\py\ex_curvesurfaceintersect.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.CurveSurface(Rhino.Geometry.Curve,Rhino.Geometry.Interval,Rhino.Geometry.Surface,System.Double,System.Double)">
            <summary>
            Intersects a (sub)curve and a surface.
            </summary>
            <param name="curve">Curve for intersection.</param>
            <param name="curveDomain">Domain of surbcurve to take into consideration for Intersections.</param>
            <param name="surface">Surface for intersection.</param>
            <param name="tolerance">Intersection tolerance. If the curve approaches the surface to within tolerance, 
            an intersection is assumed.</param>
            <param name="overlapTolerance">The tolerance with which the curves are tested.</param>
            <returns>A collection of intersection events.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.CurveBrep(Rhino.Geometry.Curve,Rhino.Geometry.Brep,System.Double,Rhino.Geometry.Curve[]@,Rhino.Geometry.Point3d[]@)">
            <summary>
            Intersects a curve with a Brep. This function returns the 3D points of intersection
            and 3D overlap curves. If an error occurs while processing overlap curves, this function 
            will return false, but it will still provide partial results.
            </summary>
            <param name="curve">Curve for intersection.</param>
            <param name="brep">Brep for intersection.</param>
            <param name="tolerance">Fitting and near miss tolerance.</param>
            <param name="overlapCurves">The overlap curves will be returned here.</param>
            <param name="intersectionPoints">The intersection points will be returned here.</param>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_elevation.vb' lang='vbnet'/>
            <code source='examples\cs\ex_elevation.cs' lang='cs'/>
            <code source='examples\py\ex_elevation.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.CurveBrepFace(Rhino.Geometry.Curve,Rhino.Geometry.BrepFace,System.Double,Rhino.Geometry.Curve[]@,Rhino.Geometry.Point3d[]@)">
            <summary>
            Intersects a curve with a Brep face.
            </summary>
            <param name="curve">A curve.</param>
            <param name="face">A brep face.</param>
            <param name="tolerance">Fitting and near miss tolerance.</param>
            <param name="overlapCurves">A overlap curves array argument. This out reference is assigned during the call.</param>
            <param name="intersectionPoints">A points array argument. This out reference is assigned during the call.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.SurfaceSurface(Rhino.Geometry.Surface,Rhino.Geometry.Surface,System.Double,Rhino.Geometry.Curve[]@,Rhino.Geometry.Point3d[]@)">
            <summary>
            Intersects two Surfaces.
            </summary>
            <param name="surfaceA">First Surface for intersection.</param>
            <param name="surfaceB">Second Surface for intersection.</param>
            <param name="tolerance">Intersection tolerance.</param>
            <param name="intersectionCurves">The intersection curves will be returned here.</param>
            <param name="intersectionPoints">The intersection points will be returned here.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.BrepBrep(Rhino.Geometry.Brep,Rhino.Geometry.Brep,System.Double,Rhino.Geometry.Curve[]@,Rhino.Geometry.Point3d[]@)">
            <summary>
            Intersects two Breps.
            </summary>
            <param name="brepA">First Brep for intersection.</param>
            <param name="brepB">Second Brep for intersection.</param>
            <param name="tolerance">Intersection tolerance.</param>
            <param name="intersectionCurves">The intersection curves will be returned here.</param>
            <param name="intersectionPoints">The intersection points will be returned here.</param>
            <returns>true on success; false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.BrepSurface(Rhino.Geometry.Brep,Rhino.Geometry.Surface,System.Double,Rhino.Geometry.Curve[]@,Rhino.Geometry.Point3d[]@)">
            <summary>
            Intersects a Brep and a Surface.
            </summary>
            <param name="brep">A brep to be intersected.</param>
            <param name="surface">A surface to be intersected.</param>
            <param name="tolerance">A tolerance value.</param>
            <param name="intersectionCurves">The intersection curves array argument. This out reference is assigned during the call.</param>
            <param name="intersectionPoints">The intersection points array argument. This out reference is assigned during the call.</param>
            <returns>true on success; false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.MeshMeshFast(Rhino.Geometry.Mesh,Rhino.Geometry.Mesh)">
            <summary>
            Quickly intersects two meshes. Overlaps and near misses are ignored.
            </summary>
            <param name="meshA">First mesh for intersection.</param>
            <param name="meshB">Second mesh for intersection.</param>
            <returns>An array of intersection line segments.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.MeshMeshAccurate(Rhino.Geometry.Mesh,Rhino.Geometry.Mesh,System.Double)">
            <summary>
            Intersects two meshes. Overlaps and near misses are handled.
            </summary>
            <param name="meshA">First mesh for intersection.</param>
            <param name="meshB">Second mesh for intersection.</param>
            <param name="tolerance">Intersection tolerance.</param>
            <returns>An array of intersection polylines.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.MeshRay(Rhino.Geometry.Mesh,Rhino.Geometry.Ray3d)">
            <summary>Finds the first intersection of a ray with a mesh.</summary>
            <param name="mesh">A mesh to intersect.</param>
            <param name="ray">A ray to be casted.</param>
            <returns>
            >= 0.0 parameter along ray if successful.
            &lt; 0.0 if no intersection found.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.MeshRay(Rhino.Geometry.Mesh,Rhino.Geometry.Ray3d,System.Int32[]@)">
            <summary>Finds the first intersection of a ray with a mesh.</summary>
            <param name="mesh">A mesh to intersect.</param>
            <param name="ray">A ray to be casted.</param>
            <param name="meshFaceIndices">faces on mesh that ray intersects.</param>
            <returns>
            >= 0.0 parameter along ray if successful.
            &lt; 0.0 if no intersection found.
            </returns>
            <remarks>
            The ray may intersect more than one face in cases where the ray hits
            the edge between two faces or the vertex corner shared by multiple faces.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.MeshPolyline(Rhino.Geometry.Mesh,Rhino.Geometry.PolylineCurve,System.Int32[]@)">
            <summary>
            Finds the intersection of a mesh and a polyline.
            </summary>
            <param name="mesh">A mesh to intersect.</param>
            <param name="curve">A polyline curves to intersect.</param>
            <param name="faceIds">The indices of the intersecting faces. This out reference is assigned during the call.</param>
            <returns>An array of points: one for each face that was passed by the faceIds out reference.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.MeshLine(Rhino.Geometry.Mesh,Rhino.Geometry.Line,System.Int32[]@)">
            <summary>
            Finds the intersection of a mesh and a line
            </summary>
            <param name="mesh">A mesh to intersect</param>
            <param name="line">The line to intersect with the mesh</param>
            <param name="faceIds">The indices of the intersecting faces. This out reference is assigned during the call.</param>
            <returns>An array of points: one for each face that was passed by the faceIds out reference.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.RayShoot(Rhino.Geometry.Ray3d,System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase},System.Int32)">
            <summary>
            Computes point intersections that occur when shooting a ray to a collection of surfaces.
            </summary>
            <param name="ray">A ray used in intersection.</param>
            <param name="geometry">Only Surface and Brep objects are currently supported. Trims are ignored on Breps.</param>
            <param name="maxReflections">The maximum number of reflections. This value should be any value between 1 and 1000, inclusive.</param>
            <returns>An array of points: one for each face that was passed by the faceIds out reference.</returns>
            <exception cref="T:System.ArgumentNullException">geometry is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">maxReflections is strictly outside the [1-1000] range.</exception>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.ProjectPointsToMeshes(System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Projects points onto meshes.
            </summary>
            <param name="meshes">the meshes to project on to.</param>
            <param name="points">the points to project.</param>
            <param name="direction">the direction to project.</param>
            <param name="tolerance">
            Projection tolerances used for culling close points and for line-mesh intersection.
            </param>
            <returns>
            Array of projected points, or null in case of any error or invalid input.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.ProjectPointsToMeshesEx(System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.Geometry.Vector3d,System.Double,System.Int32[]@)">
            <summary>
            Projects points onto meshes.
            </summary>
            <param name="meshes">the meshes to project on to.</param>
            <param name="points">the points to project.</param>
            <param name="direction">the direction to project.</param>
            <param name="tolerance">
            Projection tolerances used for culling close points and for line-mesh intersection.
            </param>
            <param name="indices">Return points[i] is a projection of points[indices[i]]</param>
            <returns>
            Array of projected points, or null in case of any error or invalid input.
            </returns>
            <example>
            <code source='examples\vbnet\ex_projectpointstomeshesex.vb' lang='vbnet'/>
            <code source='examples\cs\ex_projectpointstomeshesex.cs' lang='cs'/>
            <code source='examples\py\ex_projectpointstomeshesex.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.ProjectPointsToBreps(System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Projects points onto breps.
            </summary>
            <param name="breps">The breps projection targets.</param>
            <param name="points">The points to project.</param>
            <param name="direction">The direction to project.</param>
            <param name="tolerance">The tolerance used for intersections.</param>
            <returns>
            Array of projected points, or null in case of any error or invalid input.
            </returns>
            <example>
            <code source='examples\vbnet\ex_projectpointstobreps.vb' lang='vbnet'/>
            <code source='examples\cs\ex_projectpointstobreps.cs' lang='cs'/>
            <code source='examples\py\ex_projectpointstobreps.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Intersect.Intersection.ProjectPointsToBrepsEx(System.Collections.Generic.IEnumerable{Rhino.Geometry.Brep},System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.Geometry.Vector3d,System.Double,System.Int32[]@)">
            <summary>
            Projects points onto breps.
            </summary>
            <param name="breps">The breps projection targets.</param>
            <param name="points">The points to project.</param>
            <param name="direction">The direction to project.</param>
            <param name="tolerance">The tolerance used for intersections.</param>
            <param name="indices">Return points[i] is a projection of points[indices[i]]</param>
            <returns>
            Array of projected points, or null in case of any error or invalid input.
            </returns>
        </member>
        <member name="T:Rhino.Geometry.Intersect.PlaneCircleIntersection">
            <summary>
            Represents all possible cases of a Plane|Circle intersection event.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneCircleIntersection.None">
            <summary>
            No intersections. Either because radius is too small or because circle plane is parallel but not coincident with the intersection plane.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneCircleIntersection.Tangent">
            <summary>
            Tangent (one point) intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneCircleIntersection.Secant">
            <summary>
            Secant (two point) intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneCircleIntersection.Parallel">
            <summary>
            Circle and plane are planar but not coincident. 
            Parallel indicates no intersection took place.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneCircleIntersection.Coincident">
            <summary>
            Circle and plane are co-planar, they intersect everywhere.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.PlaneSphereIntersection">
            <summary>
            Represents all possible cases of a Plane|Sphere intersection event.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneSphereIntersection.None">
            <summary>
            No intersections.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneSphereIntersection.Point">
            <summary>
            Tangent intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.PlaneSphereIntersection.Circle">
            <summary>
            Circular intersection.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.LineCircleIntersection">
            <summary>
            Represents all possible cases of a Line|Circle intersection event.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCircleIntersection.None">
            <summary>
            No intersections.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCircleIntersection.Single">
            <summary>
            One intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCircleIntersection.Multiple">
            <summary>
            Two intersections.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.LineSphereIntersection">
            <summary>
            Represents all possible cases of a Line|Sphere intersection event.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineSphereIntersection.None">
            <summary>
            No intersections.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineSphereIntersection.Single">
            <summary>
            One intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineSphereIntersection.Multiple">
            <summary>
            Two intersections.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.LineCylinderIntersection">
            <summary>
            Represents all possible cases of a Line|Cylinder intersection event.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCylinderIntersection.None">
            <summary>
            No intersections.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCylinderIntersection.Single">
            <summary>
            One intersection.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCylinderIntersection.Multiple">
            <summary>
            Two intersections.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.LineCylinderIntersection.Overlap">
            <summary>
            Line lies on cylinder.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.SphereSphereIntersection">
            <summary>
            Represents all possible cases of a Sphere|Sphere intersection event.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.SphereSphereIntersection.None">
            <summary>
            Spheres do not intersect.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.SphereSphereIntersection.Point">
            <summary>
            Spheres touch at a single point.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.SphereSphereIntersection.Circle">
            <summary>
            Spheres intersect at a circle.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Intersect.SphereSphereIntersection.Overlap">
            <summary>
            Spheres are identical.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.IntersectionEvent">
            <summary>
            Provides all the information for a single Curve Intersection event.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Intersect.IntersectionEvent.SurfacePointParameter(System.Double@,System.Double@)">
            <summary>
            If this instance records a Curve|Surface intersection event, 
            <i>and</i> the intersection type is <b>point</b>, then use this function 
            to get the U and V parameters on the surface where the intersection occurs.
            </summary>
            <param name="u">Parameter on surface u direction where the intersection occurs.</param>
            <param name="v">Parameter on surface v direction where the intersection occurs.</param>
        </member>
        <member name="M:Rhino.Geometry.Intersect.IntersectionEvent.SurfaceOverlapParameter(Rhino.Geometry.Interval@,Rhino.Geometry.Interval@)">
            <summary>
            If this instance records a Curve|Surface intersection event, 
            <i>and</i> the intersection type if <b>overlap</b>, then use this function 
            to get the U and V domains on the surface where the overlap occurs.
            </summary>
            <param name="uDomain">Domain along surface U direction for overlap event.</param>
            <param name="vDomain">Domain along surface V direction for overlap event.</param>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.IsPoint">
            <summary>
            All curve intersection events are either a single point or an overlap.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.IsOverlap">
            <summary>
            All curve intersection events are either a single point or an overlap.
            </summary>
            <example>
            <code source='examples\vbnet\ex_curvesurfaceintersect.vb' lang='vbnet'/>
            <code source='examples\cs\ex_curvesurfaceintersect.cs' lang='cs'/>
            <code source='examples\py\ex_curvesurfaceintersect.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.PointA">
            <summary>
            Gets the point on Curve A where the intersection occured. 
            If the intersection type is overlap, then this will return the 
            start of the overlap region.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.PointA2">
            <summary>
            Gets the end point of the overlap on Curve A. 
            If the intersection type is not overlap, this value is meaningless.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.PointB">
            <summary>
            Gets the point on Curve B (or Surface B) where the intersection occured. 
            If the intersection type is overlap, then this will return the 
            start of the overlap region.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.PointB2">
            <summary>
            Gets the end point of the overlap on Curve B (or Surface B). 
            If the intersection type is not overlap, this value is meaningless.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.ParameterA">
            <summary>
            Gets the parameter on Curve A where the intersection occured. 
            If the intersection type is overlap, then this will return the 
            start of the overlap region.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.ParameterB">
            <summary>
            Gets the parameter on Curve A where the intersection occured. 
            If the intersection type is overlap, then this will return the 
            start of the overlap region.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.OverlapA">
            <summary>
            Gets the interval on curve A where the overlap occurs. 
            If the intersection type is not overlap, this value is meaningless.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.IntersectionEvent.OverlapB">
            <summary>
            Gets the interval on curve B where the overlap occurs. 
            If the intersection type is not overlap, this value is meaningless.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.CurveIntersections">
            <summary>
            Maintains an ordered list of Curve Intersection results.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.#ctor(System.IntPtr,System.Int32)">
            <summary>
            Constructor.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.Finalize">
            <summary>
            Destructor.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.CopyTo(Rhino.Geometry.Intersect.IntersectionEvent[],System.Int32)">
            <summary>
            Copies all intersection results into another array, departing at an index in the target array.
            </summary>
            <param name="array">The target array. This value cannot be null.</param>
            <param name="arrayIndex">Zero-based index in which to start the copy.</param>
            <exception cref="T:System.ArgumentNullException">If array is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">If arrayIndex is less than 0.</exception>
            <exception cref="T:System.ArgumentException">If array is multi-dimensional; or if arrayIndex is
            larger than or equal to the length of this collection; or this collection contains more 
            IntersectionEvents than the ones that can be stored in array after and including arrayIndex.
            </exception>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.GetEnumerator">
            <summary>
            Returns an enumerator that is capable of yielding all IntersectionEvents in the collection.
            </summary>
            <returns>The constructed enumerator.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#IList{Rhino#Geometry#Intersect#IntersectionEvent}#IndexOf(Rhino.Geometry.Intersect.IntersectionEvent)">
            <summary>
            Determines the index of an IntersectionEvent.
            </summary>
            <param name="item">The IntersectionEvent to be found.</param>
            <returns>The index in case the IntersectionEvent was found; -1 otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#IList{Rhino#Geometry#Intersect#IntersectionEvent}#Insert(System.Int32,Rhino.Geometry.Intersect.IntersectionEvent)">
            <summary>
            Inserting is not supported and this method always throws NotSupportedException.
            </summary>
            <param name="index">Inserting is not supported and this value is ignored.</param>
            <param name="item">Inserting is not supported and this value is ignored.</param>
            <exception cref="T:System.NotSupportedException">NotSupportedException is always thrown.</exception>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#IList{Rhino#Geometry#Intersect#IntersectionEvent}#RemoveAt(System.Int32)">
            <summary>
            Removal is not supported and this method always throws NotSupportedException.
            </summary>
            <param name="index">Removal is not supported and this value is ignored.</param>
            <exception cref="T:System.NotSupportedException">NotSupportedException is always thrown.</exception>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#ICollection{Rhino#Geometry#Intersect#IntersectionEvent}#Add(Rhino.Geometry.Intersect.IntersectionEvent)">
            <summary>
            Addition is not supported and this method always throws NotSupportedException.
            </summary>
            <param name="item">Addition is not supported and this value is ignored.</param>
            <exception cref="T:System.NotSupportedException">NotSupportedException is always thrown.</exception>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#ICollection{Rhino#Geometry#Intersect#IntersectionEvent}#Clear">
            <summary>
            Clearing is not supported and this method always throws NotSupportedException.
            </summary>
            <exception cref="T:System.NotSupportedException">NotSupportedException is always thrown.</exception>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#ICollection{Rhino#Geometry#Intersect#IntersectionEvent}#Contains(Rhino.Geometry.Intersect.IntersectionEvent)">
            <summary>
            Allows to establish whether this collection contains and IntersectionEvent.
            <para>This method is O(n), where n is the Count of elements in this collection.</para>
            </summary>
            <param name="item">Object to be found.</param>
            <returns>true if element is contained; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#ICollection{Rhino#Geometry#Intersect#IntersectionEvent}#Remove(Rhino.Geometry.Intersect.IntersectionEvent)">
            <summary>
            Removal is not supported and this method always throws NotSupportedException.
            </summary>
            <exception cref="T:System.NotSupportedException">NotSupportedException is always thrown.</exception>
        </member>
        <member name="M:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns a non-generic enumerator that is capable of yielding all IntersectionEvents in the collection.
            This returns the same enumerator as the generic counterpart.
            </summary>
            <returns>The constructed enumerator.</returns>
        </member>
        <member name="P:Rhino.Geometry.Intersect.CurveIntersections.Count">
            <summary>
            Gets the number of recorded intersection events.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.CurveIntersections.Item(System.Int32)">
            <summary>
            Gets the intersection event data at the given index.
            </summary>
            <param name="index">Index of intersection event to retrieve.</param>
        </member>
        <member name="P:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#IList{Rhino#Geometry#Intersect#IntersectionEvent}#Item(System.Int32)">
            <summary>
            Gets the intersection event data at the given index; setting always throws an exception.
            </summary>
            <param name="index">Index of intersection event to retrieve.</param>
            <returns>The intersection event.</returns>
            <exception cref="T:System.NotSupportedException">NotSupportedException is always thrown when
            setting this indexer.</exception>
        </member>
        <member name="P:Rhino.Geometry.Intersect.CurveIntersections.System#Collections#Generic#ICollection{Rhino#Geometry#Intersect#IntersectionEvent}#IsReadOnly">
            <summary>
            This collection is readonly, so this property returns always true.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Light">
            <summary>
            Represents a light that shines in the modeling space.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Light.CreateSunLight(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a light that represents the Sun.
            </summary>
            <param name="northAngleDegrees">The angle of North in degrees. North is the angle between positive World Y axis and model North, as measured on World XY plane.</param>
            <param name="azimuthDegrees">The Azimut angle value in degrees. Azimuth is the compass angle from North.</param>
            <param name="altitudeDegrees">The Altitude angle in degrees. Altitude is the angle above the ground plane.</param>
            <returns>A new sun light.</returns>
            <exception cref="T:Rhino.Runtime.RdkNotLoadedException">If the RDK is not loaded.</exception>
        </member>
        <member name="M:Rhino.Geometry.Light.CreateSunLight(System.Double,System.DateTime,System.Double,System.Double)">
            <summary>
            Constructs a light which simulates the Sun based on a given time and location on Earth.
            </summary>
            <param name="northAngleDegrees">The angle of North in degrees. North is the angle between positive World Y axis and model North, as measured on World XY plane.</param>
            <param name="when">The time of the measurement. The Kind property of DateTime specifies whether this is in local or universal time.
            <para>Local and Undefined <see cref="T:System.DateTimeKind">daytime kinds</see> in this argument are considered local.</para></param>
            <param name="latitudeDegrees">The latitude, in degrees, of the location on Earth.</param>
            <param name="longitudeDegrees">The longitude, in degrees, of the location on Earth.</param>
            <returns>A newly constructed light object.</returns>
            <exception cref="T:Rhino.Runtime.RdkNotLoadedException">If the RDK is not loaded.</exception>
        </member>
        <member name="M:Rhino.Geometry.Light.CreateSunLight(Rhino.Render.Sun)">
            <summary>
            Constructs a light which simulates a <see cref="T:Rhino.Render.Sun"/>.
            </summary>
            <param name="sun">A Sun object from the Rhino.Render namespace.</param>
            <returns>A light.</returns>
        </member>
        <member name="M:Rhino.Geometry.Light.#ctor">
            <summary>
            Initializes a new light.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Light.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.Light.SetAttenuation(System.Double,System.Double,System.Double)">
            <summary>
            Sets the attenuation settings (ignored for "directional" and "ambient" lights).
            <para>attenuation = 1/(a0 + d*a1 + d^2*a2) where d = distance to light.</para>
            </summary>
            <param name="a0">The new constant attenuation divisor term.</param>
            <param name="a1">The new reverse linear attenuation divisor term.</param>
            <param name="a2">The new reverse quadratic attenuation divisor term.</param>
        </member>
        <member name="M:Rhino.Geometry.Light.GetAttenuation(System.Double)">
            <summary>
            Gets the attenuation settings (ignored for "directional" and "ambient" lights).
            <para>attenuation = 1/(a0 + d*a1 + d^2*a2) where d = distance to light.</para>
            </summary>
            <param name="d">The distance to evaluate.</param>
            <returns>0 if a0 + d*a1 + d^2*a2 &lt;= 0.</returns>
        </member>
        <member name="M:Rhino.Geometry.Light.GetSpotLightRadii(System.Double@,System.Double@)">
            <summary>
            Gets the spot light radii.
            </summary>
            <param name="innerRadius">The inner radius. This out parameter is assigned during this call.</param>
            <param name="outerRadius">The outer radius. This out parameter is assigned during this call.</param>
            <returns>true if operation succeeded; otherwise, false.</returns>
        </member>
        <member name="P:Rhino.Geometry.Light.IsEnabled">
            <summary>
            Gets or sets a value that defines if the light is turned on (true) or off (false).
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.LightStyle">
            <summary>
            Gets or sets a light style on this camera.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.IsPointLight">
            <summary>
            Gets a value indicating whether the light style
            is <see cref="P:Rhino.Geometry.Light.LightStyle"/> CameraPoint or WorldPoint.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.IsDirectionalLight">
            <summary>
            Gets a value indicating whether the light style
            is <see cref="P:Rhino.Geometry.Light.LightStyle"/> CameraDirectional or WorldDirectional.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.IsSpotLight">
            <summary>
            Gets a value indicating whether the light style
            is <see cref="P:Rhino.Geometry.Light.LightStyle"/> CameraSpot or WorldSpot.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.IsLinearLight">
            <summary>
            Gets a value indicating whether the light style
            is <see cref="P:Rhino.Geometry.Light.LightStyle"/> WorldLinear.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.IsRectangularLight">
            <summary>
            Gets a value indicating whether the light style
            is <see cref="P:Rhino.Geometry.Light.LightStyle"/> WorldRectangular.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.IsSunLight">
            <summary>
            Gets a value indicating whether this object is a Sun light.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.CoordinateSystem">
            <summary>
            Gets a value, determined by LightStyle, that explains whether
            the camera diretions are relative to World or Camera spaces.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.Location">
            <summary>
            Gets or sets the light or 3D position or location.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.Direction">
            <summary>
            Gets or sets the vector direction of the camera.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.PerpendicularDirection">
            <summary>
            Gets a perpendicular vector to the camera direction.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.Intensity">
            <summary>
            Gets or sets the light intensity.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.PowerWatts">
            <summary>
            Gets or sets the light power in watts (W).
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.PowerLumens">
            <summary>
            Gets or sets the light power in lumens (lm).
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.PowerCandela">
            <summary>
            Gets or sets the light power in candelas (cd).
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.Ambient">
            <summary>
            Gets or sets the ambient color.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.Diffuse">
            <summary>
            Gets or sets the diffuse color.
            </summary>
            <example>
            <code source='examples\vbnet\ex_modifylightcolor.vb' lang='vbnet'/>
            <code source='examples\cs\ex_modifylightcolor.cs' lang='cs'/>
            <code source='examples\py\ex_modifylightcolor.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.Light.Specular">
            <summary>
            Gets or sets the specular color.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.AttenuationVector">
            <summary>
            Gets or Sets the attenuation vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.SpotAngleRadians">
            <summary>
            Gets or sets the spot angle in radians.
            <para>Ignored for non-spot lights.</para>
            <para>angle = 0 to pi/2  (0 to 90 degrees).</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.SpotExponent">
            <summary>
            The spot exponent varies from 0.0 to 128.0 and provides
            an exponential interface for controling the focus or 
            concentration of a spotlight (like the 
            OpenGL GL_SPOT_EXPONENT parameter).  The spot exponent
            and hot spot parameters are linked; changing one will
            change the other.
            A hot spot setting of 0.0 corresponds to a spot exponent of 128.
            A hot spot setting of 1.0 corresponds to a spot exponent of 0.0.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.HotSpot">
            <summary>
            The hot spot setting runs from 0.0 to 1.0 and is used to
            provides a linear interface for controling the focus or 
            concentration of a spotlight.
            A hot spot setting of 0.0 corresponds to a spot exponent of 128.
            A hot spot setting of 1.0 corresponds to a spot exponent of 0.0.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.Length">
            <summary>
            Gets or sets the height in linear and rectangular lights.
            <para>(ignored for non-linear/rectangular lights.)</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.Width">
            <summary>
            Gets or sets the width in linear and rectangular lights.
            <para>(ignored for non-linear/rectangular lights.)</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.SpotLightShadowIntensity">
            <summary>
            Gets or sets the spot light shadow intensity.
            <para>(ignored for non-spot lights.)</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Light.Name">
            <summary>
            Gets or sets the spot light name.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.LineCurve">
            <summary>
            Represents a linear curve.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.LineCurve.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.LineCurve"/> class.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.LineCurve.#ctor(Rhino.Geometry.LineCurve)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.LineCurve"/> class, by
            copying values from another linear curve.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.LineCurve.#ctor(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.LineCurve"/> class, by
            setting start and end point from two <see cref="T:Rhino.Geometry.Point2d">2D points</see>.</summary>
            <param name="from">A start point.</param>
            <param name="to">An end point.</param>
        </member>
        <member name="M:Rhino.Geometry.LineCurve.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <example>
            <code source="examples\vbnet\ex_addtruncatedcone.vb" lang="vbnet"/>
            <code source="examples\cs\ex_addtruncatedcone.cs" lang="cs"/>
            <code source="examples\py\ex_addtruncatedcone.py" lang="py"/>
            </example>
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.LineCurve"/> class, by
            setting start and end point from two <see cref="T:Rhino.Geometry.Point3d">3D points</see>.</summary>
            <param name="from">A start point.</param>
            <param name="to">An end point.</param>
        </member>
        <member name="M:Rhino.Geometry.LineCurve.#ctor(Rhino.Geometry.Line)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.LineCurve"/> class, by
            retrieving its value from a <see cref="P:Rhino.Geometry.LineCurve.Line">line</see>.
            </summary>
            <param name="line">A line to use as model.</param>
        </member>
        <member name="M:Rhino.Geometry.LineCurve.#ctor(Rhino.Geometry.Line,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.LineCurve"/> class, by
            retrieving its value from a <see cref="P:Rhino.Geometry.LineCurve.Line">line</see> and setting the domain.
            </summary>
            <param name="line">A line to use as model.</param>
            <param name="t0">The new domain start.</param>
            <param name="t1">The new domain end.</param>
        </member>
        <member name="M:Rhino.Geometry.LineCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor used in serialization.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="P:Rhino.Geometry.LineCurve.Line">
            <summary>
            Gets or sets the Line value inside this curve.
            </summary>
        </member>
        <member name="T:Rhino.Collections.RhinoList`1">
            <summary>
            Represents a list of generic data. This class is similar to System.Collections.Generic.List(T) 
            but exposes a few more methods.
            </summary>
        </member>
        <member name="F:Rhino.Collections.RhinoList`1.m_items">
            <summary>
            Internal array of items. The array will contain trailing invalid items if Capacity > Count. 
            WARNING! Do not store a reference to this array anywhere! The List class may decide to replace 
            the internal array with another one.
            </summary>
        </member>
        <member name="F:Rhino.Collections.RhinoList`1.m_size">
            <summary>
            The number of "valid" elements in m_items (same as m_count in ON_SimpleArray)
            </summary>
        </member>
        <member name="F:Rhino.Collections.RhinoList`1.m_version">
            <summary>
            The version counter is incremented whenever a change is made to the list.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.#ctor">
            <summary>
            Initializes a new, empty list.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.#ctor(System.Int32)">
            <summary>
            Initializes an empty list with a certain capacity.
            </summary>
            <param name="initialCapacity">Number of items this list can store without resizing.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.#ctor(System.Int32,`0)">
            <summary>
            Initializes a new list with a specified amount of values.
            </summary>
            <param name="amount">Number of values to add to this list. Must be equal to or larger than zero.</param>
            <param name="defaultValue">Value to add, for reference types, 
            the same item will be added over and over again.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Initializes this list as a shallow duplicate of another list, array or any other enumerable set of T.
            </summary>
            <param name="collection">Collection of items to duplicate.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.#ctor(Rhino.Collections.RhinoList{`0})">
            <summary>
            Initializes an new list by shallow duplicating another list.
            </summary>
            <param name="list">List to mimic.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.ToArray">
            <summary>
            Constructs an array that contains all items in this list.
            </summary>
            <returns>An array containing all items in this list.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.TrimExcess">
            <summary>
            Sets the capacity to the actual number of elements in the List, 
            if that number is less than a threshold value.
            </summary>
            <remarks>This function differs from the DotNET implementation of List&lt;T&gt; 
            since that one only trims the excess if the excess exceeds 10% of the list length.</remarks>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.RemapIndex(System.Int32)">
            <summary>
            Remap an index in the infinite range onto the List index range.
            </summary>
            <param name="index">Index to remap.</param>
            <returns>Remapped index.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Clear">
            <summary>
            Removes all elements from the List.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#IList#Add(System.Object)">
            <summary>
            Adds an item to the IList.
            </summary>
            <param name="item">The Object to add to the IList.</param>
            <returns>The position into which the new element was inserted.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Add(`0)">
            <summary>
            Adds an object to the end of the List.
            </summary>
            <param name="item">Item to append.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.AddRange(System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Adds the elements of the specified collection to the end of the List.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the List. 
            The collection itself cannot be a null reference (Nothing in Visual Basic), 
            but it can contain elements that are a null reference (Nothing in Visual Basic), 
            if type T is a reference type.
            </param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.AddRange(System.Collections.IEnumerable)">
            <summary>
            Adds the elements of the specified collection to the end of the List.
            </summary>
            <param name="collection">The collection whose elements should be added to the end of the List. 
            The collection itself cannot be a null reference (Nothing in Visual Basic), 
            but it can contain elements that are a null reference (Nothing in Visual Basic). 
            Objects in collection which cannot be represented as T will throw exceptions.
            </param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#IList#Insert(System.Int32,System.Object)">
            <summary>
            Inserts an element into the List at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be a null reference 
            (Nothing in Visual Basic) for reference types.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Insert(System.Int32,`0)">
            <summary>
            Inserts an element into the List at the specified index.
            </summary>
            <param name="index">The zero-based index at which item should be inserted.</param>
            <param name="item">The object to insert. The value can be a null reference 
            (Nothing in Visual Basic) for reference types.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{`0})">
            <summary>
            Inserts the elements of a collection into the List at the specified index.
            </summary>
            <param name="index">The zero-based index at which the new elements should be inserted.</param>
            <param name="collection">The collection whose elements should be inserted into the List. 
            The collection itself cannot be a null reference (Nothing in Visual Basic), 
            but it can contain elements that are a null reference (Nothing in Visual Basic), 
            if type T is a reference type.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#IList#Remove(System.Object)">
            <summary>
            Removes the first occurrence of a specific object from the List.
            </summary>
            <param name="item">The object to remove from the List. 
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Remove(`0)">
            <summary>
            Removes the first occurrence of a specific object from the List.
            </summary>
            <param name="item">The object to remove from the List. 
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>true if item is successfully removed; otherwise, false. 
            This method also returns false if item was not found in the List.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.RemoveAll(System.Predicate{`0})">
            <summary>
            Removes the all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the elements to remove.</param>
            <returns>The number of elements removed from the List.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.RemoveNulls">
            <summary>
            Removes all elements from the List that are null references (Nothing in Visual Basic). 
            This function will not do anything if T is not a Reference type.
            </summary>
            <returns>The number of nulls removed from the List.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.RemoveAt(System.Int32)">
            <summary>
            Removes the element at the specified index of the List.
            </summary>
            <param name="index">The zero-based index of the element to remove.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.RemoveRange(System.Int32,System.Int32)">
            <summary>
            Removes a range of elements from the List.
            </summary>
            <param name="index">The zero-based starting index of the range of elements to remove.</param>
            <param name="count">The number of elements to remove.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.GetRange(System.Int32,System.Int32)">
            <summary>
            Constructs a shallow copy of a range of elements in the source List.
            </summary>
            <param name="index">The zero-based List index at which the range starts.</param>
            <param name="count">The number of elements in the range.</param>
            <returns>A shallow copy of a range of elements in the source List.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#IList#IndexOf(System.Object)">
            <summary>
            Searches for the specified object and returns the zero-based index of the 
            first occurrence within the entire List.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) 
            for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within 
            the entire List, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.IndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based index of the 
            first occurrence within the entire List.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) 
            for reference types.</param>
            <returns>The zero-based index of the first occurrence of item within 
            the entire List, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.IndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of 
            the first occurrence within the range of elements in the List that 
            extends from the specified index to the last element.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) 
            for reference types.</param>
            <param name="index">The zero-based starting index of the search.</param>
            <returns>The zero-based index of the first occurrence of item within 
            the entire List, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.IndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the first 
            occurrence within the range of elements in the List that starts at the specified 
            index and contains the specified number of elements.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) 
            for reference types.</param>
            <param name="index">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the first occurrence of item within 
            the entire List, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.LastIndexOf(`0)">
            <summary>
            Searches for the specified object and returns the zero-based 
            index of the last occurrence within the entire List.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>The zero-based index of the last occurrence of item within 
            the entire the List, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.LastIndexOf(`0,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index 
            of the last occurrence within the range of elements in the List 
            that extends from the first element to the specified index.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <returns>The zero-based index of the last occurrence of item within 
            the entire the List, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.LastIndexOf(`0,System.Int32,System.Int32)">
            <summary>
            Searches for the specified object and returns the zero-based index of the 
            last occurrence within the range of elements in the List that contains 
            the specified number of elements and ends at the specified index.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <param name="index">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <returns>The zero-based index of the last occurrence of item within 
            the entire the List, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.BinarySearch(`0)">
            <summary>
            Searches the entire sorted List for an element using the default comparer 
            and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be a null reference 
            (Nothing in Visual Basic) for reference types.</param>
            <returns>The zero-based index of item in the sorted List, if item is found; 
            otherwise, a negative number that is the bitwise complement of the index 
            of the next element that is larger than item or, if there is no larger element, 
            the bitwise complement of Count.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.BinarySearch(`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted List for an element using the specified 
            comparer and returns the zero-based index of the element.
            </summary>
            <param name="item">The object to locate. The value can be a null reference 
            (Nothing in Visual Basic) for reference types.</param>
            <param name="comparer">The IComparer(T) implementation to use when comparing elements.
            Or a null reference (Nothing in Visual Basic) to use the default comparer 
            Comparer(T)::Default.</param>
            <returns>The zero-based index of item in the sorted List, if item is found; 
            otherwise, a negative number that is the bitwise complement of the index 
            of the next element that is larger than item or, if there is no larger element, 
            the bitwise complement of Count.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.BinarySearch(System.Int32,System.Int32,`0,System.Collections.Generic.IComparer{`0})">
            <summary>
            Searches the entire sorted List for an element using the specified 
            comparer and returns the zero-based index of the element.
            </summary>
            <param name="index">The zero-based starting index of the range to search.</param>
            <param name="count">The length of the range to search.</param>
            <param name="item">The object to locate. The value can be a null reference 
            (Nothing in Visual Basic) for reference types.</param>
            <param name="comparer">The IComparer(T) implementation to use when comparing elements.
            Or a null reference (Nothing in Visual Basic) to use the default comparer 
            Comparer(T)::Default.</param>
            <returns>The zero-based index of item in the sorted List, if item is found; 
            otherwise, a negative number that is the bitwise complement of the index 
            of the next element that is larger than item or, if there is no larger element, 
            the bitwise complement of Count.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Contains(`0)">
            <summary>
            Determines whether an element is in the List.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>true if item is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#IList#Contains(System.Object)">
            <summary>
            Determines whether an element is in the List.
            </summary>
            <param name="item">The object to locate in the List. 
            The value can be a null reference (Nothing in Visual Basic) for reference types.</param>
            <returns>true if item is found in the List; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Exists(System.Predicate{`0})">
            <summary>
            Determines whether the List contains elements that match the 
            conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the elements to search for.</param>
            <returns>true if the List contains one or more elements that match the 
            conditions defined by the specified predicate; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Find(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the 
            specified predicate, and returns the first occurrence within the entire List.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The first element that matches the conditions defined by the specified predicate, 
            if found; otherwise, the default value for type T.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindLast(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the 
            specified predicate, and returns the last occurrence within the entire List.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The last element that matches the conditions defined by the specified predicate, 
            if found; otherwise, the default value for type T.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindAll(System.Predicate{`0})">
            <summary>
            Retrieves all the elements that match the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the elements to search for.</param>
            <returns>A ON_List(T) containing all the elements that match the conditions 
            defined by the specified predicate, if found; otherwise, an empty ON_List(T).</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.TrueForAll(System.Predicate{`0})">
            <summary>
            Determines whether every element in the List matches the conditions defined by the specified predicate.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions to check against the elements.</param>
            <returns>true if every element in the List matches the conditions defined by 
            the specified predicate; otherwise, false. If the list has no elements, the return value is true.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.ForEach(System.Action{`0})">
            <summary>
            Performs the specified action on each element of the List.
            </summary>
            <param name="action">The Action(T) delegate to perform on each element of the List.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the 
            specified predicate, and returns the zero-based index of the first 
            occurrence within the entire List.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that 
            matches the conditions defined by match, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the 
            specified predicate, and returns the zero-based index of the first 
            occurrence within the entire List.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that 
            matches the conditions defined by match, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the specified predicate, 
            and returns the zero-based index of the first occurrence within the range of elements 
            in the List that extends from the specified index to the last element.
            </summary>
            <param name="startIndex">The zero-based starting index of the search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the first occurrence of an element that 
            matches the conditions defined by match, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindLastIndex(System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the 
            specified predicate, and returns the zero-based index of the last 
            occurrence within the entire List.
            </summary>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches 
            the conditions defined by match, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindLastIndex(System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the 
            specified predicate, and returns the zero-based index of the last 
            occurrence within the entire List.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches 
            the conditions defined by match, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.FindLastIndex(System.Int32,System.Int32,System.Predicate{`0})">
            <summary>
            Searches for an element that matches the conditions defined by the 
            specified predicate, and returns the zero-based index of the last 
            occurrence within the entire List.
            </summary>
            <param name="startIndex">The zero-based starting index of the backward search.</param>
            <param name="count">The number of elements in the section to search.</param>
            <param name="match">The Predicate(T) delegate that defines the conditions of the element to search for.</param>
            <returns>The zero-based index of the last occurrence of an element that matches 
            the conditions defined by match, if found; otherwise, -1.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort">
            <summary>
            Sorts the elements in the entire List using the default comparer.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort(System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in the entire list using the specified System.Comparison(T)
            </summary>
            <param name="comparer">The IComparer(T) implementation to use when comparing elements, 
            or a null reference (Nothing in Visual Basic) to use the default comparer Comparer(T).Default.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort(System.Comparison{`0})">
            <summary>
            Sorts the elements in the entire list using the specified comparer.
            </summary>
            <param name="comparison">The System.Comparison(T) to use when comparing elements.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort(System.Int32,System.Int32,System.Collections.Generic.IComparer{`0})">
            <summary>
            Sorts the elements in a range of elements in list using the specified comparer.
            </summary>
            <param name="index">The zero-based starting index of the range to sort.</param>
            <param name="count">The length of the range to sort.</param>
            <param name="comparer">The IComparer(T) implementation to use when comparing 
            elements, or a null reference (Nothing in Visual Basic) to use the default 
            comparer Comparer(T).Default.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort(System.Double[])">
            <summary>
            Sort this list based on a list of numeric keys of equal length. 
            The keys array will not be altered.
            </summary>
            <param name="keys">Numeric keys to sort with.</param>
            <remarks>This function does not exist on the DotNET List class. 
            David thought it was a good idea.</remarks>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Sort(System.Int32[])">
            <summary>
            Sort this list based on a list of numeric keys of equal length. 
            The keys array will not be altered.
            </summary>
            <param name="keys">Numeric keys to sort with.</param>
            <remarks>This function does not exist on the DotNET List class. 
            David thought it was a good idea.</remarks>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Reverse">
            <summary>
            Reverses the order of the elements in the entire List.
            </summary>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.Reverse(System.Int32,System.Int32)">
            <summary>
            Reverses the order of the elements in the specified range.
            </summary>
            <param name="index">The zero-based starting index of the range to reverse.</param>
            <param name="count">The number of elements in the range to reverse.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.AsReadOnly">
            <summary>
            Constructs a read-only wrapper of this class.
            </summary>
            <returns>A wrapper.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.ConvertAll``1(System.Converter{`0,``0})">
            <summary>
            Aggregates all results of a conversion function over this table into a new list.
            </summary>
            <typeparam name="TOutput">The type returned by the function.</typeparam>
            <param name="converter">A conversion function that can transform from T to TOutput.</param>
            <returns>The new list.</returns>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.CopyTo(`0[])">
            <summary>
            Copies the entire List to a compatible one-dimensional array, 
            starting at the beginning of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination 
            of the elements copied from List. The Array must have zero-based indexing.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.CopyTo(`0[],System.Int32)">
            <summary>
            Copies the entire List to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="array">The one-dimensional Array that is the destination 
            of the elements copied from List. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)">
            <summary>
            Copies a range of elements from the List to a compatible one-dimensional array, 
            starting at the specified index of the target array.
            </summary>
            <param name="index">The zero-based index in the source List at which copying begins.</param>
            <param name="array">The one-dimensional Array that is the destination of the elements 
            copied from List. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
            <param name="count">The number of elements to copy.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.System#Collections#ICollection#CopyTo(System.Array,System.Int32)">
            <summary>
            Copies the elements of the ICollection to an Array, starting at a particular Array index.
            </summary>
            <param name="array">The one-dimensional Array that is the destination of the elements 
            copied from ICollection. The Array must have zero-based indexing.</param>
            <param name="arrayIndex">The zero-based index in array at which copying begins.</param>
        </member>
        <member name="M:Rhino.Collections.RhinoList`1.GetEnumerator">
            <summary>
            Constructs an enumerator that is capable of iterating over all items in this list.
            </summary>
            <returns>The new enumerator.</returns>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.Capacity">
            <summary>
            Gets or sets the total number of elements the internal data structure can hold without resizing.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.Count">
            <summary>
            Gets the number of elements actually contained in the List.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.NullCount">
            <summary>
            Gets the number of null references (Nothing in Visual Basic) in this list. 
            If T is a ValueType, this property always return zero.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#IList#Item(System.Int32)">
            <summary>
            Gets or sets the element at the specified index.
            </summary>
            <param name="index">The zero-based index of the element to get or set.</param>
            <returns>The element at the specified index.</returns>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.First">
            <summary>
            Gets or sets the first item in the list. This is synonymous to calling List[0].
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.Last">
            <summary>
            Gets or sets the last item in the list. This is synonymous to calling List[Count-1].
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#IList#IsReadOnly">
            <summary>
            When implemented by a class, gets a value indicating whether the IList is read-only. 
            RhinoList is never ReadOnly.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#IList#IsFixedSize">
            <summary>
            When implemented by a class, gets a value indicating whether the IList has a fixed size. 
            RhinoList is never fixed.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#Generic#ICollection{T}#IsReadOnly">
            <summary>
            When implemented by a class, gets a value indicating whether the IList is read-only. 
            RhinoList is never ReadOnly.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#ICollection#IsSynchronized">
            <summary>
            When implemented by a class, gets a value indicating whether access to the ICollection is synchronized (thread-safe).
            ON_List is never Synchronized.
            </summary>
        </member>
        <member name="P:Rhino.Collections.RhinoList`1.System#Collections#ICollection#SyncRoot">
            <summary>
            Gets an object that can be used to synchronize access to the ICollection.
            </summary>
        </member>
        <member name="T:Rhino.Collections.RhinoList`1.FunctorComparer`1">
            <summary>
            Utility class which ties together functionality in Comparer(T) and Comparison(T)
            </summary>
        </member>
        <member name="T:Rhino.Collections.ListDebuggerDisplayProxy`1">
            <summary>
            Utility class for displaying <see cref="T:Rhino.Collections.RhinoList`1"/> contents in the VS debugger.
            </summary>
        </member>
        <member name="T:Rhino.Collections.Point3dList">
            <summary>
            Represents a list of <see cref="T:Rhino.Geometry.Point3d"/>.
            </summary>
        </member>
        <member name="M:Rhino.Collections.Point3dList.#ctor">
            <summary>
            Initializes a new empty list with default capacity.
            </summary>
        </member>
        <member name="M:Rhino.Collections.Point3dList.#ctor(System.Int32)">
            <summary>
            Initializes a new point list with a preallocated initial capacity.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addnurbscurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnurbscurve.cs' lang='cs'/>
            <code source='examples\py\ex_addnurbscurve.py' lang='py'/>
            </example>
            <param name="initialCapacity">The number of added items before which the underlying array will be resized.</param>
        </member>
        <member name="M:Rhino.Collections.Point3dList.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Initializes a new point list by copying the values from another set.
            </summary>
            <param name="collection">The collection to copy from.</param>
        </member>
        <member name="M:Rhino.Collections.Point3dList.#ctor(Rhino.Geometry.Point3d[])">
            <summary>
            Constructs a new point list from values in a point array.
            </summary>
            <param name="initialPoints">Points to add to the list.</param>
        </member>
        <member name="M:Rhino.Collections.Point3dList.GetConstPointArray(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32@)">
            <summary>
            Anything calling this function should not be modifying the contents of the array.
            </summary>
            <param name="points">A list, an array or any enumerable set of points.</param>
            <param name="count">The resulting count of elements.</param>
            <returns>An array.</returns>
        </member>
        <member name="M:Rhino.Collections.Point3dList.ClosestIndex(Rhino.Geometry.Point3d)">
            <summary>
            Finds the index of the point that is closest to a test point in this list.
            </summary>
            <param name="testPoint">point to compare against.</param>
            <returns>index of closest point in the list on success. -1 on error.</returns>
        </member>
        <member name="M:Rhino.Collections.Point3dList.Add(System.Double,System.Double,System.Double)">
            <summary>
            Adds a Point3d to the end of the list with given x,y,z coordinates.
            </summary>
            <param name="x">The X coordinate.</param>
            <param name="y">The Y coordinate.</param>
            <param name="z">The Z coordinate.</param>
            <example>
            <code source='examples\vbnet\ex_addnurbscurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnurbscurve.cs' lang='cs'/>
            <code source='examples\py\ex_addnurbscurve.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Collections.Point3dList.Transform(Rhino.Geometry.Transform)">
            <summary>
            Applies a transform to all the points in the list.
            </summary>
            <param name="xform">Transform to apply.</param>
        </member>
        <member name="M:Rhino.Collections.Point3dList.SetAllX(System.Double)">
            <summary>
            Set all the X values for the points to a single value
            </summary>
            <param name="xValue"></param>
        </member>
        <member name="M:Rhino.Collections.Point3dList.SetAllY(System.Double)">
            <summary>
            Set all the Y values for the points to a single value
            </summary>
            <param name="yValue"></param>
        </member>
        <member name="M:Rhino.Collections.Point3dList.SetAllZ(System.Double)">
            <summary>
            Set all the Z values for the points to a single value
            </summary>
            <param name="zValue"></param>
        </member>
        <member name="M:Rhino.Collections.Point3dList.ClosestIndexInList(System.Collections.Generic.IList{Rhino.Geometry.Point3d},Rhino.Geometry.Point3d)">
            <summary>
            Finds the index of the point in a list of points that is closest to a test point.
            </summary>
            <param name="list">A list of points.</param>
            <param name="testPoint">Point to compare against.</param>
            <returns>Index of closest point in the list on success or -1 on error.</returns>
        </member>
        <member name="M:Rhino.Collections.Point3dList.ClosestPointInList(System.Collections.Generic.IList{Rhino.Geometry.Point3d},Rhino.Geometry.Point3d)">
            <summary>
            Finds the point in a list of points that is closest to a test point.
            </summary>
            <param name="list">A list of points.</param>
            <param name="testPoint">Point to compare against.</param>
            <returns>A point.</returns>
            <exception cref="T:System.ArgumentException">
            List must contain at least one point and testPoint must be valid.
            </exception>
        </member>
        <member name="P:Rhino.Collections.Point3dList.BoundingBox">
            <summary>
            Even though this is a property, it is not a "fast" calculation. Every point is
            evaluated in order to get the bounding box of the list.
            </summary>
        </member>
        <member name="P:Rhino.Collections.Point3dList.X">
            <summary>
            Returns an indexer with all X coordinates in this list.
            </summary>
        </member>
        <member name="P:Rhino.Collections.Point3dList.Y">
            <summary>
            Returns an indexer with all Y coordinates in this list.
            </summary>
        </member>
        <member name="P:Rhino.Collections.Point3dList.Z">
            <summary>
            Returns an indexer with all Z coordinates in this list.
            </summary>
        </member>
        <member name="T:Rhino.Collections.Point3dList.XAccess">
            <summary>
            Utility class for easy-access of x-components of points inside an ON_3dPointList.
            </summary>
        </member>
        <member name="M:Rhino.Collections.Point3dList.XAccess.#ctor(Rhino.Collections.Point3dList)">
            <summary>
            XAccess constructor. 
            </summary>
        </member>
        <member name="P:Rhino.Collections.Point3dList.XAccess.Item(System.Int32)">
            <summary>
            Gets or sets the x-coordinate of the specified point.
            </summary>
            <param name="index">Index of point.</param>
        </member>
        <member name="T:Rhino.Collections.Point3dList.YAccess">
            <summary>
            Utility class for easy-access of x-components of points inside an ON_3dPointList.
            </summary>
        </member>
        <member name="M:Rhino.Collections.Point3dList.YAccess.#ctor(Rhino.Collections.Point3dList)">
            <summary>
            XAccess constructor. 
            </summary>
        </member>
        <member name="P:Rhino.Collections.Point3dList.YAccess.Item(System.Int32)">
            <summary>
            Gets or sets the y-coordinate of the specified point.
            </summary>
            <param name="index">Index of point.</param>
        </member>
        <member name="T:Rhino.Collections.Point3dList.ZAccess">
            <summary>
            Utility class for easy-access of z-components of points inside an ON_3dPointList.
            </summary>
        </member>
        <member name="M:Rhino.Collections.Point3dList.ZAccess.#ctor(Rhino.Collections.Point3dList)">
            <summary>
            XAccess constructor. 
            </summary>
        </member>
        <member name="P:Rhino.Collections.Point3dList.ZAccess.Item(System.Int32)">
            <summary>
            Gets or sets the z-coordinate of the specified point.
            </summary>
            <param name="index">Index of point.</param>
        </member>
        <member name="T:Rhino.Collections.CurveList">
            <summary>
            Represents a list of curves.
            </summary>
        </member>
        <member name="M:Rhino.Collections.CurveList.#ctor">
            <summary>
            Initializes a new empty list of curves.
            </summary>
        </member>
        <member name="M:Rhino.Collections.CurveList.#ctor(System.Int32)">
            <summary>
            Initializes a new empty list of curves with a predefined capacity.
            <para>This is the amount of items the list will accept before resizing.</para>
            </summary>
        </member>
        <member name="M:Rhino.Collections.CurveList.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Initializes a new list that is filled with all items of the input enumerable.
            <para>Input items are not explicitly duplicated (this is a shallow copy).</para>
            </summary>
            <param name="collection">A list, an array or any enumerable set of <see cref="T:Rhino.Geometry.Curve"/>.</param>
        </member>
        <member name="M:Rhino.Collections.CurveList.Add(Rhino.Geometry.Line)">
            <summary>
            Adds a line to this list.
            </summary>
            <param name="line">A line value that will be the model of the new internal curve.</param>
        </member>
        <member name="M:Rhino.Collections.CurveList.Add(Rhino.Geometry.Circle)">
            <summary>
            Adds a circle to this list.
            </summary>
            <param name="circle">A circle value that will be the model of the new internal curve.</param>
        </member>
        <member name="M:Rhino.Collections.CurveList.Add(Rhino.Geometry.Arc)">
            <summary>
            Adds an arc to this list.
            </summary>
            <param name="arc">An arc value that will be the model of the new internal curve.</param>
        </member>
        <member name="M:Rhino.Collections.CurveList.Add(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Adds a polyline to this list.
            </summary>
            <param name="polyline">A polyline value that will be copied in a new polyline.
            <para>This argument can be null, an array, a list or any enumerable set of <see cref="T:Rhino.Geometry.Point3d"/>.</para></param>
        </member>
        <member name="M:Rhino.Collections.CurveList.Add(Rhino.Geometry.Ellipse)">
            <summary>
            Adds an ellipse to this list.
            </summary>
            <param name="ellipse">An ellipse that will be the model of the new internal curve.</param>
        </member>
        <member name="M:Rhino.Collections.CurveList.Insert(System.Int32,Rhino.Geometry.Line)">
            <summary>
            Inserts a line at a given index of this list.
            </summary>
            <param name="index">A 0-based position in the list.</param>
            <param name="line">The line value from which to construct the new curve.</param>
        </member>
        <member name="M:Rhino.Collections.CurveList.Insert(System.Int32,Rhino.Geometry.Circle)">
            <summary>
            Inserts a line at a given index of this list.
            </summary>
            <param name="index">A 0-based position in the list.</param>
            <param name="circle">The circle value from which to construct the new curve.</param>
        </member>
        <member name="M:Rhino.Collections.CurveList.Insert(System.Int32,Rhino.Geometry.Arc)">
            <summary>
            Inserts an arc at a given index of this list.
            </summary>
            <param name="index">A 0-based position in the list.</param>
            <param name="arc">The arc value from which to construct the new curve.</param>
        </member>
        <member name="M:Rhino.Collections.CurveList.Insert(System.Int32,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Inserts a polyline at a given index of this list.
            </summary>
            <param name="index">A 0-based position in the list.</param>
            <param name="polyline">The polyline enumerable from which to construct a copy curve.
            <para>This argument can be null, an array, a list or any enumerable set of
            <see cref="T:Rhino.Geometry.Point3d"/>.</para></param>
        </member>
        <member name="M:Rhino.Collections.CurveList.Insert(System.Int32,Rhino.Geometry.Ellipse)">
            <summary>
            Inserts an ellipse at a given index of this list.
            </summary>
            <param name="index">A 0-based position in the list.</param>
            <param name="ellipse">The ellipse value from which to construct the new curve.</param>
        </member>
        <member name="M:Rhino.Collections.CurveList.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transform all the curves in this list. If at least a single transform failed 
            this function returns false.
            </summary>
            <param name="xform">Transformation to apply to all curves.</param>
        </member>
        <member name="T:Rhino.Geometry.AreaMassProperties">
            <summary>
            Contains static initialization methods and allows access to the computed
            metrics of area, area centroid and area moments in closed
            planar curves, in meshes, in surfaces, in hatches and in boundary representations.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.AreaMassProperties.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.AreaMassProperties.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.AreaMassProperties.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="M:Rhino.Geometry.AreaMassProperties.Compute(Rhino.Geometry.Curve)">
            <summary>
            Computes an AreaMassProperties for a closed planar curve.
            </summary>
            <param name="closedPlanarCurve">Curve to measure.</param>
            <returns>The AreaMassProperties for the given curve or null on failure.</returns>
            <exception cref="T:System.ArgumentNullException">When closedPlanarCurve is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.AreaMassProperties.Compute(Rhino.Geometry.Curve,System.Double)">
            <summary>
            Computes an AreaMassProperties for a closed planar curve.
            </summary>
            <param name="closedPlanarCurve">Curve to measure.</param>
            <param name="planarTolerance">absolute tolerance used to insure the closed curve is planar</param>
            <returns>The AreaMassProperties for the given curve or null on failure.</returns>
            <exception cref="T:System.ArgumentNullException">When closedPlanarCurve is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.AreaMassProperties.Compute(Rhino.Geometry.Hatch)">
            <summary>
            Computes an AreaMassProperties for a hatch.
            </summary>
            <param name="hatch">Hatch to measure.</param>
            <returns>The AreaMassProperties for the given hatch or null on failure.</returns>
            <exception cref="T:System.ArgumentNullException">When hatch is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.AreaMassProperties.Compute(Rhino.Geometry.Mesh)">
            <summary>
            Computes an AreaMassProperties for a mesh.
            </summary>
            <param name="mesh">Mesh to measure.</param>
            <returns>The AreaMassProperties for the given Mesh or null on failure.</returns>
            <exception cref="T:System.ArgumentNullException">When mesh is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.AreaMassProperties.Compute(Rhino.Geometry.Brep)">
            <summary>
            Computes an AreaMassProperties for a brep.
            </summary>
            <param name="brep">Brep to measure.</param>
            <returns>The AreaMassProperties for the given Brep or null on failure.</returns>
            <exception cref="T:System.ArgumentNullException">When brep is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.AreaMassProperties.Compute(Rhino.Geometry.Surface)">
            <summary>
            Computes an AreaMassProperties for a surface.
            </summary>
            <param name="surface">Surface to measure.</param>
            <returns>The AreaMassProperties for the given Surface or null on failure.</returns>
            <exception cref="T:System.ArgumentNullException">When surface is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.AreaMassProperties.Compute(System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase})">
            <summary>
            Computes the Area properties for a collection of geometric objects. 
            At present only Breps, Surfaces, Meshes and Planar Closed Curves are supported.
            </summary>
            <param name="geometry">Objects to include in the area computation.</param>
            <returns>The Area properties for the entire collection or null on failure.</returns>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.Area">
            <summary>
            Gets the area solution.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.AreaError">
            <summary>
            Gets the uncertainty in the area calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.Centroid">
            <summary>
            Gets the area centroid in the world coordinate system.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.CentroidError">
            <summary>
            Gets the uncertainty in the centroid calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesFirstMoments">
            <summary>
            Returns the world coordinate first moments if they were able to be calculated.
            X is integral of "x dm" over the area
            Y is integral of "y dm" over the area
            Z is integral of "z dm" over the area.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesFirstMomentsError">
            <summary>
            Uncertainty in world coordinates first moments calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesSecondMoments">
            <summary>
            Returns the world coordinate first moments if they were able to be calculated.
            X is integral of "xx dm" over the area
            Y is integral of "yy dm" over the area
            Z is integral of "zz dm" over the area.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesSecondMomentsError">
            <summary>
            Uncertainty in world coordinates second moments calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesProductMoments">
            <summary>
            Returns the world coordinate product moments if they were able to be calculated.
            X is integral of "xy dm" over the area
            Y is integral of "yz dm" over the area
            Z is integral of "zx dm" over the area.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesProductMomentsError">
            <summary>
            Uncertainty in world coordinates second moments calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesMomentsOfInertia">
            <summary>
            The moments of inertia about the world coordinate axes.
            X = integral of (y^2 + z^2) dm
            Y = integral of (z^2 + x^2) dm
            Z = integral of (z^2 + y^2) dm.
            </summary>
            <remarks>
            What is meant by "moments of intertia" varies widely in textbooks and papers.
            The values returned here are the integrals listed in the Summary section.
            Some applications may want the values from WorldCoordinatesSecondMoments
            instead of the values returned here.
            </remarks>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesMomentsOfInertiaError">
            <summary>
            Uncertainty in world coordinates moments of inertia calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.WorldCoordinatesRadiiOfGyration">
            <summary>
            Radii of gyration with respect to world coordinate system.
            X = sqrt(integral of (y^2 + z^2) dm/M)
            Y = sqrt(integral of (z^2 + x^2) dm/M)
            Z = sqrt(integral of (z^2 + y^2) dm/M)
            </summary>
            <remarks>
            What is meant by "radii of gyration" varies widely in textbooks and papers.
            The values returned here are the integrals listed in the Returns section.
            </remarks>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.CentroidCoordinatesSecondMoments">
            <summary>
            Second moments with respect to centroid coordinate system.
            X = integral of (x-x0)^2 dm
            Y = integral of (y-y0)^2 dm
            Z = integral of (z-z0)^2 dm
            where (x0,y0,z0) = centroid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.CentroidCoordinatesSecondMomentsError">
            <summary>
            Uncertainty in centroid coordinates second moments calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.CentroidCoordinatesMomentsOfInertia">
            <summary>
            Moments of inertia with respect to centroid coordinate system.
            X = integral of ((y-y0)^2 + (z-z0)^2) dm
            Y = integral of ((z-z0)^2 + (x-x0)^2) dm
            Z = integral of ((z-z0)^2 + (y-y0)^2) dm
            where (x0,y0,z0) = centroid.
            </summary>
            <remarks>
            What is meant by "moments of intertia" varies widely in textbooks and papers.
            The values returned here are the integrals listed in the Summary section.
            Some applications may want the values from WorldCoordinatesSecondMoments
            instead of the values returned here.
            </remarks>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.CentroidCoordinatesMomentsOfInertiaError">
            <summary>
            Uncertainty in centroid coordinates moments of inertia calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.AreaMassProperties.CentroidCoordinatesRadiiOfGyration">
            <summary>
            Radii of gyration with respect to centroid coordinate system.
            X = sqrt(integral of ((y-y0)^2 + (z-z0)^2) dm/M)
            Y = sqrt(integral of ((z-z0)^2 + (x-x0)^2) dm/M)
            Z = sqrt(integral of ((z-z0)^2 + (y-y0)^2) dm/M)
            where (x0,y0,z0) = centroid.
            </summary>
            <remarks>
            What is meant by "radii of gyration" varies widely in textbooks and papers.
            The values returned here are the integrals listed in the Returns section.
            </remarks>
        </member>
        <member name="T:Rhino.Geometry.VolumeMassProperties">
            <summary>
            Contains static initialization methods and allows access to the computed
            metrics of volume, volume centroid and volume moments in 
            in solid meshes, in solid surfaces and in solid (closed) boundary representations.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.VolumeMassProperties.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.VolumeMassProperties.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.VolumeMassProperties.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="M:Rhino.Geometry.VolumeMassProperties.Compute(Rhino.Geometry.Mesh)">
            <summary>
            Compute the VolumeMassProperties for a single Mesh.
            </summary>
            <param name="mesh">Mesh to measure.</param>
            <returns>The VolumeMassProperties for the given Mesh or null on failure.</returns>
            <exception cref="T:System.ArgumentNullException">When mesh is null.</exception>
            <example>
            <code source="examples\vbnet\ex_meshvolume.vb" lang="vbnet"/>
            <code source="examples\cs\ex_meshvolume.cs" lang="cs"/>
            <code source="examples\py\ex_meshvolume.py" lang="py"/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.VolumeMassProperties.Compute(Rhino.Geometry.Brep)">
            <summary>
            Compute the VolumeMassProperties for a single Brep.
            </summary>
            <param name="brep">Brep to measure.</param>
            <returns>The VolumeMassProperties for the given Brep or null on failure.</returns>
            <exception cref="T:System.ArgumentNullException">When brep is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.VolumeMassProperties.Compute(Rhino.Geometry.Surface)">
            <summary>
            Compute the VolumeMassProperties for a single Surface.
            </summary>
            <param name="surface">Surface to measure.</param>
            <returns>The VolumeMassProperties for the given Surface or null on failure.</returns>
            <exception cref="T:System.ArgumentNullException">When surface is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.VolumeMassProperties.Sum(Rhino.Geometry.VolumeMassProperties)">
            <summary>
            Sum mass properties together to get an aggregate mass.
            </summary>
            <param name="summand">mass properties to add.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.Volume">
            <summary>
            Gets the volume solution.
            </summary>
            <example>
            <code source='examples\vbnet\ex_meshvolume.vb' lang='vbnet'/>
            <code source='examples\cs\ex_meshvolume.cs' lang='cs'/>
            <code source='examples\py\ex_meshvolume.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.VolumeError">
            <summary>
            Gets the uncertainty in the volume calculation.
            </summary>
            <example>
            <code source='examples\vbnet\ex_meshvolume.vb' lang='vbnet'/>
            <code source='examples\cs\ex_meshvolume.cs' lang='cs'/>
            <code source='examples\py\ex_meshvolume.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.Centroid">
            <summary>
            Gets the volume centroid in the world coordinate system.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.CentroidError">
            <summary>
            Gets the uncertainty in the Centroid calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesFirstMoments">
            <summary>
            Returns the world coordinate first moments if they were able to be calculated.
            X is integral of "x dm" over the volume
            Y is integral of "y dm" over the volume
            Z is integral of "z dm" over the volume.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesFirstMomentsError">
            <summary>
            Uncertainty in world coordinates first moments calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesSecondMoments">
            <summary>
            Returns the world coordinate first moments if they were able to be calculated.
            X is integral of "xx dm" over the area
            Y is integral of "yy dm" over the area
            Z is integral of "zz dm" over the area.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesSecondMomentsError">
            <summary>
            Uncertainty in world coordinates second moments calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesProductMoments">
            <summary>
            Returns the world coordinate product moments if they were able to be calculated.
            X is integral of "xy dm" over the area
            Y is integral of "yz dm" over the area
            Z is integral of "zx dm" over the area.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesProductMomentsError">
            <summary>
            Uncertainty in world coordinates second moments calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesMomentsOfInertia">
            <summary>
            The moments of inertia about the world coordinate axes.
            X = integral of (y^2 + z^2) dm
            Y = integral of (z^2 + x^2) dm
            Z = integral of (z^2 + y^2) dm.
            </summary>
            <remarks>
            What is meant by "moments of intertia" varies widely in textbooks and papers.
            The values returned here are the integrals listed in the Summary section.
            Some applications may want the values from WorldCoordinatesSecondMoments
            instead of the values returned here.
            </remarks>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesMomentsOfInertiaError">
            <summary>
            Uncertainty in world coordinates moments of inertia calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.WorldCoordinatesRadiiOfGyration">
            <summary>
            Radii of gyration with respect to world coordinate system.
            X = sqrt(integral of (y^2 + z^2) dm/M)
            Y = sqrt(integral of (z^2 + x^2) dm/M)
            Z = sqrt(integral of (z^2 + y^2) dm/M)
            </summary>
            <remarks>
            What is meant by "radii of gyration" varies widely in textbooks and papers.
            The values returned here are the integrals listed in the Returns section.
            </remarks>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesSecondMoments">
            <summary>
            Second moments with respect to centroid coordinate system.
            X = integral of (x-x0)^2 dm
            Y = integral of (y-y0)^2 dm
            Z = integral of (z-z0)^2 dm
            where (x0,y0,z0) = centroid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesSecondMomentsError">
            <summary>
            Uncertainty in centroid coordinates second moments calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesMomentsOfInertia">
            <summary>
            Moments of inertia with respect to centroid coordinate system.
            X = integral of ((y-y0)^2 + (z-z0)^2) dm
            Y = integral of ((z-z0)^2 + (x-x0)^2) dm
            Z = integral of ((z-z0)^2 + (y-y0)^2) dm
            where (x0,y0,z0) = centroid.
            </summary>
            <remarks>
            What is meant by "moments of intertia" varies widely in textbooks and papers.
            The values returned here are the integrals listed in the Summary section.
            Some applications may want the values from WorldCoordinatesSecondMoments
            instead of the values returned here.
            </remarks>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesMomentsOfInertiaError">
            <summary>
            Uncertainty in centroid coordinates moments of inertia calculation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.VolumeMassProperties.CentroidCoordinatesRadiiOfGyration">
            <summary>
            Radii of gyration with respect to centroid coordinate system.
            X = sqrt(integral of ((y-y0)^2 + (z-z0)^2) dm/M)
            Y = sqrt(integral of ((z-z0)^2 + (x-x0)^2) dm/M)
            Z = sqrt(integral of ((z-z0)^2 + (y-y0)^2) dm/M)
            where (x0,y0,z0) = centroid.
            </summary>
            <remarks>
            What is meant by "radii of gyration" varies widely in textbooks and papers.
            The values returned here are the integrals listed in the Returns section.
            </remarks>
        </member>
        <member name="T:Rhino.Geometry.Matrix">
            <summary>
            Represents an arbitrarily sized matrix of <see cref="T:System.Double">double</see>-precision
            floating point numbers. If you are working with a 4x4 matrix, then you may want
            to use the <see cref="T:Rhino.Geometry.Transform"/> class instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Matrix.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the matrix.
            </summary>
            <param name="rowCount">A positive integer, or 0, for the number of rows.</param>
            <param name="columnCount">A positive integer, or 0, for the number of columns.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If either rowCount, or columnCount
            or both are negative.</exception>
        </member>
        <member name="M:Rhino.Geometry.Matrix.#ctor(Rhino.Geometry.Transform)">
            <summary>
            Initializes a new instance of the matrix based on a 4x4 matrix <see cref="T:Rhino.Geometry.Transform"/>.
            </summary>
            <param name="xform">A 4x4 matrix to copy from.</param>
        </member>
        <member name="M:Rhino.Geometry.Matrix.Duplicate">
            <summary>
            Create a duplicate of this matrix.
            </summary>
            <returns>An exact duplicate of this matrix.</returns>
        </member>
        <member name="M:Rhino.Geometry.Matrix.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Matrix.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Matrix.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="M:Rhino.Geometry.Matrix.Zero">
            <summary>
            Sets all values inside the matrix to zero.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Matrix.SetDiagonal(System.Double)">
            <summary>
            Sets diagonal value and zeros off all non-diagonal values.
            </summary>
            <param name="d">The new diagonal value.</param>
        </member>
        <member name="M:Rhino.Geometry.Matrix.Transpose">
            <summary>
            Modifies this matrix to be its transpose.
            <para>This is like swapping rows with columns.</para>
            <para>http://en.wikipedia.org/wiki/Transpose</para>
            </summary>
            <returns>true if operation succeeded; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Matrix.SwapRows(System.Int32,System.Int32)">
            <summary>
            Exchanges two rows.
            </summary>
            <param name="rowA">A first row.</param>
            <param name="rowB">Another row.</param>
            <returns>true if operation succeeded; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Matrix.SwapColumns(System.Int32,System.Int32)">
            <summary>
            Exchanges two columns.
            </summary>
            <param name="columnA">A first column.</param>
            <param name="columnB">Another column.</param>
            <returns>true if operation succeeded; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Matrix.Invert(System.Double)">
            <summary>
            Modifies this matrix to become its own inverse.
            <para>Matrix might be non-invertible (singular) and the return value will be false.</para>
            </summary>
            <param name="zeroTolerance">The admitted tolerance for 0.</param>
            <returns>true if operation succeeded; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Matrix.op_Multiply(Rhino.Geometry.Matrix,Rhino.Geometry.Matrix)">
            <summary>
            Multiplies two matrices and returns a new product matrix.
            </summary>
            <param name="a">A first matrix to use in calculation.</param>
            <param name="b">Another matrix to use in calculation.</param>
            <returns>The product matrix.</returns>
            <exception cref="T:System.ArgumentException">
            When a.ColumnCount != b.RowCount.
            </exception>
        </member>
        <member name="M:Rhino.Geometry.Matrix.op_Addition(Rhino.Geometry.Matrix,Rhino.Geometry.Matrix)">
            <summary>
            Adds two matrices and returns a new sum matrix.
            </summary>
            <param name="a">A first matrix to use in calculation.</param>
            <param name="b">Another matrix to use in calculation.</param>
            <returns>The sum matrix.</returns>
            <exception cref="T:System.ArgumentException">
            When the two matrices are not the same size.
            </exception>
        </member>
        <member name="M:Rhino.Geometry.Matrix.Scale(System.Double)">
            <summary>
            Modifies the current matrix by multiplying its values by a number.
            </summary>
            <param name="s">A scale factor.</param>
        </member>
        <member name="M:Rhino.Geometry.Matrix.RowReduce(System.Double,System.Double@,System.Double@)">
            <summary>Row reduces a matrix to calculate rank and determinant.</summary>
            <param name="zeroTolerance">
            (&gt;=0.0) zero tolerance for pivot test.  If a the absolute value of
            a pivot is &lt;= zeroTolerance, then the pivot is assumed to be zero.
            </param>
            <param name="determinant">value of determinant is returned here.</param>
            <param name="pivot">value of the smallest pivot is returned here.</param>
            <returns>Rank of the matrix.</returns>
            <remarks>
            The matrix itself is row reduced so that the result is an upper
            triangular matrix with 1's on the diagonal.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Matrix.RowReduce(System.Double,System.Double[],System.Double@)">
            <summary>
            Row reduces a matrix as the first step in solving M*X=b where
            b is a column of values.
            </summary>
            <param name="zeroTolerance">
            (&gt;=0.0) zero tolerance for pivot test. If the absolute value of a pivot
            is &lt;= zero_tolerance, then the pivot is assumed to be zero.
            </param>
            <param name="b">an array of RowCount values that is row reduced with the matrix.
            </param>
            <param name="pivot">the value of the smallest pivot is returned here.</param>
            <returns>Rank of the matrix.</returns>
            <remarks>
            The matrix itself is row reduced so that the result is an upper
            triangular matrix with 1's on the diagonal.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Matrix.RowReduce(System.Double,Rhino.Geometry.Point3d[],System.Double@)">
            <summary>
            Row reduces a matrix as the first step in solving M*X=b where
            b is a column of 3d points.
            </summary>
            <param name="zeroTolerance">
            (&gt;=0.0) zero tolerance for pivot test. If the absolute value of a pivot
            is &lt;= zero_tolerance, then the pivot is assumed to be zero.
            </param>
            <param name="b">An array of RowCount 3d points that is row reduced with the matrix.
            </param>
            <param name="pivot">The value of the smallest pivot is returned here.</param>
            <returns>Rank of the matrix.</returns>
            <remarks>
            The matrix itself is row reduced so that the result is an upper
            triangular matrix with 1's on the diagonal.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Matrix.BackSolve(System.Double,System.Double[])">
            <summary>
            Solves M*x=b where M is upper triangular with a unit diagonal and
            b is a column of values.
            </summary>
            <param name="zeroTolerance">(&gt;=0.0) used to test for "zero" values in b
            in underdetermined systems of equations.</param>
            <param name="b">The values in B[RowCount],...,B[B.Length-1] are tested to
            make sure they are within "zeroTolerance".</param>
            <returns>
            Array of length ColumnCount on success. null on error.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Matrix.BackSolvePoints(System.Double,Rhino.Geometry.Point3d[])">
            <summary>
            Solves M*x=b where M is upper triangular with a unit diagonal and
            b is a column of 3d points.
            </summary>
            <param name="zeroTolerance">(&gt;=0.0) used to test for "zero" values in b
            in underdetermined systems of equations.</param>
            <param name="b">The values in B[RowCount],...,B[B.Length-1] are tested to
            make sure they are "zero".</param>
            <returns>
            Array of length ColumnCount on success. null on error.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Matrix.GetHashCode">
            <summary>
            Gets the hash code for this matrix. The hash code will change 
            when the matrix changes so you cannot change matrices while they are stored in 
            hash tables.
            </summary>
            <returns>Hash code.</returns>
        </member>
        <member name="P:Rhino.Geometry.Matrix.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the matrix value at the given row and column indixes.
            </summary>
            <param name="row">Index of row to access.</param>
            <param name="column">Index of column to access.</param>
            <returns>The value at [row, column].</returns>
            <value>The new value at [row, column].</value>
        </member>
        <member name="P:Rhino.Geometry.Matrix.IsValid">
            <summary>
            Gets a value indicating whether this matrix is valid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Matrix.IsSquare">
            <summary>
            Gets a value indicating whether this matrix has the same number of rows
            and columns. 0x0 matrices are not considered square.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Matrix.RowCount">
            <summary>
            Gets the amount of rows.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Matrix.ColumnCount">
            <summary>
            Gets the amount of columns.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Matrix.IsRowOrthogonal">
            <summary>
            Gets a value indicating whether the matrix is row orthogonal.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Matrix.IsColumnOrthogonal">
            <summary>
            Gets a value indicating whether the matrix is column orthogonal.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Matrix.IsRowOrthoNormal">
            <summary>
            Gets a value indicating whether the matrix is row orthonormal.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Matrix.IsColumnOrthoNormal">
            <summary>
            Gets a value indicating whether the matrix is column orthonormal.
            </summary>
        </member>
        <member name="T:Rhino.Render.CachedTextureCoordinates">
            <summary>
            Used for cached texture coordinates
            </summary>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.#ctor(System.IntPtr)">
            <summary>
            Internal constructor used to wrap ON_TextureCoordinates* retrieved from
            a Rhino mesh.
            </summary>
            <param name="pTextureCoordinates"></param>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.GetCachedTextureCoordinates(Rhino.Geometry.Mesh,System.Guid)">
            <summary>
            Call this method to get the cached texture coordinates from a Rhino
            mesh.
            </summary>
            <param name="mesh">
            Mesh to query for cached coordinates.
            </param>
            <param name="textureMappingId">
            The texture mapping ID to look for.
            </param>
            <returns>
            Returns the cached coordinates if found or null if not.
            </returns>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.TryGetAt(System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Use this method to iterate the cached texture coordinate array.
            </summary>
            <param name="index">
            Index for the vertex to fetch.
            </param>
            <param name="u">
            Output parameter which will receive the U value.
            </param>
            <param name="v">
            Output parameter which will receive the V value.
            </param>
            <param name="w">
            Output parameter which will receive the W value, this is only
            meaningful if <see cref="P:Rhino.Render.CachedTextureCoordinates.Dim"/> is 3.
            </param>
            <returns>
            Returns true if index is valid; otherwise returns false.
            </returns>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.Add(Rhino.Geometry.Point3d)">
            <summary>
            IList implementation, this list is always read-only so calling this
            will cause a NotSupportedException to be thrown.
            </summary>
            <param name="item"></param>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.Clear">
            <summary>
            IList implementation, this list is always read-only so calling this
            will cause a NotSupportedException to be thrown.
            </summary>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.Contains(Rhino.Geometry.Point3d)">
            <summary>
            Determines whether this collection contains a specific value.
            </summary>
            <param name="item"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.CopyTo(Rhino.Geometry.Point3d[],System.Int32)">
            <summary>
            Copies the elements of the this collection to an System.Array,
            starting at a particular System.Array index.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the
            elements copied from this collection. The System.Array must have
            zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            array is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            arrayIndex is less than 0.
            </exception>
            <exception cref="T:System.ArgumentException">
            The number of elements in this collection is greater than the available
            space from arrayIndex to the end of the destination array.
            </exception>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.Remove(Rhino.Geometry.Point3d)">
            <summary>
            IList implementation, this list is always read-only so calling this
            will cause a NotSupportedException to be thrown.
            </summary>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
            <returns>
            A enumerator that can be used to iterate through this collection.
            </returns>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this collection.
            </summary>
            <returns>
            A enumerator that can be used to iterate through this collection.
            </returns>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.IndexOf(Rhino.Geometry.Point3d)">
            <summary>
            Determines the index of a specific point in this collection.
            </summary>
            <param name="item">
            The point (UV or UVW) to locate in this collection.
            </param>
            <returns>
            The index of item if found in the list; otherwise, -1.
            </returns>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.Insert(System.Int32,Rhino.Geometry.Point3d)">
            <summary>
            IList implementation, this list is always read-only so calling this
            will cause a NotSupportedException to be thrown.
            </summary>
            <param name="index"></param>
            <param name="item"></param>
        </member>
        <member name="M:Rhino.Render.CachedTextureCoordinates.RemoveAt(System.Int32)">
            <summary>
            IList implementation, this list is always read-only so calling this
            will cause a NotSupportedException to be thrown.
            </summary>
            <param name="index"></param>
        </member>
        <member name="P:Rhino.Render.CachedTextureCoordinates.Dim">
            <summary>
            Coordinate dimension: 2 = UV, 3 = UVW
            </summary>
        </member>
        <member name="P:Rhino.Render.CachedTextureCoordinates.MappingId">
            <summary>
            The texture mapping Id.
            </summary>
        </member>
        <member name="P:Rhino.Render.CachedTextureCoordinates.Count">
            <summary>
            Number of cached coordinates.
            </summary>
        </member>
        <member name="P:Rhino.Render.CachedTextureCoordinates.IsReadOnly">
            <summary>
            This collection is always read-only
            </summary>
        </member>
        <member name="P:Rhino.Render.CachedTextureCoordinates.Item(System.Int32)">
            <summary>
            Gets the element at the specified index. Never call the set method, it
            will always throw a NotSupportedException because this list is
            read-only.
            </summary>
            <param name="index">
            The zero-based index of the element to get.
            </param>
            <returns>
            The element at the specified index.
            </returns>
            <exception cref="T:System.NotSupportedException">
            IList implementation, this list is always read-only so calling the set
            method will always cause a NotSupportedException to be thrown.
            </exception>
        </member>
        <member name="T:Rhino.Render.CachedTextureCoordinatesEnumerator">
            <summary>
            Internal class used to enumerate a list of CachedTextureCoordinates
            </summary>
        </member>
        <member name="T:Rhino.Render.MappingTag">
            <summary>
            Holds texture mapping information.
            </summary>
        </member>
        <member name="P:Rhino.Render.MappingTag.Id">
            <summary>
             Gets or sets a map globally unique identifier.
            </summary>
        </member>
        <member name="P:Rhino.Render.MappingTag.MappingType">
            <summary>
             Gets or sets a texture mapping type: linear, cylinder, etc...
            </summary>
        </member>
        <member name="P:Rhino.Render.MappingTag.MappingCRC">
            <summary>
            Gets or sets the cyclic redundancy check on the mapping.
            See also <see cref="M:Rhino.RhinoMath.CRC32(System.UInt32,System.Byte[])"/>.
            </summary>
        </member>
        <member name="P:Rhino.Render.MappingTag.MeshTransform">
            <summary>
             Gets or sets a 4x4 matrix tranform.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.MeshingParameterStyle">
            <summary>
            Type of Mesh Parameters used by the RhinoDoc for meshing objects
            </summary>
        </member>
        <member name="F:Rhino.Geometry.MeshingParameterStyle.None">
            <summary>No style</summary>
        </member>
        <member name="F:Rhino.Geometry.MeshingParameterStyle.Fast">
            <summary></summary>
        </member>
        <member name="F:Rhino.Geometry.MeshingParameterStyle.Quality">
            <summary></summary>
        </member>
        <member name="F:Rhino.Geometry.MeshingParameterStyle.Custom">
            <summary></summary>
        </member>
        <member name="F:Rhino.Geometry.MeshingParameterStyle.PerObject">
            <summary></summary>
        </member>
        <member name="T:Rhino.Geometry.MeshingParameters">
            <summary>
            Represents settings used for creating a mesh representation of a brep or surface.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.#ctor">
            <summary>
            Initializes a new instance with default values.
            <para>Initial values are same as <see cref="P:Rhino.Geometry.MeshingParameters.Default"/>.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="M:Rhino.Geometry.MeshingParameters.DocumentCurrentSetting(Rhino.RhinoDoc)">
            <summary>
            Gets the MeshingParameters that are currently set for a document.
            These are the same settings that are shown in the DocumentProperties
            "mesh settings" user interface.
            </summary>
            <param name="doc">A Rhino document to query.</param>
            <returns>Meshing parameters of the document.</returns>
            <exception cref="T:System.ArgumentNullException">If doc is null.</exception>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.Minimal">
            <summary>Gets minimal meshing parameters.</summary>
            <example>
            <code source='examples\vbnet\ex_createmeshfrombrep.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createmeshfrombrep.cs' lang='cs'/>
            <code source='examples\py\ex_createmeshfrombrep.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.Default">
            <summary>
            Get default meshing parameters.
            </summary>
            <example>
            <code source='examples\vbnet\ex_createmeshfrombrep.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createmeshfrombrep.cs' lang='cs'/>
            <code source='examples\py\ex_createmeshfrombrep.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.Coarse">
            <summary>
            Gets meshing parameters for coarse meshing. 
            <para>This corresponds with the "Jagged and Faster" default in Rhino.</para>
            </summary>
            <example>
            <code source='examples\vbnet\ex_createmeshfrombrep.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createmeshfrombrep.cs' lang='cs'/>
            <code source='examples\py\ex_createmeshfrombrep.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.Smooth">
            <summary>
            Gets meshing parameters for smooth meshing. 
            <para>This corresponds with the "Smooth and Slower" default in Rhino.</para>
            </summary>
            <example>
            <code source='examples\vbnet\ex_createmeshfrombrep.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createmeshfrombrep.cs' lang='cs'/>
            <code source='examples\py\ex_createmeshfrombrep.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.JaggedSeams">
            <summary>
            Gets or sets whether or not the mesh is allowed to have jagged seams. 
            When this flag is set to true, meshes on either side of a Brep Edge will not match up.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.RefineGrid">
            <summary>
            Gets or sets a value indicating whether or not the sampling grid can be refined 
            when certain tolerances are not met.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.SimplePlanes">
            <summary>
            Gets or sets a value indicating whether or not planar areas are allowed 
            to be meshed in a simplified manner.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.ComputeCurvature">
            <summary>
            Gets or sets a value indicating whether or not surface curvature 
            data will be embedded in the mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.GridMinCount">
            <summary>
            Gets or sets the minimum number of grid quads in the initial sampling grid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.GridMaxCount">
            <summary>
            Gets or sets the maximum number of grid quads in the initial sampling grid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.GridAngle">
            <summary>
            Gets or sets the maximum allowed angle difference (in radians) 
            for a single sampling quad. The angle pertains to the surface normals.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.GridAspectRatio">
            <summary>
            Gets or sets the maximum allowed aspect ratio of sampling quads.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.GridAmplification">
            <summary>
            Gets or sets the grid amplification factor. 
            Values lower than 1.0 will decrease the number of initial quads, 
            values higher than 1.0 will increase the number of initial quads.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.Tolerance">
            <summary>
            Gets or sets the maximum allowed edge deviation. 
            This tolerance is measured between the center of the mesh edge and the surface.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.MinimumTolerance">
            <summary>
            Gets or sets the minimum tolerance.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.RelativeTolerance">
            <summary>
            Gets or sets the relative tolerance.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.MinimumEdgeLength">
            <summary>
            Gets or sets the minimum allowed mesh edge length.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.MaximumEdgeLength">
            <summary>
            Gets or sets the maximum allowed mesh edge length.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshingParameters.RefineAngle">
            <summary>
            Gets or sets the mesh parameter refine angle.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.MeshPart">
            <summary>
            Represents a portion of a mesh for partitioning
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshPart.StartVertexIndex">
            <summary>Start of subinterval of parent mesh vertex array</summary>
        </member>
        <member name="P:Rhino.Geometry.MeshPart.EndVertexIndex">
            <summary>End of subinterval of parent mesh vertex array</summary>
        </member>
        <member name="P:Rhino.Geometry.MeshPart.StartFaceIndex">
            <summary>Start of subinterval of parent mesh face array</summary>
        </member>
        <member name="P:Rhino.Geometry.MeshPart.EndFaceIndex">
            <summary>End of subinterval of parent mesh face array</summary>
        </member>
        <member name="P:Rhino.Geometry.MeshPart.VertexCount">
            <summary>EndVertexIndex - StartVertexIndex</summary>
        </member>
        <member name="P:Rhino.Geometry.MeshPart.TriangleCount">
            <summary></summary>
        </member>
        <member name="T:Rhino.Geometry.Mesh">
            <summary>
            Represents a geometry type that is defined by vertices and faces.
            <para>This is often called a face-vertex mesh.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromPlane(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Interval,System.Int32,System.Int32)">
            <summary>
            Constructs a planar mesh grid.
            </summary>
            <param name="plane">Plane of mesh.</param>
            <param name="xInterval">Interval describing size and extends of mesh along plane x-direction.</param>
            <param name="yInterval">Interval describing size and extends of mesh along plane y-direction.</param>
            <param name="xCount">Number of faces in x-direction.</param>
            <param name="yCount">Number of faces in y-direction.</param>
            <exception cref="T:System.ArgumentException">Thrown when plane is a null reference.</exception>
            <exception cref="T:System.ArgumentException">Thrown when xInterval is a null reference.</exception>
            <exception cref="T:System.ArgumentException">Thrown when yInterval is a null reference.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when xCount is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when yCount is less than or equal to zero.</exception>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromBox(Rhino.Geometry.BoundingBox,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs new mesh that matches a bounding box.
            </summary>
            <param name="box">A box to use for creation.</param>
            <param name="xCount">Number of faces in x-direction.</param>
            <param name="yCount">Number of faces in y-direction.</param>
            <param name="zCount">Number of faces in z-direction.</param>
            <returns>A new brep, or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromBox(Rhino.Geometry.Box,System.Int32,System.Int32,System.Int32)">
            <summary>
             Constructs new mesh that matches an aligned box.
            </summary>
            <param name="box">Box to match.</param>
            <param name="xCount">Number of faces in x-direction.</param>
            <param name="yCount">Number of faces in y-direction.</param>
            <param name="zCount">Number of faces in z-direction.</param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromBox(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs new mesh from 8 corner points.
            </summary>
            <param name="corners">
            8 points defining the box corners arranged as the vN labels indicate.
            <pre>
            <para>v7_____________v6</para>
            <para>|\             |\</para>
            <para>| \            | \</para>
            <para>|  \ _____________\</para>
            <para>|   v4         |   v5</para>
            <para>|   |          |   |</para>
            <para>|   |          |   |</para>
            <para>v3--|----------v2  |</para>
            <para> \  |           \  |</para>
            <para>  \ |            \ |</para>
            <para>   \|             \|</para>
            <para>    v0_____________v1</para>
            </pre>
            </param>
            <param name="xCount">Number of faces in x-direction.</param>
            <param name="yCount">Number of faces in y-direction.</param>
            <param name="zCount">Number of faces in z-direction.</param>
            <returns>A new brep, or null on failure.</returns>
            <returns>A new box mesh, on null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromSphere(Rhino.Geometry.Sphere,System.Int32,System.Int32)">
            <summary>
            Constructs a mesh sphere.
            </summary>
            <param name="sphere">Base sphere for mesh.</param>
            <param name="xCount">Number of faces in the around direction.</param>
            <param name="yCount">Number of faces in the top-to-bottom direction.</param>
            <exception cref="T:System.ArgumentException">Thrown when sphere is invalid.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when xCount is less than or equal to two.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when yCount is less than or equal to two.</exception>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromCylinder(Rhino.Geometry.Cylinder,System.Int32,System.Int32)">
            <summary>Constructs a mesh cylinder</summary>
            <param name="cylinder"></param>
            <param name="vertical">Number of faces in the top-to-bottom direction</param>
            <param name="around">Number of faces around the cylinder</param>
            <exception cref="T:System.ArgumentException">Thrown when cylinder is invalid.</exception>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromCone(Rhino.Geometry.Cone,System.Int32,System.Int32)">
            <summary>Constructs a mesh cone</summary>
            <param name="cone"></param>
            <param name="vertical">Number of faces in the top-to-bottom direction</param>
            <param name="around">Number of faces around the cone</param>
            <exception cref="T:System.ArgumentException">Thrown when cone is invalid.</exception>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromPlanarBoundary(Rhino.Geometry.Curve,Rhino.Geometry.MeshingParameters)">
            <summary>
            Attempts to construct a mesh from a closed planar curve.
            </summary>
            <param name="boundary">must be a closed planar curve.</param>
            <param name="parameters">parameters used for creating the mesh.</param>
            <returns>
            New mesh on success or null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromClosedPolyline(Rhino.Geometry.Polyline)">
            <summary>
            Attempts to create a Mesh that is a triangulation of a closed polyline
            </summary>
            <param name="polyline">must be closed</param>
            <returns>
            New mesh on success or null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromBrep(Rhino.Geometry.Brep)">
            <summary>
            Constructs a mesh from a brep.
            </summary>
            <param name="brep">Brep to approximate.</param>
            <returns>An array of meshes.</returns>
            <example>
            <code source='examples\vbnet\ex_tightboundingbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_tightboundingbox.cs' lang='cs'/>
            <code source='examples\py\ex_tightboundingbox.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateFromBrep(Rhino.Geometry.Brep,Rhino.Geometry.MeshingParameters)">
            <summary>
            Constructs a mesh from a brep.
            </summary>
            <param name="brep">Brep to approximate.</param>
            <param name="meshingParameters">Parameters to use during meshing.</param>
            <returns>An array of meshes.</returns>
            <example>
            <code source='examples\vbnet\ex_createmeshfrombrep.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createmeshfrombrep.cs' lang='cs'/>
            <code source='examples\py\ex_createmeshfrombrep.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateBooleanUnion(System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh})">
            <summary>
            Computes the solid union of a set of meshes.
            </summary>
            <param name="meshes">Meshes to union.</param>
            <returns>An array of Mesh results or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateBooleanDifference(System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh},System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh})">
            <summary>
            Computes the solid difference of two sets of Meshes.
            </summary>
            <param name="firstSet">First set of Meshes (the set to subtract from).</param>
            <param name="secondSet">Second set of Meshes (the set to subtract).</param>
            <returns>An array of Mesh results or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateBooleanIntersection(System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh},System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh})">
            <summary>
            Computes the solid intersection of two sets of meshes.
            </summary>
            <param name="firstSet">First set of Meshes.</param>
            <param name="secondSet">Second set of Meshes.</param>
            <returns>An array of Mesh results or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateBooleanSplit(System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh},System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh})">
            <summary>
            Splits a set of meshes with another set.
            </summary>
            <param name="meshesToSplit">A list, an array, or any enumerable set of meshes to be split. If this is null, null will be returned.</param>
            <param name="meshSplitters">A list, an array, or any enumerable set of meshes that cut. If this is null, null will be returned.</param>
            <returns>A new mesh array, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.#ctor">
            <summary>Initializes a new empty mesh.</summary>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Mesh.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.Mesh.OnSwitchToNonConst">
            <summary>
            Performs some memory cleanup if necessary
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CopyFrom(Rhino.Geometry.Mesh)">
            <summary>
            Copies mesh values into this mesh from another mesh.
            </summary>
            <param name="other">The other mesh to copy from.</param>
            <exception cref="T:System.ArgumentNullException">If other is null.</exception>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Duplicate">
            <summary>
            Constructs a copy of this mesh.
            This is the same as <see cref="M:Rhino.Geometry.Mesh.DuplicateMesh"/>.
            </summary>
            <returns>A mesh.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.DuplicateMesh">
            <summary>Constructs a copy of this mesh.
            This is the same as <see cref="M:Rhino.Geometry.Mesh.Duplicate"/>.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Mesh.IsManifold(System.Boolean,System.Boolean@,System.Boolean@)">
            <summary>
            Gets a value indicating whether or not the mesh is manifold. 
            A manifold mesh does not have any edge that borders more than two faces.
            </summary>
            <param name="topologicalTest">
            If true, the query treats coincident vertices as the same.
            </param>
            <param name="isOriented">
            isOriented will be set to true if the mesh is a manifold 
            and adjacent faces have compatible face normals.
            </param>
            <param name="hasBoundary">
            hasBoundary will be set to true if the mesh is a manifold 
            and there is at least one "edge" with no more than one adjacent face.
            </param>
            <returns>true if every mesh "edge" has at most two adjacent faces.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.ClearTextureData">
            <summary>
            Remove all texture coordinate information from this mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Mesh.EvaluateMeshGeometry(Rhino.Geometry.Surface)">
            <summary>
            If the mesh has SurfaceParameters, the surface is evaluated at
            these parameters and the mesh geometry is updated.
            </summary>
            <param name="surface">An input surface.</param>
            <returns>true if the operation succceeded; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.SetCachedTextureCoordinates(Rhino.Render.TextureMapping,Rhino.Geometry.Transform@)">
            <summary>
            Set cached texture coordinates using the specified mapping.
            </summary>
            <param name="tm"></param>
            <param name="xf"></param>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetCachedTextureCoordinates(System.Guid)">
            <summary>
            Call this method to get cached texture coordinates for a texture
            mapping with the specified Id.
            </summary>
            <param name="textureMappingId">
            Texture mapping Id
            </param>
            <returns>
            Object which allows access to coordinates and other props.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Compact">
            <summary>
            Removes any unreferenced objects from arrays, reindexes as needed 
            and shrinks arrays to minimum required size.
            </summary>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Flip(System.Boolean,System.Boolean,System.Boolean)">
            <summary>Reverses the direction of the mesh.</summary>
            <param name="vertexNormals">If true, vertex normals will be reversed.</param>
            <param name="faceNormals">If true, face normals will be reversed.</param>
            <param name="faceOrientation">If true, face orientations will be reversed.</param>
        </member>
        <member name="M:Rhino.Geometry.Mesh.SolidOrientation">
            <summary>
            Determines orientation of a "solid" mesh.
            </summary>
            <returns>
            <para>+1 = mesh is solid with outward facing normals.</para>
            <para>-1 = mesh is solid with inward facing normals.</para>
            <para>0 = mesh is not solid.</para>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.IsPointInside(Rhino.Geometry.Point3d,System.Double,System.Boolean)">
            <summary>
            Determines if a point is inside a solid mesh.
            </summary>
            <param name="point">3d point to test.</param>
            <param name="tolerance">
            (&gt;=0) 3d distance tolerance used for ray-mesh intersection
            and determining strict inclusion.
            </param>
            <param name="strictlyIn">
            If strictlyIn is true, then point must be inside mesh by at least
            tolerance in order for this function to return true.
            If strictlyIn is false, then this function will return true if
            point is inside or the distance from point to a mesh face is &lt;= tolerance.
            </param>
            <returns>
            true if point is inside the solid mesh, false if not.
            </returns>
            <remarks>
            The caller is responsible for making certing the mesh is solid before
            calling this function. If the mesh is not solid, the behavior is unpredictable.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Unweld(System.Double,System.Boolean)">
            <summary>
            Makes sure that faces sharing an edge and having a difference of normal greater
            than or equal to angleToleranceRadians have unique vertexes along that edge,
            adding vertices if necessary.
            </summary>
            <param name="angleToleranceRadians">Angle at which to make unique vertices.</param>
            <param name="modifyNormals">
            Determines whether new vertex normals will have the same vertex normal as the original (false)
            or vertex normals made from the corrsponding face normals (true)
            </param>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Weld(System.Double)">
            <summary>
            Makes sure that faces sharing an edge and having a difference of normal greater
            than or equal to angleToleranceRadians share vertexes along that edge, vertex normals
            are averaged.
            </summary>
            <param name="angleToleranceRadians">Angle at which to weld vertices.</param>
        </member>
        <member name="M:Rhino.Geometry.Mesh.UnifyNormals">
            <summary>
            Attempts to fix inconsistencies in the directions of meshfaces for a mesh. This function
            does not modify the vertex normals, but rather rearranges the mesh face winding and face
            normals to make them all consistent. You may want to call Mesh.Normals.ComputeNormals()
            to recompute vertex normals after calling this functions.
            </summary>
            <returns>number of faces that were modified.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.SplitDisjointPieces">
            <summary>
            Splits up the mesh into its unconnected pieces.
            </summary>
            <returns>An array containing all the disjoint pieces that make up this Mesh.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Split(Rhino.Geometry.Plane)">
            <summary>
            Split a mesh by an infinite plane.
            </summary>
            <param name="plane">The splitting plane.</param>
            <returns>A new mesh array with the split result. This can be null if no result was found.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Split(Rhino.Geometry.Mesh)">
            <summary>
            Split a mesh with another mesh.
            </summary>
            <param name="mesh">Mesh to split with.</param>
            <returns>An array of mesh segments representing the split result.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Split(System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh})">
            <summary>
            Split a mesh with a collection of meshes.
            </summary>
            <param name="meshes">Meshes to split with.</param>
            <returns>An array of mesh segments representing the split result.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetOutlines(Rhino.Geometry.Plane)">
            <summary>
            Constructs the outlines of a mesh projected against a plane.
            </summary>
            <param name="plane">A plane to project against.</param>
            <returns>An array of polylines, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetOutlines(Rhino.Display.RhinoViewport)">
            <summary>
            Constructs the outlines of a mesh. The projection information in the
            viewport is used to determine how the outlines are projected.
            </summary>
            <param name="viewport">A viewport to determine projection direction.</param>
            <returns>An array of polylines, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetNakedEdges">
            <summary>
            Returns all edges of a mesh that are considered "naked" in the
            sense that the edge only has one face.
            </summary>
            <returns>An array of polylines, or null on error.</returns>
            <example>
            <code source='examples\vbnet\ex_dupmeshboundary.vb' lang='vbnet'/>
            <code source='examples\cs\ex_dupmeshboundary.cs' lang='cs'/>
            <code source='examples\py\ex_dupmeshboundary.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Mesh.ExplodeAtUnweldedEdges">
            <summary>
            Explode the mesh into submeshes where a submesh is a collection of faces that are contained
            within a closed loop of "unwelded" edges. Unwelded edges are edges where the faces that share
            the edge have unique mesh vertexes (not mesh topology vertexes) at both ends of the edge.
            </summary>
            <returns>
            Array of submeshes on success; null on error. If the count in the returned array is 1, then
            nothing happened and the ouput is essentially a copy of the input.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Append(Rhino.Geometry.Mesh)">
            <summary>
            Appends a copy of another mesh to this one and updates indices of appended mesh parts.
            </summary>
            <param name="other">Mesh to append to this one.</param>
            <example>
            <code source='examples\vbnet\ex_createmeshfrombrep.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createmeshfrombrep.cs' lang='cs'/>
            <code source='examples\py\ex_createmeshfrombrep.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Mesh.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Gets the point on the mesh that is closest to a given test point.
            </summary>
            <param name="testPoint">Point to seach for.</param>
            <returns>The point on the mesh closest to testPoint, or Point3d.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.ClosestMeshPoint(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Gets the point on the mesh that is closest to a given test point. Similar to the 
            ClosestPoint function except this returns a MeshPoint class which includes
            extra information beyond just the location of the closest point.
            </summary>
            <param name="testPoint">The source of the search.</param>
            <param name="maximumDistance">
            Optional upper bound on the distance from test point to the mesh. 
            If you are only interested in finding a point Q on the mesh when 
            testPoint.DistanceTo(Q) &lt; maximumDistance, 
            then set maximumDistance to that value. 
            This parameter is ignored if you pass 0.0 for a maximumDistance.
            </param>
            <returns>closest point information on success. null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.ClosestPoint(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d@,System.Double)">
            <summary>
            Gets the point on the mesh that is closest to a given test point.
            </summary>
            <param name="testPoint">Point to seach for.</param>
            <param name="pointOnMesh">Point on the mesh closest to testPoint.</param>
            <param name="maximumDistance">
            Optional upper bound on the distance from test point to the mesh. 
            If you are only interested in finding a point Q on the mesh when 
            testPoint.DistanceTo(Q) &lt; maximumDistance, 
            then set maximumDistance to that value. 
            This parameter is ignored if you pass 0.0 for a maximumDistance.
            </param>
            <returns>
            Index of face that the closest point lies on if successful. 
            -1 if not successful; the value of pointOnMesh is undefined.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.ClosestPoint(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d@,Rhino.Geometry.Vector3d@,System.Double)">
            <summary>
            Gets the point on the mesh that is closest to a given test point.
            </summary>
            <param name="testPoint">Point to seach for.</param>
            <param name="pointOnMesh">Point on the mesh closest to testPoint.</param>
            <param name="normalAtPoint">The normal vector of the mesh at the closest point.</param>
            <param name="maximumDistance">
            Optional upper bound on the distance from test point to the mesh. 
            If you are only interested in finding a point Q on the mesh when 
            testPoint.DistanceTo(Q) &lt; maximumDistance, 
            then set maximumDistance to that value. 
            This parameter is ignored if you pass 0.0 for a maximumDistance.
            </param>
            <returns>
            Index of face that the closest point lies on if successful. 
            -1 if not successful; the value of pointOnMesh is undefined.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.PointAt(Rhino.Geometry.MeshPoint)">
            <summary>
            Evaluate a mesh at a set of barycentric coordinates.
            </summary>
            <param name="meshPoint">MeshPoint instance contiaining a valid Face Index and Barycentric coordinates.</param>
            <returns>A Point on the mesh or Point3d.Unset if the faceIndex is not valid or if the barycentric coordinates could not be evaluated.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.PointAt(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluates a mesh at a set of barycentric coordinates. Barycentric coordinates must 
            be assigned in accordance with the rules as defined by MeshPoint.T.
            </summary>
            <param name="faceIndex">Index of triangle or quad to evaluate.</param>
            <param name="t0">First barycentric coordinate.</param>
            <param name="t1">Second barycentric coordinate.</param>
            <param name="t2">Third barycentric coordinate.</param>
            <param name="t3">Fourth barycentric coordinate. If the face is a triangle, this coordinate will be ignored.</param>
            <returns>A Point on the mesh or Point3d.Unset if the faceIndex is not valid or if the barycentric coordinates could not be evaluated.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.NormalAt(Rhino.Geometry.MeshPoint)">
            <summary>
            Evaluate a mesh normal at a set of barycentric coordinates.
            </summary>
            <param name="meshPoint">MeshPoint instance contiaining a valid Face Index and Barycentric coordinates.</param>
            <returns>A Normal vector to the mesh or Vector3d.Unset if the faceIndex is not valid or if the barycentric coordinates could not be evaluated.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.NormalAt(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluate a mesh normal at a set of barycentric coordinates. Barycentric coordinates must 
            be assigned in accordance with the rules as defined by MeshPoint.T.
            </summary>
            <param name="faceIndex">Index of triangle or quad to evaluate.</param>
            <param name="t0">First barycentric coordinate.</param>
            <param name="t1">Second barycentric coordinate.</param>
            <param name="t2">Third barycentric coordinate.</param>
            <param name="t3">Fourth barycentric coordinate. If the face is a triangle, this coordinate will be ignored.</param>
            <returns>A Normal vector to the mesh or Vector3d.Unset if the faceIndex is not valid or if the barycentric coordinates could not be evaluated.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.ColorAt(Rhino.Geometry.MeshPoint)">
            <summary>
            Evaluate a mesh color at a set of barycentric coordinates.
            </summary>
            <param name="meshPoint">MeshPoint instance contiaining a valid Face Index and Barycentric coordinates.</param>
            <returns>The interpolated vertex color on the mesh or Color.Transparent if the faceIndex is not valid, 
            if the barycentric coordinates could not be evaluated, or if there are no colors defined on the mesh.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.ColorAt(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Evaluate a mesh normal at a set of barycentric coordinates. Barycentric coordinates must 
            be assigned in accordance with the rules as defined by MeshPoint.T.
            </summary>
            <param name="faceIndex">Index of triangle or quad to evaluate.</param>
            <param name="t0">First barycentric coordinate.</param>
            <param name="t1">Second barycentric coordinate.</param>
            <param name="t2">Third barycentric coordinate.</param>
            <param name="t3">Fourth barycentric coordinate. If the face is a triangle, this coordinate will be ignored.</param>
            <returns>The interpolated vertex color on the mesh or Color.Transparent if the faceIndex is not valid, 
            if the barycentric coordinates could not be evaluated, or if there are no colors defined on the mesh.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.PullPointsToMesh(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Pulls a collection of points to a mesh.
            </summary>
            <param name="points">An array, a list or any enumerable set of points.</param>
            <returns>An array of points. This can be empty.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Offset(System.Double)">
            <summary>
            Makes a new mesh with vertices offset a distance in the opposite direction of the existing vertex normals.
            Same as Mesh.Offset(distance, false)
            </summary>
            <param name="distance">A distance value to use for offsetting.</param>
            <returns>A new mesh on success, or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Offset(System.Double,System.Boolean)">
            <summary>
            Makes a new mesh with vertices offset a distance in the opposite direction of the existing vertex normals.
            Optionally, based on the value of solidify, adds the input mesh and a ribbon of faces along any naked edges.
            If solidify is false it acts exactly as the Offset(distance) function.
            </summary>
            <param name="distance">A distance value.</param>
            <param name="solidify">true if the mesh should be solidified.</param>
            <returns>A new mesh on success, or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetNakedEdgePointStatus">
            <summary>
            Returns an array of bool values equal in length to the number of vertices in this
            mesh. Each value corresponds to a mesh vertex and is set to true if the vertex is
            not completely surrounded by faces.
            </summary>
            <returns>An array of true/false flags that, at each index, reveals if the corresponding
            vertex is completely surrounded by faces.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreatePartitions(System.Int32,System.Int32)">
            <summary>
            In ancient times (or modern smartphone times), some rendering engines
            were only able to process small batches of triangles and the
            CreatePartitions() function was provided to partition the mesh into
            subsets of vertices and faces that those rendering engines could handle.
            </summary>
            <param name="maximumVertexCount"></param>
            <param name="maximumTriangleCount"></param>
            <returns>true on success</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.GetPartition(System.Int32)">
            <summary>
            Retrieves a partition. See <see cref="M:Rhino.Geometry.Mesh.CreatePartitions(System.Int32,System.Int32)"/> for details.
            </summary>
            <param name="which">The partition index.</param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.Reduce(System.Int32,System.Boolean,System.Int32,System.Boolean)">
            <summary>
            Reduce polygon count
            </summary>
            <param name="desiredPolygonCount">desired or target number of faces</param>
            <param name="allowDistortion">
            If true mesh appearance is not changed even if the target polygon count is not reached
            </param>
            <param name="accuracy">Integer from 1 to 10 telling how accurate reduction algorithm
             to use. Greater number gives more accurate results
            </param>
            <param name="normalizeSize">If true mesh is fitted to an axis aligned unit cube until reduction is complete</param>
            <returns>True if mesh is successfully reduced and false if mesh could not be reduced for some reason.</returns>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateContourCurves(Rhino.Geometry.Mesh,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Constructs contour curves for a mesh, sectioned along a linear axis.
            </summary>
            <param name="meshToContour">A mesh to contour.</param>
            <param name="contourStart">A start point of the contouring axis.</param>
            <param name="contourEnd">An end point of the contouring axis.</param>
            <param name="interval">An interval distance.</param>
            <returns>An array of curves. This array can be empty.</returns>
            <example>
            <code source='examples\vbnet\ex_makerhinocontours.vb' lang='vbnet'/>
            <code source='examples\cs\ex_makerhinocontours.cs' lang='cs'/>
            <code source='examples\py\ex_makerhinocontours.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Mesh.CreateContourCurves(Rhino.Geometry.Mesh,Rhino.Geometry.Plane)">
            <summary>
            Constructs contour curves for a mesh, sectioned at a plane.
            </summary>
            <param name="meshToContour">A mesh to contour.</param>
            <param name="sectionPlane">A cutting plane.</param>
            <returns>An array of curves. This array can be empty.</returns>
        </member>
        <member name="P:Rhino.Geometry.Mesh.DisjointMeshCount">
            <summary>
            Gets the number of disjoint (topologically unconnected) pieces in this mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Mesh.IsClosed">
            <summary>
            Gets a value indicating whether a mesh is considered to be closed (solid).
            A mesh is considered solid when every mesh edge borders two or more faces.
            </summary>
            <returns>true if the mesh is closed, false if it is not.</returns>
        </member>
        <member name="P:Rhino.Geometry.Mesh.HasCachedTextureCoordinates">
            <summary>
            Will return true if SetCachedTextureCoordinates has been called;
            otherwise will return false.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Mesh.Vertices">
            <summary>
            Gets access to the vertices set of this mesh.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.Mesh.TopologyVertices">
            <summary>
            Gets the <see cref="T:Rhino.Geometry.Collections.MeshTopologyVertexList"/> object associated with this mesh.
            <para>This object stores vertex connectivity and the indices of vertices
            that were unified while computing the edge topology.</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Mesh.TopologyEdges">
            <summary>
            Gets the <see cref="T:Rhino.Geometry.Collections.MeshTopologyEdgeList"/> object associated with this mesh.
            <para>This object stores edge connectivity.</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Mesh.Normals">
            <summary>
            Gets access to the vertex normal collection in this mesh.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.Mesh.Faces">
            <summary>
            Gets access to the faces collection in this mesh.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.Mesh.FaceNormals">
            <summary>
            Gets access to the face normal collection in this mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Mesh.VertexColors">
            <summary>
            Gets access to the (optional) vertex color collection in this mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Mesh.TextureCoordinates">
            <summary>
            Gets access to the vertex texture coordinate collection in this mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Mesh.PartitionCount">
            <summary>
            Number of partition information chunks stored on this mesh based
            on the last call to CreatePartitions
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshVertexList">
            <summary>
            Provides access to the vertices and vertex-related functionality of a mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Clear">
            <summary>
            Clear the Vertex list on the mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Add(System.Single,System.Single,System.Single)">
            <summary>
            Adds a new vertex to the end of the Vertex list.
            </summary>
            <param name="x">X component of new vertex coordinate.</param>
            <param name="y">Y component of new vertex coordinate.</param>
            <param name="z">Z component of new vertex coordinate.</param>
            <returns>The index of the newly added vertex.</returns>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Add(System.Double,System.Double,System.Double)">
            <summary>
            Adds a new vertex to the end of the Vertex list.
            </summary>
            <param name="x">X component of new vertex coordinate.</param>
            <param name="y">Y component of new vertex coordinate.</param>
            <param name="z">Z component of new vertex coordinate.</param>
            <returns>The index of the newly added vertex.</returns>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Add(Rhino.Geometry.Point3f)">
            <summary>
            Adds a new vertex to the end of the Vertex list.
            </summary>
            <param name="vertex">Location of new vertex.</param>
            <returns>The index of the newly added vertex.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Add(Rhino.Geometry.Point3d)">
            <summary>
            Adds a new vertex to the end of the Vertex list.
            </summary>
            <param name="vertex">Location of new vertex.</param>
            <returns>The index of the newly added vertex.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.AddVertices(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Adds a series of new vertices to the end of the vertex list.
            <para>This overload accepts double-precision points.</para>
            </summary>
            <param name="vertices">A list, an array or any enumerable set of <see cref="T:Rhino.Geometry.Point3d"/>.</param>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.AddVertices(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3f})">
            <summary>
            Adds a series of new vertices to the end of the vertex list.
            <para>This overload accepts single-precision points.</para>
            </summary>
            <param name="vertices">A list, an array or any enumerable set of <see cref="T:Rhino.Geometry.Point3f"/>.</param>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.SetVertex(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sets or adds a vertex to the Vertex List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex to set.</param>
            <param name="x">X component of vertex location.</param>
            <param name="y">Y component of vertex location.</param>
            <param name="z">Z component of vertex location.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.SetVertex(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Sets or adds a vertex to the Vertex List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex to set.</param>
            <param name="x">X component of vertex location.</param>
            <param name="y">Y component of vertex location.</param>
            <param name="z">Z component of vertex location.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.SetVertex(System.Int32,Rhino.Geometry.Point3f)">
            <summary>
            Sets or adds a vertex to the Vertex List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex to set.</param>
            <param name="vertex">Vertex location.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.SetVertex(System.Int32,Rhino.Geometry.Point3d)">
            <summary>
            Sets or adds a vertex to the Vertex List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex to set.</param>
            <param name="vertex">Vertex location.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.IsHidden(System.Int32)">
            <summary>
            Gets a value indicating whether or not a vertex is hidden.
            </summary>
            <param name="vertexIndex">Index of vertex to query.</param>
            <returns>true if the vertex is hidden, false if it is not.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Hide(System.Int32)">
            <summary>
            Hides the vertex at the given index.
            </summary>
            <param name="vertexIndex">Index of vertex to hide.</param>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Show(System.Int32)">
            <summary>
            Shows the vertex at the given index.
            </summary>
            <param name="vertexIndex">Index of vertex to show.</param>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.HideAll">
            <summary>
            Hides all vertices in the mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.ShowAll">
            <summary>
            Shows all vertices in the mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.CullUnused">
            <summary>
            Removes all vertices that are currently not used by the Face list.
            </summary>
            <returns>The number of unused vertices that were removed.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.CombineIdentical(System.Boolean,System.Boolean)">
            <summary>
            Merges identical vertices.
            </summary>
            <param name="ignoreNormals">
            If true, vertex normals will not be taken into consideration when comparing vertices.
            </param>
            <param name="ignoreAdditional">
            If true, texture coordinates, colors, and principal curvatures 
            will not be taken into consideration when comparing vertices.
            </param>
            <returns>
            true if the mesh is changed, in which case the mesh will have fewer vertices than before.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.GetVertexFaces(System.Int32)">
            <summary>
            Gets a list of all of the faces that share a given vertex.
            </summary>
            <param name="vertexIndex">The index of a vertex in the mesh.</param>
            <returns>An array of indices of faces on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.GetTopologicalIndenticalVertices(System.Int32)">
            <summary>
            Gets a list of other vertices which are "topologically" identical
            to this vertex.
            </summary>
            <param name="vertexIndex">A vertex index in the mesh.</param>
            <returns>
            Array of indices of vertices that are topoligically the same as this vertex. The
            array includes vertexIndex. Returns null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.GetConnectedVertices(System.Int32)">
            <summary>
            Gets indices of all vertices that form "edges" with a given vertex index.
            </summary>
            <param name="vertexIndex">The index of a vertex to query.</param>
            <returns>An array of vertex indices that are connected with the specified vertex.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.ToPoint3fArray">
            <summary>
            Copies all vertices to a new array of <see cref="T:Rhino.Geometry.Point3f"/>.
            </summary>
            <returns>A new array.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.ToPoint3dArray">
            <summary>
            Copies all vertices to a new array of <see cref="T:Rhino.Geometry.Point3d"/>.
            </summary>
            <returns>A new array.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.ToFloatArray">
            <summary>
            Copies all vertices to a linear array of float in x,y,z order
            </summary>
            <returns>The float array.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Remove(System.Int32,System.Boolean)">
            <summary>
            Removes the vertex at the given index and all faces that reference that index.
            </summary>
            <param name="index">Index of vertex to remove.</param>
            <param name="shrinkFaces">If true, quads that reference the deleted vertex will be converted to triangles.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.Remove(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Removes the vertices at the given indices and all faces that reference those vertices.
            </summary>
            <param name="indices">Vertex indices to remove.</param>
            <param name="shrinkFaces">If true, quads that reference the deleted vertex will be converted to triangles.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexList.GetEnumerator">
            <summary>
            Gets an enumerator that yields all mesh vertices (points) in this collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexList.Count">
            <summary>
            Gets or sets the number of mesh vertices.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexList.Item(System.Int32)">
            <summary>
            Gets or sets the vertex at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of control vertex to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The control vertex at [index].</returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshTopologyVertexList">
            <summary>
            Provides access to the mesh topology vertices of a mesh. Topology vertices are
            sets of vertices in the MeshVertexList that can topologically be considered the
            same vertex.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.TopologyVertexIndex(System.Int32)">
            <summary>
            Gets the topology vertex index for an existing mesh vertex in the mesh's
            VertexList.
            </summary>
            <param name="vertexIndex">Index of a vertex in the Mesh.Vertices.</param>
            <returns>Index of a topology vertex in the Mesh.TopologyVertices.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.MeshVertexIndices(System.Int32)">
            <summary>
            Gets all indices of the mesh vertices that a given topology vertex represents.
            </summary>
            <param name="topologyVertexIndex">Index of a topology vertex in Mesh.TopologyVertices to query.</param>
            <returns>
            Indices of all vertices that in Mesh.Vertices that a topology vertex represents.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.IndicesFromFace(System.Int32)">
            <summary>
            Returns TopologyVertexIndices for a given mesh face index.
            </summary>
            <param name="faceIndex">The index of a face to query.</param>
            <returns>An array of vertex indices.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedTopologyVertices(System.Int32)">
            <summary>
            Gets all topological vertices that are connected to a given vertex.
            </summary>
            <param name="topologyVertexIndex">index of a topology vertex in Mesh.TopologyVertices.</param>
            <returns>
            Indices of all topological vertices that are connected to this topological vertex.
            null if no vertices are connected to this vertex.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedTopologyVertices(System.Int32,System.Boolean)">
            <summary>
            Gets all topological vertices that are connected to a given vertex.
            </summary>
            <param name="topologyVertexIndex">index of a topology vertex in Mesh.TopologyVertices.</param>
            <param name="sorted">if true, thr vertices are returned in a radially sorted order.</param>
            <returns>
            Indices of all topological vertices that are connected to this topological vertex.
            null if no vertices are connected to this vertex.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.SortEdges">
            <summary>
            Sorts the edge list for the mesh topology vertex list so that
            the edges are in radial order when you call ConnectedTopologyVertices.
            A nonmanifold edge is treated as a boundary edge with respect
            to sorting.  If any boundary or nonmanifold edges end at the
            vertex, then the first edge will be a boundary or nonmanifold edge.
            </summary>
            <returns>true on success.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.SortEdges(System.Int32)">
            <summary>
            Sorts the edge list for as single mesh topology vertex so that
            the edges are in radial order when you call ConnectedTopologyVertices.
            A nonmanifold edge is treated as a boundary edge with respect
            to sorting.  If any boundary or nonmanifold edges end at the
            vertex, then the first edge will be a boundary or nonmanifold edge.
            </summary>
            <param name="topologyVertexIndex">index of a topology vertex in Mesh.TopologyVertices></param>
            <returns>true on success.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.IsHidden(System.Int32)">
            <summary>
            Returns true if the topological vertex is hidden. The mesh topology
            vertex is hidden if and only if all the ON_Mesh vertices it represents is hidden.
            </summary>
            <param name="topologyVertexIndex">index of a topology vertex in Mesh.TopologyVertices.</param>
            <returns>true if mesh topology vertex is hidden.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.ConnectedFaces(System.Int32)">
            <summary>
            Gets all faces that are connected to a given vertex.
            </summary>
            <param name="topologyVertexIndex">Index of a topology vertex in Mesh.TopologyVertices.</param>
            <returns>
            Indices of all faces in Mesh.Faces that are connected to this topological vertex.
            null if no faces are connected to this vertex.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyVertexList.GetEnumerator">
            <summary>
            Gets an enumerator that yields all topology vertices in this collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshTopologyVertexList.Count">
            <summary>
            Gets or sets the number of mesh topology vertices.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshTopologyVertexList.Item(System.Int32)">
            <summary>
            Gets or sets the vertex at the given index. Setting a location adjusts all vertices
            in the mesh's vertex list that are defined by this topological vertex
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of topology vertex to access.</param>
            <returns>The topological vertex at [index].</returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshTopologyEdgeList">
            <summary>
            Represents an entry point to the list of edges in a mesh topology.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.GetTopologyVertices(System.Int32)">
            <summary>Gets the two topology vertices for a given topology edge.</summary>
            <param name="topologyEdgeIndex">An index of a topology edge.</param>
            <returns>The pair of vertex indices the edge connects.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.GetConnectedFaces(System.Int32)">
            <summary>
            Gets indices of faces connected to an edge.
            </summary>
            <param name="topologyEdgeIndex">An index of a topology edge that is queried.</param>
            <returns>An array of face indices the edge borders. This might be empty on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.GetConnectedFaces(System.Int32,System.Boolean[]@)">
            <summary>
            Gets indices of faces connected to an edge.
            </summary>
            <param name="topologyEdgeIndex">An index of a topology edge that is queried.</param>
            <param name="faceOrientationMatchesEdgeDirection">An array of Boolean values that explains whether each face direction matches the direction of the specified edge.</param>
            <returns>An array of face indices the edge borders. This might be empty on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.GetEdgesForFace(System.Int32)">
            <summary>
            Gets indices of edges that surround a given face.
            </summary>
            <param name="faceIndex">A face index.</param>
            <returns>A new array of indices to the topological edges that are connected with the specified face.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.GetEdgesForFace(System.Int32,System.Boolean[]@)">
            <summary>
            Gets indices of edges that surround a given face.
            </summary>
            <param name="faceIndex">A face index.</param>
            <param name="sameOrientation">
            Same length as returned edge index array. For each edge, the sameOrientation value
            tells you if the edge orientation matches the face orientation (true), or is
            reversed (false) compared to it.
            </param>
            <returns>A new array of indices to the topological edges that are connected with the specified face.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.GetEdgeIndex(System.Int32,System.Int32)">
            <summary>
            Returns index of edge that connects topological vertices. 
            returns -1 if no edge is found.
            </summary>
            <param name="topologyVertex1">The first topology vertex index.</param>
            <param name="topologyVertex2">The second topology vertex index.</param>
            <returns>The edge index.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.EdgeLine(System.Int32)">
            <summary>Gets the 3d line along an edge.</summary>
            <param name="topologyEdgeIndex">The topology edge index.</param>
            <returns>
            Line along edge. If input is not valid, an Invalid Line is returned.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.CollapseEdge(System.Int32)">
            <summary>
            Replaces a mesh edge with a vertex at its center and update adjacent faces as needed.
            </summary>
            <param name="topologyEdgeIndex">An index of a topology edge in <see cref="P:Rhino.Geometry.Mesh.TopologyEdges"/>.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.SplitEdge(System.Int32,System.Double)">
            <summary>
            Divides a mesh edge to create two or more triangles
            </summary>
            <param name="topologyEdgeIndex">Edge to divide</param>
            <param name="t">
            Parameter along edge. This is the same as getting an EdgeLine and calling PointAt(t) on that line
            </param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.SplitEdge(System.Int32,Rhino.Geometry.Point3d)">
            <summary>
            Divides a mesh edge to create two or more triangles
            </summary>
            <param name="topologyEdgeIndex">Edge to divide</param>
            <param name="point">
            Location to perform the split
            </param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.IsSwappableEdge(System.Int32)">
            <summary>
            Determines if a mesh edge index is valid input for <see cref="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.SwapEdge(System.Int32)"/>.
            </summary>
            <param name="topologyEdgeIndex">An index of a topology edge in <see cref="P:Rhino.Geometry.Mesh.TopologyEdges"/>.</param>
            <returns>true if edge can be swapped.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.SwapEdge(System.Int32)">
            <summary>
            If the edge is shared by two triangular face, then the edge is swapped.
            </summary>
            <param name="topologyEdgeIndex">An index of a topology edge in <see cref="P:Rhino.Geometry.Mesh.TopologyEdges"/>.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTopologyEdgeList.IsHidden(System.Int32)">
            <summary>
            Returns true if the topological edge is hidden. The mesh topology
            edge is hidden only if either of its mesh topology vertices is hidden.
            </summary>
            <param name="topologyEdgeIndex">An index of a topology edge in <see cref="P:Rhino.Geometry.Mesh.TopologyEdges"/>.</param>
            <returns>true if mesh topology edge is hidden.</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshTopologyEdgeList.Count">
            <summary>
            Gets the amount of edges in this list.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshVertexNormalList">
            <summary>
            Provides access to the Vertex Normals of a Mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Clear">
            <summary>
            Clears the vertex normal collection on the mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Add(System.Single,System.Single,System.Single)">
            <summary>
            Adds a new vertex normal at the end of the list.
            </summary>
            <param name="x">X component of new vertex normal.</param>
            <param name="y">Y component of new vertex normal.</param>
            <param name="z">Z component of new vertex normal.</param>
            <returns>The index of the newly added vertex normal.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Add(System.Double,System.Double,System.Double)">
            <summary>
            Adds a new vertex normal at the end of the list.
            </summary>
            <param name="x">X component of new vertex normal.</param>
            <param name="y">Y component of new vertex normal.</param>
            <param name="z">Z component of new vertex normal.</param>
            <returns>The index of the newly added vertex normal.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Add(Rhino.Geometry.Vector3f)">
            <summary>
            Adds a new vertex normal at the end of the list.
            </summary>
            <param name="normal">new vertex normal.</param>
            <returns>The index of the newly added vertex normal.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Add(Rhino.Geometry.Vector3d)">
            <summary>
            Adds a new vertex normal at the end of the list.
            </summary>
            <param name="normal">new vertex normal.</param>
            <returns>The index of the newly added vertex normal.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.AddRange(Rhino.Geometry.Vector3f[])">
            <summary>
            Appends a collection of normal vectors.
            </summary>
            <param name="normals">Normals to append.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sets or adds a normal to the list.
            <para>If [index] is less than [Count], the existing vertex normal at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex normal is appended to the end of the list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex normal to set.</param>
            <param name="x">X component of vertex normal.</param>
            <param name="y">Y component of vertex normal.</param>
            <param name="z">Z component of vertex normal.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Sets or adds a vertex normal to the list.
            <para>If [index] is less than [Count], the existing vertex normal at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex normal is appended to the end of the list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex normal to set.</param>
            <param name="x">X component of vertex normal.</param>
            <param name="y">Y component of vertex normal.</param>
            <param name="z">Z component of vertex normal.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(System.Int32,Rhino.Geometry.Vector3f)">
            <summary>
            Sets or adds a vertex normal to the list.
            <para>If [index] is less than [Count], the existing vertex normal at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex normal is appended to the end of the vertex list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex normal to set.</param>
            <param name="normal">The new normal at the index.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.SetNormal(System.Int32,Rhino.Geometry.Vector3d)">
            <summary>
            Sets or adds a vertex normal to the list.
            <para>If [index] is less than [Count], the existing vertex normal at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex normal is appended to the end of the list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex normal to set.</param>
            <param name="normal">The new normal at the index.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.SetNormals(Rhino.Geometry.Vector3f[])">
            <summary>
            Sets all normal vectors in one go. This method destroys the current normal array if it exists.
            </summary>
            <param name="normals">Normals for the entire mesh.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.ComputeNormals">
            <summary>
            Computes the vertex normals based on the physical shape of the mesh.
            </summary>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.UnitizeNormals">
            <summary>
            Unitizes all vertex normals.
            </summary>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.Flip">
            <summary>
            Reverses direction of all vertex normals
            <para>This is the same as Mesh.Flip(true, false, false)</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexNormalList.GetEnumerator">
            <summary>
            Gets an enumerator that yields all normals (vectors) in this collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexNormalList.Count">
            <summary>
            Gets or sets the number of mesh vertex normals.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexNormalList.Item(System.Int32)">
            <summary>
            Gets or sets the vertex at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of control vertex to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The control vertex at [index].</returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshFaceList">
            <summary>
            Provides access to the faces and Face related functionality of a Mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.Clear">
            <summary>
            Clears the Face list on the mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.AddFace(Rhino.Geometry.MeshFace)">
            <summary>
            Appends a new mesh face to the end of the mesh face list.
            </summary>
            <param name="face">Face to add.</param>
            <returns>The index of the newly added face.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.AddFace(System.Int32,System.Int32,System.Int32)">
            <summary>
            Appends a new triangular face to the end of the mesh face list.
            </summary>
            <param name="vertex1">Index of first face corner.</param>
            <param name="vertex2">Index of second face corner.</param>
            <param name="vertex3">Index of third face corner.</param>
            <returns>The index of the newly added triangle.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.AddFace(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Appends a new quadragular face to the end of the mesh face list.
            </summary>
            <param name="vertex1">Index of first face corner.</param>
            <param name="vertex2">Index of second face corner.</param>
            <param name="vertex3">Index of third face corner.</param>
            <param name="vertex4">Index of fourth face corner.</param>
            <returns>The index of the newly added quad.</returns>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.AddFaces(System.Collections.Generic.IEnumerable{Rhino.Geometry.MeshFace})">
            <summary>
            Appends a list of faces to the end of the mesh face list.
            </summary>
            <param name="faces">Faces to add.</param>
            <returns>Indices of the newly created faces</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.Insert(System.Int32,Rhino.Geometry.MeshFace)">
            <summary>
            Inserts a mesh face at a defined index in this list.
            </summary>
            <param name="index">An index.</param>
            <param name="face">A face.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is negative or &gt;= Count.</exception>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.SetFace(System.Int32,Rhino.Geometry.MeshFace)">
            <summary>
            Sets a face at a specific index of the mesh.
            </summary>
            <param name="index">A position in the list.</param>
            <param name="face">A face.</param>
            <returns>true if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.SetFace(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a triangular face at a specific index of the mesh.
            </summary>
            <param name="index">A position in the list.</param>
            <param name="vertex1">The first vertex index.</param>
            <param name="vertex2">The second vertex index.</param>
            <param name="vertex3">The third vertex index.</param>
            <returns>true if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.SetFace(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets a quadrangular face at a specific index of the mesh.
            </summary>
            <param name="index">A position in the list.</param>
            <param name="vertex1">The first vertex index.</param>
            <param name="vertex2">The second vertex index.</param>
            <param name="vertex3">The third vertex index.</param>
            <param name="vertex4">The fourth vertex index.</param>
            <returns>true if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.GetFace(System.Int32)">
            <summary>
            Returns the mesh face at the given index. 
            </summary>
            <param name="index">Index of face to get. Must be larger than or equal to zero and 
            smaller than the Face Count of the mesh.</param>
            <returns>The mesh face at the given index on success or MeshFace.Unset if the index is out of range.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.GetFaceVertices(System.Int32,Rhino.Geometry.Point3f@,Rhino.Geometry.Point3f@,Rhino.Geometry.Point3f@,Rhino.Geometry.Point3f@)">
            <summary>
            Gets the 3D location of the vertices forming a face.
            </summary>
            <param name="faceIndex">A face index.</param>
            <param name="a">A first point. This out argument is assigned during the call.</param>
            <param name="b">A second point. This out argument is assigned during the call.</param>
            <param name="c">A third point. This out argument is assigned during the call.</param>
            <param name="d">A fourth point. This out argument is assigned during the call.</param>
            <returns>true if the operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.GetFaceBoundingBox(System.Int32)">
            <summary>
            Gets the bounding box of a face.
            </summary>
            <param name="faceIndex">A face index.</param>
            <returns>A new bounding box, or <see cref="P:Rhino.Geometry.BoundingBox.Empty"/> on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.GetFaceCenter(System.Int32)">
            <summary>
            Gets the center point of a face.
            <para>For a triangular face, this is considered the centroid or barycenter.</para>
            <para>For a quad, this is considered the bimedians intersection
            (the avarage of four points).</para>
            </summary>
            <param name="faceIndex">A face index.</param>
            <returns>The center point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.AdjacentFaces(System.Int32)">
            <summary>
            Gets all faces that share a topological edge with a given face.
            </summary>
            <param name="faceIndex">A face index.</param>
            <returns>All indices that share an edge.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.ToIntArray(System.Boolean)">
            <summary>
            Copies all of the faces to a linear integer of indices
            </summary>
            <returns>The int array.</returns>
            <param name="asTriangles">If set to <c>true</c> as triangles.</param>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.DeleteFaces(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Removes a collection of faces from the mesh without affecting the remaining geometry.
            </summary>
            <param name="faceIndexes">An array containing all the face indices to be removed.</param>
            <returns>The number of faces deleted on success.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.RemoveAt(System.Int32)">
            <summary>
            Removes a face from the mesh.
            </summary>
            <param name="index">The index of the face that will be removed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">If index is &lt; 0 or &gt;= Count.</exception>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.ConvertQuadsToTriangles">
            <summary>Splits all quads along the short diagonal.</summary>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.ConvertTrianglesToQuads(System.Double,System.Double)">
            <summary>
            Joins adjacent triangles into quads if the resulting quad is 'nice'.
            </summary>
            <param name="angleToleranceRadians">
            Used to compare adjacent triangles' face normals. For two triangles 
            to be considered, the angle between their face normals has to 
            be &lt;= angleToleranceRadians. When in doubt use RhinoMath.PI/90.0 (2 degrees).
            </param>
            <param name="minimumDiagonalLengthRatio">
            ( &lt;= 1.0) For two triangles to be considered the ratio of the 
            resulting quad's diagonals 
            (length of the shortest diagonal)/(length of longest diagonal). 
            has to be >= minimumDiagonalLengthRatio. When in doubt us .875.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.CullDegenerateFaces">
            <summary>
            Attempts to removes degenerate faces from the mesh.
            <para>Degenerate faces are faces that contains such a combination of indices,
            that their final shape collapsed in a line or point.</para>
            <para>Before returning, this method also attempts to repair faces by juggling
            vertex indices.</para>
            </summary>
            <returns>The number of degenerate faces that were removed.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.IsHidden(System.Int32)">
            <summary>
            Gets a value indicating whether a face is hidden.
            <para>A face is hidden if, and only if, at least one of its vertices is hidden.</para>
            </summary>
            <param name="faceIndex">A face index.</param>
            <returns>true if hidden, false if fully visible.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.HasNakedEdges(System.Int32)">
            <summary>
            Returns true if at least one of the face edges are not topologically
            connected to any other faces.
            </summary>
            <param name="faceIndex">A face index.</param>
            <returns>true if that face makes the mesh open, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.GetTopologicalVertices(System.Int32)">
            <summary>
            Gets the topology vertex indices of a face.
            </summary>
            <param name="faceIndex">A face index.</param>
            <returns>An array of integers.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.GetConnectedFaces(System.Int32,System.Double,System.Boolean)">
            <summary>
            Find all connected face indices where adjacent face normals meet
            the criteria of angleRadians and greaterThanAngle
            </summary>
            <param name="faceIndex">face index to start from</param>
            <param name="angleRadians">angle to use for comparison of what is connected</param>
            <param name="greaterThanAngle">
            If true angles greater than or equal to are considered connected.
            If false, angles less than or equal to are considerd connected.</param>
            <returns>list of connected face indices</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.GetConnectedFacesToEdges(System.Int32,System.Boolean)">
            <summary>
            Uses startFaceIndex and finds all connected face indexes up to unwelded
            or naked edges. If treatNonmanifoldLikeUnwelded is true then non-manifold
            edges will be considered as unwelded or naked
            </summary>
            <param name="startFaceIndex">Initial face index</param>
            <param name="treatNonmanifoldLikeUnwelded">
            True means non-manifold edges will be handled like unwelded edges, 
            False means they aren't considered
            </param>
            <returns>Array of connected face indexes</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceList.GetEnumerator">
            <summary>
            Gets an enumerator that yields all faces in this collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceList.Count">
            <summary>
            Gets or sets the number of mesh faces.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceList.QuadCount">
            <summary>
            Gets the number of faces that are quads (4 corners).
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceList.TriangleCount">
            <summary>
            Gets the number of faces that are triangles (3 corners).
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceList.Item(System.Int32)">
            <summary>
            Returns the mesh face at the given index. 
            </summary>
            <param name="index">Index of face to get. Must be larger than or equal to zero and 
            smaller than the Face Count of the mesh.</param>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshFaceNormalList">
            <summary>
            Provides access to the Face normals of a Mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.Clear">
            <summary>
            Clears the Face Normal list on the mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(System.Single,System.Single,System.Single)">
            <summary>
            Appends a face normal to the list of mesh face normals.
            </summary>
            <param name="x">X component of face normal.</param>
            <param name="y">Y component of face normal.</param>
            <param name="z">Z component of face normal.</param>
            <returns>The index of the newly added face normal.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(System.Double,System.Double,System.Double)">
            <summary>
            Appends a face normal to the list of mesh face normals.
            </summary>
            <param name="x">X component of face normal.</param>
            <param name="y">Y component of face normal.</param>
            <param name="z">Z component of face normal.</param>
            <returns>The index of the newly added face normal.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(Rhino.Geometry.Vector3d)">
            <summary>
            Appends a face normal to the list of mesh face normals.
            </summary>
            <param name="normal">New face normal.</param>
            <returns>The index of the newly added face normal.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.AddFaceNormal(Rhino.Geometry.Vector3f)">
            <summary>
            Appends a face normal to the list of mesh face normals.
            </summary>
            <param name="normal">New face normal.</param>
            <returns>The index of the newly added face normal.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(System.Int32,System.Single,System.Single,System.Single)">
            <summary>
            Sets a face normal vector at an index using three single-precision numbers.
            </summary>
            <param name="index">An index.</param>
            <param name="x">A x component.</param>
            <param name="y">A y component.</param>
            <param name="z">A z component.</param>
            <returns>true on success; false on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(System.Int32,System.Double,System.Double,System.Double)">
            <summary>
            Sets a face normal vector at an index using three double-precision numbers.
            </summary>
            <param name="index">An index.</param>
            <param name="x">A x component.</param>
            <param name="y">A y component.</param>
            <param name="z">A z component.</param>
            <returns>true on success; false on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(System.Int32,Rhino.Geometry.Vector3d)">
            <summary>
            Sets a face normal vector at an index using a single-precision vector.
            </summary>
            <param name="index">An index.</param>
            <param name="normal">A normal vector.</param>
            <returns>true on success; false on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.SetFaceNormal(System.Int32,Rhino.Geometry.Vector3f)">
            <summary>
            Sets a face normal vector at an index using a single-precision vector.
            </summary>
            <param name="index">An index.</param>
            <param name="normal">A normal vector.</param>
            <returns>true on success; false on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.UnitizeFaceNormals">
            <summary>
            Unitizes all the existing face normals.
            </summary>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.ComputeFaceNormals">
            <summary>
            Computes all the face normals for this mesh based on the physical shape of the mesh.
            </summary>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshFaceNormalList.GetEnumerator">
            <summary>
            Gets an enumerator that yields all normals in this collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceNormalList.Count">
            <summary>
            Gets or sets the number of mesh face normals.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshFaceNormalList.Item(System.Int32)">
            <summary>
            Gets or sets the face normal at the given face index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of face normal to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The face normal at [index].</returns>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshVertexColorList">
            <summary>
            Provides access to the vertex colors of a mesh object.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.Clear">
            <summary>
            Clears the vertex color list on the mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.Add(System.Int32,System.Int32,System.Int32)">
            <summary>
            Adds a new vertex color to the end of the color list.
            </summary>
            <param name="red">Red component of color, must be in the 0~255 range.</param>
            <param name="green">Green component of color, must be in the 0~255 range.</param>
            <param name="blue">Blue component of color, must be in the 0~255 range.</param>
            <returns>The index of the newly added color.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.Add(System.Drawing.Color)">
            <summary>
            Adds a new vertex color to the end of the color list.
            </summary>
            <param name="color">Color to append, Alpha channels will be ignored.</param>
            <returns>The index of the newly added color.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.SetColor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets or adds a vertex color to the color List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex color to set. 
            If index equals Count, then the color will be appended.</param>
            <param name="red">Red component of vertex color. Value must be in the 0~255 range.</param>
            <param name="green">Green component of vertex color. Value must be in the 0~255 range.</param>
            <param name="blue">Blue component of vertex color. Value must be in the 0~255 range.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.SetColor(System.Int32,System.Drawing.Color)">
            <summary>
            Sets or adds a vertex to the Vertex List.
            <para>If [index] is less than [Count], the existing vertex at [index] will be modified.</para>
            <para>If [index] equals [Count], a new vertex is appended to the end of the vertex list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of vertex color to set. 
            If index equals Count, then the color will be appended.</param>
            <param name="color">Color to set, Alpha channels will be ignored.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.SetColor(Rhino.Geometry.MeshFace,System.Drawing.Color)">
            <summary>
            Sets a color at the three or four vertex indices of a specified face.
            </summary>
            <param name="face">A face to use to retrieve indices.</param>
            <param name="color">A color.</param>
            <returns>true on success; false on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.CreateMonotoneMesh(System.Drawing.Color)">
            <summary>
            Constructs a valid vertex color list consisting of a single color.
            </summary>
            <param name="baseColor">Color to apply to every vertex.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.SetColors(System.Drawing.Color[])">
            <summary>
            Sets all the vertex colors in one go. For the Mesh to be valid, the number 
            of colors must match the number of vertices.
            </summary>
            <param name="colors">Colors to set.</param>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_analysismode.vb' lang='vbnet'/>
            <code source='examples\cs\ex_analysismode.cs' lang='cs'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.AppendColors(System.Drawing.Color[])">
            <summary>
            Appends a collection of colors to the vertex color list. 
            For the Mesh to be valid, the number of colors must match the number of vertices.
            </summary>
            <param name="colors">Colors to append.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshVertexColorList.GetEnumerator">
            <summary>
            Gets an enumerator that yields all colors in this collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexColorList.Count">
            <summary>
            Gets or sets the number of mesh colors.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexColorList.Item(System.Int32)">
            <summary>
            Gets or sets the vertex color at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of vertex control to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The vertex color at [index].</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshVertexColorList.Tag">
            <example>
            <code source='examples\vbnet\ex_analysismode.vb' lang='vbnet'/>
            <code source='examples\cs\ex_analysismode.cs' lang='cs'/>
            </example>
            <summary>
            Gets or sets a mapping information for the mesh associated with these vertex colors.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Collections.MeshTextureCoordinateList">
            <summary>
            Provides access to the Vertex Texture coordinates of a Mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.Clear">
            <summary>
            Clears the Texture Coordinate list on the mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(System.Single,System.Single)">
            <summary>
            Adds a new texture coordinate to the end of the Texture list.
            </summary>
            <param name="s">S component of new texture coordinate.</param>
            <param name="t">T component of new texture coordinate.</param>
            <returns>The index of the newly added texture coordinate.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(System.Double,System.Double)">
            <summary>
            Adds a new texture coordinate to the end of the Texture list.
            </summary>
            <param name="s">S component of new texture coordinate.</param>
            <param name="t">T component of new texture coordinate.</param>
            <returns>The index of the newly added texture coordinate.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(Rhino.Geometry.Point2f)">
            <summary>
            Adds a new texture coordinate to the end of the Texture list.
            </summary>
            <param name="tc">Texture coordinate to add.</param>
            <returns>The index of the newly added texture coordinate.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.Add(Rhino.Geometry.Point3d)">
            <summary>
            Adds a new texture coordinate to the end of the Texture list.
            </summary>
            <param name="tc">Texture coordinate to add.</param>
            <returns>The index of the newly added texture coordinate.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.AddRange(Rhino.Geometry.Point2f[])">
            <summary>
            Appends an array of texture coordinates.
            </summary>
            <param name="textureCoordinates">Texture coordinates to append.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(System.Int32,System.Single,System.Single)">
            <summary>
            Sets or adds a texture coordinate to the Texture Coordinate List.
            <para>If [index] is less than [Count], the existing coordinate at [index] will be modified.</para>
            <para>If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of texture coordinate to set.</param>
            <param name="s">S component of texture coordinate.</param>
            <param name="t">T component of texture coordinate.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(System.Int32,System.Double,System.Double)">
            <summary>
            Sets or adds a texture coordinate to the Texture Coordinate List.
            <para>If [index] is less than [Count], the existing coordinate at [index] will be modified.</para>
            <para>If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of texture coordinate to set.</param>
            <param name="s">S component of texture coordinate.</param>
            <param name="t">T component of texture coordinate.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(System.Int32,Rhino.Geometry.Point2f)">
            <summary>
            Sets or adds a texture coordinate to the Texture Coordinate List.
            <para>If [index] is less than [Count], the existing coordinate at [index] will be modified.</para>
            <para>If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of texture coordinate to set.</param>
            <param name="tc">Texture coordinate point.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinate(System.Int32,Rhino.Geometry.Point3f)">
            <summary>
            Sets or adds a texture coordinate to the Texture Coordinate List.
            <para>If [index] is less than [Count], the existing coordinate at [index] will be modified.</para>
            <para>If [index] equals [Count], a new coordinate is appended to the end of the coordinate list.</para> 
            <para>If [index] is larger than [Count], the function will return false.</para>
            </summary>
            <param name="index">Index of texture coordinate to set.</param>
            <param name="tc">Texture coordinate point.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinates(Rhino.Geometry.Point2f[])">
            <summary>
            Sets all texture coordinates in one go.
            </summary>
            <param name="textureCoordinates">Texture coordinates to assign to the mesh.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.SetTextureCoordinates(Rhino.Render.TextureMapping)">
            <summary>
            Set all texture coordinates based on a texture mapping function
            </summary>
            <param name="mapping">The new mapping type.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.NormalizeTextureCoordinates">
            <summary>
            Scales the texture coordinates so the texture domains are [0,1] 
            and eliminate any texture rotations.
            </summary>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.TransposeTextureCoordinates">
            <summary>
            Transposes texture coordinates.
            <para>The region of the bitmap the texture uses does not change.
            All texture coordinates rows (Us) become columns (Vs), and vice versa.</para>
            </summary>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.ReverseTextureCoordinates(System.Int32)">
            <summary>
            Reverses one coordinate direction of the texture coordinates.
            <para>The region of the bitmap the texture uses does not change.
            Either Us or Vs direction is flipped.</para>
            </summary>
            <param name="direction">
            <para>0 = first texture coordinate is reversed.</para>
            <para>1 = second texture coordinate is reversed.</para>
            </param>
            <returns>true if operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.MeshTextureCoordinateList.GetEnumerator">
            <summary>
            Gets an enumerator that yields all texture coordinates in this collection.
            </summary>
            <returns>The enumerator.</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshTextureCoordinateList.Count">
            <summary>
            Gets or sets the number of texture coordinates.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.MeshTextureCoordinateList.Item(System.Int32)">
            <summary>
            Gets or sets the texture coordinate at the given index. 
            The index must be valid or an IndexOutOfRangeException will be thrown.
            </summary>
            <param name="index">Index of texture coordinates to access.</param>
            <exception cref="T:System.IndexOutOfRangeException">Thrown when the index is invalid.</exception>
            <returns>The texture coordinate at [index].</returns>
        </member>
        <member name="T:Rhino.Geometry.MeshFace">
            <summary>
            Represents the values of the four indices of a mesh face quad.
            <para>If the third and fourth values are the same, this face represents a
            triangle.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new triangular Mesh face.
            </summary>
            <param name="a">Index of first corner.</param>
            <param name="b">Index of second corner.</param>
            <param name="c">Index of third corner.</param>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new quadrangular Mesh face.
            </summary>
            <param name="a">Index of first corner.</param>
            <param name="b">Index of second corner.</param>
            <param name="c">Index of third corner.</param>
            <param name="d">Index of fourth corner.</param>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.IsValid">
            <summary>
            Gets a value indicating whether or not this mesh face 
            is considered to be valid. Note that even valid mesh faces 
            could potentially be invalid in the context of a specific Mesh, 
            if one or more of the corner indices exceeds the number of 
            vertices on the mesh. If you want to perform a complete 
            validity check, use IsValid(int) instead.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.IsValid(System.Int32)">
            <summary>
            Gets a value indicating whether or not this mesh face 
            is considered to be valid. Unlike the simple IsValid function, 
            this function takes upper bound indices into account.
            </summary>
            <param name="vertexCount">Number of vertices in the mesh that this face is a part of.</param>
            <returns>true if the face is considered valid, false if not.</returns>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.Set(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets all the corners for this face as a triangle.
            </summary>
            <param name="a">Index of first corner.</param>
            <param name="b">Index of second corner.</param>
            <param name="c">Index of third corner.</param>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.Set(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets all the corners for this face as a quad.
            </summary>
            <param name="a">Index of first corner.</param>
            <param name="b">Index of second corner.</param>
            <param name="c">Index of third corner.</param>
            <param name="d">Index of fourth corner.</param>
        </member>
        <member name="M:Rhino.Geometry.MeshFace.Flip">
            <summary>
            Reverses the orientation of the face by swapping corners. 
            The first corner is always maintained.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.Unset">
            <summary>
            Gets an Unset MeshFace. Unset faces have Int32.MinValue for all corner indices.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.DebuggerDisplayUtil">
            <summary>
            Internal property that figures out the debugger display for Mesh Faces.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.A">
            <summary>
            Gets or sets the first corner index of the mesh face.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.B">
            <summary>
            Gets or sets the second corner index of the mesh face.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.C">
            <summary>
            Gets or sets the third corner index of the mesh face.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.D">
            <summary>
            Gets or sets the fourth corner index of the mesh face. 
            If D equals C, the mesh face is considered to be a triangle 
            rather than a quad.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.Item(System.Int32)">
            <summary>
            Gets or sets the vertex index associated with an entry in this face.
            </summary>
            <param name="index">A number in interval [0-3] that refers to an index of a vertex in this face.</param>
            <returns>The vertex index associated with this mesh face.</returns>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.IsTriangle">
            <summary>
            Gets a value indicating whether or not this mesh face is a triangle. 
            A mesh face is considered to be a triangle when C equals D, thus it is 
            possible for an Invalid mesh face to also be a triangle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshFace.IsQuad">
            <summary>
            Gets a value indicating whether or not this mesh face is a quad. 
            A mesh face is considered to be a triangle when C does not equal D, 
            thus it is possible for an Invalid mesh face to also be a quad.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.NurbsSurface">
            <summary>
            Represents a Non Uniform Rational B-Splines (NURBS) surface.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.Create(System.Int32,System.Boolean,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a new NURBS surface with internal uninitialized arrays.
            </summary>
            <param name="dimension">The number of dimensions.<para>&gt;= 1. This value is usually 3.</para></param>
            <param name="isRational">true to make a rational NURBS.</param>
            <param name="order0">The order in U direction.<para>&gt;= 2.</para></param>
            <param name="order1">The order in V direction.<para>&gt;= 2.</para></param>
            <param name="controlPointCount0">Control point count in U direction.<para>&gt;= order0.</para></param>
            <param name="controlPointCount1">Control point count in V direction.<para>&gt;= order1.</para></param>
            <returns>A new NURBS surface, or null on error.</returns>
            <example>
            <code source='examples\vbnet\ex_createsurfaceexample.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createsurfaceexample.cs' lang='cs'/>
            <code source='examples\py\ex_createsurfaceexample.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateFromCone(Rhino.Geometry.Cone)">
            <summary>
            Constructs a new NURBS surfaces from cone data.
            </summary>
            <param name="cone">A cone value.</param>
            <returns>A new NURBS surface, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateFromCylinder(Rhino.Geometry.Cylinder)">
            <summary>
            Constructs a new NURBS surfaces from cylinder data.
            </summary>
            <param name="cylinder">A cylinder value.</param>
            <returns>A new NURBS surface, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateFromSphere(Rhino.Geometry.Sphere)">
            <summary>
            Constructs a new NURBS surfaces from sphere data.
            </summary>
            <param name="sphere">A sphere value.</param>
            <returns>A new NURBS surface, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateFromTorus(Rhino.Geometry.Torus)">
            <summary>
            Constructs a new NURBS surfaces from torus data.
            </summary>
            <param name="torus">A torus value.</param>
            <returns>A new NURBS surface, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateRuledSurface(Rhino.Geometry.Curve,Rhino.Geometry.Curve)">
            <summary>
            Constructs a ruled surface between two curves. Curves must share the same knot-vector.
            </summary>
            <param name="curveA">First curve.</param>
            <param name="curveB">Second curve.</param>
            <returns>A ruled surface on success or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateFromPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Constructs a NURBS surface from a 2D grid of control points.
            </summary>
            <param name="points">Control point locations.</param>
            <param name="uCount">Number of points in U direction.</param>
            <param name="vCount">Number of points in V direction.</param>
            <param name="uDegree">Degree of surface in U direction.</param>
            <param name="vDegree">Degree of surface in V direction.</param>
            <returns>A NurbsSurface on success or null on failure.</returns>
            <remarks>uCount multiplied by vCount must equal the number of points supplied.</remarks>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateThroughPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Constructs a NURBS surface from a 2D grid of points.
            </summary>
            <param name="points">Control point locations.</param>
            <param name="uCount">Number of points in U direction.</param>
            <param name="vCount">Number of points in V direction.</param>
            <param name="uDegree">Degree of surface in U direction.</param>
            <param name="vDegree">Degree of surface in V direction.</param>
            <param name="uClosed">true if the surface should be closed in the U direction.</param>
            <param name="vClosed">true if the surface should be closed in the V direction.</param>
            <returns>A NurbsSurface on success or null on failure.</returns>
            <remarks>uCount multiplied by vCount must equal the number of points supplied.</remarks>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateFromCorners(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Makes a surface from 4 corner points.
            <para>This is the same as calling <see cref="M:Rhino.Geometry.NurbsSurface.CreateFromCorners(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)"/> with tolerance 0.</para>
            </summary>
            <param name="corner1">The first corner.</param>
            <param name="corner2">The second corner.</param>
            <param name="corner3">The third corner.</param>
            <param name="corner4">The fourth corner.</param>
            <returns>the resulting surface or null on error.</returns>
            <example>
            <code source="examples\vbnet\ex_srfpt.vb" lang="vbnet"/>
            <code source="examples\cs\ex_srfpt.cs" lang="cs"/>
            <code source="examples\py\ex_srfpt.py" lang="py"/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateFromCorners(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Makes a surface from 4 corner points.
            </summary>
            <param name="corner1">The first corner.</param>
            <param name="corner2">The second corner.</param>
            <param name="corner3">The third corner.</param>
            <param name="corner4">The fourth corner.</param>
            <param name="tolerance">Minimum edge length without collapsing to a singularity.</param>
            <returns>The resulting surface or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateFromCorners(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Makes a surface from 3 corner points.
            </summary>
            <param name="corner1">The first corner.</param>
            <param name="corner2">The second corner.</param>
            <param name="corner3">The third corner.</param>
            <returns>The resulting surface or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateRailRevolvedSurface(Rhino.Geometry.Curve,Rhino.Geometry.Curve,Rhino.Geometry.Line,System.Boolean)">
            <summary>
            Constructs a railed Surface-of-Revolution.
            </summary>
            <param name="profile">Profile curve for revolution.</param>
            <param name="rail">Rail curve for revolution.</param>
            <param name="axis">Axis of revolution.</param>
            <param name="scaleHeight">If true, surface will be locally scaled.</param>
            <returns>A NurbsSurface or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateNetworkSurface(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Int32,System.Int32,System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Int32,System.Int32,System.Double,System.Double,System.Double,System.Int32@)">
            <summary>
            Builds a surface from an ordered network of curves/edges.
            </summary>
            <param name="uCurves">An array, a list or any enumerable set of U curves.</param>
            <param name="uContinuityStart">
            continuity at first U segment, 0 = loose, 1 = pos, 2 = tan, 3 = curvature.
            </param>
            <param name="uContinuityEnd">
            continuity at last U segment, 0 = loose, 1 = pos, 2 = tan, 3 = curvature.
            </param>
            <param name="vCurves">An array, a list or any enumerable set of V curves.</param>
            <param name="vContinuityStart">
            continuity at first V segment, 0 = loose, 1 = pos, 2 = tan, 3 = curvature.
            </param>
            <param name="vContinuityEnd">
            continuity at last V segment, 0 = loose, 1 = pos, 2 = tan, 3 = curvature.
            </param>
            <param name="edgeTolerance">tolerance to use along network surface edge.</param>
            <param name="interiorTolerance">tolerance to use for the interior curves.</param>
            <param name="angleTolerance">angle tolerance to use.</param>
            <param name="error">
            If the NurbsSurface could not be created, the error value describes where
            the failure occured.  0 = success,  1 = curve sorter failed, 2 = network initializing failed,
            3 = failed to build surface, 4 = network surface is not valid.
            </param>
            <returns>A NurbsSurface or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CreateNetworkSurface(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve},System.Int32,System.Double,System.Double,System.Double,System.Int32@)">
            <summary>
            Builds a surface from an autosorted network of curves/edges.
            </summary>
            <param name="curves">An array, a list or any enumerable set of curves/edges, sorted automatically into U and V curves.</param>
            <param name="continuity">continuity along edges, 0 = loose, 1 = pos, 2 = tan, 3 = curvature.</param>
            <param name="edgeTolerance">tolerance to use along network surface edge.</param>
            <param name="interiorTolerance">tolerance to use for the interior curves.</param>
            <param name="angleTolerance">angle tolerance to use.</param>
            <param name="error">
            If the NurbsSurface could not be created, the error value describes where
            the failure occured.  0 = success,  1 = curve sorter failed, 2 = network initializing failed,
            3 = failed to build surface, 4 = network surface is not valid.
            </param>
            <returns>A NurbsSurface or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.#ctor(Rhino.Geometry.NurbsSurface)">
            <summary>
            Initializes a new NURBS surface by copying the values from another surface.
            </summary>
            <param name="other">Another surface.</param>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.MakeRational">
            <summary>
            Makes this surface rational.
            </summary>
            <returns>true if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.MakeNonRational">
            <summary>
            Makes this surface non-rational.
            </summary>
            <returns>true if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.IncreaseDegreeU(System.Int32)">
            <summary>
            Increase the degree of this surface in U direction.
            </summary>
            <param name="desiredDegree">The desired degree. 
            Degrees should be number between and including 1 and 11.</param>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_nurbssurfaceincreasedegree.vb' lang='vbnet'/>
            <code source='examples\cs\ex_nurbssurfaceincreasedegree.cs' lang='cs'/>
            <code source='examples\py\ex_nurbssurfaceincreasedegree.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.IncreaseDegreeV(System.Int32)">
            <summary>
            Increase the degree of this surface in V direction.
            </summary>
            <param name="desiredDegree">The desired degree. 
            Degrees should be number between and including 1 and 11.</param>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_nurbssurfaceincreasedegree.vb' lang='vbnet'/>
            <code source='examples\cs\ex_nurbssurfaceincreasedegree.cs' lang='cs'/>
            <code source='examples\py\ex_nurbssurfaceincreasedegree.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.CopyFrom(Rhino.Geometry.NurbsSurface)">
            <summary>
            Copies this NURBS surface from another NURBS surface.
            </summary>
            <param name="other">The other NURBS surface to use as source.</param>
        </member>
        <member name="M:Rhino.Geometry.NurbsSurface.EpsilonEquals(Rhino.Geometry.NurbsSurface,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.NurbsSurface.KnotsU">
            <summary>
            The U direction knot vector.
            </summary>
            <example>
            <code source='examples\vbnet\ex_createsurfaceexample.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createsurfaceexample.cs' lang='cs'/>
            <code source='examples\py\ex_createsurfaceexample.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.NurbsSurface.KnotsV">
            <summary>
            The V direction knot vector.
            </summary>
            <example>
            <code source='examples\vbnet\ex_createsurfaceexample.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createsurfaceexample.cs' lang='cs'/>
            <code source='examples\py\ex_createsurfaceexample.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.NurbsSurface.Points">
            <summary>
            Gets a collection of surface control points that form this surface.
            </summary>
            <example>
            <code source='examples\vbnet\ex_createsurfaceexample.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createsurfaceexample.cs' lang='cs'/>
            <code source='examples\py\ex_createsurfaceexample.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.NurbsSurface.IsRational">
            <summary>
            Gets a value indicating whether or not the nurbs surface is rational.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.NurbsSurface.OrderU">
            <summary>
            Gets the order in the U direction.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.NurbsSurface.OrderV">
            <summary>
            Gets the order in the V direction.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.MorphControl">
            <summary>
            Represents a geometry that is able to control the morphing behaviour of some other geometry.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MorphControl.#ctor(Rhino.Geometry.NurbsCurve,Rhino.Geometry.NurbsCurve)">
            <summary>
            Constructs a MorphControl that allows for morphing between two curves.
            </summary>
            <param name="originCurve">The origin curve for morphing.</param>
            <param name="targetCurve">The target curve for morphing.</param>
        </member>
        <member name="M:Rhino.Geometry.MorphControl.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.MorphControl.Morph(Rhino.Geometry.GeometryBase)">
            <summary>Applies the space morph to geometry.</summary>
            <param name="geometry">The geometry to be morphed.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="P:Rhino.Geometry.MorphControl.SpaceMorphTolerance">
            <summary>
            The 3d fitting tolerance used when morphing surfaces and breps.
            The default is 0.0 and any value &lt;= 0.0 is ignored by morphing functions.
            The value returned by Tolerance does not affect the way meshes and points are morphed.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MorphControl.QuickPreview">
            <summary>
            true if the morph should be done as quickly as possible because the
            result is being used for some type of dynamic preview.  If QuickPreview
            is true, the tolerance may be ignored. The QuickPreview value does not
            affect the way meshes and points are morphed. The default is false.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MorphControl.PreserveStructure">
            <summary>
            true if the morph should be done in a way that preserves the structure
            of the geometry.  In particular, for NURBS objects, true  eans that
            only the control points are moved.  The PreserveStructure value does not
            affect the way meshes and points are morphed. The default is false.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Collections.NurbsSurfacePointList">
            <summary>
            Provides access to the control points of a nurbs surface.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.EnsurePrivateCopy">
            <summary>
            If you want to keep a copy of this class around by holding onto it in a variable after a command
            completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can
            call this function as many times as you want.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.GetGrevillePoint(System.Int32,System.Int32)">
            <summary>
            Gets the Greville point (u, v) coordinates associated with the control point at the given indices.
            </summary>
            <param name="u">Index of control-point along surface U direction.</param>
            <param name="v">Index of control-point along surface V direction.</param>
            <returns>A Surface UV coordinate on success, Point2d.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.GetControlPoint(System.Int32,System.Int32)">
            <summary>
            Gets the control point at the given (u, v) index.
            </summary>
            <param name="u">Index of control-point along surface U direction.</param>
            <param name="v">Index of control-point along surface V direction.</param>
            <returns>The control point at the given (u, v) index.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.SetControlPoint(System.Int32,System.Int32,Rhino.Geometry.Point3d)">
            <summary>
            Sets the control point at the given (u, v) index.
            </summary>
            <param name="u">Index of control-point along surface U direction.</param>
            <param name="v">Index of control-point along surface V direction.</param>
            <param name="cp">The control point location to set (weight is assumed to be 1.0).</param>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_createsurfaceexample.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createsurfaceexample.cs' lang='cs'/>
            <code source='examples\py\ex_createsurfaceexample.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.SetControlPoint(System.Int32,System.Int32,Rhino.Geometry.ControlPoint)">
            <summary>
            Sets the control point at the given (u, v) index.
            </summary>
            <param name="u">Index of control-point along surface U direction.</param>
            <param name="v">Index of control-point along surface V direction.</param>
            <param name="cp">The control point to set.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfacePointList.EpsilonEquals(Rhino.Geometry.Collections.NurbsSurfacePointList,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsSurfacePointList.CountU">
            <summary>
            Gets the number of control points in the U direction of this surface.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsSurfacePointList.CountV">
            <summary>
            Gets the number of control points in the V direction of this surface.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Collections.NurbsSurfaceKnotList">
            <summary>
            Provides access to the knot vector of a nurbs surface.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.SuperfluousKnot(System.Boolean)">
            <summary>
            Computes the knots that are superfluous because they are not used in NURBs evaluation.
            These make it appear so that the first and last surface spans are different from interior spans.
            <para>http://wiki.mcneel.com/developer/onsuperfluousknot</para>
            </summary>
            <param name="start">true if the query targets the first knot. Otherwise, the last knot.</param>
            <returns>A component.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.EnsurePrivateCopy">
            <summary>
            If you want to keep a copy of this class around by holding onto it in a variable after a command
            completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can
            call this function as many times as you want.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.InsertKnot(System.Double)">
            <summary>
            Inserts a knot and update control point locations.
            Does not change parameterization or locus of curve.
            </summary>
            <param name="value">Knot value to insert.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.InsertKnot(System.Double,System.Int32)">
            <summary>
            Inserts a knot and update control point locations.
            Does not change parameterization or locus of curve.
            </summary>
            <param name="value">Knot value to insert.</param>
            <param name="multiplicity">Multiplicity of knot to insert.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.KnotMultiplicity(System.Int32)">
            <summary>Get knot multiplicity.</summary>
            <param name="index">Index of knot to query.</param>
            <returns>The multiplicity (valence) of the knot.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.CreateUniformKnots(System.Double)">
            <summary>
            Compute a clamped, uniform knot vector based on the current
            degree and control point count. Does not change values of control
            vertices.
            </summary>
            <param name="knotSpacing">Spacing of subsequent knots.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.CreatePeriodicKnots(System.Double)">
            <summary>
            Compute a clamped, uniform, periodic knot vector based on the current
            degree and control point count. Does not change values of control
            vertices.
            </summary>
            <param name="knotSpacing">Spacing of subsequent knots.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsSurfaceKnotList.EpsilonEquals(Rhino.Geometry.Collections.NurbsSurfaceKnotList,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsSurfaceKnotList.Count">
            <summary>Gets the total number of knots in this curve.</summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsSurfaceKnotList.ClampedAtStart">
            <summary>Determines if a knot vector is clamped.</summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsSurfaceKnotList.ClampedAtEnd">
            <summary>Determines if a knot vector is clamped.</summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsSurfaceKnotList.Item(System.Int32)">
            <summary>
            Gets or sets the knot vector value at the given index.
            </summary>
            <param name="index">Index of knot to access.</param>
            <returns>The knot value at [index]</returns>
        </member>
        <member name="T:Rhino.Runtime.DocumentCollectedException">
            <summary>
            Represents the error that happen when a class user attempts to execute a modifying operation
            on an object that has been added to a document.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.DocumentCollectedException.#ctor">
            <summary>
            Initializes a new instance of the document controlled exception class.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.PlaneSurface">
            <summary>
            Represents a plane surface, with plane and two intervals.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PlaneSurface.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Initializes a plane surface with x and y intervals.
            </summary>
            <param name="plane">The plane.</param>
            <param name="xExtents">The x interval of the plane that defines the rectangle.
            The corresponding evaluation interval domain is set so that it matches the
            extents interval.</param>
            <param name="yExtents">The y interval of the plane that defines the rectangle.
            The corresponding evaluation interval domain is set so that it matches the
            extents interval.</param>
            <example>
            <code source='examples\vbnet\ex_planesurface.vb' lang='vbnet'/>
            <code source='examples\cs\ex_planesurface.cs' lang='cs'/>
            <code source='examples\py\ex_planesurface.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.PlaneSurface.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.PlaneSurface.CreateThroughBox(Rhino.Geometry.Line,Rhino.Geometry.Vector3d,Rhino.Geometry.BoundingBox)">
            <summary>
            Makes a plane that includes a line and a vector and goes through a bounding box.
            </summary>
            <param name="lineInPlane">A line that will lie on the plane.</param>
            <param name="vectorInPlane">A vector the direction of which will be in plane.</param>
            <param name="box">A box to cut through.</param>
            <returns>A new plane surface on success, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.PlaneSurface.CreateThroughBox(Rhino.Geometry.Plane,Rhino.Geometry.BoundingBox)">
            <summary>
            Extends a plane into a plane surface so that the latter goes through a bounding box.
            </summary>
            <param name="plane">An original plane value.</param>
            <param name="box">A box to use for extension boundary.</param>
            <returns>A new plane surface on success, or null on error.</returns>
            <example>
            <code source='examples\vbnet\ex_splitbrepwithplane.vb' lang='vbnet'/>
            <code source='examples\cs\ex_splitbrepwithplane.cs' lang='cs'/>
            <code source='examples\py\ex_splitbrepwithplane.py' lang='py'/>
            </example>
        </member>
        <member name="T:Rhino.Geometry.ClippingPlaneSurface">
            <summary>
            Represents a planar surface that is used as clipping plane in viewports.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.ClippingPlaneSurface.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.ClippingPlaneSurface.ViewportIds">
            <summary>
            Returns Ids of viewports that this clipping plane is supposed to clip.
            </summary>
            <returns>An array of globally unique ideantifiers (Guids) to the viewports.</returns>
        </member>
        <member name="P:Rhino.Geometry.ClippingPlaneSurface.Plane">
            <summary>
            Gets or sets the clipping plane.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.MeshPointDataStruct">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_et">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_ci_type">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_ci_index">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_edge_index">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_face_index">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_Triangle">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_t0">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_t1">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_t2">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_t3">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_Px">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_Py">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="F:Rhino.Runtime.InteropWrappers.MeshPointDataStruct.m_Pz">
            <summary>
            This is only needed when passing values to the Rhino C++ core, ignore
            for .NET plug-ins.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.MeshPoint">
            <summary>
            Represents a point that is found on a mesh.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.MeshPoint.GetTriangle(System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Gets the mesh face indices of the triangle where the
            intersection is on the face takes into consideration
            the way the quad was split during the intersection.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshPoint.Mesh">
            <summary>
            The mesh that is ralated to this point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshPoint.EdgeParameter">
            <summary>
            Edge parameter when found.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshPoint.ComponentIndex">
            <summary>
            Gets the component index of the intersecting element in the mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshPoint.EdgeIndex">
            <summary>
            When set, EdgeIndex is an index of an edge in the mesh's edge list.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshPoint.FaceIndex">
            <summary>
            FaceIndex is an index of a face in mesh.Faces.
            When ComponentIndex refers to a vertex, any face that uses the vertex
            may appear as FaceIndex.  When ComponenctIndex refers to an Edge or
            EdgeIndex is set, then any face that uses that edge may appear as FaceIndex.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshPoint.Triangle">
            <summary>
            Face triangle where the intersection takes place:
            <para>0 is unset</para>
            <para>A is 0,1,2</para>
            <para>B is 0,2,3</para>
            <para>C is 0,1,3</para>
            <para>D is 1,2,3</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshPoint.T">
            <summary>
            Barycentric quad coordinates for the point on the mesh
            face mesh.Faces[FaceIndex].  If the face is a triangle
            disregard T[3] (it should be set to 0.0). If the face is
            a quad and is split between vertexes 0 and 2, then T[3]
            will be 0.0 when point is on the triangle defined by vi[0],
            vi[1], vi[2] and T[1] will be 0.0 when point is on the
            triangle defined by vi[0], vi[2], vi[3]. If the face is a
            quad and is split between vertexes 1 and 3, then T[2] will
            be -1 when point is on the triangle defined by vi[0],
            vi[1], vi[3] and m_t[0] will be -1 when point is on the
            triangle defined by vi[1], vi[2], vi[3].
            </summary>
        </member>
        <member name="P:Rhino.Geometry.MeshPoint.Point">
            <summary>
            Gets the location (position) of this point.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Intersect.MeshClash">
            <summary>
            Represents a particular instance of a clash or intersection between two meshes.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Intersect.MeshClash.Search(System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh},System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh},System.Double,System.Int32)">
            <summary>
            Searches for locations where the distance from <i>a mesh in one set</i> of meshes
            is less than distance to <i>another mesh in a second set</i> of meshes.
            </summary>
            <param name="setA">The first set of meshes.</param>
            <param name="setB">The second set of meshes.</param>
            <param name="distance">The largest distance at which there is a clash.
            All values smaller than this cause a clash as well.</param>
            <param name="maxEventCount">The maximum number of clash objects.</param>
            <returns>An array of clash objects.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.MeshClash.Search(Rhino.Geometry.Mesh,System.Collections.Generic.IEnumerable{Rhino.Geometry.Mesh},System.Double,System.Int32)">
            <summary>
            Searches the locations where the distance from <i>the first mesh</i> to <i>a mesh in the second set</i> of meshes
            is less than the provided value.
            </summary>
            <param name="meshA">The first mesh.</param>
            <param name="setB">The second set of meshes.</param>
            <param name="distance">The largest distance at which there is a clash.
            All values smaller than this cause a clash as well.</param>
            <param name="maxEventCount">The maximum number of clash objects.</param>
            <returns>An array of clash objects.</returns>
        </member>
        <member name="M:Rhino.Geometry.Intersect.MeshClash.Search(Rhino.Geometry.Mesh,Rhino.Geometry.Mesh,System.Double,System.Int32)">
            <summary>
            Searches the locations where the distance from <i>the first mesh</i> to <i>the second mesh</i>
            is less than the provided value.
            </summary>
            <param name="meshA">The first mesh.</param>
            <param name="meshB">The second mesh.</param>
            <param name="distance">The largest distance at which there is a clash.
            All values smaller than this cause a clash as well.</param>
            <param name="maxEventCount">The maximum number of clash objects.</param>
            <returns>An array of clash objects.</returns>
        </member>
        <member name="P:Rhino.Geometry.Intersect.MeshClash.MeshA">
            <summary>
            Gets the first mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.MeshClash.MeshB">
            <summary>
            Gets the second mesh.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.MeshClash.ClashPoint">
            <summary>
            If valid, then the sphere centered at ClashPoint of ClashRadius
            distance interesects the clashing meshes.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Intersect.MeshClash.ClashRadius">
            <summary>
            Gets the clash, or intersection, radius.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.PointCloudItem">
            <summary>
            Represents a single item in a pointcloud. A PointCloud item 
            always has a location, but it has an optional normal vector and color.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Location">
            <summary>
            Gets or sets the location of this point cloud item.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.X">
            <summary>
            Gets or sets the X component of this point cloud item location.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Y">
            <summary>
            Gets or sets the Y component of this point cloud item location.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Z">
            <summary>
            Gets or sets the Z component of this point cloud item location.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Normal">
            <summary>
            Gets or sets the normal vector for this point cloud item.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Color">
            <summary>
            Gets or sets the color of this point cloud item.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Hidden">
            <summary>
            Gets or sets the hidden flag of this point cloud item.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloudItem.Index">
            <summary>
            Gets the index of this point cloud item.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.PointCloud">
            <summary>
            Represents a collection of coordinates with optional normal vectors and colors.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.PointCloud"/> class
            that is empty.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.#ctor(Rhino.Geometry.PointCloud)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.PointCloud"/> class,
            copying (Merge) the content of another pointcloud.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.PointCloud"/> class,
            copying the content from a set of points.
            </summary>
            <param name="points">A list or an array of Point3d, or any object that implements <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Binds with the Rhino default serializer to support object persistence.
            </summary>
            <param name="info">Some storage.</param>
            <param name="context">The source and destination of the stream.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.ClearColors">
            <summary>
            Destroys the color information in this point cloud.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.ClearNormals">
            <summary>
            Destroys the normal vector information in this point cloud.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.ClearHiddenFlags">
            <summary>
            Destroys the hidden flag information in this point cloud.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.AppendNew">
            <summary>
            Appends a new PointCloudItem to the end of this point cloud.
            </summary>
            <returns>The newly appended item.</returns>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.InsertNew(System.Int32)">
            <summary>
            Inserts a new <see cref="T:Rhino.Geometry.PointCloudItem"/> at a specific position of the point cloud.
            </summary>
            <param name="index">Index of new item.</param>
            <returns>The newly inserted item.</returns>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Merge(Rhino.Geometry.PointCloud)">
            <summary>
            Copies the point values of another pointcloud into this one.
            </summary>
            <param name="other">PointCloud to merge with this one.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Add(Rhino.Geometry.Point3d)">
            <summary>
            Append a new point to the end of the list.
            </summary>
            <param name="point">Point to append.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Add(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Append a new point to the end of the list.
            </summary>
            <param name="point">Point to append.</param>
            <param name="normal">Normal vector of new point.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Add(Rhino.Geometry.Point3d,System.Drawing.Color)">
            <summary>
            Append a new point to the end of the list.
            </summary>
            <param name="point">Point to append.</param>
            <param name="color">Color of new point.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Add(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color)">
            <summary>
            Append a new point to the end of the list.
            </summary>
            <param name="point">Point to append.</param>
            <param name="normal">Normal vector of new point.</param>
            <param name="color">Color of new point.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.AddRange(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Append a collection of points to this point cloud.
            </summary>
            <param name="points">Points to append.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Insert(System.Int32,Rhino.Geometry.Point3d)">
            <summary>
            Inserts a new point into the point list.
            </summary>
            <param name="index">Insertion index.</param>
            <param name="point">Point to append.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Insert(System.Int32,Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Inserts a new point into the point list.
            </summary>
            <param name="index">Insertion index.</param>
            <param name="point">Point to append.</param>
            <param name="normal">Normal vector of new point.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Insert(System.Int32,Rhino.Geometry.Point3d,System.Drawing.Color)">
            <summary>
            Inserts a new point into the point list.
            </summary>
            <param name="index">Insertion index.</param>
            <param name="point">Point to append.</param>
            <param name="color">Color of new point.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.Insert(System.Int32,Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color)">
            <summary>
            Inserts a new point into the point list.
            </summary>
            <param name="index">Insertion index.</param>
            <param name="point">Point to append.</param>
            <param name="normal">Normal vector of new point.</param>
            <param name="color">Color of new point.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.InsertRange(System.Int32,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Append a collection of points to this point cloud.
            </summary>
            <param name="index">Index at which to insert the new collection.</param>
            <param name="points">Points to append.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.RemoveAt(System.Int32)">
            <summary>
            Remove the point at the given index.
            </summary>
            <param name="index">Index of point to remove.</param>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.GetPoints">
            <summary>
            Copy all the point coordinates in this point cloud to an array.
            </summary>
            <returns>An array containing all the points in this point cloud.</returns>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.GetNormals">
            <summary>
            Copy all the normal vectors in this point cloud to an array.
            </summary>
            <returns>An array containing all the normals in this point cloud.</returns>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.GetColors">
            <summary>
            Copy all the point colors in this point cloud to an array.
            </summary>
            <returns>An array containing all the colors in this point cloud.</returns>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Returns index of the closest point in the point cloud to a given test point.
            </summary>
            <param name="testPoint">.</param>
            <returns>Index of point in the point cloud on success. -1 on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.PointCloud.GetEnumerator">
            <summary>
            Gets an enumerator that allows to modify each pointcloud point.
            </summary>
            <returns>A instance of <see cref="T:System.Collections.Generic.IEnumerator`1"/>.</returns>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.Count">
            <summary>
            Gets the number of points in this pointcloud.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.Item(System.Int32)">
            <summary>
            Gets the item at the given index.
            </summary>
            <param name="index">Index of item to retrieve.</param>
            <returns>The item at the given index.</returns>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.HiddenPointCount">
            <summary>
            Gets the number of points that have their Hidden flag set.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.ContainsColors">
            <summary>
            Gets a value indicating whether or not the points in this 
            pointcloud have colors assigned to them.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.ContainsNormals">
            <summary>
            Gets a value indicating whether or not the points in this 
            pointcloud have normals assigned to them.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PointCloud.ContainsHiddenFlags">
            <summary>
            Gets a value indicating whether or not the points in this 
            pointcloud have hidden flags assigned to them.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Point3dGrid">
            <summary>
            Represents a rectangular grid of 3D points.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point3dGrid.#ctor">
            <summary>
            Initializes a rectangular grid of points, with no points in it.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point3dGrid.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a rectangular grid of points with a given number of columns and rows.
            </summary>
            <param name="rows">An amount of rows.</param>
            <param name="columns">An amount of columns.</param>
        </member>
        <member name="M:Rhino.Geometry.Point3dGrid.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="T:Rhino.Geometry.PolyCurve">
            <summary>
            Represents a curve that is the result of joining several (possibly different)
            types of curves.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.#ctor">
            <summary>
            Initializes a new, empty polycurve.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.Duplicate">
            <summary>
            Duplicates this polycurve.
            <para>When not overridden in a derived class, this calls <see cref="M:Rhino.Geometry.PolyCurve.DuplicatePolyCurve"/>.</para>
            </summary>
            <returns>An exact duplicate of this curve.</returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.DuplicatePolyCurve">
            <summary>
            Duplicates this polycurve.
            <para>This is the same as <see cref="M:Rhino.Geometry.PolyCurve.Duplicate"/>.</para>
            </summary>
            <returns>An exact duplicate of this curve.</returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.SegmentCurve(System.Int32)">
            <summary>
            Gets the segment curve at the given index.
            </summary>
            <param name="index">Index of segment to retrieve.</param>
            <returns>The segment at the given index or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.RemoveNesting">
            <summary>
            Explodes nested polycurve segments and reconstructs this curve from the shattered remains. 
            The result will have not have any PolyCurves as segments but it will have identical 
            locus and parameterization.
            </summary>
            <returns>
            true if any nested PolyCurve was found and absorbed, false if no PolyCurve segments could be found.
            </returns>
            <seealso cref="P:Rhino.Geometry.PolyCurve.IsNested"/>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.Explode">
            <summary>
            Explodes this PolyCurve into a list of Curve segments. This will <b>not explode</b> nested polycurves. 
            Call <see cref="M:Rhino.Geometry.PolyCurve.RemoveNesting"/> first if you need all individual segments.
            </summary>
            <returns>An array of polycurve segments.</returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.Append(Rhino.Geometry.Line)">
            <summary>
            Appends and matches the start of the line to the end of polycurve. 
            This function will fail if the polycurve is closed.
            </summary>
            <param name="line">Line segment to append.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.Append(Rhino.Geometry.Arc)">
            <summary>
            Appends and matches the start of the arc to the end of polycurve. 
            This function will fail if the polycurve is closed or if SegmentCount > 0 and the arc is closed.
            </summary>
            <param name="arc">Arc segment to append.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.Append(Rhino.Geometry.Curve)">
            <summary>
            Appends and matches the start of the curve to the end of polycurve. 
            This function will fail if the PolyCurve is closed or if SegmentCount > 0 and the new segment is closed.
            </summary>
            <param name="curve">Segment to append.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.SegmentCurveParameter(System.Double)">
            <summary>
            Converts a polycurve parameter to a segment curve parameter.
            </summary>
            <param name="polycurveParameter">Parameter on PolyCurve to convert.</param>
            <returns>
            Segment curve evaluation parameter or UnsetValue if the 
            segment curve parameter could not be computed.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.PolyCurveParameter(System.Int32,System.Double)">
            <summary>
            Converts a segment curve parameter to a polycurve parameter.
            </summary>
            <param name="segmentIndex">Index of segment.</param>
            <param name="segmentCurveParameter">Parameter on segment.</param>
            <returns>
            Polycurve evaluation parameter or UnsetValue if the polycurve curve parameter could not be computed.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.SegmentDomain(System.Int32)">
            <summary>
            Returns the polycurve subdomain assigned to a segment curve.
            </summary>
            <param name="segmentIndex">Index of segment.</param>
            <returns>
            The polycurve subdomain assigned to a segment curve. 
            Returns Interval.Unset if segment_index &lt; 0 or segment_index >= Count().
            </returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.SegmentIndex(System.Double)">
            <summary>
            Finds the segment used for evaluation at polycurve_parameter.
            </summary>
            <param name="polycurveParameter">Parameter on polycurve for segment lookup.</param>
            <returns>
            Index of the segment used for evaluation at polycurve_parameter. 
            If polycurve_parameter &lt; Domain.Min(), then 0 is returned. 
            If polycurve_parameter > Domain.Max(), then Count()-1 is returned.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.PolyCurve.SegmentIndexes(Rhino.Geometry.Interval,System.Int32@,System.Int32@)">
            <summary>Finds the segments that overlap the Polycurve sub domain.</summary>
            <param name="subdomain">Domain on this PolyCurve.</param>
            <param name="segmentIndex0">
            Index of first segment that overlaps the subdomain.
            </param>
            <param name="segmentIndex1">
            Index of last segment that overlaps the subdomain. Note that segmentIndex0 &lt;= i &lt; segmentIndex1.
            </param>
            <returns>Number of segments that overlap the subdomain.</returns>
        </member>
        <member name="P:Rhino.Geometry.PolyCurve.SegmentCount">
            <summary>
            Gets the number of segments that make up this Polycurve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.PolyCurve.IsNested">
            <summary>
            Gets a value indicating whether or not a PolyCurve contains nested PolyCurves.
            </summary>
            <seealso cref="M:Rhino.Geometry.PolyCurve.RemoveNesting"/>
        </member>
        <member name="P:Rhino.Geometry.PolyCurve.HasGap">
            <summary>
            This is a quick way to see if the curve has gaps between the sub curve segments. 
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Polyline">
            <summary>
            Represents an ordered set of points connected by linear segments.
            <para>Polylines are closed if start and end points coincide.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Polyline.#ctor">
            <summary>
            Initializes a new empty polyline.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Polyline.#ctor(System.Int32)">
            <summary>
            Initializes a new empty polyline with an initial capacity.
            </summary>
            <param name="initialCapacity">Number of vertices this polyline can contain without resizing.</param>
        </member>
        <member name="M:Rhino.Geometry.Polyline.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Initializes a new polyline from a collection of points.
            </summary>
            <param name="collection">Points to copy into the local vertex array.</param>
        </member>
        <member name="M:Rhino.Geometry.Polyline.IsClosedWithinTolerance(System.Double)">
            <summary>
            Determines whether the polyline is closed, provided a tolerance value.
            </summary>
            <param name="tolerance">If the distance between the start and end point of the polyline 
            is less than tolerance, the polyline is considered to be closed.</param>
            <returns>true if the polyline is closed to within tolerance, false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.SegmentAt(System.Int32)">
            <summary>
            Gets the line segment at the given index.
            </summary>
            <param name="index">Index of segment to retrieve.</param>
            <returns>Line segment at index or Line.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.PointAt(System.Double)">
            <summary>
            Gets the point on the polyline at the given parameter. 
            The integer part of the parameter indicates the index of the segment.
            </summary>
            <param name="t">Polyline parameter.</param>
            <returns>The point on the polyline at t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.TangentAt(System.Double)">
            <summary>
            Gets the unit tangent vector along the polyline at the given parameter. 
            The integer part of the parameter indicates the index of the segment.
            </summary>
            <param name="t">Polyline parameter.</param>
            <returns>The tangent along the polyline at t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.Trim(Rhino.Geometry.Interval)">
            <summary>
            Constructs a polyline out of a parameter subdomain in this curve.
            </summary>
            <param name="domain">The subdomain of the polyline. 
            The integer part of the domain parameters indicate the index of the segment.</param>
            <returns>The polyline as defined by the subdomain, or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Gets the point on the polyline which is closest to a test-point.
            </summary>
            <param name="testPoint">Point to approximate.</param>
            <returns>The point on the polyline closest to testPoint.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.ClosestParameter(Rhino.Geometry.Point3d)">
            <summary>
            Gets the parameter along the polyline which is closest to a test-point.
            </summary>
            <param name="testPoint">Point to approximate.</param>
            <returns>The parameter along the polyline closest to testPoint.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.GetSegments">
            <summary>
            Constructs an array of line segments that make up the entire polyline.
            </summary>
            <returns>An array of line segments or null if the polyline contains fewer than 2 points.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.ToNurbsCurve">
            <summary>
            Constructs a nurbs curve representation of this polyline.
            </summary>
            <returns>A Nurbs curve shaped like this polyline or null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.DeleteShortSegments(System.Double)">
            <summary>
            Removes all points that are closer than tolerance to the previous point. 
            <para>Start and end points are left intact.</para>
            </summary>
            <param name="tolerance">Vertices closer together than tolerance will be removed.</param>
            <returns>Number of points (and segments) removed.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.CollapseShortSegments(System.Double)">
            <summary>
            Collapses all segments until none are shorter than tolerance. 
            This function is significantly slower than DeleteShortSegments, 
            since it recursively operates on the shortest segment. 
            When a segment is collapsed the end-points are placed in the center of the segment.
            </summary>
            <param name="tolerance">Tolerance to use during collapsing.</param>
            <returns>The number of segments that were collapsed.</returns>
            <seealso cref="M:Rhino.Geometry.Polyline.DeleteShortSegments(System.Double)"/>
        </member>
        <member name="M:Rhino.Geometry.Polyline.ReduceSegments(System.Double)">
            <summary>
            Constructs a reduction of this polyline by recursively removing the least significant segments. 
            </summary>
            <param name="tolerance">Tolerance for reduction. Whenever a vertex of the polyline is more 
            significant than tolerance, it will be included in the reduction.</param>
            <returns>The number of vertices that disappeared due to reduction.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.Smooth(System.Double)">
            <summary>
            Smoothens the polyline segments by averaging adjacent vertices. 
            Smoothing requires a polyline with exclusively valid vertices.
            </summary>
            <param name="amount">Amount to smooth. Zero equals no smoothing, one equals complete smoothing.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.BreakAtAngles(System.Double)">
            <summary>
            Breaks this polyline into sections at sharp kinks. 
            Closed polylines will also be broken at the first and last vertex.
            </summary>
            <param name="angle">Angle (in radians) between adjacent segments for a break to occur.</param>
            <returns>An array of polyline segments, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.CenterPoint">
            <summary>
            Compute the center point of the polyline as the weighted average of all segments.
            </summary>
            <returns>The weighted average of all segments.</returns>
        </member>
        <member name="M:Rhino.Geometry.Polyline.TriangulateClosedPolyline">
            <summary>
            Attempts to create a list of triangles which represent a
            triangulation of a closed polyline
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.Polyline.IsValid">
            <summary>
            Gets a value that indicates whether this polyline is valid. 
            <para>Valid polylines have at least one segment, no Invalid points and no zero length segments.</para>
            <para>Closed polylines with only two segments are also not considered valid.</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Polyline.SegmentCount">
            <summary>
            Gets the number of segments for this polyline.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Polyline.IsClosed">
            <summary>
            Gets a value that indicates whether this polyline is closed. 
            <para>The polyline is considered to be closed if its start is 
            identical to its endpoint.</para>
            </summary>
            <seealso cref="M:Rhino.Geometry.Polyline.IsClosedWithinTolerance(System.Double)"/>
        </member>
        <member name="P:Rhino.Geometry.Polyline.Length">
            <summary>
            Gets the total length of the polyline.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.PolylineCurve">
            <summary>
            Represents the geometry of a set of linked line segments.
            <para>This is fundamentally a class that derives from <see cref="T:Rhino.Geometry.Curve"/>
            and internally contains a <see cref="T:Rhino.Geometry.Polyline"/>.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PolylineCurve.#ctor">
            <summary>
            Initializes a new empty polyline curve.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.PolylineCurve.#ctor(Rhino.Geometry.PolylineCurve)">
            <summary>
            Initializes a new polyline curve by copying its content from another polyline curve.
            </summary>
            <param name="other">Another polyline curve.</param>
        </member>
        <member name="M:Rhino.Geometry.PolylineCurve.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Initializes a new polyline curve by copying its content from another set of points.
            </summary>
            <param name="points">A list, an array or any enumerable set of points to copy from.
            This includes a <see cref="T:Rhino.Geometry.Polyline"/> object.</param>
        </member>
        <member name="M:Rhino.Geometry.PolylineCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.PolylineCurve.Point(System.Int32)">
            <summary>
            Gets a point at a specified index in the polyline curve.
            </summary>
            <param name="index">An index.</param>
            <returns>A point.</returns>
        </member>
        <member name="M:Rhino.Geometry.PolylineCurve.SetPoint(System.Int32,Rhino.Geometry.Point3d)">
            <summary>
            Sets a point at a specified index in the polyline curve.
            </summary>
            <param name="index">An index.</param>
            <param name="point">A point location to set.</param>
        </member>
        <member name="P:Rhino.Geometry.PolylineCurve.PointCount">
            <summary>
            Gets the number of points in this polyline.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Rectangle3d">
            <summary>
            Represents the values of a plane and two intervals
            that form an oriented rectangle in three dimensions.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.CreateFromPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Attempts to create a rectangle from a polyline. In order for the polyline to qualify 
            as a rectangle, it must have 4 or 5 corner points (i.e. it need not be closed).
            </summary>
            <param name="polyline">Polyline to parse.</param>
            <returns>A rectangle that is shaped similarly to the polyline or Rectangle3d.Unset 
            if the polyline does not represent a rectangle.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.CreateFromPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double@,System.Double@)">
            <summary>
            Attempts to create a Rectangle from a Polyline. In order for a polyline to qualify 
            as a rectangle, it must have 4 or 5 corner points (i.e. it need not be closed).
            <para>This overload also returns deviations.</para>
            </summary>
            <param name="polyline">Polyline to parse.</param>
            <param name="deviation">On success, the deviation will contain the largest deviation between the polyline and the rectangle.</param>
            <param name="angleDeviation">On success, the angleDeviation will contain the largest deviation (in radians) between the polyline edges and the rectangle edges.</param>
            <returns>A rectangle that is shaped similarly to the polyline or Rectangle3d.Unset 
            if the polyline does not represent a rectangle.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.#ctor(Rhino.Geometry.Plane,System.Double,System.Double)">
            <summary>
            Initializes a new rectangle from width and height.
            </summary>
            <param name="plane">Base plane for Rectangle.</param>
            <param name="width">Width (as measured along the base plane x-axis) of rectangle.</param>
            <param name="height">Height (as measured along the base plane y-axis) of rectangle.</param>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Initializes a new rectangle from dimensions.
            </summary>
            <param name="plane">Base plane for Rectangle.</param>
            <param name="width">Dimension of rectangle along the base plane x-axis.</param>
            <param name="height">Dimension of rectangle along the base plane y-axis.</param>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new rectangle from a base plane and two corner points.
            </summary>
            <param name="plane">Base plane for Rectangle.</param>
            <param name="cornerA">First corner of Rectangle (will be projected onto plane).</param>
            <param name="cornerB">Second corner of Rectangle (will be projected onto plane).</param>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.MakeIncreasing">
            <summary>
            Ensures the X and Y dimensions are increasing or singleton intervals.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.Corner(System.Int32)">
            <summary>
            Gets the corner at the given index.
            </summary>
            <param name="index">
            Index of corner, valid values are:
            <para>0 = lower left (min-x, min-y)</para>
            <para>1 = lower right (max-x, min-y)</para>
            <para>2 = upper right (max-x, max-y)</para>
            <para>3 = upper left (min-x, max-y)</para>
            </param>
            <returns>The point at the given corner index.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.RecenterPlane(System.Int32)">
            <summary>
            Recenters the base plane on one of the corners.
            </summary>
            <param name="index">
            Index of corner, valid values are:
            <para>0 = lower left (min-x, min-y)</para>
            <para>1 = lower right (max-x, min-y)</para>
            <para>2 = upper right (max-x, max-y)</para>
            <para>3 = upper left (min-x, max-y)</para>
            </param>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.RecenterPlane(Rhino.Geometry.Point3d)">
            <summary>
            Recenters the base plane on a new origin.
            </summary>
            <param name="origin">New origin for plane.</param>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.PointAt(System.Double,System.Double)">
            <summary>
            Gets a point in Rectangle space.
            </summary>
            <param name="x">Normalized parameter along Rectangle width.</param>
            <param name="y">Normalized parameter along Rectangle height.</param>
            <returns>The point at the given x,y parameter.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.PointAt(System.Double)">
            <summary>
            Gets a point along the rectangle boundary.
            </summary>
            <param name="t">Parameter along rectangle boundary. Valid values range from 0.0 to 4.0, 
            where each integer domain represents a single boundary edge.</param>
            <returns>The point at the given boundary parameter.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Gets the point on the rectangle that is closest to a test-point.
            </summary>
            <param name="point">Point to project.</param>
            <returns>The point on or in the rectangle closest to the test point or Point3d.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.ClosestPoint(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Gets the point on the rectangle that is closest to a test-point.
            </summary>
            <param name="point">Point to project.</param>
            <param name="includeInterior">If false, the point is projected onto the boundary edge only, 
            otherwise the interior of the rectangle is also taken into consideration.</param>
            <returns>The point on the rectangle closest to the test point or Point3d.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.Contains(Rhino.Geometry.Point3d)">
            <summary>
            Determines if a point is included in this rectangle.
            </summary>
            <param name="pt">Point to test. The point will be projected onto the Rectangle plane before inclusion is determined.</param>
            <returns>Point Rectangle relationship.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.Contains(System.Double,System.Double)">
            <summary>
            Determines if two plane parameters are included in this rectangle.
            </summary>
            <param name="x">Parameter along base plane X direction.</param>
            <param name="y">Parameter along base plane Y direction.</param>
            <returns>Parameter Rectangle relationship.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms this rectangle. Note that rectangles cannot be skewed or tapered.
            </summary>
            <param name="xform">Transformation to apply.</param>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.ToPolyline">
            <summary>
            Constructs a polyline from this rectangle.
            </summary>
            <returns>A polyline with the same shape as this rectangle.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.ToNurbsCurve">
            <summary>
            Constructs a nurbs curve representation of this rectangle.
            </summary>
            <returns>A nurbs curve with the same shape as this rectangle.</returns>
        </member>
        <member name="M:Rhino.Geometry.Rectangle3d.EpsilonEquals(Rhino.Geometry.Rectangle3d,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Unset">
            <summary>
            Gets a rectangle with Unset components.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.IsValid">
            <summary>
            Gets a value indicating whether or not this is a valid rectangle. 
            A rectangle is considered to be valid when the base plane and both dimensions are valid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Plane">
            <summary>
            Gets or sets the base plane of the rectangle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.X">
            <summary>
            Gets or sets the dimensions of the rectangle along the base plane X-Axis (i.e. the width).
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Y">
            <summary>
            Gets or sets the dimensions of the rectangle along the base plane Y-Axis (i.e. the height).
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Width">
            <summary>
            Gets the signed width of the rectangle. If the X dimension is decreasing, the width will be negative.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Height">
            <summary>
            Gets the signed height of the rectangle. If the Y dimension is decreasing, the height will be negative.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Area">
            <summary>
            Gets the unsigned Area of the rectangle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Circumference">
            <summary>
            Gets the circumference of the rectangle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.BoundingBox">
            <summary>
            Gets the world aligned boundingbox for this rectangle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Rectangle3d.Center">
            <summary>
            Gets the point in the center of the rectangle.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.RevSurface">
            <summary>
            Represents a surface of revolution.
            <para>Revolutions can be incomplete (they can form arcs).</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.Create(Rhino.Geometry.Curve,Rhino.Geometry.Line,System.Double,System.Double)">
            <summary>
            Constructs a new surface of revolution from a generatrix curve and an axis.
            <para>This overload accepts a slice start and end angles.</para>
            </summary>
            <param name="revoluteCurve">A generatrix.</param>
            <param name="axisOfRevolution">An axis.</param>
            <param name="startAngleRadians">An angle in radias for the start.</param>
            <param name="endAngleRadians">An angle in radias for the end.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.Create(Rhino.Geometry.Curve,Rhino.Geometry.Line)">
            <summary>
            Constructs a new surface of revolution from a generatrix curve and an axis.
            </summary>
            <param name="revoluteCurve">A generatrix.</param>
            <param name="axisOfRevolution">An axis.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
            <example>
            <code source='examples\vbnet\ex_addtruncatedcone.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addtruncatedcone.cs' lang='cs'/>
            <code source='examples\py\ex_addtruncatedcone.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.Create(Rhino.Geometry.Line,Rhino.Geometry.Line,System.Double,System.Double)">
            <summary>
            Constructs a new surface of revolution from a generatrix line and an axis.
            <para>This overload accepts a slice start and end angles.</para>
            <para>Results can be (truncated) cones, cylinders and circular hyperboloids, or can fail.</para>
            </summary>
            <param name="revoluteLine">A generatrix.</param>
            <param name="axisOfRevolution">An axis.</param>
            <param name="startAngleRadians">An angle in radias for the start.</param>
            <param name="endAngleRadians">An angle in radias for the end.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.Create(Rhino.Geometry.Line,Rhino.Geometry.Line)">
            <summary>
            Constructs a new surface of revolution from a generatrix line and an axis.
            <para>If the operation succeeds, results can be (truncated) cones, cylinders and circular hyperboloids.</para>
            </summary>
            <param name="revoluteLine">A generatrix.</param>
            <param name="axisOfRevolution">An axis.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.Create(Rhino.Geometry.Polyline,Rhino.Geometry.Line,System.Double,System.Double)">
            <summary>
            Constructs a new surface of revolution from a generatrix polyline and an axis.
            <para>This overload accepts a slice start and end angles.</para>
            </summary>
            <param name="revolutePolyline">A generatrix.</param>
            <param name="axisOfRevolution">An axis.</param>
            <param name="startAngleRadians">An angle in radias for the start.</param>
            <param name="endAngleRadians">An angle in radias for the end.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.Create(Rhino.Geometry.Polyline,Rhino.Geometry.Line)">
            <summary>
            Constructs a new surface of revolution from a generatrix polyline and an axis.
            </summary>
            <param name="revolutePolyline">A generatrix.</param>
            <param name="axisOfRevolution">An axis.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.CreateFromCone(Rhino.Geometry.Cone)">
            <summary>
            Constructs a new surface of revolution from the values of a cone.
            </summary>
            <param name="cone">A cone.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.CreateFromCylinder(Rhino.Geometry.Cylinder)">
            <summary>
            Constructs a new surface of revolution from the values of a cylinder.
            </summary>
            <param name="cylinder">A cylinder.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.CreateFromSphere(Rhino.Geometry.Sphere)">
            <summary>
            Constructs a new surface of revolution from the values of a sphere.
            </summary>
            <param name="sphere">A sphere.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.CreateFromTorus(Rhino.Geometry.Torus)">
            <summary>
            Constructs a new surface of revolution from the values of a torus.
            </summary>
            <param name="torus">A torus.</param>
            <returns>A new surface of revolution, or null if any of the inputs is invalid or on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.RevSurface.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="T:Rhino.Geometry.RTreeEventArgs">
            <summary>
            Represents event data that is passed when when an item that meets certain 
            criteria is found and the passed RTree event is raised.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.RTreeEventArgs.Id">
            <summary>
            Gets the identifier of the found item.
            </summary>
            <exception cref="T:System.OverflowException">If, on 64-bit platforms, the value of this instance is too large or too small to be represented as a 32-bit signed integer.</exception>
        </member>
        <member name="P:Rhino.Geometry.RTreeEventArgs.IdPtr">
            <summary>
            Gets the identifier pointer of the found item.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.RTreeEventArgs.Cancel">
            <summary>
            Gets or sets a value that determines if the search should be conducted farther.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.RTreeEventArgs.IdB">
            <summary>
            If search is using two r-trees, IdB is element b in the search.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.RTreeEventArgs.IdBPtr">
            <summary>
            If search is using two r-trees, IdB is the element b pointer in the search.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.RTreeEventArgs.Tag">
            <summary>
            Gets or sets an arbitrary object that can be attached to this event args.
            This object will "stick" through a single search and can represent user-defined state.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.RTreeEventArgs.SearchSphere">
            <summary>
            Sphere bounds used during a search. You can modify the sphere in a search callback to
            help reduce the bounds to search.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.RTreeEventArgs.SearchBoundingBox">
            <summary>
            Bounding box bounds used during a search. You may modify the box in a search callback
            to help reduce the bounds to search.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.RTree">
            <summary>
            Represents a spatial search structure based on implementations of the
            R-tree algorithm by Toni Gutman.
            </summary>
            <remarks>
            The opennurbs rtree code is a modifed version of the free and unrestricted
            R-tree implementation obtianed from http://www.superliminal.com/sources/sources.htm .
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.RTree.#ctor">
            <summary>Initializes a new, empty instance of the tree.</summary>
            <example>
            <code source='examples\vbnet\ex_closestpoint.vb' lang='vbnet'/>
            <code source='examples\cs\ex_closestpoint.cs' lang='cs'/>
            <code source='examples\py\ex_closestpoint.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.RTree.CreateMeshFaceTree(Rhino.Geometry.Mesh)">
            <summary>
            Constructs a new tree with an element for each face in the mesh.
            The element id is set to the index of the face.
            </summary>
            <param name="mesh">A mesh.</param>
            <returns>A new tree, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.RTree.CreatePointCloudTree(Rhino.Geometry.PointCloud)">
            <summary>
            Constructs a new tree with an element for each pointcloud point.
            </summary>
            <param name="cloud">A pointcloud.</param>
            <returns>A new tree, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.RTree.Insert(Rhino.Geometry.Point3d,System.Int32)">
            <summary>Inserts an element into the tree.</summary>
            <param name="point">A point.</param>
            <param name="elementId">A number.</param>
            <returns>true if element was successfully inserted.</returns>
            <example>
            <code source='examples\vbnet\ex_closestpoint.vb' lang='vbnet'/>
            <code source='examples\cs\ex_closestpoint.cs' lang='cs'/>
            <code source='examples\py\ex_closestpoint.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.RTree.Insert(Rhino.Geometry.Point3d,System.IntPtr)">
            <summary>Inserts an element into the tree.</summary>
            <param name="point">A point.</param>
            <param name="elementId">A pointer.</param>
            <returns>true if element was successfully inserted.</returns>
        </member>
        <member name="M:Rhino.Geometry.RTree.Insert(Rhino.Geometry.BoundingBox,System.Int32)">
            <summary>Inserts an element into the tree.</summary>
            <param name="box">A bounding box.</param>
            <param name="elementId">A number.</param>
            <returns>true if element was successfully inserted.</returns>
        </member>
        <member name="M:Rhino.Geometry.RTree.Insert(Rhino.Geometry.BoundingBox,System.IntPtr)">
            <summary>Inserts an element into the tree.</summary>
            <param name="box">A bounding box.</param>
            <param name="elementId">A pointer.</param>
            <returns>true if element was successfully inserted.</returns>
        </member>
        <member name="M:Rhino.Geometry.RTree.Insert(Rhino.Geometry.Point2d,System.Int32)">
            <summary>Inserts an element into the tree.</summary>
            <param name="point">A point.</param>
            <param name="elementId">A number.</param>
            <returns>true if element was successfully inserted.</returns>
        </member>
        <member name="M:Rhino.Geometry.RTree.Insert(Rhino.Geometry.Point2d,System.IntPtr)">
            <summary>Inserts an element into the tree.</summary>
            <param name="point">A point.</param>
            <param name="elementId">A pointer.</param>
            <returns>true if element was successfully inserted.</returns>
        </member>
        <member name="M:Rhino.Geometry.RTree.Remove(Rhino.Geometry.Point3d,System.Int32)">
            <summary>Removes an element from the tree.</summary>
            <param name="point">A point.</param>
            <param name="elementId">A number.</param>
            <returns>true if element was successfully removed.</returns>
        </member>
        <member name="M:Rhino.Geometry.RTree.Remove(Rhino.Geometry.Point3d,System.IntPtr)">
            <summary>Removes an element from the tree.</summary>
            <param name="point">A point.</param>
            <param name="elementId">A pointer.</param>
            <returns>true if element was successfully removed.</returns>
        </member>
        <member name="M:Rhino.Geometry.RTree.Remove(Rhino.Geometry.BoundingBox,System.Int32)">
            <summary>Removes an element from the tree.</summary>
            <param name="box">A bounding box.</param>
            <param name="elementId">A number.</param>
            <returns>true if element was successfully removed.</returns>
        </member>
        <member name="M:Rhino.Geometry.RTree.Remove(Rhino.Geometry.BoundingBox,System.IntPtr)">
            <summary>Removes an element from the tree.</summary>
            <param name="box">A bounding box.</param>
            <param name="elementId">A pointer.</param>
            <returns>true if element was successfully removed.</returns>
        </member>
        <member name="M:Rhino.Geometry.RTree.Remove(Rhino.Geometry.Point2d,System.Int32)">
            <summary>Removes an element from the tree.</summary>
            <param name="point">A point.</param>
            <param name="elementId">A number.</param>
            <returns>true if element was successfully removed.</returns>
        </member>
        <member name="M:Rhino.Geometry.RTree.Clear">
            <summary>
            Removes all elements.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.RTree.Search(Rhino.Geometry.BoundingBox,System.EventHandler{Rhino.Geometry.RTreeEventArgs})">
            <summary>
            Searches for items in a bounding box.
            <para>The bounding box can be singular and contain exactly one single point.</para>
            </summary>
            <param name="box">A bounding box.</param>
            <param name="callback">An event handler to be raised when items are found.</param>
            <returns>
            true if entire tree was searched. It is possible no results were found.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.RTree.Search(Rhino.Geometry.BoundingBox,System.EventHandler{Rhino.Geometry.RTreeEventArgs},System.Object)">
            <summary>
            Searches for items in a bounding box.
            <para>The bounding box can be singular and contain exactly one single point.</para>
            </summary>
            <param name="box">A bounding box.</param>
            <param name="callback">An event handler to be raised when items are found.</param>
            <param name="tag">State to be passed inside the <see cref="T:Rhino.Geometry.RTreeEventArgs"/> Tag property.</param>
            <returns>
            true if entire tree was searched. It is possible no results were found.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.RTree.Search(Rhino.Geometry.Sphere,System.EventHandler{Rhino.Geometry.RTreeEventArgs})">
            <summary>
            Searches for items in a sphere.
            </summary>
            <param name="sphere">bounds used for searching.</param>
            <param name="callback">An event handler to be raised when items are found.</param>
            <returns>
            true if entire tree was searched. It is possible no results were found.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.RTree.Search(Rhino.Geometry.Sphere,System.EventHandler{Rhino.Geometry.RTreeEventArgs},System.Object)">
            <summary>
            Searches for items in a sphere.
            </summary>
            <param name="sphere">bounds used for searching.</param>
            <param name="callback">An event handler to be raised when items are found.</param>
            <param name="tag">State to be passed inside the <see cref="T:Rhino.Geometry.RTreeEventArgs"/> Tag property.</param>
            <returns>
            true if entire tree was searched. It is possible no results were found.
            </returns>
            <example>
            <code source="examples\vbnet\ex_closestpoint.vb" lang="vbnet"/>
            <code source="examples\cs\ex_closestpoint.cs" lang="cs"/>
            <code source="examples\py\ex_closestpoint.py" lang="py"/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.RTree.SearchOverlaps(Rhino.Geometry.RTree,Rhino.Geometry.RTree,System.Double,System.EventHandler{Rhino.Geometry.RTreeEventArgs})">
            <summary>
            Searches two R-trees for all pairs elements whose bounding boxes overlap.
            </summary>
            <param name="treeA">A first tree.</param>
            <param name="treeB">A second tree.</param>
            <param name="tolerance">
            If the distance between a pair of bounding boxes is less than tolerance,
            then callback is called.
            </param>
            <param name="callback">A callback event handler.</param>
            <returns>
            true if entire tree was searched.  It is possible no results were found.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.RTree.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.RTree.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.RTree.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Geometry.RTree.Count">
            <summary>
            Gets the number of items in this tree.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.InteropWrappers.StringWrapper">
            <summary>
            Represents a wrapper to an unmanaged OpenNurbs string.
            <para>Wraps a C++ ON_wString*.</para>
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringWrapper.#ctor">
            <summary>
            Initializes a new empty unmanaged string.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringWrapper.#ctor(System.String)">
            <summary>
            Initializes a new unmanaged string with an initial value.
            </summary>
            <param name="s">The initial value.</param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringWrapper.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringWrapper.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringWrapper.ToString">
            <summary>
            Returns the string contents of this wrapper.
            </summary>
            <returns>A managed string.</returns>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringWrapper.SetString(System.String)">
            <summary>
            Set contents of this string.
            </summary>
            <param name="s">The new string.</param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringWrapper.SetStringOnPointer(System.IntPtr,System.String)">
            <summary>
            Set contents of an ON_wString*
            </summary>
            <param name="pON_wString"></param>
            <param name="s"></param>
        </member>
        <member name="M:Rhino.Runtime.InteropWrappers.StringWrapper.GetStringFromPointer(System.IntPtr)">
            <summary>
            Get string from an ON_wString*
            </summary>
            <param name="pConstON_wString"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.StringWrapper.ConstPointer">
            <summary>
            Gets the const pointer (const ON_wString*).
            </summary>
            <returns>The const pointer.</returns>
        </member>
        <member name="P:Rhino.Runtime.InteropWrappers.StringWrapper.NonConstPointer">
            <summary>
            Gets the non-const pointer (ON_wString*).
            </summary>
            <returns>The non-const pointer.</returns>
        </member>
        <member name="T:Rhino.Geometry.SumSurface">
            <summary>
            Represents a sum surface, or an extrusion of a curve along a curved path.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SumSurface.Create(Rhino.Geometry.Curve,Rhino.Geometry.Curve)">
            <summary>
            Constructs a new sum surface by extruding a curve A along a path B.
            </summary>
            <param name="curveA">The curve used as extrusion profile.</param>
            <param name="curveB">The curve used as path.</param>
            <returns>A new sum surface on success; null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.SumSurface.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="T:Rhino.Geometry.IsoStatus">
            <summary>
            Defines enumerated values for isoparametric curve direction on a surface, such as X or Y,
            and curve sides, such as North or West boundary.
            <para>Note: odd values are all x-constant; even values > 0 are all y-constant.</para>
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.None">
            <summary>
            curve is not an isoparameteric curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.X">
            <summary>
            curve is a "x" = constant (vertical) isoparametric curve in the interior of the surface's domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.Y">
            <summary>
            curve is a "y" = constant (horizontal) isoparametric curve in the interior of the surface's domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.West">
            <summary>
            curve is a "x" = constant isoparametric curve along the west side of the surface's domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.South">
            <summary>
            curve is a "y" = constant isoparametric curve along the south side of the surface's domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.East">
            <summary>
            curve is a "x" = constant isoparametric curve along the east side of the surface's domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.IsoStatus.North">
            <summary>
            curve is a "y" = constant isoparametric curve along the north side of the surface's domain.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SurfaceCurvature">
            <summary>
            Maintains computed information for surface curvature evaluation.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SurfaceCurvature.Direction(System.Int32)">
            <summary>
            Gets the principal curvature direction vector.
            </summary>
            <param name="direction">Direction index, valid values are 0 and 1.</param>
            <returns>The specified direction vector.</returns>
            <example>
            <code source='examples\vbnet\ex_principalcurvature.vb' lang='vbnet'/>
            <code source='examples\cs\ex_principalcurvature.cs' lang='cs'/>
            <code source='examples\py\ex_principalcurvature.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.SurfaceCurvature.Kappa(System.Int32)">
            <summary>
            Gets the Kappa curvature value.
            </summary>
            <param name="direction">Kappa index, valid values are 0 and 1.</param>
            <returns>The specified kappa value.</returns>
            <example>
            <code source='examples\vbnet\ex_principalcurvature.vb' lang='vbnet'/>
            <code source='examples\cs\ex_principalcurvature.cs' lang='cs'/>
            <code source='examples\py\ex_principalcurvature.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.SurfaceCurvature.OsculatingCircle(System.Int32)">
            <summary>
            Computes the osculating circle along the given direction.
            </summary>
            <param name="direction">Direction index, valid values are 0 and 1.</param>
            <returns>The osculating circle in the given direction or Circle.Unset on failure.</returns>
        </member>
        <member name="P:Rhino.Geometry.SurfaceCurvature.UVPoint">
            <summary>
            Gets the UV location where the curvature was computed.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.SurfaceCurvature.Point">
            <summary>
            Gets the surface point at UV.
            </summary>
            <example>
            <code source='examples\vbnet\ex_principalcurvature.vb' lang='vbnet'/>
            <code source='examples\cs\ex_principalcurvature.cs' lang='cs'/>
            <code source='examples\py\ex_principalcurvature.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.SurfaceCurvature.Normal">
            <summary>
            Gets the surface normal at UV.
            </summary>
            <example>
            <code source='examples\vbnet\ex_principalcurvature.vb' lang='vbnet'/>
            <code source='examples\cs\ex_principalcurvature.cs' lang='cs'/>
            <code source='examples\py\ex_principalcurvature.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.SurfaceCurvature.Gaussian">
            <summary>
            Gets the Gaussian curvature value at UV.
            </summary>
            <example>
            <code source='examples\vbnet\ex_principalcurvature.vb' lang='vbnet'/>
            <code source='examples\cs\ex_principalcurvature.cs' lang='cs'/>
            <code source='examples\py\ex_principalcurvature.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.SurfaceCurvature.Mean">
            <summary>
            Gets the Mean curvature value at UV.
            </summary>
            <example>
            <code source='examples\vbnet\ex_principalcurvature.vb' lang='vbnet'/>
            <code source='examples\cs\ex_principalcurvature.cs' lang='cs'/>
            <code source='examples\py\ex_principalcurvature.py' lang='py'/>
            </example>
        </member>
        <member name="T:Rhino.FileIO.TextLog">
            <summary>
            Used for collecting text data
            </summary>
        </member>
        <member name="M:Rhino.FileIO.TextLog.#ctor">
            <summary>
            Creates a text log that stores all text in memory.  Use ToString on this
            version of the TextLog to get the text that we written
            </summary>
        </member>
        <member name="M:Rhino.FileIO.TextLog.#ctor(System.String)">
            <summary>
            Creates a text log that writes all text to a file. If no filename is
            provided, then text is written to StdOut
            </summary>
            <param name="filename">
            Name of file to create and write to. If null, then text output
            is sent to StdOut
            </param>
        </member>
        <member name="M:Rhino.FileIO.TextLog.ToString">
            <summary>
            If the TextLog was constructed using the empty constructor, then the text
            information is stored in a runtime string.  The contents of this string
            is retrieved using ToString for this case
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.FileIO.TextLog.PushIndent">
            <summary>
            Increase the indentation level
            </summary>
            <example>
            <code source='examples\vbnet\ex_printinstancedefinitiontree.vb' lang='vbnet'/>
            <code source='examples\cs\ex_printinstancedefinitiontree.cs' lang='cs'/>
            <code source='examples\py\ex_printinstancedefinitiontree.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.FileIO.TextLog.PopIndent">
            <summary>
            Decrease the indentation level
            </summary>
            <example>
            <code source='examples\vbnet\ex_printinstancedefinitiontree.vb' lang='vbnet'/>
            <code source='examples\cs\ex_printinstancedefinitiontree.cs' lang='cs'/>
            <code source='examples\py\ex_printinstancedefinitiontree.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.FileIO.TextLog.PrintWrappedText(System.String,System.Int32)">
            <summary>
            Send text wrapped at a set line length
            </summary>
            <param name="text"></param>
            <param name="lineLength"></param>
        </member>
        <member name="M:Rhino.FileIO.TextLog.Print(System.String)">
            <summary>
            Send text to the textlog
            </summary>
            <param name="text"></param>
            <example>
            <code source='examples\vbnet\ex_printinstancedefinitiontree.vb' lang='vbnet'/>
            <code source='examples\cs\ex_printinstancedefinitiontree.cs' lang='cs'/>
            <code source='examples\py\ex_printinstancedefinitiontree.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.FileIO.TextLog.Print(System.String,System.Object)">
            <summary>
            Send formatted text to the textlog
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
        </member>
        <member name="M:Rhino.FileIO.TextLog.Print(System.String,System.Object,System.Object)">
            <summary>
            Send formatted text to the textlog
            </summary>
            <param name="format"></param>
            <param name="arg0"></param>
            <param name="arg1"></param>
        </member>
        <member name="M:Rhino.FileIO.TextLog.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.FileIO.TextLog.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.TextLog.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.FileIO.TextLog.IndentSize">
            <summary>
            0: one tab per indent. &gt;0: number of spaces per indent
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.TextureType">
            <summary>
            The TextureType controls how the pixels in the bitmap
            are interpreted.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.None">
            <summary> 
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.Bitmap">
            <summary>
            Standard image texture
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.Bump">
            <summary>
            bump map
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureType.Transparency">
            <summary>
            value = alpha
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.TextureCombineMode">
            <summary>
            Determines how this texture is combined with others in a material's
            texture list.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureCombineMode.None">
            <summary>
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureCombineMode.Modulate">
            <summary>
            Modulate with material diffuse color
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureCombineMode.Decal">
            <summary>
            Decal
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureCombineMode.Blend">
            <summary>
            Blend texture with others in the material
              To "add" a texture, set BlendAmount = +1
              To "subtract" a texture, set BlendAmount = -1
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.TextureUvwWrapping">
            <summary>
            Defines Texture UVW wrapping modes
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureUvwWrapping.Repeat">
            <summary>
            Repeat the texture
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextureUvwWrapping.Clamp">
            <summary>
            Clamp the texture
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.Texture">
            <summary>
            Represents a texture that is mapped on objects.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Texture.#ctor">
            <summary>
            Initializes a new texture.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Texture.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.DocObjects.Texture.WrapUvwHelper(System.Int32)">
            <summary>
            Helper function for getting the ON_Texture::WRAP mode and converting
            it to a TextureUvwWrapping value.
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.Texture.GetAlphaBlendValues(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            If the TextureCombineMode is Blend, then the blending function
            for alpha is determined by
            <para>
            new alpha = constant
                        + a0*(current alpha)
                        + a1*(texture alpha)
                        + a2*min(current alpha,texture alpha)
                        + a3*max(current alpha,texture alpha)
            </para>
            </summary>
            <param name="constant"></param>
            <param name="a0"></param>
            <param name="a1"></param>
            <param name="a2"></param>
            <param name="a3"></param>
        </member>
        <member name="M:Rhino.DocObjects.Texture.SetAlphaBlendValues(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            If the TextureCombineMode is Blend, then the blending function
            for alpha is determined by
            <para>
            new alpha = constant
                        + a0*(current alpha)
                        + a1*(texture alpha)
                        + a2*min(current alpha,texture alpha)
                        + a3*max(current alpha,texture alpha)
            </para>
            </summary>
            <param name="constant"></param>
            <param name="a0"></param>
            <param name="a1"></param>
            <param name="a2"></param>
            <param name="a3"></param>
        </member>
        <member name="P:Rhino.DocObjects.Texture.FileName">
            <summary>
            Gets or sets a file name that is used by this texture.
            NOTE: this filename may well not be a path that makes sense
            on a user's computer because it was a path initially set on
            a different user's computer. If you want to get a workable path
            for this user, use the BitmapTable.Find function using this
            property.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Texture.Id">
            <summary>
            Gets the globally unique identifier of this texture.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Texture.Enabled">
            <summary>
            If the texture is enabled then it will be visible in the rendered
            display otherwise it will not.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Texture.TextureType">
            <summary>
            Controls how the pixels in the bitmap are interpreted
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Texture.MappingChannelId">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Texture.TextureCombineMode">
            <summary>
            Determines how this texture is combined with others in a material's
            texture list.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Texture.WrapU">
            <summary>
            Texture wrapping mode in the U direction
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Texture.WrapV">
            <summary>
            Texture wrapping mode in the V direction
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Texture.WrapW">
            <summary>
            Texture wrapping mode in the W direction
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Texture.ApplyUvwTransform">
            <summary>
            If true then the UVW transform is applied to the texture
            otherwise the UVW transform is ignored.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Texture.UvwTransform">
            <summary>
            Transform to be applied to each instance of this texture
            if ApplyUvw is true
            </summary>
        </member>
        <member name="T:Rhino.Render.TextureMappingType">
            <summary>
            Defines enumerated constants for mapping types such as planar, cylindrical or spherical.
            </summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.None">
            <summary>No mapping is selected.</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.SurfaceParameters">
            <summary>(u, v) = linear transform of surface params, w = 0.</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.PlaneMapping">
            <summary>(u, v, w) = 3d coordinates wrt frame.</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.CylinderMapping">
            <summary>(u, v, w) = longitude, height, radius.</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.SphereMapping">
            <summary>(u, v, w) = longitude,latitude,radius.</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.BoxMapping">
            <summary>Box mapping type.</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.MeshMappingPrimitive">
            <summary>Mapping primitive is a mesh.</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.SurfaceMappingPrimitive">
            <summary>Mapping primitive is a surface.</summary>
        </member>
        <member name="F:Rhino.Render.TextureMappingType.BrepMappingPrimitive">
            <summary>Mapping primitive is a brep.</summary>
        </member>
        <member name="T:Rhino.Render.TextureMapping">
            <summary>
            Represents a texture mapping.
            </summary>
        </member>
        <member name="M:Rhino.Render.TextureMapping.TryGetMappingBox(Rhino.Geometry.Plane@,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@)">
            <summary>
            	Get a box projection from the texture mapping.
            </summary>
            <param name="plane">
            The center of the box is at plane.origin and the sides of the box are
            parallel to the plane's coordinate planes.
            </param>
            <param name="dx">
            The "front" and "back" sides of the box are in spanned by the vectors
            plane.yaxis and plane.zaxis.  The back plane contains the point
            plane.PointAt(dx[0],0,0) and the front plane contains the point
            plane.PointAt(dx[1],0,0).
            </param>
            <param name="dy">
            The "left" and "right" sides of the box are in spanned by the vectors
            plane.zaxis and plane.xaxis.  The left plane contains the point
            plane.PointAt(0,dx[0],0) and the back plane contains the point
            plane.PointAt(0,dy[1],0).
            </param>
            <param name="dz">
            The "top" and "bottom" sides of the box are in spanned by the vectors
            plane.xaxis and plane.yaxis.  The bottom plane contains the point
            plane.PointAt(0,0,dz[0]) and the top plane contains the point
            plane.PointAt(0,0,dz[1]).
            </param>
            <returns>
            Returns true if a valid box is returned.
            </returns>
            <remarks>
            Generally, GetMappingBox will not return the same parameters passed to
            SetBoxMapping.  However, the location of the box will be the same.
            </remarks>
        </member>
        <member name="M:Rhino.Render.TextureMapping.TryGetMappingSphere(Rhino.Geometry.Sphere@)">
            <summary>
            Get a spherical projection parameters from this texture mapping.
            </summary>
            <param name="sphere">/// </param>
            <returns>
            Returns true if a valid sphere is returned.
            </returns>
            <remarks>
            Generally, GetMappingShere will not return the same parameters passed
            to SetSphereMapping.  However, the location of the sphere will be the
            same.  If this mapping is not cylindrical, the cylinder will
            approximate the actual mapping primitive.
            </remarks>
        </member>
        <member name="M:Rhino.Render.TextureMapping.TryGetMappingCylinder(Rhino.Geometry.Cylinder@)">
            <summary>
            Get a cylindrical projection parameters from this texture mapping.
            </summary>
            <param name="cylinder"></param>
            <returns>
            Returns true if a valid cylinder is returned.
            </returns>
            <remarks>
            Generally, GetMappingCylinder will not return the same parameters passed
            to SetCylinderMapping.  However, the location of the cylinder will be
            the same.  If this mapping is not cylindrical, the cylinder will
            approximate the actual mapping primitive.
            </remarks>
        </member>
        <member name="M:Rhino.Render.TextureMapping.TryGetMappingPlane(Rhino.Geometry.Plane@,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@)">
            <summary>
            Get plane mapping parameters from this texture mapping.
            </summary>
            <param name="plane"></param>
            <param name="dx">
            Portion of the plane's x axis that is mapped to [0,1]
            </param>
            <param name="dy">
            Portion of the plane's y axis that is mapped to [0,1]
            </param>
            <param name="dz">
            Portion of the plane's z axis that is mapped to [0,1]
            </param>
            <returns>
            Return true if valid plane mapping parameters were returned.
            </returns>
            <remarks>
            NOTE WELL:
             Generally, GetMappingPlane will not return the same parameters passed
             to SetPlaneMapping.  However, the location of the plane will be the
             same.
            </remarks>
        </member>
        <member name="M:Rhino.Render.TextureMapping.CreatePlaneMapping(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>Create a planar projection texture mapping</summary>
            <param name="plane">A plane to use for mapping.</param>
            <param name="dx">portion of the plane's x axis that is mapped to [0,1] (can be a decreasing interval)</param>
            <param name="dy">portion of the plane's y axis that is mapped to [0,1] (can be a decreasing interval)</param>
            <param name="dz">portion of the plane's z axis that is mapped to [0,1] (can be a decreasing interval)</param>
            <returns>TextureMapping instance if input is valid</returns>
        </member>
        <member name="M:Rhino.Render.TextureMapping.CreateCylinderMapping(Rhino.Geometry.Cylinder,System.Boolean)">
            <summary>Create a cylindrical projection texture mapping.</summary>
            <param name="cylinder">
            cylinder in world space used to define a cylindrical coordinate system.
            The angular parameter maps (0,2pi) to texture "u" (0,1), The height
            parameter maps (height[0],height[1]) to texture "v" (0,1), and the
            radial parameter maps (0,r) to texture "w" (0,1).
            </param>
            <param name="capped">
            If true, the cylinder is treated as a finite capped cylinder
            </param>
            <remarks>
            When the cylinder is capped and m_texture_space = divided, the
            cylinder is mapped to texture space as follows:
            The side is mapped to 0 &lt;= "u" &lt;= 2/3.
            The bottom is mapped to 2/3 &lt;= "u" &lt;= 5/6.
            The top is mapped to 5/6 &lt;= "u" &lt;= 5/6.
            This is the same convention box mapping uses.
            </remarks>
            <returns>TextureMapping instance if input is valid</returns>
        </member>
        <member name="M:Rhino.Render.TextureMapping.CreateSphereMapping(Rhino.Geometry.Sphere)">
            <summary>
            Create a spherical projection texture mapping.
            </summary>
            <param name="sphere">
            sphere in world space used to define a spherical coordinate system.
            The longitude parameter maps (0,2pi) to texture "u" (0,1).
            The latitude paramter maps (-pi/2,+pi/2) to texture "v" (0,1).
            The radial parameter maps (0,r) to texture "w" (0,1).
            </param>
            <returns>TextureMapping instance if input is valid</returns>
        </member>
        <member name="M:Rhino.Render.TextureMapping.CreateBoxMapping(Rhino.Geometry.Plane,Rhino.Geometry.Interval,Rhino.Geometry.Interval,Rhino.Geometry.Interval,System.Boolean)">
            <summary>Create a box projection texture mapping.</summary>
            <param name="plane">
            The sides of the box the box are parallel to the plane's coordinate
            planes.  The dx, dy, dz intervals determine the location of the sides.
            </param>
            <param name="dx">
            Determines the location of the front and back planes. The vector
            plane.xaxis is perpendicular to these planes and they pass through
            plane.PointAt(dx[0],0,0) and plane.PointAt(dx[1],0,0), respectivly.
            </param>
            <param name="dy">
            Determines the location of the left and right planes. The vector
            plane.yaxis is perpendicular to these planes and they pass through
            plane.PointAt(0,dy[0],0) and plane.PointAt(0,dy[1],0), respectivly.
            </param>
            <param name="dz">
            Determines the location of the top and bottom planes. The vector
            plane.zaxis is perpendicular to these planes and they pass through
            plane.PointAt(0,0,dz[0]) and plane.PointAt(0,0,dz[1]), respectivly.
            </param>
            <param name="capped">
            If true, the box is treated as a finite capped box.
            </param>
            <remarks>
            When m_texture_space = divided, the box is mapped to texture space as follows:
            If the box is not capped, then each side maps to 1/4 of the texture map.
            v=1+---------+---------+---------+---------+
              | x=dx[1] | y=dy[1] | x=dx[0] | y=dy[0] |
              | Front   | Right   | Back    | Left    |
              | --y-&gt;   | &lt;-x--   | &lt;-y--   | --x-&gt;   |
            v=0+---------+---------+---------+---------+
            0/4 &lt;=u&lt;= 1/4 &lt;=u&lt;= 2/4 &lt;=u&lt;= 3/4 &lt;=u&lt;= 4/4
            If the box is capped, then each side and cap gets 1/6 of the texture map.
            v=1+---------+---------+---------+---------+---------+---------+
              | x=dx[1] | y=dy[1] | x=dx[0] | y=dy[0] | z=dx[1] | z=dz[0] |
              | Front   | Right   | Back    | Left    | Top     |  Bottom |
              | --y-&gt;   | &lt;x--   | &lt;-y--   | --x-&gt;   | --x-&gt;   | --x-&gt;   |
            v=0+---------+---------+---------+---------+---------+---------+
            0/6 &lt;=u&lt;= 1/6 &lt;=u&lt;= 2/6 &lt;=u&lt;= 3/6 &lt;=u&lt;= 4/6 &lt;=u&lt;= 5/6 &lt;=u&lt;= 6/6 
            </remarks>
            <returns>TextureMapping instance if input is valid</returns>
        </member>
        <member name="P:Rhino.Render.TextureMapping.MappingType">
            <summary>
            Texture mapping type associated with this Mapping object.
            </summary>
        </member>
        <member name="P:Rhino.Render.TextureMapping.Id">
            <summary>
            The unique Id for this texture mapping object.
            </summary>
        </member>
        <member name="P:Rhino.Render.TextureMapping.UvwTransform">
            <summary>
            Transform applied to mapping coordinate (u,v,w) to convert it into a
            texture coordinate.
            </summary>
        </member>
        <member name="P:Rhino.Render.TextureMapping.PrimativeTransform">
            <summary>
            For primitive based mappings, these transformations are used to map
            the world coordinate (x,y,z) point P and  surface normal N before it is
            projected to the normalized mapping primitive. The surface normal
            transformation, m_Nxyz, is always calculated from m_Pxyz.  It is a
            runtime setting that is not saved in 3dm files. If m_type is
            srfp_mapping, then m_Pxyz and m_Nxyz are ignored.
            </summary>
        </member>
        <member name="P:Rhino.Render.TextureMapping.NormalTransform">
            <summary>
            For primitive based mappings, these transformations are used to map
            the world coordinate (x,y,z) point P and  surface normal N before it is
            projected to the normalized mapping primitive. The surface normal
            transformation, m_Nxyz, is always calculated from m_Pxyz.  It is a
            runtime setting that is not saved in 3dm files. If m_type is
            srfp_mapping, then m_Pxyz and m_Nxyz are ignored.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.Custom.UserData">
            <summary>
            Provides a base class for custom classes of information which may be attached to
            geometry or attribute classes.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.Write(Rhino.FileIO.BinaryArchiveWriter)">
            <summary>Writes the content of this data to a stream archive.</summary>
            <param name="archive">An archive.</param>
            <returns>true if the data was successfully written. The default implementation always returns false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.Read(Rhino.FileIO.BinaryArchiveReader)">
            <summary>Reads the content of this data from a stream archive.</summary>
            <param name="archive">An archive.</param>
            <returns>true if the data was successfully written. The default implementation always returns false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.OnTransform(Rhino.Geometry.Transform)">
            <summary>
            Is called when the object associated with this data is transformed. If you override this
            function, make sure to call the base class if you want the stored Transform to be updated.
            </summary>
            <param name="transform">The transform being applied.</param>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.OnDuplicate(Rhino.DocObjects.Custom.UserData)">
            <summary>
            Is called when the object is being duplicated.
            </summary>
            <param name="source">The source data.</param>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.Copy(Rhino.Runtime.CommonObject,Rhino.Runtime.CommonObject)">
            <summary>
            Expert user tool that copies user data that has a positive 
            CopyCount from the source object to a destination object.
            Generally speaking you don't need to use Copy().
            Simply rely on things like the copy constructors to do the right thing.
            </summary>
            <param name="source">A source object for the data.</param>
            <param name="destination">A destination object for the data.</param>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.MoveUserDataFrom(Rhino.Runtime.CommonObject)">
            <summary>
            Moves the user data from objectWithUserData to a temporary data storage
            identifierd by the return Guid.  When MoveUserDataFrom returns, the
            objectWithUserData will not have any user data.
            </summary>
            <param name="objectWithUserData">Object with user data attached.</param>
            <returns>
            Guid identifier for storage of UserData that is held in a temporary list
            by this class. This function should be used in conjunction with MoveUserDataTo
            to transfer the user data to a different object.
            Returns Guid.Empty if there was no user data to transfer.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserData.MoveUserDataTo(Rhino.Runtime.CommonObject,System.Guid,System.Boolean)">
            <summary>
            Moves the user data.
            <para>See <see cref="M:Rhino.DocObjects.Custom.UserData.MoveUserDataFrom(Rhino.Runtime.CommonObject)"/> for more information.</para>
            </summary>
            <param name="objectToGetUserData">Object data source.</param>
            <param name="id">Target.</param>
            <param name="append">If the data should be appended or replaced.</param>
        </member>
        <member name="P:Rhino.DocObjects.Custom.UserData.Description">
            <summary>Descriptive name of the user data.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Custom.UserData.ShouldWrite">
            <summary>
            If you want to save this user data in a 3dm file, override
            ShouldWrite and return true.  If you do support serialization,
            you must also override the Read and Write functions.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Custom.UserData.Transform">
            <summary>
            Updated if user data is attached to a piece of geometry that is
            transformed and the virtual OnTransform() is not overridden.  If you
            override OnTransform() and want Transform to be updated, then call the 
            base class OnTransform() in your override.
            The default constructor sets Transform to the identity.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.Custom.UnknownUserData">
            <summary>
            Represents user data with unknown origin.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UnknownUserData.#ctor(System.IntPtr)">
            <summary>
            Constructs a new unknown data entity.
            </summary>
            <param name="pointerNativeUserData">A pointer to the entity.</param>
        </member>
        <member name="T:Rhino.DocObjects.Custom.UserDataList">
            <summary>Represents a collection of user data.</summary>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDataList.Add(Rhino.DocObjects.Custom.UserData)">
            <summary>
            If the userdata is already in a different UserDataList, it
            will be removed from that list and added to this list.
            </summary>
            <param name="userdata">Data element.</param>
            <returns>Whether this operation succeeded.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDataList.Remove(Rhino.DocObjects.Custom.UserData)">
            <summary>
            Remove the userdata from this list
            </summary>
            <param name="userdata"></param>
            <returns>true if the user data was successfully removed</returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDataList.Find(System.Type)">
            <summary>
            Finds a specific data type in this regulated collection.
            </summary>
            <param name="userdataType">A data type.</param>
            <returns>The found data, or null of nothing was found.</returns>
        </member>
        <member name="P:Rhino.DocObjects.Custom.UserDataList.Count">
            <summary>Number of UserData objects in this list.</summary>
        </member>
        <member name="T:Rhino.DocObjects.Custom.UserDictionary">
            <summary>
            Defines the storage data class for a <see cref="T:Rhino.Collections.ArchivableDictionary">user dictionary</see>.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDictionary.OnDuplicate(Rhino.DocObjects.Custom.UserData)">
            <summary>
            Clones the user data.
            </summary>
            <param name="source">The source data.</param>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDictionary.Read(Rhino.FileIO.BinaryArchiveReader)">
            <summary>
            Is called to read this entity.
            </summary>
            <param name="archive">An archive.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.UserDictionary.Write(Rhino.FileIO.BinaryArchiveWriter)">
            <summary>
            Is called to write this entity.
            </summary>
            <param name="archive">An archive.</param>
            <returns>Always returns true.</returns>
        </member>
        <member name="P:Rhino.DocObjects.Custom.UserDictionary.Dictionary">
            <summary>
            Gets the dictionary that is associated with this class.
            <para>This dictionary is unique.</para>
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Custom.UserDictionary.Description">
            <summary>
            Gets the text "RhinoCommon UserDictionary".
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Custom.UserDictionary.ShouldWrite">
            <summary>
            Writes this entity if the count is larger than 0.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ViewportInfo">
            <summary>
            Represents a viewing frustum.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.#ctor">
            <summary>
            Initializes a new instance.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.#ctor(Rhino.DocObjects.ViewportInfo)">
            <summary>
             Initializes a new instance by copying values from another instance.
            </summary>
            <param name="other">The other viewport info.</param>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.#ctor(Rhino.Display.RhinoViewport)">
            <summary>
            Copies all of the ViewportInfo data from an existing RhinoViewport.
            </summary>
            <param name="rhinoViewport">A viewport to copy.</param>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Populates a System.Runtime.Serialization.SerializationInfo with the data needed to serialize the target object.
            </summary>
            <param name="info">The System.Runtime.Serialization.SerializationInfo to populate with data.</param>
            <param name="context">The destination (see System.Runtime.Serialization.StreamingContext) for this serialization.</param>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.ChangeToParallelProjection(System.Boolean)">
            <summary>
            Use this function to change projections of valid viewports
            from parallel to perspective.  It will make common additional
            adjustments to the frustum and camera location so the resulting
            views are similar.  The camera direction and target point are
            not be changed.
            If the current projection is parallel and symmetricFrustum,
            FrustumIsLeftRightSymmetric() and FrustumIsTopBottomSymmetric()
            are all equal, then no changes are made and true is returned.
            </summary>
            <param name="symmetricFrustum">true if you want the resulting frustum to be symmetric.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.ChangeToPerspectiveProjection(System.Double,System.Boolean,System.Double)">
            <summary>
            Use this function to change projections of valid viewports
            from parallel to perspective.  It will make common additional
            adjustments to the frustum and camera location so the resulting
            views are similar.  The camera direction and target point are
            not changed.
            If the current projection is perspective and symmetricFrustum,
            IsFrustumIsLeftRightSymmetric, and IsFrustumIsTopBottomSymmetric
            are all equal, then no changes are made and true is returned.
            </summary>
            <param name="targetDistance">
            If RhinoMath.UnsetValue this parameter is ignored.
            Otherwise it must be > 0 and indicates which plane in the current view frustum should be perserved.
            </param>
            <param name="symmetricFrustum">
            true if you want the resulting frustum to be symmetric.
            </param>
            <param name="lensLength">(pass 50.0 when in doubt)
            35 mm lens length to use when changing from parallel
            to perspective projections. If the current projection
            is perspective or lens_length is &lt;= 0.0,
            then this parameter is ignored.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.ChangeToTwoPointPerspectiveProjection(System.Double,Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Changes projections of valid viewports
            to a two point perspective.  It will make common additional
            adjustments to the frustum and camera location and direction
            so the resulting views are similar.
            If the current projection is perspective and
            IsFrustumIsLeftRightSymmetric is true and
            IsFrustumIsTopBottomSymmetric is false, then no changes are
            made and true is returned.
            </summary>
            <param name="targetDistance">
            If RhinoMath.UnsetValue this parameter is ignored.  Otherwise
            it must be > 0 and indicates which plane in the current 
            view frustum should be perserved.
            </param>
            <param name="up">
            The locked up direction. Pass Vector3d.Zero if you want to use the world
            axis direction that is closest to the current up direction.
            Pass CameraY() if you want to preserve the current up direction.
            </param>
            <param name="lensLength">
            (pass 50.0 when in doubt)
            35 mm lens length to use when changing from parallel
            to perspective projections. If the current projection
            is perspective or lens_length is &lt;= 0.0,
            then this parameter is ignored.
            </param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetCameraLocation(Rhino.Geometry.Point3d)">
            <summary>
            Sets the camera location (position) point.
            </summary>
            <returns>true if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetCameraDirection(Rhino.Geometry.Vector3d)">
            <summary>
            Sets the direction that the camera faces.
            </summary>
            <param name="direction">A new direction.</param>
            <returns>true if the direction was set; otherwise false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetCameraUp(Rhino.Geometry.Vector3d)">
            <summary>
            Sets the camera up vector.
            </summary>
            <param name="up">A new direction.</param>
            <returns>true if the direction was set; otherwise false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.UnlockCamera">
            <summary>
            Unlocks the camera vectors and location.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.UnlockFrustumSymmetry">
            <summary>
            Unlocks frustum horizontal and vertical symmetries.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetCameraFrame(Rhino.Geometry.Point3d@,Rhino.Geometry.Vector3d@,Rhino.Geometry.Vector3d@,Rhino.Geometry.Vector3d@)">
            <summary>
            Gets location and vectors of this camera.
            </summary>
            <param name="location">An out parameter that will be filled with a point during the call.</param>
            <param name="cameraX">An out parameter that will be filled with the X vector during the call.</param>
            <param name="cameraY">An out parameter that will be filled with the Y vector during the call.</param>
            <param name="cameraZ">An out parameter that will be filled with the Z vector during the call.</param>
            <returns>true if current camera orientation is valid; otherwise false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetFrustum(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets the view frustum. If FrustumSymmetryIsLocked() is true
            and left != -right or bottom != -top, then they will be
            adjusted so the resulting frustum is symmetric.
            </summary>
            <param name="left">A new left value.</param>
            <param name="right">A new right value.</param>
            <param name="bottom">A new bottom value.</param>
            <param name="top">A new top value.</param>
            <param name="nearDistance">A new near distance value.</param>
            <param name="farDistance">A new far distance value.</param>
            <returns>true if operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetFrustum(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the view frustum.
            </summary>
            <param name="left">A left value that will be filled during the call.</param>
            <param name="right">A right value that will be filled during the call.</param>
            <param name="bottom">A bottom value that will be filled during the call.</param>
            <param name="top">A top value that will be filled during the call.</param>
            <param name="nearDistance">A near distance value that will be filled during the call.</param>
            <param name="farDistance">A far distance value that will be filled during the call.</param>
            <returns>true if operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetFrustumNearFar(Rhino.Geometry.BoundingBox)">
            <summary>
            Sets the frustum near and far using a bounding box.
            </summary>
            <param name="boundingBox">A bounding box to use.</param>
            <returns>true if operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetFrustumNearFar(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Sets the frustum near and far using a center point and radius.
            </summary>
            <param name="center">A center point.</param>
            <param name="radius">A radius value.</param>
            <returns>true if operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetFrustumNearFar(System.Double,System.Double)">
            <summary>
            Sets the frustum near and far distances using two values.
            </summary>
            <param name="nearDistance">The new near distance.</param>
            <param name="farDistance">The new far distance.</param>
            <returns>true if operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.ChangeToSymmetricFrustum(System.Boolean,System.Boolean,System.Double)">
            <summary>
            If needed, adjusts the current frustum so it has the 
            specified symmetries and adjust the camera location
            so the target plane remains visible.
            </summary>
            <param name="isLeftRightSymmetric">If true, the frustum will be adjusted so left = -right.</param>
            <param name="isTopBottomSymmetric">If true, the frustum will be adjusted so top = -bottom.</param>
            <param name="targetDistance">
            If projection is not perspective or target_distance is RhinoMath.UnsetValue,
            then this parameter is ignored. If the projection is perspective and targetDistance
            is not RhinoMath.UnsetValue, then it must be > 0.0 and it is used to determine
            which plane in the old frustum will appear unchanged in the new frustum.
            </param>
            <returns>
            Returns true if the viewport has now a frustum with the specified symmetries.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetPointDepth(Rhino.Geometry.Point3d,System.Double@)">
            <summary>
            Gets the clipping distance of a point. This function ignores the
            current value of the viewport's near and far settings. If
            the viewport is a perspective projection, then it intersects
            the semi infinite frustum volume with the bounding box and
            returns the near and far distances of the intersection.
            If the viewport is a parallel projection, it instersects the
            infinte view region with the bounding box and returns the
            near and far distances of the projection.
            </summary>
            <param name="point">A point to measure.</param>
            <param name="distance">distance of the point (can be &lt; 0)</param>
            <returns>true if the bounding box intersects the view frustum and
            near_dist/far_dist were set.
            false if the bounding box does not intesect the view frustum.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetBoundingBoxDepth(Rhino.Geometry.BoundingBox,System.Double@,System.Double@)">
            <summary>
            Gets near and far clipping distances of a bounding box.
            This function ignores the current value of the viewport's 
            near and far settings. If the viewport is a perspective
            projection, the it intersects the semi infinite frustum
            volume with the bounding box and returns the near and far
            distances of the intersection.  If the viewport is a parallel
            projection, it instersects the infinte view region with the
            bounding box and returns the near and far distances of the
            projection.
            </summary>
            <param name="bbox">The bounding box to sample.</param>
            <param name="nearDistance">Near distance of the box. This value can be zero or 
            negative when the camera location is inside bbox.</param>
            <param name="farDistance">Far distance of the box. This value can be equal to 
            near_dist, zero or negative when the camera location is in front of the bounding box.</param>
            <returns>true if the bounding box intersects the view frustum and near_dist/far_dist were set. 
            false if the bounding box does not intesect the view frustum.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetSphereDepth(Rhino.Geometry.Sphere,System.Double@,System.Double@)">
            <summary>
            Gets near and far clipping distances of a bounding sphere.
            </summary>
            <param name="sphere">The sphere to sample.</param>
            <param name="nearDistance">Near distance of the sphere (can be &lt; 0)</param>
            <param name="farDistance">Far distance of the sphere (can be equal to near_dist)</param>
            <returns>true if the sphere intersects the view frustum and near_dist/far_dist were set.
            false if the sphere does not intesect the view frustum.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetFrustumNearFar(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets near and far clipping distance subject to constraints.
            </summary>
            <param name="nearDistance">(>0) desired near clipping distance.</param>
            <param name="farDistance">(>near_dist) desired near clipping distance.</param>
            <param name="minNearDistance">
            If min_near_dist &lt;= 0.0, it is ignored.
            If min_near_dist &gt; 0 and near_dist &lt; min_near_dist, then the frustum's near_dist will be increased to min_near_dist.
            </param>
            <param name="minNearOverFar">
            If min_near_over_far &lt;= 0.0, it is ignored.
            If near_dist &lt; far_dist*min_near_over_far, then
            near_dist is increased and/or far_dist is decreased
            so that near_dist = far_dist*min_near_over_far.
            If near_dist &lt; target_dist &lt; far_dist, then near_dist
            near_dist is increased and far_dist is decreased so that
            projection precision will be good at target_dist.
            Otherwise, near_dist is simply set to 
            far_dist*min_near_over_far.
            </param>
            <param name="targetDistance">If target_dist &lt;= 0.0, it is ignored.
            If target_dist &gt; 0, it is used as described in the
            description of the min_near_over_far parameter.</param>
            <returns>true if operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetNearPlaneCorners">
            <summary>
            Gets the corners of near clipping plane rectangle.
            4 points are returned in the order of bottom left, bottom right,
            top left, top right.
            </summary>
            <returns>
            Four corner points on success.
            Empty array if viewport is not valid.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetFarPlaneCorners">
            <summary>
            Gets the corners of far clipping plane rectangle.
            4 points are returned in the order of bottom left, bottom right,
            top left, top right.
            </summary>
            <returns>
            Four corner points on success.
            Empty array if viewport is not valid.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetScreenPort(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Location of viewport in pixels.
            These are provided so you can set the port you are using
            and get the appropriate transformations to and from
            screen space.
            // For a Windows window
            /      int width = width of window client area in pixels;
            /      int height = height of window client area in pixels;
            /      port_left = 0;
            /      port_right = width;
            /      port_top = 0;
            /      port_bottom = height;
            /      port_near = 0;
            /      port_far = 1;
            /      SetScreenPort( port_left, port_right, 
            /                     port_bottom, port_top, 
            /                     port_near, port_far );
            </summary>
            <param name="left">A left value.</param>
            <param name="right">A left value. (port_left != port_right)</param>
            <param name="bottom">A bottom value.</param>
            <param name="top">A top value. (port_top != port_bottom)</param>
            <param name="near">A near value.</param>
            <param name="far">A far value.</param>
            <returns>true if input is valid.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetScreenPort(System.Drawing.Rectangle,System.Int32,System.Int32)">
            <summary>
            Gets the location of viewport in pixels.
            <para>See value meanings in <see cref="M:Rhino.DocObjects.ViewportInfo.SetScreenPort(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">SetScreenPort</see>.</para>
            </summary>
            <param name="windowRectangle">A new rectangle.</param>
            <param name="near">The near value.</param>
            <param name="far">The far value.</param>
            <returns>true if input is valid.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.SetScreenPort(System.Drawing.Rectangle)">
            <summary>
            Gets the location of viewport in pixels.
            <para>See value meanings in <see cref="M:Rhino.DocObjects.ViewportInfo.SetScreenPort(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">SetScreenPort</see>.</para>
            </summary>
            <param name="windowRectangle">A new rectangle.</param>
            <returns>true if input is valid.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetScreenPort(System.Int32@,System.Int32@)">
            <summary>
            Gets the location of viewport in pixels.
            <para>See value meanings in <see cref="M:Rhino.DocObjects.ViewportInfo.SetScreenPort(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">SetScreenPort</see>.</para>
            </summary>
            <param name="near">The near value. This out parameter is assigned during the call.</param>
            <param name="far">The far value. This out parameter is assigned during the call.</param>
            <returns>The rectangle, or <see cref="F:System.Drawing.Rectangle.Empty">Empty</see> rectangle on error.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetScreenPort">
            <summary>
            Gets the location of viewport in pixels.
            See documentation for <see cref="M:Rhino.DocObjects.ViewportInfo.SetScreenPort(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">SetScreenPort</see>.
            </summary>
            <returns>The rectangle, or <see cref="F:System.Drawing.Rectangle.Empty">Empty</see> rectangle on error.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetCameraAngles(System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the field of view angles.
            </summary>
            <param name="halfDiagonalAngleRadians">1/2 of diagonal subtended angle. This out parameter is assigned during this call.</param>
            <param name="halfVerticalAngleRadians">1/2 of vertical subtended angle. This out parameter is assigned during this call.</param>
            <param name="halfHorizontalAngleRadians">1/2 of horizontal subtended angle. This out parameter is assigned during this call.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetXform(Rhino.DocObjects.CoordinateSystem,Rhino.DocObjects.CoordinateSystem)">
            <summary>
            Computes a transform from a coordinate system to another.
            </summary>
            <param name="sourceSystem">The coordinate system to map from.</param>
            <param name="destinationSystem">The coordinate system to map into.</param>
            <returns>The 4x4 transformation matrix (acts on the left).</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetFrustumLine(System.Double,System.Double)">
            <summary>
            Gets the world coordinate line in the view frustum
            that projects to a point on the screen.
            </summary>
            <param name="screenX">(screenx,screeny) = screen location.</param>
            <param name="screenY">(screenx,screeny) = screen location.</param>
            <returns>3d world coordinate line segment starting on the near clipping plane and ending on the far clipping plane.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetFrustumLine(System.Drawing.Point)">
            <summary>
            Gets the world coordinate line in the view frustum
            that projects to a point on the screen.
            </summary>
            <param name="screenPoint">screen location</param>
            <returns>3d world coordinate line segment starting on the near clipping plane and ending on the far clipping plane.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetFrustumLine(System.Drawing.PointF)">
            <summary>
            Gets the world coordinate line in the view frustum
            that projects to a point on the screen.
            </summary>
            <param name="screenPoint">screen location</param>
            <returns>3d world coordinate line segment starting on the near clipping plane and ending on the far clipping plane.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetWorldToScreenScale(Rhino.Geometry.Point3d)">
            <summary>
            Gets the scale factor from point in frustum to screen scale.
            </summary>
            <param name="pointInFrustum">point in viewing frustum.</param>
            <returns>number of pixels per world unit at the 3d point.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.Extents(System.Double,Rhino.Geometry.BoundingBox)">
            <summary>
            Extends this viewport view to include a bounding box.
            <para>Use Extents() as a quick way to set a viewport to so that bounding
            volume is inside of a viewports frustrum.
            The view angle is used to determine the position of the camera.</para>
            </summary>
            <param name="halfViewAngleRadians">1/2 smallest subtended view angle in radians.</param>
            <param name="bbox">A bounding box in 3d world coordinates.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.Extents(System.Double,Rhino.Geometry.Sphere)">
            <summary>
            Extends this viewport view to include a sphere.
            <para>Use Extents() as a quick way to set a viewport to so that bounding
            volume is inside of a viewports frustrum.
            The view angle is used to determine the position of the camera.</para>
            </summary>
            <param name="halfViewAngleRadians">1/2 smallest subtended view angle in radians.</param>
            <param name="sphere">A sphere in 3d world coordinates.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.ZoomToScreenRect(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Zooms to a screen zone.
            <para>View changing from screen input points. Handy for
            using a mouse to manipulate a view.
            ZoomToScreenRect() may change camera and frustum settings.</para>
            </summary>
            <param name="left">Screen coord.</param>
            <param name="top">Screen coord.</param>
            <param name="right">Screen coord.</param>
            <param name="bottom">Screen coord.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.ZoomToScreenRect(System.Drawing.Rectangle)">
            <summary>
            Zooms to a screen zone.
            <para>View changing from screen input points. Handy for
            using a mouse to manipulate a view.
            ZoomToScreenRect() may change camera and frustum settings.</para>
            </summary>
            <param name="windowRectangle">The new window rectangle in screen space.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.DollyCamera(Rhino.Geometry.Vector3d)">
            <summary>
            DollyCamera() does not update the frustum's clipping planes.
            To update the frustum's clipping planes call DollyFrustum(d)
            with d = dollyVector o cameraFrameZ.  To convert screen locations
            into a dolly vector, use GetDollyCameraVector().
            Does not update frustum.  To update frustum use DollyFrustum(d) with d = dollyVector o cameraFrameZ.
            </summary>
            <param name="dollyVector">dolly vector in world coordinates.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetDollyCameraVector(System.Int32,System.Int32,System.Int32,System.Int32,System.Double)">
            <summary>
            Gets a world coordinate dolly vector that can be passed to DollyCamera().
            </summary>
            <param name="screenX0">Screen coords of start point.</param>
            <param name="screenY0">Screen coords of start point.</param>
            <param name="screenX1">Screen coords of end point.</param>
            <param name="screenY1">Screen coords of end point.</param>
            <param name="projectionPlaneDistance">Distance of projection plane from camera. When in doubt, use 0.5*(frus_near+frus_far).</param>
            <returns>The world coordinate dolly vector.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.GetDollyCameraVector(System.Drawing.Point,System.Drawing.Point,System.Double)">
            <summary>
            Gets a world coordinate dolly vector that can be passed to DollyCamera().
            </summary>
            <param name="screen0">Start point.</param>
            <param name="screen1">End point.</param>
            <param name="projectionPlaneDistance">Distance of projection plane from camera. When in doubt, use 0.5*(frus_near+frus_far).</param>
            <returns>The world coordinate dolly vector.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.DollyFrustum(System.Double)">
            <summary>
            Moves the frustum clipping planes.
            </summary>
            <param name="dollyDistance">Distance to move in camera direction.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.DollyExtents(System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase},System.Double)">
            <summary>
            Dolly the camera location and so that the view frustum contains
            all of the document objects that can be seen in view.
            If the projection is perspective, the camera angle is not changed.
            </summary>
            <param name="geometry"></param>
            <param name="border">
            If border > 1.0, then the fustum in enlarged by this factor
            to provide a border around the view.  1.1 works well for
            parallel projections; 0.0 is suggested for perspective projections.
            </param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.DollyExtents(Rhino.Geometry.BoundingBox,System.Double)">
            <summary>
            Dolly the camera location and so that the view frustum contains
            all of the document objects that can be seen in view.
            If the projection is perspective, the camera angle is not changed.
            </summary>
            <param name="cameraCoordinateBoundingBox"></param>
            <param name="border">
            If border > 1.0, then the fustum in enlarged by this factor
            to provide a border around the view.  1.1 works well for
            parallel projections; 0.0 is suggested for perspective projections.
            </param>
            <returns>True if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.FrustumCenterPoint(System.Double)">
            <summary>
            Return a point on the central axis of the view frustum.
            This point is a good choice for a general purpose target point.
            </summary>
            <param name="targetDistance">If targetDistance > 0.0, then the distance from the returned
            point to the camera plane will be targetDistance. Note that
            if the frustum is not symmetric, the distance from the
            returned point to the camera location will be larger than
            targetDistance.
            If targetDistance == ON_UNSET_VALUE and the frustum
            is valid with near > 0.0, then 0.5*(near + far) will be used
            as the targetDistance.</param>
            <returns>A point on the frustum's central axis.  If the viewport or input
            is not valid, then ON_3dPoint::UnsetPoint is returned.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.TargetDistance(System.Boolean)">
            <summary>
            Gets the distance from the target point to the camera plane.
            Note that if the frustum is not symmetric, then this distance
            is shorter than the distance from the target to the camera location.
            </summary>
            <param name="useFrustumCenterFallback">If bUseFrustumCenterFallback is false and the target point is
            not valid, then ON_UNSET_VALUE is returned.
            If bUseFrustumCenterFallback is true and the frustum is valid
            and current target point is not valid or is behind the camera,
            then 0.5*(near + far) is returned.</param>
            <returns>Shortest signed distance from camera plane to target point.
            If the target point is on the visible side of the camera,
            a positive value is returned.  ON_UNSET_VALUE is returned
            when the input of view is not valid.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ViewportInfo.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsValidCamera">
            <summary>
            Gets a value that indicates whether the camera is valid.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsValidFrustum">
            <summary>
            Gets a value that indicates whether the frustum is valid.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsValid">
            <summary>
            Gets a value that indicates whether this complete object is valid.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsPerspectiveProjection">
            <summary>
            Get or set whether this projection is perspective.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsParallelProjection">
            <summary>
            Get or set whether this projection is parallel.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsTwoPointPerspectiveProjection">
            <summary>
            Gets a value that indicates whether this projection is a two-point perspective.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.CameraLocation">
            <summary>
            Gets the camera location (position) point.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.CameraDirection">
            <summary>
            Gets the direction that the camera faces.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.CameraUp">
            <summary>
            Gets the camera up vector.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsCameraLocationLocked">
            <summary>
            Gets or sets a value that indicates whether the camera location is unmodifiable.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsCameraDirectionLocked">
            <summary>
            Gets or sets a value that indicates whether the direction that the camera faces is unmodifiable.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsCameraUpLocked">
            <summary>
            Gets or sets a value that indicates whether the camera up vector is unmodifiable.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsFrustumLeftRightSymmetric">
            <summary>
            Gets or sets a value that indicates whether the camera frustum has a vertical symmetry axis.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.IsFrustumTopBottomSymmetric">
            <summary>
            Gets or sets a value that indicates whether the camera frustum has a horizontal symmetry axis.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.CameraX">
            <summary>
            Gets the unit "to the right" vector.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.CameraY">
            <summary>
            Gets the unit "up" vector.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.CameraZ">
            <summary>
            Gets the unit vector in -CameraDirection.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumAspect">
            <summary>
            Setting FrustumAspect changes the larger of the frustum's width/height
            so that the resulting value of width/height matches the requested
            aspect.  The camera angle is not changed.  If you change the shape
            of the view port with a call SetScreenPort(), then you generally 
            want to call SetFrustumAspect() with the value returned by 
            GetScreenPortAspect().
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumCenter">
            <summary>
            Gets the frustum center point.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumLeft">
            <summary>
            Gets the frustum left value. This is -right if the frustum has a vertical symmetry axis.
            <para>This number is usually negative.</para>
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumRight">
            <summary>
            Gets the frustum right value. This is -left if the frustum has a vertical symmetry axis.
            <para>This number is usually positive.</para>
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumBottom">
            <summary>
            Gets the frustum bottom value. This is -top if the frustum has a horizontal symmetry axis.
            <para>This number is usually negative.</para>
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumTop">
            <summary>
            Gets the frustum top value. This is -bottom if the frustum has a horizontal symmetry axis.
            <para>This number is usually positive.</para>
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumNear">
            <summary>
            Gets the frustum near-cutting value.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumFar">
            <summary>
            Gets the frustum far-cutting value.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumWidth">
            <summary>
            Gets the frustum width. This is <see cref="P:Rhino.DocObjects.ViewportInfo.FrustumRight"/> - <see cref="P:Rhino.DocObjects.ViewportInfo.FrustumLeft"/>.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumHeight">
            <summary>
            Gets the frustum height. This is <see cref="P:Rhino.DocObjects.ViewportInfo.FrustumTop"/> - <see cref="P:Rhino.DocObjects.ViewportInfo.FrustumBottom"/>.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumMinimumDiameter">
            <summary>
            Gets the frustum minimum diameter, or the minimum between <see cref="P:Rhino.DocObjects.ViewportInfo.FrustumWidth"/> and <see cref="P:Rhino.DocObjects.ViewportInfo.FrustumHeight"/>.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumMaximumDiameter">
            <summary>
            Gets the frustum maximum diameter, or the maximum between <see cref="P:Rhino.DocObjects.ViewportInfo.FrustumWidth"/> and <see cref="P:Rhino.DocObjects.ViewportInfo.FrustumHeight"/>.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumNearPlane">
            <summary>
            Gets near clipping plane if camera and frustum
            are valid.  The plane's frame is the same as the camera's
            frame.  The origin is located at the intersection of the
            camera direction ray and the near clipping plane. The plane's
            normal points out of the frustum towards the camera
            location.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumFarPlane">
            <summary>
            Gets far clipping plane if camera and frustum
            are valid.  The plane's frame is the same as the camera's
            frame.  The origin is located at the intersection of the
            camera direction ray and the far clipping plane. The plane's
            normal points into the frustum towards the camera location.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumLeftPlane">
            <summary>
            Gets the frustum left plane that separates visibile from off-screen.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumRightPlane">
            <summary>
            Gets the frustum right plane that separates visibile from off-screen.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumBottomPlane">
            <summary>
            Gets the frustum bottom plane that separates visibile from off-screen.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.FrustumTopPlane">
            <summary>
            Gets the frustum top plane that separates visibile from off-screen.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.ScreenPortAspect">
            <summary>
            Gets the sceen aspect ratio.
            <para>This is width / height.</para>
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.CameraAngle">
            <summary>
            Gets or sets the 1/2 smallest angle. See <see cref="M:Rhino.DocObjects.ViewportInfo.GetCameraAngles(System.Double@,System.Double@,System.Double@)"/> for more information.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.Camera35mmLensLength">
            <summary>
            This property assumes the camera is horizontal and crop the
            film rather than the image when the aspect of the frustum
            is not 36/24.  (35mm film is 36mm wide and 24mm high.)
            Setting preserves camera location,
            changes the frustum, but maintains the frustum's aspect.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.ViewScale">
            <summary>
            Applies scaling factors to parallel projection clipping coordinates
            by setting the m_clip_mod transformation. 
            If you want to compress the view projection across the viewing
            plane, then set x = 0.5, y = 1.0, and z = 1.0.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.TargetPoint">
            <summary>
            The current value of the target point.  This point does not play
            a role in the view projection calculations.  It can be used as a 
            fixed point when changing the camera so the visible regions of the
            before and after frustums both contain the region of interest.
            The default constructor sets this point on ON_3dPoint::UnsetPoint.
            You must explicitly call one SetTargetPoint() functions to set
            the target point.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ViewportInfo.Id">
            <summary>
            Sets the viewport's id to the value used to 
            uniquely identify this viewport.
            There is no approved way to change the viewport 
            id once it is set in order to maintain consistency
            across multiple viewports and those routines that 
            manage them.
            </summary>
        </member>
        <member name="T:Rhino.Render.RenderContentSerializer">
            <summary>
            Used to import and export custom render content types such as
            materials, environments and textures.  You must override
            RenderPlugIn.RenderContentSerializers() and return an array of
            derived RenderContentSerializer class types to add to the content
            browsers.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderContentSerializer.#ctor(System.String,Rhino.Render.RenderContentKind,System.Boolean,System.Boolean)">
            <summary>
            Protected constructor to be called from derived class
            </summary>
            <param name="fileExtension">
            File extension associated with this serialize object
            </param>
            <param name="contentKind">
            Type of content created when importing or exporting this file type.
            </param>
            <param name="canRead">
            If true then the file type can be imported and will be included in the
            file open box when importing the specified render content type.
            </param>
            <param name="canWrite">
            If true then the file type can be exported and will be included in the
            file save box when exporting the specified render content type.
            </param>
        </member>
        <member name="M:Rhino.Render.RenderContentSerializer.Read(System.String)">
            <summary>
            Called to when importing a file, file should be parsed and converted to
            a valid RenderContent object.
            </summary>
            <param name="pathToFile">
            Full path of the file to load.
            </param>
            <returns>
            Returns a valid RenderContent object such as RenderMaterial if the file
            was successfully parsed otherwise returns null.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderContentSerializer.Write(System.String,Rhino.Render.RenderContent,Rhino.Render.CreatePreviewEventArgs)">
            <summary>
            Called to save a custom RenderContent object as an external file.
            </summary>
            <param name="pathToFile">
            Full path of file to write
            </param>
            <param name="renderContent">
            Render content to save
            </param>
            <param name="previewArgs">
            Parameters used to generate a preview image which may be embedded in
            the exported file.
            </param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Render.RenderContentSerializer.FileExtension">
            <summary>
            File extension associated with this serialize object
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderContentSerializer.ContentType">
            <summary>
            Type of content created when importing or exporting this file type.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderContentSerializer.CanRead">
            <summary>
            If true then the file type can be imported and will be included in the
            file open box when importing the specified render content type.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderContentSerializer.CanWrite">
            <summary>
            If true then the file type can be exported and will be included in the
            file save box when exporting the specified render content type.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderContentSerializer.EnglishDescription">
            <summary>
            English string describing this plug-in
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderContentSerializer.LocalDescription">
            <summary>
            Localized plug-in description
            </summary>
        </member>
        <member name="T:Rhino.Render.RdkCmnEventWatcher">
            <summary>
            This class is used to manage the following override:
            
            static class CRdkCmnEventWatcher : public CRhRdkEventSink
            {
               ...
               virtual void OnDocumentSettingsChanged(UINT uFlags, UINT_PTR uContext);
               ...
            };
            </summary>
        </member>
        <member name="M:Rhino.Render.RdkCmnEventWatcher.Add(UnsafeNativeMethods.EventSyncDocumentSettingsChangedFlag,System.EventHandler{Rhino.Render.RenderPropertyChangedEvent})">
            <summary>
            Called when adding a delegate to a event, see the GroundPlane.Changed
            event for an example.
            </summary>
            <param name="type">
            The event watcher type index
            </param>
            <param name="value">
            Delegate to add
            </param>
        </member>
        <member name="M:Rhino.Render.RdkCmnEventWatcher.Remove(UnsafeNativeMethods.EventSyncDocumentSettingsChangedFlag,System.EventHandler{Rhino.Render.RenderPropertyChangedEvent})">
            <summary>
            Called when removing a delegate from an event, see the
            GroundPlane.Changed event for an example.
            </summary>
            <param name="type">
            The event watcher type index
            </param>
            <param name="value">
            Delegate to remove
            </param>
        </member>
        <member name="M:Rhino.Render.RdkCmnEventWatcher.OnSettingsChanged(System.Int32,System.Int32)">
            <summary>
            Called after any RDK document settings have been changed.
            CRdkCmnEventWatcher::OnDocumentSettingsChanged(UINT uFlags, UINT_PTR uContext)
            </summary>
            <param name="flags">A bit mask specifying what has changed</param>
            <param name="context">
            Provides extra information, parameter is usually zero but in the case of 'rendering'
            </param>
        </member>
        <member name="F:Rhino.Render.RdkCmnEventWatcher.g_settings_changed_hook">
            <summary>
            Gets set as soon as a event delegate is added, will point to
            OnSettingsChanged.
            </summary>
        </member>
        <member name="F:Rhino.Render.RdkCmnEventWatcher.g_event_dictionary">
            <summary>
            Event delegate dictionary
            </summary>
        </member>
        <member name="P:Rhino.Render.RdkCmnEventWatcher.IsEmpty">
            <summary>
            Iterate the event list and see if any have been hooked.
            </summary>
        </member>
        <member name="T:Rhino.Render.RdkCmnEventWatcher.RdkDocumentSettingsChangedCallback">
            <summary>
            Used by CRdkCmnEventWatcher_SetDocumentSettingsChangedEventCallback
            </summary>
            <param name="flags"></param>
            <param name="context"></param>
        </member>
        <member name="T:Rhino.Render.RenderPropertyChangedEvent">
            <summary>
            Used by Rhino.Render object property value has changed events.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderPropertyChangedEvent.Document">
            <summary>
            The document triggering the event.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderPropertyChangedEvent.Context">
            <summary>
            Optional argument which may specify the property being modified.
            </summary>
        </member>
        <member name="T:Rhino.Render.GroundPlane">
            <summary>
            Represents an infinite plane for implementation by renderers.
            See <see cref="M:Rhino.PlugIns.RenderPlugIn.SupportsFeature(Rhino.PlugIns.RenderPlugIn.RenderFeature)">SupportsFeature</see>.
            </summary>
        </member>
        <member name="F:Rhino.Render.GroundPlane.m_doc">
            <summary>
            Functions/Properties in this class do not need to check for RDK since
            the only way to access the RDK is through the GroundPlane property on
            the RhinoDoc. That property does the check before returning this class
            </summary>
        </member>
        <member name="E:Rhino.Render.GroundPlane.Changed">
            <summary>
            This event is raised when a GroundPlane property value is changed.
            </summary>
        </member>
        <member name="P:Rhino.Render.GroundPlane.Document">
            <summary>Document this groundplane is associated with.</summary>
        </member>
        <member name="P:Rhino.Render.GroundPlane.Enabled">
            <summary>
            Determines whether the document ground plane is enabled.
            </summary>
        </member>
        <member name="P:Rhino.Render.GroundPlane.Altitude">
            <summary>
            Height above world XY plane in model units.
            </summary>
        </member>
        <member name="P:Rhino.Render.GroundPlane.MaterialInstanceId">
            <summary>
            Id of material in material table for this ground plane.
            </summary>
        </member>
        <member name="P:Rhino.Render.GroundPlane.TextureOffset">
            <summary>
            Texture mapping offset in world units.
            </summary>
        </member>
        <member name="P:Rhino.Render.GroundPlane.TextureSize">
            <summary>
            Texture mapping single UV span size in world units.
            </summary>
        </member>
        <member name="P:Rhino.Render.GroundPlane.TextureRotation">
            <summary>
            Texture mapping rotation around world origin + offset in degrees.
            </summary>
        </member>
        <member name="T:Rhino.Display.Color4f">
            <summary>
            Color defined by 4 floating point values.
            </summary>
        </member>
        <member name="T:Rhino.Render.UI.IUserInterfaceSection">
            <summary>
            Implement this interface in your user control to get UserInterfaceSection
            event notification.
            </summary>
        </member>
        <member name="M:Rhino.Render.UI.IUserInterfaceSection.UserInterfaceDisplayData(Rhino.Render.UI.UserInterfaceSection,Rhino.Render.RenderContent[])">
            <summary>
            Called by UserInterfaceSection when the selected content changes or a
            content field property value changes.
            </summary>
            <param name="userInterfaceSection">
            The UserInterfaceSection object that called this interface method.
            </param>
            <param name="renderContentList">
            The currently selected list of content items to edit.
            </param>
        </member>
        <member name="M:Rhino.Render.UI.IUserInterfaceSection.OnUserInterfaceSectionExpanding(Rhino.Render.UI.UserInterfaceSection,System.Boolean)">
            <summary>
            The UserInterfaceSection object that called this interface method.
            </summary>
            <param name="userInterfaceSection">
            The UserInterfaceSection object that called this interface method.
            </param>
            <param name="expanding">
            Will be true if the control has been createExpanded or false if it was
            collapsed.
            </param>
        </member>
        <member name="T:Rhino.Render.UI.UserInterfaceSection">
            <summary>
            Custom user interface section manager
            </summary>
        </member>
        <member name="M:Rhino.Render.UI.UserInterfaceSection.#ctor(System.Int32,System.Windows.Forms.IWin32Window)">
            <summary>
            Internal constructor
            </summary>
            <param name="serialNumber">C++ pointer serial number returned by the C interface wrapper.</param>
            <param name="window">The control created and embedded in the expandable tab control in the content browser.</param>
        </member>
        <member name="F:Rhino.Render.UI.UserInterfaceSection.m_window">
            <summary>
            The control created and embedded in the expandable tab control in the content browser.
            </summary>
        </member>
        <member name="F:Rhino.Render.UI.UserInterfaceSection.m_serial_number">
            <summary>
            C++ pointer serial number returned by the C interface wrapper.
            </summary>
        </member>
        <member name="F:Rhino.Render.UI.UserInterfaceSection.m_search_hint">
            <summary>
            Search hint helper
            </summary>
        </member>
        <member name="F:Rhino.Render.UI.UserInterfaceSection.g_user_interface_section_dictionary">
            <summary>
            UserInterfaceSection instance dictionary, the constructor adds objects to the dictionary
            and the C++ destructor callback removes them when they get destroyed.
            </summary>
        </member>
        <member name="M:Rhino.Render.UI.UserInterfaceSection.SetHooks">
            <summary>
            Set C++ callback function pointers
            </summary>
        </member>
        <member name="F:Rhino.Render.UI.UserInterfaceSection.m_deleteThisProc">
            <summary>
            Called by the C++ destructor when a user interface section object is destroyed.
            </summary>
        </member>
        <member name="F:Rhino.Render.UI.UserInterfaceSection.m_displayDataProc">
            <summary>
            Called by the C++ SDK when it is time to initialize a user interface section.
            </summary>
        </member>
        <member name="F:Rhino.Render.UI.UserInterfaceSection.m_onExpandCallback">
            <summary>
            Called by the C++ SDK when a user interface section is being createExpanded
            or collapsed.
            </summary>
        </member>
        <member name="M:Rhino.Render.UI.UserInterfaceSection.DeleteThisProc(System.Int32)">
            <summary>
            C++ user interface destructor callback, remove the object from the runtime
            dictionary and dispose if it if possible.
            </summary>
            <param name="serialNumber"></param>
        </member>
        <member name="M:Rhino.Render.UI.UserInterfaceSection.DisplayDataProc(System.Int32)">
            <summary>
            Called when it is safe to initialize the control window.
            </summary>
            <param name="serialNumber"></param>
        </member>
        <member name="M:Rhino.Render.UI.UserInterfaceSection.OnExpandProc(System.Int32,System.Boolean)">
            <summary>
            Called when a user interface section is being createExpanded or collapsed.
            </summary>
            <param name="serialNumber"></param>
            <param name="expanding"></param>
        </member>
        <member name="M:Rhino.Render.UI.UserInterfaceSection.GetSiblings">
            <summary>
            Get a list of the RhinoCommon added content sections associated with
            this sections container.
            </summary>
            <returns>
            Returns a list of the RhinoCommon added content sections associated
            with this sections container.
            </returns>
        </member>
        <member name="M:Rhino.Render.UI.UserInterfaceSection.GetSibling(System.Guid)">
            <summary>
            Look for a UI section in the same container with the specified class Id.
            </summary>
            <param name="id">The class Id of the section to search for.</param>
            <returns>
            Returns the first section in this sections container whose window class
            Id matches the specified Id or null if no match is found.
            </returns>
        </member>
        <member name="M:Rhino.Render.UI.UserInterfaceSection.FromWindow(System.Windows.Forms.IWin32Window)">
            <summary>
            Find the UserInterfaceSection that created the specified instance of a
            window.
            </summary>
            <param name="window">
            If window is not null then look for the UserInterfaceSection that
            created the window.
            </param>
            <returns>
            If a UserInterfaceSection object is found containing a reference to
            the requested window then return the object otherwise return null.
            </returns>
        </member>
        <member name="M:Rhino.Render.UI.UserInterfaceSection.GetContentList">
            <summary>
            Returns a list of currently selected content items to be edited.
            </summary>
            <returns>Returns a list of currently selected content items to be edited.</returns>
        </member>
        <member name="M:Rhino.Render.UI.UserInterfaceSection.Show(System.Boolean)">
            <summary>
            Show or hide this content section.
            </summary>
            <param name="visible">If true then show the content section otherwise hide it.</param>
        </member>
        <member name="M:Rhino.Render.UI.UserInterfaceSection.Expand(System.Boolean)">
            <summary>
            Expand or collapse this content section.
            </summary>
            <param name="expand">If true then expand the content section otherwise collapse it.</param>
        </member>
        <member name="M:Rhino.Render.UI.UserInterfaceSection.GetSiblingIdList">
            <summary>
            Get a list of the RhinoCommon added content section serial numbers
            associated with this sections container.
            </summary>
            <returns>
            Return a list of the RhinoCommon added content section serial numbers
            associated with this sections container.
            </returns>
        </member>
        <member name="M:Rhino.Render.UI.UserInterfaceSection.GetContentIdList">
            <summary>
            Returns a list of currently selected content item Id's to be edited.
            </summary>
            <returns>Returns a list of currently selected content item Id's to be edited.</returns>
        </member>
        <member name="M:Rhino.Render.UI.UserInterfaceSection.FromSerialNumber(System.Int32)">
            <summary>
            Look up a runtime instance of an user interface object by serial number.
            </summary>
            <param name="serialNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.UI.UserInterfaceSection.UiFromSerialNumber(System.Int32,Rhino.Render.UI.UserInterfaceSection@,Rhino.Render.UI.IUserInterfaceSection@)">
            <summary>
            Look up a runtime instance of an user interface object by serial number
            and check the user interface Window object for a IUserInterfaceSection
            instance.
            </summary>
            <param name="serialNumber"></param>
            <param name="uiSection"></param>
            <param name="iUiSection"></param>
            <returns>
            Returns true if both uiSection and iUiSection are non null otherwise;
            return false.
            </returns>
        </member>
        <member name="P:Rhino.Render.UI.UserInterfaceSection.SerialNumber">
            <summary>
            C++ pointer serial number returned by the C interface wrapper.
            </summary>
        </member>
        <member name="P:Rhino.Render.UI.UserInterfaceSection.RenderContent">
            <summary>
            The RenderContent object that created this user interface object.
            </summary>
        </member>
        <member name="P:Rhino.Render.UI.UserInterfaceSection.Window">
            <summary>
            The user control associated with this user interface object.
            </summary>
        </member>
        <member name="P:Rhino.Render.UI.UserInterfaceSection.Pointer">
            <summary>
            Dereference the serial number as a C++ pointer, used for direct access to the C++ object.
            </summary>
        </member>
        <member name="T:Rhino.Render.UI.UserInterfaceSection.SerialNumberCallback">
            <summary>
            Delegate used by Imports.cs for internal C++ method callbacks
            </summary>
            <param name="serialNumber">Runtime C++ memory pointer serial number.</param>
        </member>
        <member name="T:Rhino.Render.UI.UserInterfaceSection.SerialNumberBoolCallback">
            <summary>
            Delegate used by Imports.cs for internal C++ method callbacks
            </summary>
            <param name="serialNumber">Runtime C++ memory pointer serial number.</param>
            <param name="b"></param>
        </member>
        <member name="F:Rhino.Render.RenderContentStyles.None">
            <summary>
            No defined styles
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContentStyles.TextureSummary">
            <summary>
            Texture UI includes an auto texture summary section. See AddAutoParameters().
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContentStyles.QuickPreview">
            <summary>
            Editor displays an instant preview before preview cycle begins.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContentStyles.PreviewCache">
            <summary>
            Content's preview imagery can be stored in the preview cache.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContentStyles.ProgressivePreview">
            <summary>
            Content's preview imagery can be rendered progressively.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContentStyles.LocalTextureMapping">
            <summary>
            Texture UI includes an auto local mapping section for textures. See AddAutoParameters()
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContentStyles.GraphDisplay">
            <summary>
            Texture UI includes a graph section.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContentStyles.SharedUI">
            <summary>
            Content supports UI sharing between contents of the same type id.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContentStyles.Adjustment">
            <summary>
            Texture UI includes an adjustment section.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContentStyles.Fields">
            <summary>
            Content uses fields to facilitate data storage and undo support. See Fields()
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContentStyles.ModalEditing">
            <summary>
            Content supports editing in a modal editor.
            </summary>
        </member>
        <member name="T:Rhino.Render.RenderContentKind">
            <summary>
            Defines constant values for all render content kinds, such as material,
            environment or texture.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderContent.Create(System.Guid,Rhino.Render.RenderContent.ShowContentChooserFlags,Rhino.RhinoDoc)">
            <summary>
            Constructs a new content of the specified type and add it to the persistent content list.
            This function cannot be used to create temporary content that you delete after use.
            Content created by this function is owned by RDK and appears in the content editor.
            To create a temporary content which is owned by you, call RhRdkContentFactories().NewContentFromType().
            </summary>
            <param name="type">Is the type of the content to add.</param>
            <param name="flags">Options for the tab.</param>
            <param name="doc">The current Rhino document.</param>
            <returns>A new persistent render content.</returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.Create(System.Type,Rhino.Render.RenderContent.ShowContentChooserFlags,Rhino.RhinoDoc)">
            <summary>
            Constructs a new content of the specified type and add it to the persistent content list.
            This function cannot be used to create temporary content that you delete after use.
            Content created by this function is owned by RDK and appears in the content editor.
            To create a temporary content which is owned by you, call RhRdkContentFactories().NewContentFromType().
            </summary>
            <param name="type">Is the type of the content to add.</param>
            <param name="flags">Options for the tab.</param>
            <param name="doc">The current Rhino document.</param>
            <returns>A new persistent render content.</returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.Create(System.Guid,Rhino.Render.RenderContent,System.String,Rhino.Render.RenderContent.ShowContentChooserFlags,Rhino.RhinoDoc)">
            <summary>
            Constructs a new content of the specified type and add it to the persistent content list.
            This function cannot be used to create temporary content that you delete after use.
            Content created by this function is owned by RDK and appears in the content editor.
            To create a temporary content which is owned by you, call RhRdkContentFactories().NewContentFromType().
            </summary>
            <param name="type">is the type of the content to add.</param>
            <param name="parent">Parent is the parent content. If not NULL, this must be an RDK-owned content that is
            in the persistent content list (either top-level or child). The new content then becomes its child.
            If NULL, the new content is added to the top-level content list instead.</param>
            <param name="childSlotName">ChildSlotName is the unique child identifier to use for the new content when creating it as a child of pParent (i.e., when pParent is not NULL)</param>
            <param name="flags">Options for the tab.</param>
            <param name="doc">The current Rhino document.</param>
            <returns>A new persistent render content.</returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.Create(System.Type,Rhino.Render.RenderContent,System.String,Rhino.Render.RenderContent.ShowContentChooserFlags,Rhino.RhinoDoc)">
            <summary>
            Constructs a new content of the specified type and add it to the persistent content list.
            This function cannot be used to create temporary content that you delete after use.
            Content created by this function is owned by RDK and appears in the content editor.
            To create a temporary content which is owned by you, call RhRdkContentFactories().NewContentFromType().
            </summary>
            <param name="type">is the type of the content to add.</param>
            <param name="parent">Parent is the parent content. If not NULL, this must be an RDK-owned content that is
            in the persistent content list (either top-level or child). The new content then becomes its child.
            If NULL, the new content is added to the top-level content list instead.</param>
            <param name="childSlotName">ChildSlotName is the unique child identifier to use for the new content when creating it as a child of pParent (i.e., when pParent is not NULL)</param>
            <param name="flags">Options for the tab.</param>
            <param name="doc">The current Rhino document.</param>
            <returns>A new persistent render content.</returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.RegisterContent(Rhino.PlugIns.PlugIn)">
            <summary>
            Call RegisterContent in your plug-in's OnLoad function in order to register all of the
            custom RenderContent classes in your assembly.
            </summary>
            <param name="plugin"></param>
            <returns>array of render content types registered on success. null on error.</returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.RegisterContent(System.Reflection.Assembly,System.Guid)">
            <summary>
            Call RegisterContent in your plug-in's OnLoad function in order to register all of the
            custom RenderContent classes in your assembly.
            </summary>
            <param name="assembly">
            Assembly where custom content is defined, this may be a plug-in assembly
            or another assembly referenced by the plug-in.
            </param>
            <param name="pluginId">Parent plug-in for this assembly.</param>
            <returns>array of render content types registered on success. null on error.</returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.LoadFromFile(System.String)">
            <summary>
            Loads content from a library file.  Does not add the content to the persistent content list.
            Use AddPersistantContent to add it to the list.
            </summary>
            <param name="filename">full path to the file to be loaded.</param>
            <returns>The loaded content or null if an error occurred.</returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.AddPersistentRenderContent(Rhino.Render.RenderContent)">
            <summary>
            Add a material, environment or texture to the internal RDK document lists as
            top level content.  The content must have been returned from
            RenderContent::MakeCopy, NewContentFromType or a similar function that returns
            a non-document content.
            </summary>
            <param name="renderContent">The render content.</param>
            <returns>true on success.</returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.FromId(Rhino.RhinoDoc,System.Guid)">
            <summary>
            Search for a content object based on its Id
            </summary>
            <param name="document">
            The Rhino document containing the content.
            </param>
            <param name="id">
            Id of the content instance to search for.
            </param>
            <returns>
            Returns the content object with the specified Id if it is found
            otherwise it returns null.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.FromPointer(System.IntPtr)">
            <summary>
            Create a .NET object of the appropriate type and attach it to the
            requested C++ pointer
            </summary>
            <param name="renderContent"></param>
            <returns></returns>
        </member>
        <member name="F:Rhino.Render.RenderContent.m_runtime_serial_number">
            <summary>
            Serial number of the created object, valid values:
              -1  == OnDeleteRhCmnRenderContent() was called with this serial number
              >0  == Value set by the constructor
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.m_current_serial_number">
            <summary>
            The next allocation serial number
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.m_search_hint">
            <summary>
            I think this is the index to start the search from if we have an
            idea as to where to start looking.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.m_CustomContentDictionary">
            <summary>
            Contains a list of objects with a m_runtime_serial_number > 0,
            OnDeleteRhCmnRenderContent() will remove objects from the dictionary
            by m_runtime_serial_number.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.m_FieldDictionary">
            <summary>
            Rhino.Render.Fields FieldDictionary which provides access to setting
            and retrieving field values.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderContent.BindParameterToField(System.String,System.String,Rhino.Render.Fields.Field,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Use bindings to automatically wire parameters to fields
            </summary>
            <param name="parameterName"></param>
            <param name="childSlotName"></param>
            <param name="field"></param>
            <param name="setEvent"></param>
        </member>
        <member name="M:Rhino.Render.RenderContent.BindParameterToField(System.String,Rhino.Render.Fields.Field,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Use bindings to automatically wire parameters to fields
            </summary>
            <param name="parameterName"></param>
            <param name="field"></param>
            <param name="setEvent"></param>
        </member>
        <member name="M:Rhino.Render.RenderContent.ClassDefinedInRhinoCommon">
            <summary>
            Check to see if the class is defined by RhinoCommon or some other
            assembly.
            </summary>
            <returns>
            If the class assembly type is equal to the RhinoCommon assembly then
            return true  indicating native content otherwise return false
            indicating custom content.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.IsCustomClassDefintion">
            <summary>
            Check to see if the class type assembly is something other than
            RhinoCommon.
            </summary>
            <returns>
            Return true if the class definition resides in an assembly other than
            RhinoCommon otherwise return false because it is native content.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.#ctor">
            <summary>
            internal because we don't want people to ever directly subclass RenderContent.
            They should always derive from the subclasses of this class
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderContent.GetString(Rhino.Render.RenderContent.StringIds)">
            <summary>
            Internal method used to get string values from the C++ SDK
            </summary>
            <param name="which">Id of string value to get</param>
            <returns>Returns the requested string value.</returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.OpenInEditor">
            <summary>
            Call this method to open the content in the relevant thumbnail editor
            and select it for editing by the user. The content must be in the
            document or the call will fail.
            </summary>
            <returns>
            Returns true on success or false on error.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.OpenInModalEditor">
            <summary>
            Call this method to open the content in the a modal version of the editor.
            The content must be in the document or the call will fail.
            </summary>
            <returns>
            Returns true on success or false on error.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.OnAddUserInterfaceSections">
            <summary>
            Override to provide UI sections to display in the editor.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderContent.OnGetDefaultsInteractive(System.IntPtr)">
            <summary>
            Override this method to prompt user for information necessary to
            create a new content object.  For example, if you are created a
            textured material you may prompt the user for a bitmap file name
            prior to creating the textured material.
            </summary>
            <returns>
            If true is returned the content is created otherwise the creation
            is aborted.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.NewUiPointer(System.Guid,System.String,System.Boolean,System.Boolean,System.Windows.Forms.IWin32Window)">
            <summary>
            Create a new custom content user interface instance for this
            RenderContext.
            </summary>
            <param name="classId">The class Type Guid which was created.</param>
            <param name="caption">The expandable tab caption</param>
            <param name="createExpanded">
            If this is true the tab will initially be expanded otherwise it will be
            collapsed.
            </param>
            <param name="createVisible">
            If this is true the tab will initially be visible otherwise it will be
            hidden.
            </param>
            <param name="window">The user control to embed in the expandable tab.</param>
            <returns>
            Returns the UserInterfaceSection object used to manage the new custom
            UI.
             </returns>
        </member>
        <member name="F:Rhino.Render.RenderContent.m_UserInterfaceSections">
            <summary>
            Dictionary of all currently created UserInterfaceSection objects, when
            the C++ pointer is deleted the object will be removed from this dictionary.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderContent.AddUserInterfaceSection(System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
            Add a new .NET control to an content expandable tab section, the height
            of the createExpanded tabs client area will be the initial height of the
            specified control.
            </summary>
            <param name="classType">
            The control class to create and embed as a child window in the
            expandable tab client area.  This class type must be derived from
            IWin32Window or this method will throw an ArgumentException.  Implement
            the IUserInterfaceSection interface in your classType to get
            UserInterfaceSection notification.
            </param>
            <param name="caption">Expandable tab caption.</param>
            <param name="createExpanded">
            If this value is true then the new expandable tab section will
            initially be expanded, if it is false it will be collapsed.
            </param>
            <param name="createVisible">
            If this value is true then the new expandable tab section will
            initially be visible, if it is false it will be hidden.
            </param>
            <returns>
            Returns the UserInterfaceSection object used to manage the new 
            user control object.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.AddAutomaticUserInterfaceSection(System.String,System.Int32)">
            <summary>
            Add a new automatic user interface section, Field values which include
            prompts will be automatically added to this section.
            </summary>
            <param name="caption">Expandable tab caption.</param>
            <param name="id">Tab id which may be used later on to reference this tab.</param>
            <returns>
            Returns true if the automatic tab section was added otherwise; returns
            false on error.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.GetParameter(System.String)">
            <summary>
            Query the content instance for the value of a given named parameter.
            If you do not support this parameter, call the base class.
            </summary>
            <param name="parameterName">Name of the parameter</param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.SetParameter(System.String,System.Object,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the named parameter value for this content instance.
            If you do not support this parameter, call the base class.
            </summary>
            <param name="parameterName"></param>
            <param name="value"></param>
            <param name="changeContexts"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.GetChildSlotParameter(System.String,System.String)">
            <summary>
            Extra requirements are a way of specifying extra functionality on parameters in the automatic UI.
            Implement this function to specify additional functionality for automatic UI sections or the texture summary.
            See IAutoUIExtraRequirements.h in the C++ RDK for string definitions for the parameter names.
            </summary>
            <param name="parameterName">The parameter or field internal name to which this query applies</param>
            <param name="childSlotName">The extra requirement parameter, as listed in IAutoUIExtraRequirements.h in the C++ RDK</param>
            <returns>
            Call the base class if you do not support the extra requirement parameter.
            Current supported return values are (int, bool, float, double, string, Guid, Color, Vector3d, Point3d, DateTime)
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.SetChildSlotParameter(System.String,System.String,System.Object,Rhino.Render.RenderContent.ExtraRequirementsSetContexts)">
            <summary>
            Extra requirements are a way of specifying extra functionality on parameters in the automatic UI.
            Implement this function to support values being set from automatic UI sections or the texture summary.
            See IAutoUIExtraRequirements.h in the C++ RDK for string definitions for the parameter names.
            </summary>
            <param name="parameterName">The parameter or field internal name to which this query applies</param>
            <param name="childSlotName">The extra requirement parameter, as listed in IAutoUIExtraRequirements.h in the C++ RDK</param>
            <param name="value">The value to set this extra requirement parameter. You will typically use System.Convert to convert the value to the type you need</param>
            <param name="sc">The context of this operation.</param>
            <returns>Null variant if not supported.  Call the base class if you do not support the extra requirement paramter.</returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.ChildSlotOn(System.String)">
            <summary>
            Gets the on-ness property for the texture in the specified child slot.
            </summary>
            <param name="childSlotName">Child slot name for the child</param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.SetChildSlotOn(System.String,System.Boolean,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Sets the on-ness property for the texture in the specified child slot.
            </summary>
            <param name="childSlotName">Child slot name for the child</param>
            <param name="bOn">Value for the on-ness property.</param>
            <param name="cc">Context of the change</param>
        </member>
        <member name="M:Rhino.Render.RenderContent.ChildSlotAmount(System.String)">
            <summary>
            Gets the amount property for the texture in the specified child slot.  Values are typically from 0.0 - 100.0
            </summary>
            <param name="childSlotName">Child slot name for the child</param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.SetChildSlotAmount(System.String,System.Double,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Sets the amount property for the texture in the specified child slot.  Values are typically from 0.0 - 100.0
            </summary>
            <param name="childSlotName">Child slot name for the child</param>
            <param name="amount">Texture amount. Values are typically from 0.0 - 100.0</param>
            <param name="cc">Context of the change.</param>
        </member>
        <member name="M:Rhino.Render.RenderContent.MatchData(Rhino.Render.RenderContent)">
            <summary>
            Implement to transfer data from another content to this content during creation.
            </summary>
            <param name="oldContent">An old content object from which the implementation may harvest data.</param>
            <returns>Information about how much data was matched.</returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.GetShader(System.Guid,System.IntPtr)">
            <summary>
            See C++ RDK documentation - this is a pass through function that gives access to your own
            native shader.  .NET clients will more likely simply check the type of their content and call their own
            shader access functions
            If you overide this function, you must ensure that you call "IsCompatible" and return IntPtr.Zero is that returns false.
            </summary>
            <param name="renderEngineId">The render engine requesting the shader.</param>
            <param name="privateData">A pointer to the render engine's own context object.</param>
            <returns>A pointer to the unmanaged shader.</returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.ChildSlotNameFromParamName(System.String)">
             <summary>
             A "child slot" is the specific "slot" that a child (usually a texture) occupies.
             This is generally the "use" of the child - in other words, the thing the child
             operates on.  Some examples are "color", "transparency".
             </summary>
             <param name="paramName">The name of a parameter field. Since child textures will usually correspond with some
            parameter (they generally either replace or modify a parameter over UV space) these functions are used to
            specify which parameter corresponded with child slot.  If there is no correspondence, return the empty
            string.</param>
             <returns>
             The default behavior for these functions is to return the input string.
             Sub-classes may (in the future) override these functions to provide different mappings.
             </returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.ParamNameFromChildSlotName(System.String)">
            <summary>
            A "child slot" is the specific "slot" that a child (usually a texture) occupies.
            This is generally the "use" of the child - in other words, the thing the child
            operates on.  Some examples are "color", "transparency".
            </summary>
            <param name="childSlotName">The named of the child slot to receive the parameter name for.</param>
            <returns>The default behaviour for these functions is to return the input string.  Sub-classes may (in the future) override these functions to provide different mappings.</returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.DeleteChild(System.String,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            
            </summary>
            <param name="childSlotName"></param>
            <param name="changeContexts">
            Currently ignored, reserved for future use
            </param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.DeleteAllChildren(Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            
            </summary>
            <param name="changeContexts">
            Currently ignored, reserved for future use
            </param>
        </member>
        <member name="M:Rhino.Render.RenderContent.SetChild(Rhino.Render.RenderContent,System.String,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set another content as a child of this content. This content may or may
            not be attached to a document.  If this content already has a child
            with the specified child slot name, that child will be deleted.  If
            this content is not attached to a document, the child will be added
            without sending any events.  If this content is attached to a document,
            the necessary events will be sent to update the UI.
            Note:
              Do not call this method to add children in your constructor. If you
              want to add default children, you should override Initialize() and add
              them there.
            </summary>
            <param name="renderContent">
            Child content to add to this content. If pChild is NULL, the function
            will fail.  If pChild is already attached to a document, the function
            will fail.  If pChild is already a child of this or another content,
            the function will fail.
            </param>
            <param name="childSlotName">
            The name that will be assigned to this child slot. The child slot name
            cannot be an empty string. If it is, the function will fail.
            </param>
            <param name="changeContexts">
            </param>
            <returns>
            Returns true if the content was added or the child slot with this name
            was modified otherwise; returns false.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.NewRenderContent(System.Guid,System.Type)">
            <summary>
            Create content from type Id, called by the NewRenderContentCallbackEvent
            methods to create a .NET object pointer of a specific type from a class
            type Guid.
            </summary>
            <param name="typeId">The class GUID property to look up</param>
            <param name="isSubclassOf">The created content must be this type</param>
            <returns>Valid content object if the typeId is found otherwise null.</returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.IsFactoryProductAcceptableAsChild(System.Guid,System.String,System.String)">
            <summary>
            Override this method to restrict the type of acceptable child content.
            The default implementation of this method just returns true.
            </summary>
            <param name="kindId"></param>
            <param name="factoryKind"></param>
            <param name="childSlotName">
            </param>
            <returns>
            Return true only if content with the specified kindId can be  accepted
            as a child in the specified child slot.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderContent.Icon(System.Drawing.Size)">
            <summary>
            Icon to display in the content browser, this bitmap needs to be valid for
            the life of this content object, the content object that returns the bitmap
            is responsible for disposing of the bitmap.
            </summary>
            <param name="size">
            Requested icon size
            </param>
            <returns>
            Return Icon to display in the content browser.
            </returns>
        </member>
        <member name="P:Rhino.Render.RenderContent.Fields">
            <summary>
            Rhino.Render.Fields FieldDictionary which provides access to setting
            and retrieving field values.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderContent.TypeName">
            <summary>
            Name for your content type.  ie. "My .net Texture"
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderContent.TypeDescription">
            <summary>
            Description for your content type.  ie.  "Procedural checker pattern"
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderContent.Name">
            <summary>
            Instance name for this content.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderContent.Notes">
            <summary>
            Notes for this content.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderContent.Id">
            <summary>
            Instance identifier for this content.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderContent.TopLevel">
            <summary>
            Returns true if this content has no parent, false if it is the child of another content.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderContent.InDocument">
            <summary>
            Returns true if this content is a resident of one of the persistent lists.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderContent.Hidden">
            <summary>
            Determines if the content has the hidden flag set.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderContent.Current">
            <summary>
            Determines if the content is considered the "Current" content - currently only used for Environments.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderContent.Parent">
            <summary>
            Returns the top content in this parent/child chain.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderContent.TopLevelParent">
            <summary>
            Returns the top content in this parent/child chain.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderContent.Document">
            <summary>
            Get the document this content belongs to or null if the content has not
            yet been added to a document.  This will be null when content is
            generated for browsers or preview generation.
            </summary>
        </member>
        <member name="E:Rhino.Render.RenderContent.ContentAdded">
            <summary>
            Used to monitor render content addition to the document.
            </summary>
        </member>
        <member name="E:Rhino.Render.RenderContent.ContentRenamed">
            <summary>
            Used to monitor render content renaming in the document.
            </summary>
        </member>
        <member name="E:Rhino.Render.RenderContent.ContentDeleting">
            <summary>
            Used to monitor render content deletion from the document.
            </summary>
        </member>
        <member name="E:Rhino.Render.RenderContent.ContentReplacing">
            <summary>
            Used to monitor render content replacing in the document.
            </summary>
        </member>
        <member name="E:Rhino.Render.RenderContent.ContentReplaced">
            <summary>
            Used to monitor render content replacing in the document.
            </summary>
        </member>
        <member name="E:Rhino.Render.RenderContent.ContentChanged">
            <summary>
            Used to monitor render content modifications.
            </summary>
        </member>
        <member name="E:Rhino.Render.RenderContent.ContentFieldChanged">
            <summary>
            This event is raised when a field value is modified.
            </summary>
        </member>
        <member name="E:Rhino.Render.RenderContent.ContentUpdatePreview">
            <summary>
            Used to monitor render content preview updates.
            </summary>
        </member>
        <member name="E:Rhino.Render.RenderContent.CurrentRenderContentChanged">
            <summary>
            Used to monitor render content preview updates.
            </summary>
        </member>
        <member name="E:Rhino.Render.RenderContent.ContentTypeAdded">
            <summary>
            Used to monitor render content types being registered.
            </summary>
        </member>
        <member name="E:Rhino.Render.RenderContent.ContentTypeDeleting">
            <summary>
            Used to monitor render content types being registered.
            </summary>
        </member>
        <member name="E:Rhino.Render.RenderContent.ContentTypeDeleted">
            <summary>
            Used to monitor render content types being registered.
            </summary>
        </member>
        <member name="T:Rhino.Render.RenderContent.StringIds">
            <summary>
            Internal string ids to be used in the GetString method.
            </summary>
        </member>
        <member name="T:Rhino.Render.RenderContent.MatchDataResult">
            <summary>
            Return values for MatchData function
            </summary>
        </member>
        <member name="T:Rhino.Render.RenderContent.ChangeChildContentFlags">
            Delete a child content.
            	\param parentContent is the content whose child is to be deleted. This must be an
            	RDK-owned content that is in the persistent content list (either top-level or child).
            	\param wszChildSlotName is the child-slot name of the child to be deleted.
            	\return \e true if successful, else \e false. 
        </member>
        <member name="F:Rhino.Render.RenderContent.ChangeChildContentFlags.AllowNone">
            <summary>
            Allow (none) item to be displayed in dialog.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.ChangeChildContentFlags.AutoEdit">
            <summary>
            Automatically open new content in thumbnail editor.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.ChangeChildContentFlags.HarvestMask">
            <summary>
            Mask to use to isolate harvesting flags.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.ChangeChildContentFlags.HarvestUseOpt">
            <summary>
            Use Renderer Support option to decide about harvesting.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.ChangeChildContentFlags.HarvestAlways">
            <summary>
            Always copy similar parameters from old child.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.ChangeChildContentFlags.HarvestNever">
            <summary>
            Never copy similar parameters from old child.
            </summary>
        </member>
        <member name="T:Rhino.Render.RenderContent.ParameterTypes">
            Change a content's child by allowing the user to choose the new content type from a
                  content browser dialog. The child is created if it does not exist, otherwise the old
                  child is deleted and replaced by the new child.
                  \param parentContent is the content whose child is to be manipulated. This must be an
                  RDK-owned content that is in the persistent content list (either top-level or child).
                  \param wszChildSlotName is the child-slot name of the child to be manipulated.
                  \param allowedKinds determines which content kinds are allowed to be chosen from the content browser dialog.
                  \param uFlags is a set of flags for controlling the content browser dialog.
                  \return \e true if successful, \e false if it fails or if the user cancels. 
        </member>
        <member name="F:Rhino.Render.RenderContent.ExtraRequirementsSetContexts.UI">
            <summary>
            Setting extra requirement as a result of user activity.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.ExtraRequirementsSetContexts.Drop">
            <summary>
            Setting extra requirement as a result of drag and drop.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.ExtraRequirementsSetContexts.Program">
            <summary>
            Setting extra requirement as a result of other (non-user) program activity.
            </summary>
        </member>
        <member name="T:Rhino.Render.RenderContent.ChangeContexts">
            <summary>
            Context of a change to content parameters.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.ChangeContexts.UI">
            <summary>
            Change occurred as a result of user activity in the content's UI.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.ChangeContexts.Drop">
            <summary>
            Change occurred as a result of drag and drop.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.ChangeContexts.Program">
            <summary>
            Change occurred as a result of internal program activity.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.ChangeContexts.Ignore">
            <summary>
            Change can be disregarded.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.ChangeContexts.Tree">
            <summary>
            Change occurred within the content tree (e.g., nodes reordered).
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.ChangeContexts.Undo">
            <summary>
            Change occurred as a result of an undo.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.ChangeContexts.FieldInit">
            <summary>
            Change occurred as a result of a field initialization.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderContent.ChangeContexts.Serialize">
            <summary>
            Change occurred during serialization (loading).
            </summary>
        </member>
        <member name="T:Rhino.Render.RenderContent.NewRenderContentCallbackEvent">
            <summary>
            Function pointer to pass to the C++ wrapper, there is one of these for 
            each of RenderMaterail, RenderTexture and RenderEnvironment.
            </summary>
            <param name="typeId">Class type GUID custom attribute</param>
            <returns>Returns a new C++ pointer of the requested content type.</returns>
        </member>
        <member name="T:Rhino.Render.Fields.FieldDictionary">
            <summary>
            Dictionary containing RenderContent data fields, add fields to this
            dictionary in your derived RenderContent classes constructor.  Get field
            values using the TryGet[data type]() methods and set them using the Set()
            method.
            </summary>
            <example>
            [System.Runtime.InteropServices.Guid("ABE4059B-9BD7-451C-91B2-67C2F188860A")]
            public class CustomMaterial : RenderMaterial
            {
              public override string TypeName { get { return "CSharp Custom Material"; } }
              public override string TypeDescription { get { return "My first custom .NET material"; } }
            
              public CustomMaterial()
              {
                Fields.AddField("bool", false, "Yes/No");
                Fields.AddField("color", Rhino.Display.Color4f.White, "Color");
              }
            }
            </example>
        </member>
        <member name="F:Rhino.Render.Fields.FieldDictionary.m_content">
            <summary>
            RenderContent that owns this dictionary.
            </summary>
        </member>
        <member name="F:Rhino.Render.Fields.FieldDictionary.m_dictionary">
            <summary>
            Field dictionary used to store and access field values.
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.#ctor(Rhino.Render.RenderContent)">
            <summary>
            Internal constructor, this object should only be created by the
            RenderContent constructor.
            </summary>
            <param name="content">Owner of this dictionary</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.InternalDispose">
            <summary>
            Clean up the Field C++ pointers
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.FieldFromContent(System.String)">
            <summary>
            Search the underlying C++ content objects field list and return a
            temporary Field object which can be used to access the field data.
            The Field object can safely be disposed of when done.
            </summary>
            <param name="key">Field dictionary key, it is case insensitive.</param>
            <returns>
            Returns a temporary Field pointer attached to the C++ field if it is
            found otherwise; returns null if it is not found.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.FindField(System.String,System.Boolean)">
            <summary>
            Search dictionary for field that matches the key name, if the field is
            not found in the runtime dictionary and searchContent is true the check
            the content for the field, if the field is found on the content object
            and addToDictionary is true then add it to the dictionary.
            </summary>
            <param name="key">Look for a field with a matching Key value</param>
            <param name="searchContent">If this is true and the field is not found
            in the runtime dictionary call FindContentField to search the content
            object for the field.
            </param>
            <returns>Content field associated with the requested key or null if the
            field is not found.</returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.ContainsField(System.String)">
            <summary>
            Call this method to determine if a this FieldsList contains a field
            with the specified field name.
            </summary>
            <param name="fieldName">Field to search for</param>
            <returns>
            Returns true if a field with that matches fieldName is found or false
            if it is not found.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.GetField(System.String)">
            <summary>
            Call this method to get the field with the matching name.
            </summary>
            <param name="fieldName">Field name to search for.</param>
            <returns>
            If the field exists in the Fields dictionary then the field is returned
            otherwise; null is returned.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.AddField(Rhino.Render.Fields.Field)">
            <summary>
            Add a new Field to the dictionary.  Will throw an exception if the key
            is already in the dictionary or if value is not a supported type.
            </summary>
            <param name="field">
            The new Field object to add, this will not create the Fields C++
            pointer, that happens later on after the dictionary C++ object has
            been created.
            </param>
            <returns>Returns the newly added Field object.</returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,System.String)">
            <summary>
            Add a new StringField to the dictionary.  This will be a data only
            field and not show up in the content browsers.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,System.String,System.String)">
            <summary>
            Add a new StringField to the dictionary.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.AddTextured(System.String,System.String,System.String)">
            <summary>
            Add a new StringField to the dictionary. This overload will cause the
            field to be tagged as "textured" so that the texturing UI will appear
            in automatic UIs.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,System.Boolean)">
            <summary>
            Add a new BoolField to the dictionary. This will be a data only field
            and not show up in the content browsers.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,System.Boolean,System.String)">
            <summary>
            Add a new BoolField to the dictionary.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.AddTextured(System.String,System.Boolean,System.String)">
            <summary>
            Add a new BoolField to the dictionary. This overload will cause the
            field to be tagged as "textured" so that the texturing UI will appear
            in automatic UIs.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,System.Int32)">
            <summary>
            Add a new IntField to the dictionary. This will be a data only field
            and not show up in the content browsers.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,System.Int32,System.String)">
            <summary>
            Add a new IntField to the dictionary.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.AddTextured(System.String,System.Int32,System.String)">
            <summary>
            Add a new IntField to the dictionary. This overload will cause the
            field to be tagged as "textured" so that the texturing UI will appear
            in automatic UIs.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,System.Single)">
            <summary>
            Add a new FloatField to the dictionary. This will be a data only field
            and not show up in the content browsers.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,System.Single,System.String)">
            <summary>
            AddField a new FloatField to the dictionary.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.AddTextured(System.String,System.Single,System.String)">
            <summary>
            Add a new FloatField to the dictionary. This overload will cause the
            field to be tagged as "textured" so that the texturing UI will appear
            in automatic UIs.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,System.Double)">
            <summary>
            AddField a new DoubleField to the dictionary. This will be a data only
            field and not show up in the content browsers.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,System.Double,System.String)">
            <summary>
            Add a new DoubleField to the dictionary.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.AddTextured(System.String,System.Double,System.String)">
            <summary>
            Add a new DoubleField to the dictionary. This overload will cause the
            field to be tagged as "textured" so that the texturing UI will appear
            in automatic UIs.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,Rhino.Display.Color4f)">
            <summary>
            Add a new Color4fField to the dictionary. This will be a data only
            field and not show up in the content browsers.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,Rhino.Display.Color4f,System.String)">
            <summary>
            Add a new Color4fField to the dictionary.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.AddTextured(System.String,Rhino.Display.Color4f,System.String)">
            <summary>
            Add a new Color4fField to the dictionary. This overload will cause the
            field to be tagged as "textured" so that the texturing UI will appear
            in automatic UIs.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,System.Drawing.Color)">
            <summary>
            Add a new Color4fField to the dictionary. This will be a data only
            field and not show up in the content browsers.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,System.Drawing.Color,System.String)">
            <summary>
            Add a new Color4fField to the dictionary.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.AddTextured(System.String,System.Drawing.Color,System.String)">
            <summary>
            Add a new Color4fField to the dictionary. This overload will cause the
            field to be tagged as "textured" so that the texturing UI will appear
            in automatic UIs.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,Rhino.Geometry.Vector2d)">
            <summary>
            Add a new Vector2dField to the dictionary. This will be a data only
            field and not show up in the content browsers.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,Rhino.Geometry.Vector2d,System.String)">
            <summary>
            Add a new Vector2dField to the dictionary.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.AddTextured(System.String,Rhino.Geometry.Vector2d,System.String)">
            <summary>
            Add a new Vector2dField to the dictionary. This overload will cause the
            field to be tagged as "textured" so that the texturing UI will appear
            in automatic UIs.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,Rhino.Geometry.Vector3d)">
            <summary>
            Add a new Vector3dField to the dictionary. This will be a data only
            field and not show up in the content browsers.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,Rhino.Geometry.Vector3d,System.String)">
            <summary>
            Add a new Vector3dField to the dictionary.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.AddTextured(System.String,Rhino.Geometry.Vector3d,System.String)">
            <summary>
            Add a new Vector3dField to the dictionary. This overload will cause the
            field to be tagged as "textured" so that the texturing UI will appear
            in automatic UIs.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,Rhino.Geometry.Point2d)">
            <summary>
            Add a new Point2dField to the dictionary. This will be a data only
            field and not show up in the content browsers.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,Rhino.Geometry.Point2d,System.String)">
            <summary>
            Add a new Point2dField to the dictionary.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.AddTextured(System.String,Rhino.Geometry.Point2d,System.String)">
            <summary>
            Add a new Point2dField to the dictionary. This overload will cause the
            field to be tagged as "textured" so that the texturing UI will appear
            in automatic UIs.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,Rhino.Geometry.Point3d)">
            <summary>
            Add a new Point3dField to the dictionary. This will be a data only
            field and not show up in the content browsers.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,Rhino.Geometry.Point3d,System.String)">
            <summary>
            Add a new Point3dField to the dictionary.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.AddTextured(System.String,Rhino.Geometry.Point3d,System.String)">
            <summary>
            Add a new Point3dField to the dictionary. This overload will cause the
            field to be tagged as "textured" so that the texturing UI will appear
            in automatic UIs.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,Rhino.Geometry.Point4d)">
            <summary>
            Add a new Point4dField to the dictionary. This will be a data only
            field and not show up in the content browsers.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,Rhino.Geometry.Point4d,System.String)">
            <summary>
            Add a new Point4dField to the dictionary.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.AddTextured(System.String,Rhino.Geometry.Point4d,System.String)">
            <summary>
            Add a new Point4dField to the dictionary. This overload will cause the
            field to be tagged as "textured" so that the texturing UI will appear
            in automatic UIs.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,System.Guid)">
            <summary>
            Add a new GuidField to the dictionary. This will be a data only field
            and not show up in the content browsers.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,System.Guid,System.String)">
            <summary>
            Add a new GuidField to the dictionary.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.AddTextured(System.String,System.Guid,System.String)">
            <summary>
            Add a new GuidField to the dictionary. This overload will cause the
            field to be tagged as "textured" so that the texturing UI will appear
            in automatic UIs.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,Rhino.Geometry.Transform)">
            <summary>
            Add a new TransformField to the dictionary. This will be a data only
            field and not show up in the content browsers.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,Rhino.Geometry.Transform,System.String)">
            <summary>
            Add a new TransformField to the dictionary.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.AddTextured(System.String,Rhino.Geometry.Transform,System.String)">
            <summary>
            Add a new TransformField to the dictionary. This overload will cause
            the field to be tagged as "textured" so that the texturing UI will
            appear in automatic UIs.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,System.DateTime)">
            <summary>
            Add a new DateTimeField to the dictionary. This will be a data only
            field and not show up in the content browsers.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,System.DateTime,System.String)">
            <summary>
            Add a new DateTimeField to the dictionary.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.AddTextured(System.String,System.DateTime,System.String)">
            <summary>
            Add a new DateTimeField to the dictionary. This overload will cause the
            field to be tagged as "textured" so that the texturing UI will appear
            in automatic UIs.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <param name="prompt">
            Prompt to display in the user interface (Content Browsers) if this
            is null or an empty string the this field is a data only field and will
            not appear in the user interface.
            </param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Add(System.String,System.Byte[])">
            <summary>
            AddField a new ByteArrayField to the dictionary. This will be a data
            only field and not show up in the content browsers.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">Initial value for this field.</param>
            <returns></returns>
            <exception cref="T:System.ArgumentException">
            An element with the same key already exists in the dictionary
            </exception>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.SetHelper``1(System.String,``0)">
            <summary>
            Set the field value with a change notification of 
            RenderContent.ChangeContexts.Program.  Will throw an exception if the
            key name is invalid or if T is not a supported data type.
            </summary>
            <typeparam name="T">Data type of the value parameter.</typeparam>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.SetHelper``1(System.String,``0,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw an exception if the key name is invalid or if
            T is not a supported data type.
            </summary>
            <typeparam name="T">Data type of the value parameter.</typeparam>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.String)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.String,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.Boolean)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.Boolean,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.Int32)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.Int32,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.Single)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.Single,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.Double)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.Double,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,Rhino.Display.Color4f)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,Rhino.Display.Color4f,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.Drawing.Color)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.Drawing.Color,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,Rhino.Geometry.Vector2d)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,Rhino.Geometry.Vector2d,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,Rhino.Geometry.Vector3d)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,Rhino.Geometry.Vector3d,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,Rhino.Geometry.Point2d)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,Rhino.Geometry.Point2d,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,Rhino.Geometry.Point3d)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,Rhino.Geometry.Point3d,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,Rhino.Geometry.Point4d)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,Rhino.Geometry.Point4d,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.Guid)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.Guid,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,Rhino.Geometry.Transform)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,Rhino.Geometry.Transform,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.DateTime)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.DateTime,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.Byte[])">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.Set(System.String,System.Byte[],Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw a InvalidOperationException exception if the key
            name is not valid.
            </summary>
            <param name="key">Key name for the field value to change.</param>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.SetTag(System.String,System.Object)">
            <summary>
            Sets an object that contains data to associate with the field.
            </summary>
            <param name="key">Key name for the field to tag.</param>
            <param name="tag">Data to associate with the field.</param>
            <returns>True if the field is found and the tag was set otherwise false is returned.</returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.TryGetTag(System.String,System.Object@)">
            <summary>
            Gets object that contains data associate with a field.
            </summary>
            <param name="key">Key name of the field to get.</param>
            <param name="tag">Data associated with the field.</param>
            <returns>
            Returns true if the field is found and its tag was retrieved otherwise;
            returns false.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.TryGetValue(System.String,System.String@)">
            <summary>
            Find a field with the specified key and get its value if found.
            </summary>
            <param name="key">Key name of the field to get a value for.</param>
            <param name="value">Output parameter which will receive the field value.</param>
            <returns>
            Returns true if the key is found and the value parameter is set to the
            field value.  Returns false if the field was not found.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.TryGetValue(System.String,System.Boolean@)">
            <summary>
            Find a field with the specified key and get its value if found.
            </summary>
            <param name="key">Key name of the field to get a value for.</param>
            <param name="value">Output parameter which will receive the field value.</param>
            <returns>
            Returns true if the key is found and the value parameter is set to the
            field value.  Returns false if the field was not found.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.TryGetValue(System.String,System.Int32@)">
            <summary>
            Find a field with the specified key and get its value if found.
            </summary>
            <param name="key">Key name of the field to get a value for.</param>
            <param name="value">Output parameter which will receive the field value.</param>
            <returns>
            Returns true if the key is found and the value parameter is set to the
            field value.  Returns false if the field was not found.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.TryGetValue(System.String,System.Double@)">
            <summary>
            Find a field with the specified key and get its value if found.
            </summary>
            <param name="key">Key name of the field to get a value for.</param>
            <param name="value">Output parameter which will receive the field value.</param>
            <returns>
            Returns true if the key is found and the value parameter is set to the
            field value.  Returns false if the field was not found.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.TryGetValue(System.String,System.Single@)">
            <summary>
            Find a field with the specified key and get its value if found.
            </summary>
            <param name="key">Key name of the field to get a value for.</param>
            <param name="value">Output parameter which will receive the field value.</param>
            <returns>
            Returns true if the key is found and the value parameter is set to the
            field value.  Returns false if the field was not found.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.TryGetValue(System.String,Rhino.Display.Color4f@)">
            <summary>
            Find a field with the specified key and get its value if found.
            </summary>
            <param name="key">Key name of the field to get a value for.</param>
            <param name="value">Output parameter which will receive the field value.</param>
            <returns>
            Returns true if the key is found and the value parameter is set to the
            field value.  Returns false if the field was not found.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.TryGetValue(System.String,System.Drawing.Color@)">
            <summary>
            Find a field with the specified key and get its value if found.
            </summary>
            <param name="key">Key name of the field to get a value for.</param>
            <param name="value">Output parameter which will receive the field value.</param>
            <returns>
            Returns true if the key is found and the value parameter is set to the
            field value.  Returns false if the field was not found.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.TryGetValue(System.String,Rhino.Geometry.Vector2d@)">
            <summary>
            Find a field with the specified key and get its value if found.
            </summary>
            <param name="key">Key name of the field to get a value for.</param>
            <param name="value">Output parameter which will receive the field value.</param>
            <returns>
            Returns true if the key is found and the value parameter is set to the
            field value.  Returns false if the field was not found.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.TryGetValue(System.String,Rhino.Geometry.Vector3d@)">
            <summary>
            Find a field with the specified key and get its value if found.
            </summary>
            <param name="key">Key name of the field to get a value for.</param>
            <param name="value">Output parameter which will receive the field value.</param>
            <returns>
            Returns true if the key is found and the value parameter is set to the
            field value.  Returns false if the field was not found.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.TryGetValue(System.String,Rhino.Geometry.Point2d@)">
            <summary>
            Find a field with the specified key and get its value if found.
            </summary>
            <param name="key">Key name of the field to get a value for.</param>
            <param name="value">Output parameter which will receive the field value.</param>
            <returns>
            Returns true if the key is found and the value parameter is set to the
            field value.  Returns false if the field was not found.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.TryGetValue(System.String,Rhino.Geometry.Point3d@)">
            <summary>
            Find a field with the specified key and get its value if found.
            </summary>
            <param name="key">Key name of the field to get a value for.</param>
            <param name="value">Output parameter which will receive the field value.</param>
            <returns>
            Returns true if the key is found and the value parameter is set to the
            field value.  Returns false if the field was not found.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.TryGetValue(System.String,Rhino.Geometry.Point4d@)">
            <summary>
            Find a field with the specified key and get its value if found.
            </summary>
            <param name="key">Key name of the field to get a value for.</param>
            <param name="value">Output parameter which will receive the field value.</param>
            <returns>
            Returns true if the key is found and the value parameter is set to the
            field value.  Returns false if the field was not found.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.TryGetValue(System.String,System.Guid@)">
            <summary>
            Find a field with the specified key and get its value if found.
            </summary>
            <param name="key">Key name of the field to get a value for.</param>
            <param name="value">Output parameter which will receive the field value.</param>
            <returns>
            Returns true if the key is found and the value parameter is set to the
            field value.  Returns false if the field was not found.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.TryGetValue(System.String,Rhino.Geometry.Transform@)">
            <summary>
            Find a field with the specified key and get its value if found.
            </summary>
            <param name="key">Key name of the field to get a value for.</param>
            <param name="value">Output parameter which will receive the field value.</param>
            <returns>
            Returns true if the key is found and the value parameter is set to the
            field value.  Returns false if the field was not found.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.TryGetValue(System.String,System.DateTime@)">
            <summary>
            Find a field with the specified key and get its value if found.
            </summary>
            <param name="key">Key name of the field to get a value for.</param>
            <param name="value">Output parameter which will receive the field value.</param>
            <returns>
            Returns true if the key is found and the value parameter is set to the
            field value.  Returns false if the field was not found.
            </returns>
        </member>
        <member name="M:Rhino.Render.Fields.FieldDictionary.TryGetValue(System.String,System.Byte[]@)">
            <summary>
            Find a field with the specified key and get its value if found.
            </summary>
            <param name="key">Key name of the field to get a value for.</param>
            <param name="value">Output parameter which will receive the field value.</param>
            <returns>
            Returns true if the key is found and the value parameter is set to the
            field value.  Returns false if the field was not found.
            </returns>
        </member>
        <member name="T:Rhino.Render.Fields.Field">
            <summary>
            Generic data fields used to add publicly accessible properties to
            RenderContent.FieldDictionary.  These should be created by calling a
            FieldDictaionary.Add() method on a Render content object.  These are
            allocated after the RenderContent object's C++ object is created and
            added to the underlying C++ objects content dictionary, who ever
            allocates a field is responsible for deleting it so these objects clean
            up the C++ pointers when they are disposed of.
            </summary>
        </member>
        <member name="F:Rhino.Render.Fields.Field.m_auto_delete">
            <summary>
            If this is true then the m_fieldPointer is deleted when this object is
            disposed of, if Attached is called when accessing data provided by
            another plug-in then a temporary version of this field will be returned
            and its value extracted by the RenderContent.FieldDictionary, in that
            Attach is called instead of CreateCppPointer() so the m_fieldPointer
            should not be deleted.
            </summary>
        </member>
        <member name="F:Rhino.Render.Fields.Field.m_initial_value">
            <summary>
            Place holder for the initial field value, this will get used by
            CreateCppPointer(), it will call Set(m_initialValue) after creating the
            C++ pointer to initialize the field value.
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.Field.Set``1(``0)">
            <summary>
            Set the field value with a change notification of 
            RenderContent.ChangeContexts.Program.  Will throw an exception if the
            key name is invalid or if T is not a supported data type.
            </summary>
            <typeparam name="T">Data type of the value parameter.</typeparam>
            <param name="value">New value for this field.</param>
        </member>
        <member name="M:Rhino.Render.Fields.Field.Set``1(``0,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set the field value and send the appropriate change notification to the
            render SDK.  Will throw an exception if the key name is invalid or if
            T is not a supported data type.
            </summary>
            <typeparam name="T">Data type of the value parameter.</typeparam>
            <param name="value">New value for this field.</param>
            <param name="changeContext">The reason why the value is changing.</param>
        </member>
        <member name="M:Rhino.Render.Fields.Field.ValueAsString">
            <summary>
            Get field value as a string.
            </summary>
            <returns>Returns the field value as a string if possible.</returns>
        </member>
        <member name="M:Rhino.Render.Fields.Field.ValueAsBool">
            <summary>
            Return field value as a bool.
            </summary>
            <returns>Returns field value as a bool. </returns>
        </member>
        <member name="M:Rhino.Render.Fields.Field.ValueAsInt">
            <summary>
            Return field value as integer.
            </summary>
            <returns>Return the field value as an integer.</returns>
        </member>
        <member name="M:Rhino.Render.Fields.Field.ValueAsDouble">
            <summary>
            Return field value as a double precision number.
            </summary>
            <returns>Return the field value as a double precision number.</returns>
        </member>
        <member name="M:Rhino.Render.Fields.Field.ValueAsFloat">
            <summary>
            Return field value as floating point number.
            </summary>
            <returns>Return the field value as an floating point number.</returns>
        </member>
        <member name="M:Rhino.Render.Fields.Field.ValueAsColor4f">
            <summary>
            Return field as a Rhino.Display.Color4f color value.
            </summary>
            <returns>Return field as a Rhino.Display.Color4f color value.</returns>
        </member>
        <member name="M:Rhino.Render.Fields.Field.ValueAsVector2d">
            <summary>
            Return field as a Rhino.Geometry.Vector2d color value.
            </summary>
            <returns>Return field as a Rhino.Geometry.Vector2d color value.</returns>
        </member>
        <member name="M:Rhino.Render.Fields.Field.ValueAsVector3d">
            <summary>
            Return field as a Rhino.Geometry.Vector3d color value.
            </summary>
            <returns>Return field as a Rhino.Geometry.Vector3d color value.</returns>
        </member>
        <member name="M:Rhino.Render.Fields.Field.ValueAsPoint2d">
            <summary>
            Return field as a Rhino.Geometry.Point2d color value.
            </summary>
            <returns>Return field as a Rhino.Geometry.Point2d color value.</returns>
        </member>
        <member name="M:Rhino.Render.Fields.Field.ValueAsPoint3d">
            <summary>
            Return field as a Rhino.Geometry.Point3d color value.
            </summary>
            <returns>Return field as a Rhino.Geometry.Point3d color value.</returns>
        </member>
        <member name="M:Rhino.Render.Fields.Field.ValueAsPoint4d">
            <summary>
            Return field as a Rhino.Geometry.Point4d color value.
            </summary>
            <returns>Return field as a Rhino.Geometry.Point4d color value.</returns>
        </member>
        <member name="M:Rhino.Render.Fields.Field.ValueAsGuid">
            <summary>
            Return field value as Guid.
            </summary>
            <returns>Return the field value as an Guid.</returns>
        </member>
        <member name="M:Rhino.Render.Fields.Field.ValueAsTransform">
            <summary>
            Return field as a Rhino.Geometry.Transform color value.
            </summary>
            <returns>Return field as a Rhino.Geometry.Transform color value.</returns>
        </member>
        <member name="M:Rhino.Render.Fields.Field.ValueAsDateTime">
            <summary>
            Return field as a DateTime value.
            </summary>
            <returns>Return field as a DateTime value.</returns>
        </member>
        <member name="M:Rhino.Render.Fields.Field.ValueAsByteArray">
            <summary>
            Return field as a byte array.
            </summary>
            <returns>Return field as a byte array.</returns>
        </member>
        <member name="M:Rhino.Render.Fields.Field.#ctor(Rhino.Render.RenderContent,System.IntPtr,System.String,System.String,System.Object,System.Boolean)">
            <summary>
            Field constructor
            </summary>
            <param name="renderContent">RenderContent whose Fields owns this field.</param>
            <param name="attachToPointer">C++ pointer to attach to.</param>
            <param name="key">Unique key for this field</param>
            <param name="prompt">Display string used by the user interface</param>
            <param name="initialValue">
            Initial value used to initialize the field after creating the C++
            pointer.
            </param>
            <param name="isTextured">Determines whether auto-UIs will show the texture control set</param>
        </member>
        <member name="M:Rhino.Render.Fields.Field.CreateCppPointer(Rhino.Render.RenderContent,System.IntPtr)">
            <summary>
            Create the RDK C++ field object and set its initial value, fields are
            added to a RenderContent.FieldDictionary in the RenderContent
            constructor before the RenderContent C++ pointer is created, the
            RenderContent C++ pointer is required when creating a field in order
            for the field to get added to the RenderContent C++ Field list so this
            method is called by RenderContent when it is safe to create the Field
            C++ pointers.
            </summary>
            <param name="content">RenderContent.FiledDictionary that owns this Field.</param>
            <param name="attachToPointer">Existing C++ pointer to attach to.</param>
        </member>
        <member name="M:Rhino.Render.Fields.Field.IneternalDispose">
            <summary>
            IDisposable required method
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.Field.FieldFromPointer(Rhino.Render.RenderContent,System.IntPtr,System.String)">
            <summary>
            Create a Field[data type] object from a content field pointer using its values
            variant type to figure out what kind of Field[data type] object to return.
            </summary>
            <param name="renderContent">RenderContent whose Fields dictionary the field belongs to. </param>
            <param name="fieldPointer">
            C++ pointer to the field object, will throw a ArgumentNullException if this
            value is null.
            </param>
            <param name="key">Key value for the new field</param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Render.Fields.Field.FieldPointer">
            <summary>
            C++ pointer associated with this object, used for data access.
            </summary>
        </member>
        <member name="P:Rhino.Render.Fields.Field.Key">
            <summary>
            Field key value string set by constructor
            </summary>
        </member>
        <member name="P:Rhino.Render.Fields.Field.Prompt">
            <summary>
            Optional UI prompt string set by constructor
            </summary>
        </member>
        <member name="P:Rhino.Render.Fields.Field.Tag">
            <summary>
            Gets or sets an object that contains data to associate with the field.
            </summary>
            <returns>
            An object that contains information that is associated with the field.
            </returns>
        </member>
        <member name="T:Rhino.Render.Fields.StringField">
            <summary>
            String field value class
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.StringField.#ctor(Rhino.Render.RenderContent,System.IntPtr,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="renderContent">RenderContent whose Fields owns this filed.</param>
            <param name="attachToPointer">Existing C++ pointer to attach to.</param>
            <param name="key">Field key name</param>
            <param name="prompt">Field user interface prompt string</param>
            <param name="value">Initial value for this string field</param>
            <param name="isTextured">Determines whether the texture control set is added to auto gen UIs for this field</param>
        </member>
        <member name="P:Rhino.Render.Fields.StringField.Value">
            <summary>
            Gets or sets the field value
            </summary>
        </member>
        <member name="T:Rhino.Render.Fields.BoolField">
            <summary>
            bool field value class
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.BoolField.#ctor(Rhino.Render.RenderContent,System.IntPtr,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="renderContent">RenderContent whose Fields owns this filed.</param>
            <param name="attachToPointer">Existing C++ pointer to attach to.</param>
            <param name="key">Field key name</param>
            <param name="prompt">Field user interface prompt string</param>
            <param name="value">Initial value for this string field</param>
            <param name="isTextured">Determines whether the texture control set is added to auto gen UIs for this field</param>
        </member>
        <member name="P:Rhino.Render.Fields.BoolField.Value">
            <summary>
            Gets or sets the field value
            </summary>
        </member>
        <member name="T:Rhino.Render.Fields.IntField">
            <summary>
            Integer field value class
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.IntField.#ctor(Rhino.Render.RenderContent,System.IntPtr,System.String,System.String,System.Int32,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="renderContent">RenderContent whose Fields owns this filed.</param>
            <param name="attachToPointer">Existing C++ pointer to attach to.</param>
            <param name="key">Field key name</param>
            <param name="prompt">Field user interface prompt string</param>
            <param name="value">Initial value for this IntField</param>
             <param name="isTextured">Determines whether the texture control set is added to auto gen UIs for this field</param>
        </member>
        <member name="P:Rhino.Render.Fields.IntField.Value">
            <summary>
            Gets or sets the field value
            </summary>
        </member>
        <member name="T:Rhino.Render.Fields.FloatField">
            <summary>
            float field value class
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.FloatField.#ctor(Rhino.Render.RenderContent,System.IntPtr,System.String,System.String,System.Single,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="renderContent">RenderContent whose Fields owns this filed.</param>
            <param name="attachToPointer">Existing C++ pointer to attach to.</param>
            <param name="key">Field key name</param>
            <param name="prompt">Field user interface prompt string</param>
            <param name="value">Initial value for this string field</param>
             <param name="isTextured">Determines whether the texture control set is added to auto gen UIs for this field</param>
        </member>
        <member name="P:Rhino.Render.Fields.FloatField.Value">
            <summary>
            Gets or sets the field value
            </summary>
        </member>
        <member name="T:Rhino.Render.Fields.DoubleField">
            <summary>
            double field value class
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.DoubleField.#ctor(Rhino.Render.RenderContent,System.IntPtr,System.String,System.String,System.Double,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="renderContent">RenderContent whose Fields owns this filed.</param>
            <param name="attachToPointer">Existing C++ pointer to attach to.</param>
            <param name="key">Field key name</param>
            <param name="prompt">Field user interface prompt string</param>
            <param name="value">Initial value for this string field</param>
             <param name="isTextured">Determines whether the texture control set is added to auto gen UIs for this field</param>
        </member>
        <member name="P:Rhino.Render.Fields.DoubleField.Value">
            <summary>
            Gets or sets the field value
            </summary>
        </member>
        <member name="T:Rhino.Render.Fields.Color4fField">
            <summary>
            Color4f field value class
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.Color4fField.#ctor(Rhino.Render.RenderContent,System.IntPtr,System.String,System.String,Rhino.Display.Color4f,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="renderContent">RenderContent whose Fields owns this filed.</param>
            <param name="attachToPointer">Existing C++ pointer to attach to.</param>
            <param name="key">Field key name</param>
            <param name="prompt">Field user interface prompt string</param>
            <param name="value">Initial value for this string field</param>
             <param name="isTextured">Determines whether the texture control set is added to auto gen UIs for this field</param>
        </member>
        <member name="M:Rhino.Render.Fields.Color4fField.#ctor(Rhino.Render.RenderContent,System.IntPtr,System.String,System.String,System.Drawing.Color,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="renderContent">RenderContent whose Fields owns this filed.</param>
            <param name="attachToPointer">Existing C++ pointer to attach to.</param>
            <param name="key">Field key name</param>
            <param name="prompt">Field user interface prompt string</param>
            <param name="value">Initial value for this string field</param>
             <param name="isTextured">Determines whether the texture control set is added to auto gen UIs for this field</param>
        </member>
        <member name="P:Rhino.Render.Fields.Color4fField.Value">
            <summary>
            Gets or sets the field value
            </summary>
        </member>
        <member name="P:Rhino.Render.Fields.Color4fField.SystemColorValue">
            <summary>
            Gets or sets the field value
            </summary>
        </member>
        <member name="T:Rhino.Render.Fields.Vector2dField">
            <summary>
            Vector2d field value class
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.Vector2dField.#ctor(Rhino.Render.RenderContent,System.IntPtr,System.String,System.String,Rhino.Geometry.Vector2d,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="renderContent">RenderContent whose Fields owns this filed.</param>
            <param name="attachToPointer">Existing C++ pointer to attach to.</param>
            <param name="key">Field key name</param>
            <param name="prompt">Field user interface prompt string</param>
            <param name="value">Initial value for this string field</param>
             <param name="isTextured">Determines whether the texture control set is added to auto gen UIs for this field</param>
        </member>
        <member name="P:Rhino.Render.Fields.Vector2dField.Value">
            <summary>
            Gets or sets the field value
            </summary>
        </member>
        <member name="T:Rhino.Render.Fields.Vector3dField">
            <summary>
            Vector3d field value class
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.Vector3dField.#ctor(Rhino.Render.RenderContent,System.IntPtr,System.String,System.String,Rhino.Geometry.Vector3d,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="renderContent">RenderContent whose Fields owns this filed.</param>
            <param name="attachToPointer">Existing C++ pointer to attach to.</param>
            <param name="key">Field key name</param>
            <param name="prompt">Field user interface prompt string</param>
            <param name="value">Initial value for this string field</param>
             <param name="isTextured">Determines whether the texture control set is added to auto gen UIs for this field</param>
        </member>
        <member name="P:Rhino.Render.Fields.Vector3dField.Value">
            <summary>
            Gets or sets the field value
            </summary>
        </member>
        <member name="T:Rhino.Render.Fields.Point2dField">
            <summary>
            Point2d field value class
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.Point2dField.#ctor(Rhino.Render.RenderContent,System.IntPtr,System.String,System.String,Rhino.Geometry.Point2d,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="renderContent">RenderContent whose Fields owns this filed.</param>
            <param name="attachToPointer">Existing C++ pointer to attach to.</param>
            <param name="key">Field key name</param>
            <param name="prompt">Field user interface prompt string</param>
            <param name="value">Initial value for this string field</param>
             <param name="isTextured">Determines whether the texture control set is added to auto gen UIs for this field</param>
        </member>
        <member name="P:Rhino.Render.Fields.Point2dField.Value">
            <summary>
            Gets or sets the field value
            </summary>
        </member>
        <member name="T:Rhino.Render.Fields.Point3dField">
            <summary>
            Point3d field value class
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.Point3dField.#ctor(Rhino.Render.RenderContent,System.IntPtr,System.String,System.String,Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="renderContent">RenderContent whose Fields owns this filed.</param>
            <param name="attachToPointer">Existing C++ pointer to attach to.</param>
            <param name="key">Field key name</param>
            <param name="prompt">Field user interface prompt string</param>
            <param name="value">Initial value for this string field</param>
             <param name="isTextured">Determines whether the texture control set is added to auto gen UIs for this field</param>
        </member>
        <member name="P:Rhino.Render.Fields.Point3dField.Value">
            <summary>
            Gets or sets the field value
            </summary>
        </member>
        <member name="T:Rhino.Render.Fields.Point4dField">
            <summary>
            Point4d field value class
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.Point4dField.#ctor(Rhino.Render.RenderContent,System.IntPtr,System.String,System.String,Rhino.Geometry.Point4d,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="renderContent">RenderContent whose Fields owns this filed.</param>
            <param name="attachToPointer">Existing C++ pointer to attach to.</param>
            <param name="key">Field key name</param>
            <param name="prompt">Field user interface prompt string</param>
            <param name="value">Initial value for this string field</param>
             <param name="isTextured">Determines whether the texture control set is added to auto gen UIs for this field</param>
        </member>
        <member name="P:Rhino.Render.Fields.Point4dField.Value">
            <summary>
            Gets or sets the field value
            </summary>
        </member>
        <member name="T:Rhino.Render.Fields.GuidField">
            <summary>
            Guid field value class
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.GuidField.#ctor(Rhino.Render.RenderContent,System.IntPtr,System.String,System.String,System.Guid,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="renderContent">RenderContent whose Fields owns this filed.</param>
            <param name="attachToPointer">Existing C++ pointer to attach to.</param>
            <param name="key">Field key name</param>
            <param name="prompt">Field user interface prompt string</param>
            <param name="value">Initial value for this string field</param>
             <param name="isTextured">Determines whether the texture control set is added to auto gen UIs for this field</param>
        </member>
        <member name="P:Rhino.Render.Fields.GuidField.Value">
            <summary>
            Gets or sets the field value
            </summary>
        </member>
        <member name="T:Rhino.Render.Fields.TransformField">
            <summary>
            Transform field value class
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.TransformField.#ctor(Rhino.Render.RenderContent,System.IntPtr,System.String,System.String,Rhino.Geometry.Transform,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="renderContent">RenderContent whose Fields owns this filed.</param>
            <param name="attachToPointer">Existing C++ pointer to attach to.</param>
            <param name="key">Field key name</param>
            <param name="prompt">Field user interface prompt string</param>
            <param name="value">Initial value for this string field</param>
             <param name="isTextured">Determines whether the texture control set is added to auto gen UIs for this field</param>
        </member>
        <member name="P:Rhino.Render.Fields.TransformField.Value">
            <summary>
            Gets or sets the field value
            </summary>
        </member>
        <member name="T:Rhino.Render.Fields.DateTimeField">
            <summary>
            DateTime field value class
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.DateTimeField.#ctor(Rhino.Render.RenderContent,System.IntPtr,System.String,System.String,System.DateTime,System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="renderContent">RenderContent whose Fields owns this filed.</param>
            <param name="attachToPointer">Existing C++ pointer to attach to.</param>
            <param name="key">Field key name</param>
            <param name="prompt">Field user interface prompt string</param>
            <param name="value">Initial value for this string field</param>
             <param name="isTextured">Determines whether the texture control set is added to auto gen UIs for this field</param>
        </member>
        <member name="P:Rhino.Render.Fields.DateTimeField.Value">
            <summary>
            Gets or sets the field value
            </summary>
        </member>
        <member name="T:Rhino.Render.Fields.ByteArrayField">
            <summary>
            ByteArray field value class
            </summary>
        </member>
        <member name="M:Rhino.Render.Fields.ByteArrayField.#ctor(Rhino.Render.RenderContent,System.IntPtr,System.String,System.String,System.Byte[],System.Boolean)">
            <summary>
            Constructor
            </summary>
            <param name="renderContent">RenderContent whose Fields owns this filed.</param>
            <param name="attachToPointer">Existing C++ pointer to attach to.</param>
            <param name="key">Field key name</param>
            <param name="prompt">Field user interface prompt string</param>
            <param name="value">Initial value for this string field</param>
             <param name="isTextured">Determines whether the texture control set is added to auto gen UIs for this field</param>
        </member>
        <member name="P:Rhino.Render.Fields.ByteArrayField.Value">
            <summary>
            Gets or sets the field value
            </summary>
        </member>
        <member name="T:Rhino.Render.ContentList`1">
            <summary>
            Base class that provides access to the document lists of RenderContent instances
            ie - the Material, Environment and Texture tables.
            </summary>
        </member>
        <member name="M:Rhino.Render.ContentList`1.FindInstance(System.Guid,System.Boolean)">
            <summary>
            Finds a content by its instance id.
            </summary>
            <param name="instanceId">Instance id of the content to find.</param>
            <param name="includeChildren">Specifies if children should be searched as well as top-level content.</param>
            <returns>The found content or null.</returns>
        </member>
        <member name="P:Rhino.Render.ContentList`1.Count">
            <summary>
            The number of top level content objects in this list.
            </summary>
        </member>
        <member name="P:Rhino.Render.ContentList`1.Id">
            <summary>
            The unique identifier for this list.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveList.#ctor(System.IntPtr)">
            <summary>
            This constructor gets called when attaching to an unmanaged pointer that the RDK
            passes to a virtual function, there is no clean up need in this case because the
            RDK takes care of freeing the pointer when it is done calling the virtual method.
            </summary>
            <param name="nativePointer"></param>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveList.ToMeshArray">
            <summary>
            Call this method to get a array of meshes, all primitives will get
            meshed and the meshes will get included in the returned array.
            </summary>
            <returns>
            Return an array of meshes from this list, this will convert all
            primitives to meshes.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveList.ToMaterialArray">
            <summary>
            Call this method to see if there are any RenderMaterials associated
            with the meshes.  Each primitive can optionally have a RenderMaterial
            associated with it, if the RenderMaterial is null then check for a
            RhinoObject.RenderMaterial.
            </summary>
            <returns>
            Return an array that of the same size as the ToMeshArray() containing
            the RenderMaterial associated with the mesh, may contain null entries
            if there is no RenderMaterial associated with the custom mesh.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveList.Add(Rhino.Geometry.Mesh,Rhino.Render.RenderMaterial)">
            <summary>
            Add mesh and material.
            </summary>
            <param name="mesh">Mesh to add.</param>
            <param name="material">
            Material to add, may be null if not needed.
            </param>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveList.Add(Rhino.Geometry.Sphere,Rhino.Render.RenderMaterial)">
            <summary>
            Add primitive sphere and material.
            </summary>
            <param name="sphere">Sphere to add.</param>
            <param name="material">
            Material to add, may be null if not needed.
            </param>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveList.Add(Rhino.Geometry.Cone,Rhino.Geometry.Plane,Rhino.Render.RenderMaterial)">
            <summary>
            Add primitive cone and material.
            </summary>
            <param name="cone">Cone to add.</param>
            <param name="truncation">
            The plane used to cut the cone (the non-apex end is kept). Should be
            equal to cone.plane if not truncated.
            </param>
            <param name="material">
            Material to add, may be null if not needed.
            </param>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveList.Add(Rhino.Geometry.PlaneSurface,Rhino.Render.RenderMaterial)">
            <summary>
            Add primitive plane and material.
            </summary>
            <param name="plane">Plane to add.</param>
            <param name="material">
            Material to add, may be null if not needed.
            </param>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveList.Add(Rhino.Geometry.Box,Rhino.Render.RenderMaterial)">
            <summary>
            Add primitive box and material.
            </summary>
            <param name="box">Box to add.</param>
            <param name="material">
            Material to add, may be null if not needed.
            </param>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveList.PrimitiveType(System.Int32)">
            <summary>
            Type of primitive object at this index.
            </summary>
            <param name="index">
            The zero based index of the item in the list.  Valid values are greater
            than or equal to 0 and less than Count.
            </param>
            <returns>
            Primitive type of the item at this index.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveList.Mesh(System.Int32)">
            <summary>
            Get the mesh for the primitive at the specified index. If the item at
            this index is a primitive type other than a mesh then it mesh
            representation is returned.
            </summary>
            <param name="index">
            The zero based index of the item in the list.  Valid values are greater
            than or equal to 0 and less than Count.
            </param>
            <returns>
            Returns the mesh for the primitive at the specified index. If the item
            at this index is a primitive type other than a mesh then it mesh
            representation is returned.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveList.TryGetSphere(System.Int32,Rhino.Geometry.Sphere@)">
            <summary>
            Call this method to get a box at the specified index.
            </summary>
            <param name="index">
            The zero based index of the item in the list.  Valid values are greater
            than or equal to 0 and less than Count.
            </param>
            <param name="sphere">
            Will contain the sphere at the requested index if the index is in range
            and the primitive at the requested index is a box.
            </param>
            <returns>
            Return true if the index is in range and the primitive at the requested
            index is a box otherwise returns false.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveList.TryGetBox(System.Int32,Rhino.Geometry.Box@)">
            <summary>
            Call this method to get a box at the specified index.
            </summary>
            <param name="index">
            The zero based index of the item in the list.  Valid values are greater
            than or equal to 0 and less than Count.
            </param>
            <param name="box">
            Will contain the box at the requested index if the index is in range
            and the primitive at the requested index is a box.
            </param>
            <returns>
            Return true if the index is in range and the primitive at the requested
            index is a box otherwise returns false.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveList.TryGetPlane(System.Int32,Rhino.Geometry.PlaneSurface@)">
            <summary>
            Call this method to get a box at the specified index.
            </summary>
            <param name="index">
            The zero based index of the item in the list.  Valid values are greater
            than or equal to 0 and less than Count.
            </param>
            <param name="plane">
            Will contain the plane at the requested index if the index is in range
            and the primitive at the requested index is a plane.
            </param>
            <returns>
            Return true if the index is in range and the primitive at the requested
            index is a plane otherwise returns false.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveList.TryGetCone(System.Int32,Rhino.Geometry.Cone@,Rhino.Geometry.Plane@)">
            <summary>
            Call this method to get a box at the specified index.
            </summary>
            <param name="index">
            The zero based index of the item in the list.  Valid values are greater
            than or equal to 0 and less than Count.
            </param>
            <param name="cone">
            Will contain the cone at the requested index if the index is in range
            and the primitive at the requested index is a box.
            </param>
            <param name="truncation">
            </param>
            <returns>
            Return true if the index is in range and the primitive at the requested
            index is a box otherwise returns false.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveList.Material(System.Int32)">
            <summary>
            Call this method to get the render material associated with the mesh at
            the specified index.  Will return null if there is no
            material associated with the requested mesh.
            </summary>
            <param name="index">
            The zero based index of the item in the list.  Valid values are greater
            than or equal to 0 and less than Count.
            </param>
            <returns>
            If there is a render material associated at the requested index then
            the material is returned otherwise null is returned.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveList.ConvertMeshesToTriangles">
            <summary>
            Convert mesh quad faces to triangle faces.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveList.Clear">
            <summary>
            Remove all primitives from this list
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderPrimitiveList.UseObjectsMappingChannels">
            <summary>
            Returns true if the texture mapping will be taken from the Rhino
            object otherwise; the texture mapping will use the texture coordinates
            on the mesh only.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderPrimitiveList.Count">
            <summary>
            Number of meshes in this list
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderPrimitiveList.RhinoObject">
            <summary>
            The Rhino object associated with this list
            </summary>
        </member>
        <member name="T:Rhino.Render.CustomRenderMeshProvider">
            <summary>
            You must call CustomRenderMeshProvider.RegisterProviders() from your
            plug-ins OnLoad override for each assembly containing a custom mesh
            provider.  Only publicly exported classes derived from
            CustomRenderMeshProvider with a public constructor that has no parameters
            will get registered.
            </summary>
        </member>
        <member name="M:Rhino.Render.CustomRenderMeshProvider.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:Rhino.Render.CustomRenderMeshProvider.WillBuildCustomMeshes(Rhino.DocObjects.ViewportInfo,Rhino.DocObjects.RhinoObject,System.Guid,System.Boolean)">
            <summary>
            Determines if custom render meshes will be built for a particular object.
            </summary>
            <param name="vp">The viewport being rendered.</param>
            <param name="obj">The Rhino object of interest.</param>
            <param name="requestingPlugIn">UUID of the RDK plug-in requesting the meshes.</param>
            <param name="preview">Type of mesh to build.</param>
            <returns>true if custom meshes will be built.</returns>
        </member>
        <member name="M:Rhino.Render.CustomRenderMeshProvider.BuildCustomMeshes(Rhino.DocObjects.ViewportInfo,Rhino.Render.RenderPrimitiveList,System.Guid,System.Boolean)">
            <summary>
            Build custom render mesh(es).
            </summary>
            <param name="vp">The viewport being rendered.</param>
            <param name="objMeshes">The meshes class to populate with custom meshes.</param>
            <param name="requestingPlugIn">UUID of the RDK plug-in requesting the meshes.</param>
            <param name="meshType">Type of mesh to build.</param>
            <returns>true if operation was successful.</returns>
        </member>
        <member name="M:Rhino.Render.CustomRenderMeshProvider.CreateCppObject(System.Guid)">
            <summary>
            RegisterProviders calls this method to create a runtime unmanaged
            pointer for each custom provider registered.
            </summary>
            <param name="pluginId"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.CustomRenderMeshProvider.FromSerialNumber(System.Int32)">
            <summary>
            This method is called by the virtual hooks to get the runtime managed
            object from a serial number.
            </summary>
            <param name="serialNumber"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.CustomRenderMeshProvider.RegisterProviders(System.Reflection.Assembly,System.Guid)">
            <summary>
            Call this method once from your plug-ins OnLoad override for each
            assembly containing a custom mesh provider.  Only publicly exported
            classes derived from CustomRenderMeshProvider with a public constructor
            that has no parameters will get registered.
            </summary>
            <param name="assembly">
            Assembly to search for valid CustomRenderMeshProvider derived classes.
            </param>
            <param name="pluginId">
            The plug-in that owns the custom mesh providers.
            </param>
        </member>
        <member name="M:Rhino.Render.CustomRenderMeshProvider.AllObjectsChanged">
            <summary>
            Call this method if your render meshes change.
            </summary>
        </member>
        <member name="M:Rhino.Render.CustomRenderMeshProvider.ObjectChanged(Rhino.DocObjects.RhinoObject)">
            <summary>
            
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Rhino.Render.CustomRenderMeshProvider.BoundingBox(Rhino.DocObjects.ViewportInfo,Rhino.DocObjects.RhinoObject,System.Guid,System.Boolean)">
            <summary>
            Returns a bounding box for the custom render meshes for the given object.
            </summary>
            <param name="vp">The viewport being rendered.</param>
            <param name="obj">The Rhino object of interest.</param>
            <param name="requestingPlugIn">UUID of the RDK plug-in requesting the meshes.</param>
            <param name="preview">Type of mesh to build.</param>
            <returns>A bounding box value.</returns>
        </member>
        <member name="P:Rhino.Render.CustomRenderMeshProvider.Name">
            <summary>
            The name of the provider for UI display.
            </summary>
        </member>
        <member name="F:Rhino.Render.DecalMapping.Planar">
            <summary>
            Planar mapping. Uses projection, origin, up and across vectors (not unitized).
            </summary>
        </member>
        <member name="F:Rhino.Render.DecalMapping.Cylindrical">
            <summary>
            Cylindrical mapping. Uses origin, up, across, height, radius, latitude start and stop.
            </summary>
        </member>
        <member name="F:Rhino.Render.DecalMapping.Spherical">
            <summary>
            Spherical mapping. Uses origin, up, across, radius, latitude/longitude start and stop.
            </summary>
        </member>
        <member name="F:Rhino.Render.DecalMapping.UV">
            <summary>
            UV mapping.
            </summary>
        </member>
        <member name="F:Rhino.Render.DecalProjection.Forward">
            <summary>Project forward</summary>
        </member>
        <member name="F:Rhino.Render.DecalProjection.Backward">
            <summary>Project backward</summary>
        </member>
        <member name="F:Rhino.Render.DecalProjection.Both">
            <summary>Project forward and backward</summary>
        </member>
        <member name="T:Rhino.Render.Decal">
            <summary>
            Represents a decal, or a picture that can be moved on an object.
            </summary>
        </member>
        <member name="M:Rhino.Render.Decal.UVBounds(System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            The UV bounds of the decal. Only used when mapping is UV.
            </summary>
        </member>
        <member name="M:Rhino.Render.Decal.TryGetColor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Display.Color4f@,Rhino.Geometry.Point2d@)">
            <summary>
            Blend color with the decal color at a given point.
            </summary>
            <param name="point">The point in space or, if the decal is uv-mapped, the uv-coordinate of that point.</param>
            <param name="normal">The face normal of the given point.</param>
            <param name="colInOut">The color to blend the decal color to.</param>
            <param name="uvOut">the UV on the texture that the color point was read from.</param>
            <returns>true if the given point hits the decal, else false.</returns>
        </member>
        <member name="P:Rhino.Render.Decal.Id">
            <summary>
            Gets the decal ID associated with this decal.
            </summary>
        </member>
        <member name="P:Rhino.Render.Decal.TextureInstanceId">
            <summary>
            Gets the texture ID for this decal.
            </summary>
        </member>
        <member name="P:Rhino.Render.Decal.DecalMapping">
            <summary>
            Gets the mapping of the decal.
            </summary>
        </member>
        <member name="P:Rhino.Render.Decal.DecalProjection">
            <summary>
            Gets the decal's projection. Used only when mapping is planar.
            </summary>
        </member>
        <member name="P:Rhino.Render.Decal.MapToInside">
            <summary>
            Used only when mapping is cylindrical or spherical.
            </summary>
            <value>true if texture is mapped to inside of sphere or cylinder, else \e false.</value>
        </member>
        <member name="P:Rhino.Render.Decal.Transparency">
            <summary>
            Gets the decal's transparency in the range 0 to 1.
            </summary>
        </member>
        <member name="P:Rhino.Render.Decal.Origin">
            <summary>
            Gets the origin of the decal in world space.
            </summary>
        </member>
        <member name="P:Rhino.Render.Decal.VectorUp">
            <summary>
            For cylindrical and spherical mapping, the vector is unitized.
            </summary>
            <returns>The 'up' vector of the decal. For planar mapping the length of the vector is relevant.</returns>
        </member>
        <member name="P:Rhino.Render.Decal.VectorAcross">
            <summary>
            Gets the vector across. For cylindrical and spherical mapping, the vector is unitized.
            </summary>
            <value>The 'across' vector of the decal. For planar mapping the length of the vector is relevant.</value>
        </member>
        <member name="P:Rhino.Render.Decal.Height">
            <summary>
            Gets the height of the decal. Only used when mapping is cylindrical.
            </summary>
        </member>
        <member name="P:Rhino.Render.Decal.Radius">
            <summary>
            Gets the radius of the decal. Only used when mapping is cylindrical or spherical.
            </summary>
        </member>
        <member name="P:Rhino.Render.Decal.StartLatitude">
            <summary>
            Gets the start latitude of the decal's sweep. Only used when mapping is cylindrical or spherical.
            </summary>
        </member>
        <member name="P:Rhino.Render.Decal.EndLatitude">
            <summary>
            Gets the stop latitude of the decal's sweep. Only used when mapping is cylindrical or spherical.
            </summary>
        </member>
        <member name="P:Rhino.Render.Decal.StartLongitude">
            <summary>
            Gets the start longitude of the decal's sweep. Only used when mapping is spherical.
            </summary>
        </member>
        <member name="P:Rhino.Render.Decal.EndLongitude">
            <summary>
            Gets the stop longitude of the decal's sweep. Only used when mapping is spherical.
            </summary>
        </member>
        <member name="T:Rhino.Render.Decals">
            <summary>Represents all the decals of an object.</summary>
        </member>
        <member name="M:Rhino.Render.Decals.Add(Rhino.Render.Decal)">
            <summary>
            Add a new Decal to the decals list, use Decal.Create to create
            a new decal instance to add.
            </summary>
            <param name="decal"></param>
            <returns></returns>
        </member>
        <member name="T:Rhino.Render.DecalEnumerator">
            <summary>Represents all the decals of an object.</summary>
        </member>
        <member name="T:DecalCreateParams">
            <summary>
            Used by RhinoObject.AddDecal() to create and add a decal
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderEnvironment.NewBasicEnvironment(Rhino.Render.SimulatedEnvironment)">
            <summary>
            Constructs a new <see cref="T:Rhino.Render.RenderEnvironment"/> from a <see cref="T:Rhino.Render.SimulatedEnvironment"/>.
            </summary>
            <param name="environment">The environment to create the basic environment from.</param>
            <returns>A new basic environment.</returns>
        </member>
        <member name="M:Rhino.Render.Utilities.SetDefaultRenderPlugIn(System.Guid)">
            <summary>
            Set default render application
            </summary>
            <param name="pluginId">ID of render plug-in</param>
            <returns>
            True if plug-in found and loaded successfully.  False if pluginId is
             invalid or was unable to load plug-in
            </returns>
        </member>
        <member name="P:Rhino.Render.Utilities.DefaultRenderPlugInId">
            <summary>
            Get the plug-in Id for the default render plug-in
            </summary>
        </member>
        <member name="P:Rhino.Render.Utilities.ShowIncompatibleMaterials">
            <summary>
            Specifies whether incompatible content should be shown in the corresponding editor.
            </summary>
        </member>
        <member name="P:Rhino.Render.Utilities.ShowIncompatibleEnvironments">
            <summary>
            Specifies whether incompatible content should be shown in the corresponding editor.
            </summary>
        </member>
        <member name="P:Rhino.Render.Utilities.ShowIncompatibleTextures">
            <summary>
            Specifies whether incompatible content should be shown in the corresponding editor.
            </summary>
        </member>
        <member name="P:Rhino.Render.Utilities.SafeFrameEnabled">
            <summary>
            Queries whether or not the Safe Frame is visible.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderMaterial.CreateBasicMaterial(Rhino.DocObjects.Material)">
            <summary>
            Constructs a new basic material from a <see cref="T:Rhino.DocObjects.Material">Material</see>.
            </summary>
            <param name="material">(optional)The material to create the basic material from.</param>
            <returns>A new basic material.</returns>
        </member>
        <member name="M:Rhino.Render.RenderMaterial.TextureChildSlotName(Rhino.Render.RenderMaterial.StandardChildSlots)">
            <summary>
            Override this function to provide information about which texture is used for
            the standard (ie - defined in ON_Texture) texture channels.
            </summary>
            <param name="slot">An valid slot.</param>
            <returns>The texture used for the channel.</returns>
        </member>
        <member name="M:Rhino.Render.RenderMaterial.SimulateMaterial(Rhino.DocObjects.Material@,System.Boolean)">
            <summary>
            Override this function to provide a Rhino.DocObjects.Material definition for this material
            to be used by other rendering engines including the display.
            </summary>
            <param name="simulation">Set the properties of the input basic material to provide the simulation for this material.</param>
            <param name="isForDataOnly">Called when only asking for a hash - don't write any textures to the disk - just provide the filenames they will get.</param>
        </member>
        <member name="P:Rhino.Render.RenderMaterial.DefaultPreviewGeometryType">
            <summary>
            Set or get the default geometry that appears in preview panes
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderMaterial.DefaultPreviewBackgroundType">
            <summary>
            Set or get the default scene background for the image that appears in
            preview panes
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderMaterial.DefaultPreviewSize">
            <summary>
            The default preview geometry size
            </summary>
        </member>
        <member name="T:Rhino.Render.RenderMaterial.StandardChildSlots">
            <summary>
            Defines enumerated constant values for use in <see cref="M:Rhino.Render.RenderMaterial.TextureChildSlotName(Rhino.Render.RenderMaterial.StandardChildSlots)"/> method.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderMaterial.StandardChildSlots.Diffuse">
            <summary>
            Corresponds to ON_Texture::bitmap_texture.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderMaterial.StandardChildSlots.Transparency">
            <summary>
            Corresponds to ON_Texture::transparancy_texture.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderMaterial.StandardChildSlots.Bump">
            <summary>
            Corresponds to ON_Texture::bump_texture.
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderMaterial.StandardChildSlots.Environment">
            <summary>
            Corresponds to ON_Texture::emap_texture.
            </summary>
        </member>
        <member name="T:Rhino.Render.RenderMaterial.BasicMaterialParameterNames">
            <summary>
            Parameter names for use in GetNamedParameter and SetNamedParameter with basic materials.
            </summary>
        </member>
        <member name="T:Rhino.Render.RenderMaterial.PreviewGeometryType">
            <summary>
            Geometry that appears in preview panes
            </summary>
        </member>
        <member name="T:Rhino.Render.RenderMaterial.PreviewBackgroundType">
            <summary>
            The default scene background for the image that appears in
            preview panes
            </summary>
        </member>
        <member name="T:Rhino.Render.PreviewSceneQuality">
            <summary>Quality levels when creating preview images</summary>
        </member>
        <member name="F:Rhino.Render.PreviewSceneQuality.RealtimeQuick">
            <summary>Very fast preview. Typically using the internal OpenGL preview generator.</summary>
        </member>
        <member name="F:Rhino.Render.PreviewSceneQuality.RefineFirstPass">
            <summary>Low quality rendering for quick preview.</summary>
        </member>
        <member name="F:Rhino.Render.PreviewSceneQuality.RefineSecondPass">
            <summary>Medium quality rendering for intermediate preview.</summary>
        </member>
        <member name="F:Rhino.Render.PreviewSceneQuality.RefineThirdPass">
            <summary>Full quality rendering (quality comes from user settings)</summary>
        </member>
        <member name="T:Rhino.Render.CreatePreviewReason">
            <summary>
            Reason the content preview is being generated
            </summary>
        </member>
        <member name="T:Rhino.Render.CreatePreviewEventArgs">
            <summary>Used in RenderPlugIn virtual CreatePreview function</summary>
        </member>
        <member name="P:Rhino.Render.CreatePreviewEventArgs.Reason">
            <summary>
            Reason the preview is getting generated
            </summary>
        </member>
        <member name="P:Rhino.Render.CreatePreviewEventArgs.PreviewImageSize">
            <summary>
            Pixel size of the image that is being requested for the preview scene
            </summary>
        </member>
        <member name="P:Rhino.Render.CreatePreviewEventArgs.Quality">
            <summary>
            Quality of the preview image that is being requested for the preview scene
            </summary>
        </member>
        <member name="P:Rhino.Render.CreatePreviewEventArgs.PreviewImage">
            <summary>
            Initially null.  If this image is set, then this image will be used for
            the preview.  If never set, the default internal simulation preview will
            be used.
            </summary>
        </member>
        <member name="P:Rhino.Render.CreatePreviewEventArgs.Cancel">
            <summary>
            Get set by Rhino if the preview generation should be canceled for this 
            </summary>
        </member>
        <member name="P:Rhino.Render.CreatePreviewEventArgs.Id">
            <summary>Unique Id for this scene.</summary>
        </member>
        <member name="P:Rhino.Render.CreatePreviewEventArgs.PreviewContent">
            <summary>The content being previewed.</summary>
        </member>
        <member name="P:Rhino.Render.CreatePreviewEventArgs.Environment">
            <summary>
            The environment that the previewed object is rendered in.
            </summary>
        </member>
        <member name="P:Rhino.Render.CreateTexture2dPreviewEventArgs.PreviewImageSize">
            <summary>
            Pixel size of the image that is being requested for the preview scene
            </summary>
        </member>
        <member name="P:Rhino.Render.CreateTexture2dPreviewEventArgs.PreviewImage">
            <summary>
            Initially null.  If this image is set, then this image will be used for
            the preview.  If never set, the default internal simulation preview will
            be used.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderPrimitive.Mesh">
            <summary>
            Returns the mesh associated with the object, this will mesh primitives
            and always return a mesh.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.RenderPrimitive.TryGetSphere(Rhino.Geometry.Sphere@)">
            <summary>
            Call this method to get a sphere primitive for this mesh.  If this
            meshes <see cref="P:Rhino.Render.RenderPrimitive.PrimitiveType"/> is not a <see cref="F:Rhino.Render.RenderPrimitiveType.Sphere"/>
            then the sphere parameter is set to <see cref="P:Rhino.Geometry.Sphere.Unset"/>.
            </summary>
            <param name="sphere">
            Gets set to the primitive sphere for this object on success. 
            </param>
            <returns>
            Returns true if <see cref="P:Rhino.Render.RenderPrimitive.PrimitiveType"/> is <see cref="F:Rhino.Render.RenderPrimitiveType.Sphere"/> and
            the sphere parameter was initialized otherwise returns false.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderPrimitive.TryGetBox(Rhino.Geometry.Box@)">
            <summary>
            Call this method to get a <see cref="T:Rhino.Geometry.Box"/> primitive for this mesh.  If this
            meshes <see cref="P:Rhino.Render.RenderPrimitive.PrimitiveType"/> is not a <see cref="F:Rhino.Render.RenderPrimitiveType.Box"/>
            then the box parameter is set to <see cref="P:Rhino.Geometry.Box.Empty"/>.
            </summary>
            <param name="box">
            Gets set to the box primitive for this object on success or <see cref="P:Rhino.Geometry.Box.Empty"/> on error.
            </param>
            <returns>
            Returns true if <see cref="P:Rhino.Render.RenderPrimitive.PrimitiveType"/> is <see cref="F:Rhino.Render.RenderPrimitiveType.Box"/> and
            the box parameter was initialized otherwise returns false.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderPrimitive.TryGetPlane(Rhino.Geometry.PlaneSurface@)">
            <summary>
            Call this method to get a <see cref="T:Rhino.Geometry.Plane"/> primitive for this mesh.  If this
            meshes <see cref="P:Rhino.Render.RenderPrimitive.PrimitiveType"/> is not a <see cref="F:Rhino.Render.RenderPrimitiveType.Plane"/>
            then the plane parameter is set to null.
            </summary>
            <param name="plane">
            Gets set to the plane primitive for this object on success or null on error.
            </param>
            <returns>
            Returns true if <see cref="P:Rhino.Render.RenderPrimitive.PrimitiveType"/> is <see cref="F:Rhino.Render.RenderPrimitiveType.Plane"/> and
            the plane parameter was initialized otherwise returns false.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderPrimitive.TryGetCone(Rhino.Geometry.Cone@,Rhino.Geometry.Plane@)">
            <summary>
            Call this method to get a <see cref="T:Rhino.Geometry.Cone"/> primitive for this mesh.  If this
            meshes <see cref="P:Rhino.Render.RenderPrimitive.PrimitiveType"/> is not a <see cref="F:Rhino.Render.RenderPrimitiveType.Cone"/>
            then the cone parameter is set to <see cref="P:Rhino.Geometry.Cone.Unset"/> and the truncation
            parameter is set to <see cref="P:Rhino.Geometry.Plane.Unset"/>.
            </summary>
            <param name="cone">
            Gets set to the cone primitive for this object on success or <see cref="P:Rhino.Geometry.Cone.Unset"/> on error.
            </param>
            <param name="truncation">
            Gets set to the truncation plane for this object on success or <see cref="P:Rhino.Geometry.Plane.Unset"/> on error.
            </param>
            <returns>
            Returns true if <see cref="P:Rhino.Render.RenderPrimitive.PrimitiveType"/> is <see cref="F:Rhino.Render.RenderPrimitiveType.Cone"/> and
            the cone and truncation parameters were initialized otherwise returns false.
            </returns>
        </member>
        <member name="P:Rhino.Render.RenderPrimitive.RhinoObject">
            <summary>
            The Rhino object associated with this render primitive.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderPrimitive.PrimitiveType">
            <summary>
            Call this before extracting meshes if you support render primitives to
            get the <see cref="T:Rhino.Render.RenderPrimitiveType"/> of this mesh then call the
            associated <see cref="M:Rhino.Render.RenderPrimitive.TryGetSphere(Rhino.Geometry.Sphere@)"/>, <see cref="M:Rhino.Render.RenderPrimitive.TryGetPlane(Rhino.Geometry.PlaneSurface@)"/>, <see cref="M:Rhino.Render.RenderPrimitive.TryGetCone(Rhino.Geometry.Cone@,Rhino.Geometry.Plane@)"/>, or
            <see cref="M:Rhino.Render.RenderPrimitive.TryGetBox(Rhino.Geometry.Box@)"/> method.  Calling the <see cref="M:Rhino.Render.RenderPrimitive.Mesh"/> property
            will mesh the primitive and return a mesh always.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderPrimitive.InstanceTransform">
            <summary>
            Instance reference transform or Identity if not an instance reference.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderPrimitive.HasRenderMaterial">
            <summary>
            This property will be true if this mesh has a <see cref="P:Rhino.Render.RenderPrimitive.RenderMaterial"/> associated with
            it or false if there is a <see cref="P:Rhino.Render.RenderPrimitive.Material"/>.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderPrimitive.RenderMaterial">
            <summary>
            The <see cref="P:Rhino.Render.RenderPrimitive.RenderMaterial"/> associated with this mesh or null if there is not one.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderPrimitive.Material">
            <summary>
            The <see cref="P:Rhino.Render.RenderPrimitive.Material"/>associated with this mesh or null if the
            <see cref="T:Rhino.Render.RenderPrimitive"/> property has a value.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderPrimitive.BoundingBox">
            <summary>
            The bounding box for this primitive.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderPrimitiveEnumerator.#ctor(System.Guid,Rhino.DocObjects.ViewportInfo,System.Boolean)">
            <summary>
            
            </summary>
            <param name="plugInId">
            The Id of the plug-in creating the iterator.
            </param>
            <param name="viewport">
            The rendering view camera.
            </param>
            <param name="forceTriangleMeshes">
            If true quad meshes will be triangulated
            </param>
        </member>
        <member name="P:Rhino.Render.RenderPrimitiveEnumerator.SceneBoundingBox">
            <summary>
            Bounding box containing all meshes in the scene.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderWindow.SetProgress(System.String,System.Single)">
            <summary>
            Accepts a rendering progress value to inform the user of the rendering advances.
            </summary>
            <param name="text">The progress text.</param>
            <param name="progress">A progress value in the domain [0.0f; 1.0f].</param>
        </member>
        <member name="M:Rhino.Render.RenderWindow.AddWireframeChannel(Rhino.RhinoDoc,Rhino.DocObjects.ViewportInfo,System.Drawing.Size,System.Drawing.Rectangle)">
            <summary>
            A wireframe channel will not be added if none of the document properties settings
            indicate that one is needed. In other words, Rhino will not generate an empty wireframe channel
            just for the fun of it.
            </summary>
            <param name="doc">The document to display</param>
            <param name="viewport">The view to display</param>
            <param name="size">The size of the image without clipping (ie - if you have a region, it was the
            size of the image before you cut the region out.</param>
            <param name="region">The area of the rendering you want to display.  This should match the size
            of the render window itself (ie - the one set using SetSize)</param>
            <returns>Returns true if the wireframe channel was successfully added.</returns>
        </member>
        <member name="M:Rhino.Render.RenderWindow.AddChannel(Rhino.Render.RenderWindow.StandardChannels)">
            <summary>
            Add a channel to the frame buffer in addition to the fixed Red, Green, Blue and Alpha channels.
            </summary>
            <param name="channel">Channel to add</param>
            <returns>If the channel existed then true is returned otherwise; returns true if the channel was added or false if not.</returns>
        </member>
        <member name="M:Rhino.Render.RenderWindow.SetRGBAChannelColors(System.Drawing.Size,Rhino.Display.Color4f[])">
            <summary>
            Call this method to open the RenderWindow.StandardChannels.RGBA channel and set a block of color values
            </summary>
            <param name="size">Size of the area to set. No validation is done on this value</param>
            <param name="colors">Array of Color4f values used to set the RenderWindow.StandardChannels.RGBA </param>
        </member>
        <member name="M:Rhino.Render.RenderWindow.SetRGBAChannelColors(System.Drawing.Rectangle,Rhino.Display.Color4f[])">
            <summary>
            Call this method to open the RenderWindow.StandardChannels.RGBA channel and set a block of color values
            </summary>
            <param name="rectangle">
            rectangle.X is the horizontal pixel position of the left edge. No validation is done on this value.
              The caller is responsible for ensuring that it is within the frame buffer.
            rectangle.Y is the vertical pixel position of the top edge. No validation is done on this value.
              The caller is responsible for ensuring that it is within the frame buffer.
            rectangle.Width is the width of the rectangle in pixels. No validation is done on this value.
            rectangle.Height is the height of the rectangle in pixels. No validation is done on this value.
            </param>
            <param name="colors">Array of Color4f values used to set the RenderWindow.StandardChannels.RGBA </param>
        </member>
        <member name="M:Rhino.Render.RenderWindow.Invalidate">
            <summary>
            Invalidate the entire view window so that the pixels get painted.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderWindow.Channel.PixelSize">
            <summary>
            Returns the size of the data in one pixel in the channel. For RDK standard channels, this value is always sizeof(float). 
            For the special chanRGBA collective channel,
            this value is 4 * sizeof(float).
            </summary>
            <returns>The size of a pixel.</returns>
        </member>
        <member name="M:Rhino.Render.RenderWindow.Channel.SetValue(System.Int32,System.Int32,System.Single)">
            <summary>
            If x or y are out of range, the function will fail and may crash Rhino.
            </summary>
            <param name="x">The horizontal pixel position. No validation is done on this value. 
            The caller is responsible for ensuring that it is within the frame buffer.</param>
            <param name="y">the vertical pixel position. No validation is done on this value.
            The caller is responsible for ensuring that it is within the frame buffer.</param>
            <param name="value">The value to store in the channel at the specified position.</param>
        </member>
        <member name="M:Rhino.Render.RenderWindow.Channel.SetValue(System.Int32,System.Int32,Rhino.Display.Color4f)">
            <summary>
            If x or y are out of range, the function will fail and may crash Rhino.
            </summary>
            <param name="x">The horizontal pixel position. No validation is done on this value. 
            The caller is responsible for ensuring that it is within the frame buffer.</param>
            <param name="y">The vertical pixel position. No validation is done on this value.
            The caller is responsible for ensuring that it is within the frame buffer.</param>
            <param name="value">The color to store in the channel at the specified position.</param>
        </member>
        <member name="T:Rhino.Render.RenderPanelType">
            <summary>
            Contains the custom user interfaces that may be provided
            </summary>
        </member>
        <member name="F:Rhino.Render.RenderPanelType.RenderWindow">
            <summary>
            A custom control panel added to the render output window.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderTabs.FromRenderSessionId(Rhino.PlugIns.PlugIn,System.Type,System.Guid)">
            <summary>
            Get the instance of a render tab associated with a specific render
            session, this is useful when it is necessary to update a control from a
            <see cref="T:Rhino.Render.RenderPipeline"/>
            </summary>
            <param name="plugIn">
            The plug-in that registered the custom user interface
            </param>
            <param name="tabType">
            The type of tab to return
            </param>
            <param name="renderSessionId">
            The <see cref="P:Rhino.Render.RenderPipeline.RenderSessionId"/> of a specific render
            session.
            </param>
            <returns>
            Returns the custom tab object if found; otherwise null is returned.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderTabs.SessionIdFromTab(System.Object)">
            <summary>
            Get the session Id that created the specified tab object.
            </summary>
            <param name="tab"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.RenderTabs.RegisterTab(Rhino.PlugIns.PlugIn,System.Type,System.String,System.Drawing.Icon)">
            <summary>
            Register custom render user interface with Rhino.  This should only be
            done in <see cref="M:Rhino.PlugIns.RenderPlugIn.RegisterRenderPanels(Rhino.Render.RenderPanels)"/>.  Panels
            registered after <see cref="M:Rhino.PlugIns.RenderPlugIn.RegisterRenderPanels(Rhino.Render.RenderPanels)"/> is called
            will be ignored.
            </summary>
            <param name="plugin">
            The plug-in providing the custom user interface
            </param>
            <param name="tabType">
            The type of object to be created and added to the render container.
            </param>
            <param name="caption">
            The caption for the custom user interface.
            </param>
            <param name="icon">
            </param>
        </member>
        <member name="T:Rhino.Render.RenderPanels">
            <summary>
            This class is used to extend the standard Render user interface
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderPanels.FromRenderSessionId(Rhino.PlugIns.PlugIn,System.Type,System.Guid)">
            <summary>
            Get the instance of a render panel associated with a specific render
            session, this is useful when it is necessary to update a control from a
            <see cref="T:Rhino.Render.RenderPipeline"/>
            </summary>
            <param name="plugIn">
            The plug-in that registered the custom user interface
            </param>
            <param name="panelType">
            The type of panel to return
            </param>
            <param name="renderSessionId">
            The <see cref="P:Rhino.Render.RenderPipeline.RenderSessionId"/> of a specific render
            session.
            </param>
            <returns>
            Returns the custom panel object if found; otherwise null is returned.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderPanels.RegisterPanel(Rhino.PlugIns.PlugIn,Rhino.Render.RenderPanelType,System.Type,System.String,System.Boolean,System.Boolean)">
            <summary>
            Register custom render user interface with Rhino.  This should only be
            done in <see cref="M:Rhino.PlugIns.RenderPlugIn.RegisterRenderPanels(Rhino.Render.RenderPanels)"/>.  Panels
            registered after <see cref="M:Rhino.PlugIns.RenderPlugIn.RegisterRenderPanels(Rhino.Render.RenderPanels)"/> is called
            will be ignored.
            </summary>
            <param name="plugin">
            The plug-in providing the custom user interface
            </param>
            <param name="renderPanelType">
            See <see cref="T:Rhino.Render.RenderPanelType"/> for supported user interface types.
            </param>
            <param name="panelType">
            The type of object to be created and added to the render container.
            </param>
            <param name="caption">
            The caption for the custom user interface.
            </param>
            <param name="alwaysShow">
            If true the custom user interface will always be visible, if false then
            it may be hidden or shown as requested by the user.
            </param>
            <param name="initialShow">
            Initial visibility state of the custom user interface control.
            </param>
        </member>
        <member name="T:Rhino.Render.RenderPipeline">
            <summary>
            Provides facilities to a render plug-in for integrating with the standard
            Rhino render window. Also adds helper functions for processing a render
            scene. This is the suggested class to use when integrating a renderer with
            Rhino and maintaining a "standard" user interface that users will expect.
            </summary>
        </member>
        <member name="M:Rhino.Render.RenderPipeline.#ctor(Rhino.RhinoDoc,Rhino.Commands.RunMode,Rhino.PlugIns.PlugIn,System.Drawing.Size,System.String,Rhino.Render.RenderWindow.StandardChannels,System.Boolean,System.Boolean)">
            <summary>
            Constructs a subclass of this object on the stack in your Rhino plug-in's Render() or RenderWindow() implementation.
            </summary>
            <param name="doc">A Rhino document.</param>
            <param name="mode">A command running mode, such as scripted or interactive.</param>
            <param name="plugin">A plug-in.</param>
            <param name="sizeRendering">The width and height of the rendering.</param>
            <param name="caption">The caption to display in the frame window.</param>
            <param name="channels">The color channel or channels.</param>
            <param name="reuseRenderWindow">true if the rendering window should be reused; otherwise, a new one will be instanciated.</param>
            <param name="clearLastRendering">true if the last rendering should be removed.</param>
        </member>
        <member name="M:Rhino.Render.RenderPipeline.SaveImage(System.String)">
            <summary>
            Saves the rendered image to a file.
            </summary>
            <param name="fileName">
            the full path to the file name to save to. If null or empty a file
            dialog will be displayed prompting the user for a save file name.
            </param>
            <returns>
            Returns true if a file was written or false if a file dialog was
            canceled or the file was not written.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderPipeline.CloseWindow">
            <summary>
            Closes the render window associated with this render instance.
            </summary>
            <returns>
            Return true if successful or false if not.
            </returns>
        </member>
        <member name="M:Rhino.Render.RenderPipeline.CommandResultFromReturnCode(Rhino.Render.RenderPipeline.RenderReturnCode)">
            <summary>
            Convert RenderReturnCode to 
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.RenderPipeline.Render">
            <summary>
            Call this function to render the scene normally. The function returns when rendering is complete (or cancelled).
            </summary>
            <returns>A code that explains how rendering completed.</returns>
        </member>
        <member name="M:Rhino.Render.RenderPipeline.RenderWindow(Rhino.Display.RhinoView,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Call this function to render the scene in a view window. The function returns when rendering is complete (or cancelled).
            </summary>
            <param name="view">the view that the user selected a rectangle in.</param>
            <param name="rect">rectangle that the user selected.</param>
            <param name="inWindow">true to render directly into the view window.</param>
            <returns>A code that explains how rendering completed.</returns>
            //TODO - ViewInfo is wrong here
        </member>
        <member name="M:Rhino.Render.RenderPipeline.RenderSize">
            <summary>
            Gets the render size as specified in the ON_3dmRenderSettings. Will automatically return the correct size based on the ActiveView or custom settings.
            </summary>
            <returns>The render size.</returns>
        </member>
        <member name="M:Rhino.Render.RenderPipeline.OnRenderBegin">
            <summary>
            Called by the framework when it is time to start rendering, the render window will be created at this point and it is safe to start 
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.RenderPipeline.OnRenderWindowBegin(Rhino.Display.RhinoView,System.Drawing.Rectangle)">
            <summary>
            
            </summary>
            <param name="view"></param>
            <param name="rectangle"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.RenderPipeline.OnRenderEnd(Rhino.Render.RenderEndEventArgs)">
            <summary>
            Called by the framework when the user closes the render window or clicks
            on the stop button in the render window.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rhino.Render.RenderPipeline.ContinueModal">
            <summary>
            Frequently called during a rendering by the frame work in order to
            determine if the rendering should continue.
            </summary>
            <returns>Returns true if the rendering should continue.</returns>
        </member>
        <member name="P:Rhino.Render.RenderPipeline.RenderSessionId">
            <summary>
            Get the Id associated with this render session, this is useful when
            looking up Rhino.Render.RenderPanels.
            </summary>
        </member>
        <member name="P:Rhino.Render.RenderPipeline.ConfirmationSeconds">
            <summary>
            Sets the number of seconds that need to elapse during rendering before the user is asked if the rendered image should be saved.
            </summary>
        </member>
        <member name="T:Rhino.Render.RenderEndEventArgs">
            <summary>
            Contains information about why OnRenderEnd was called
            </summary>
        </member>
        <member name="F:Rhino.Render.RdkPlugIn.g_rdk_plugin_dictionary">
            <summary>
            Dictionary of valid RdkPlugIn's
            </summary>
        </member>
        <member name="M:Rhino.Render.RdkPlugIn.FromPlugInId(System.Guid)">
            <summary>
            Find loaded RdkPlugIn in the Render Development Kit(RDK) plug-in
            dictionary.
            </summary>
            <param name="plugInId">Plug-in Id to search for</param>
            <returns>
            If a plug-in with the specified Id is found in the dictionary then the
            plug-in object is returned, if not found then null is returned.
            </returns>
        </member>
        <member name="M:Rhino.Render.RdkPlugIn.FromRhinoPlugIn(Rhino.PlugIns.PlugIn)">
            <summary>
            Search the Render Development Kit(RDK) plug-in dictionary for a render
            plug-in with the matching Rhino plug-in Id.
            </summary>
            <param name="plugIn">Rhino plug-in to search for.</param>
            <returns>
            If the plug-in is in the RDK dictionary then the dictionary plug-in
            object is returned, if not then null is returned.
            </returns>
        </member>
        <member name="M:Rhino.Render.RdkPlugIn.FromRenderConentClassType(System.Type)">
            <summary>
            Check each RdkPlugIn in the Render Development Kit(RDK) dictionary and
            return the first one found that contains the specified content contentType.
            </summary>
            <param name="type">Class contentType to search for</param>
            <returns>
            If there is a plug-in in the dictionary that registered the requested
            contentType then return the plug-in, if not then return null.
            </returns>
        </member>
        <member name="M:Rhino.Render.RdkPlugIn.GetRdkPlugIn(Rhino.PlugIns.PlugIn)">
            <summary>
            Search the plug-in's dictionary for the specified plug-in and if it is
            not found then add it to the dictionary.
            </summary>
            <param name="plugIn"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.RdkPlugIn.GetRdkPlugIn(System.Guid,System.Int32)">
            <summary>
            If the specified plug-in is not currently in the plug-in dictionary do
            nothing otherwise; see AddPlugInToDictionary for a description of what
            happens.
            </summary>
            <param name="rhinoPlugInId">Id of the plug-in to search for or add.</param>
            <param name="serialNumber">Plug-in C++ pointer serial number.</param>
            <returns>
            A plug-in object from the plug-in dictionary or null if there was a
            problem adding a new dictionary plug-in.
            </returns>
        </member>
        <member name="M:Rhino.Render.RdkPlugIn.AddPlugInToDictionary(System.IntPtr,System.Guid,System.Int32)">
            <summary>
            Create a new C++ runtime RDK plug-in object then create a RhinoCommon
            RdkPlugIn, attach the C++ pointer to it and set the C++ callback
            function pointers to the RckPlugIn.
            </summary>
            <param name="rhinoPlugIn">
            The C++ pointer to the native CRhinoPlugIn that is causing this RDK
            plug-in to get added.
            </param>
            <param name="rhinoPlugInId">The plug-in Id</param>
            <param name="serialNumber">Plug-in C++ pointer serial number</param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.RdkPlugIn.RenderContentTypeIsRegistered(System.Type)">
            <summary>
            If there the plug-in dictionary contains a plug-in that registered the
            specified content type then return true otherwise; return false;
            </summary>
            <param name="contentType">Class type to search for.</param>
            <returns>
            If there the plug-in dictionary contains a plug-in that registered the
            specified content contentType then return true otherwise; return false;
            </returns>
        </member>
        <member name="M:Rhino.Render.RdkPlugIn.GetRenderContentType(System.Guid,System.Guid@)">
            <summary>
            Search the plug-in dictionary for a plug-in for that registered the
            specified class type Guid, if it is found then return the class
            type and plug-in ID otherwise; return null.
            </summary>
            <param name="id">Class GUUID attribute value to search for.</param>
            <param name="pluginId">
            Output parameter, will be set to the Id of the plug-in that registered
            the class type or Guid.Empty if the type is not found.
            </param>
            <returns>
            Returns the class type and Id of the plug-in that registered the class
            type if the Id is found otherwise; return null.
            </returns>
        </member>
        <member name="F:Rhino.Render.RdkPlugIn.m_rhino_plug_in_id">
            <summary>
            CRhinoPlugIn Id that owns this RdkPlugIn
            </summary>
        </member>
        <member name="F:Rhino.Render.RdkPlugIn.m_rdk_plug_in_pointer">
            <summary>
            The RDK C++ CRdkPlugIn pointer associated with this object
            </summary>
        </member>
        <member name="F:Rhino.Render.RdkPlugIn.m_render_content_types">
            <summary>
            List of valid RenderContent class types associated with this plug-in.
            </summary>
        </member>
        <member name="M:Rhino.Render.RdkPlugIn.#ctor(System.IntPtr,System.Guid)">
            <summary>
            Constructor
            </summary>
            <param name="rdkPlugInPointer">
            C++ Pointer to the CRhinoPlugIn that this plug-in is associated with.
            </param>
            <param name="rhinoPlugInId">C++ CRhinoPlugIn Id</param>
        </member>
        <member name="M:Rhino.Render.RdkPlugIn.AddRegisteredContentTypes(System.Collections.Generic.IEnumerable{System.Type})">
            <summary>
            Add list of class types, the type list has been sanitized and should
            only contain valid RenderContent class types, this should only be
            called from RenderContent.RegisterContent.
            </summary>
            <param name="types">Types to add to the plug-ins contenet type list.</param>
        </member>
        <member name="M:Rhino.Render.RdkPlugIn.Dispose">
            <summary>
            Required IDisposable method
            </summary>
        </member>
        <member name="F:Rhino.Render.TextureEnvironmentMappingMode.Spherical">
            <summary>Equirectangular projection</summary>
        </member>
        <member name="F:Rhino.Render.TextureEnvironmentMappingMode.EnvironmentMap">
            <summary>Mirrorball</summary>
        </member>
        <member name="M:Rhino.Render.RenderTexture.NewBitmapTexture(Rhino.Render.SimulatedTexture)">
            <summary>
            Constructs a new basic texture from a SimulatedTexture.
            </summary>
            <param name="texture">The texture to create the basic texture from.</param>
            <returns>A new render texture.</returns>
        </member>
        <member name="M:Rhino.Render.RenderTexture.CreateEvaluator">
            <summary>
            Constructs a texture evaluator. This is an independent lightweight object
            capable of evaluating texture color throughout uvw space. May be called
            from within a rendering shade pipeline.
            </summary>
            <returns>A texture evaluator instance.</returns>
        </member>
        <member name="M:Rhino.Render.RenderTexture.GetRepeat">
            <summary>
            Get repeat value across UVW space. If the projection type is WCS or
            other type specified in model units, then this is the repeat across 1
            meter of the model.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.RenderTexture.SetRepeat(Rhino.Geometry.Vector3d,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set repeat value across UVW space. If the projection type is WCS or
            other type specified in model units, then this is the repeat across 1
            meter of the model.
            </summary>
            <param name="value"></param>
            <param name="changeContext"></param>
        </member>
        <member name="M:Rhino.Render.RenderTexture.GetOffset">
            <summary>
            Get offset value across UVW space. If the projection type is WCS or
            other type specified in model units, then this is the offset in meters.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Render.RenderTexture.SetOffset(Rhino.Geometry.Vector3d,Rhino.Render.RenderContent.ChangeContexts)">
            <summary>
            Set offset value across UVW space. If the projection type is WCS or
            other type specified in model units, then this is the offset in meters.
            </summary>
            <param name="value"></param>
            <param name="changeContext"></param>
        </member>
        <member name="M:Rhino.Render.RenderTexture.GetRotation">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rhino.Render.RenderTexture.LocalMappingTransform">
            <summary>
            Gets the transformation that can be applied to the UVW vector to convert it
            from normalized texture space into locally mapped space (ie - with repeat,
            offset and rotation applied.)
            </summary>
        </member>
        <member name="M:Rhino.Render.ContentUndoBlocker.#ctor">
            <summary>
            Constructs a ContentUndoBlocker object inside a using block to block undo when modifying a RenderContent
            while a ContentUndoHelper is active. Alternatively - create the ContentUndoBlocker and explicitly call Dispose when you are done.
            </summary>
        </member>
        <member name="M:Rhino.Render.Variant.#ctor">
            <summary>
            Constructs as VariantTypes.Null.
            </summary>
        </member>
        <member name="M:Rhino.Render.Variant.AsModelFloat(Rhino.RhinoDoc)">
            <summary>
            Retrieves the value as a float in model units. Null or varying returns 0.0.
            The value will be converted from the variant's units to model units if necessary.
            \see Units(). \see SetUnits().
            </summary>
            <param name="document">A Rhino document.</param>
            <returns>The value in model units.
            <para>This is a single-precision value.</para>
            </returns>
        </member>
        <member name="M:Rhino.Render.Variant.AsModelDouble(Rhino.RhinoDoc)">
            <summary>
            Retrieves the value as a double in model units. Null or varying returns 0.0.
            The value will be converted from the variant's units to model units if necessary.
            \see Units(). \see SetUnits().
            </summary>
            <param name="document">A Rhino document.</param>
            <returns>The value in model units.
            <para>This is a double-precision value.</para></returns>
        </member>
        <member name="M:Rhino.Render.Variant.SetAsModelFloat(System.Single,Rhino.RhinoDoc)">
            <summary>
            Sets the value to a float in model units.
            The value will be converted from model units to the variant's units if necessary. 
            </summary>
            <param name="f">The value in model units.</param>
            <param name="document">A Rhino document.</param>
        </member>
        <member name="M:Rhino.Render.Variant.SetAsModelDouble(System.Double,Rhino.RhinoDoc)">
            <summary>
            Sets the value to a double in model units.
            The value will be converted from model units to the variant's units if necessary. 
            </summary>
            <param name="d">The value in model units.</param>
            <param name="document">A Rhino document.</param>
        </member>
        <member name="P:Rhino.Render.Variant.Units">
            <summary>
            Units associated with numeric values, see AsModelFloat etc.
            </summary>
        </member>
        <member name="T:Rhino.Render.Sun">
            <summary>
            Represents the Sun on a little portion of Earth.
            </summary>
        </member>
        <member name="M:Rhino.Render.Sun.#ctor">
            <summary>
            Create a non-document controlled Sun
            </summary>
        </member>
        <member name="M:Rhino.Render.Sun.SetPosition(System.Double,System.Double)">
            <summary>
            Sets position of the Sun based on azimuth and altitude values.
            </summary>
            <param name="azimuthDegrees">The azimut sun angle in degrees.</param>
            <param name="altitudeDegrees">The altitude sun angle in degrees.</param>
        </member>
        <member name="M:Rhino.Render.Sun.SetPosition(System.DateTime,System.Double,System.Double)">
            <summary>
            Sets position of the sun based on physical location and time.
            </summary>
            <param name="when">A datetime instance.
            <para>If the date <see cref="P:System.DateTime.Kind">Kind</see> is <see cref="F:System.DateTimeKind.Local">DateTimeKind.Local</see>,
            or <see cref="F:System.DateTimeKind.Unspecified">DateTimeKind.Unspecified</see>, the date is considered local.</para></param>
            <param name="latitudeDegrees">The latitude, in degrees, of the location on Earth.</param>
            <param name="longitudeDegrees">The longitude, in degrees, of the location on Earth.</param>
        </member>
        <member name="M:Rhino.Render.Sun.ShowDialog">
            <summary>Show the tabbed sun dialog.</summary>
        </member>
        <member name="E:Rhino.Render.Sun.Changed">
            <summary>
            This event is raised when a GroundPlane property value is changed.
            </summary>
        </member>
        <member name="P:Rhino.Render.Sun.Enabled">
            <summary>Turn to sun on/off in this document.</summary>
        </member>
        <member name="P:Rhino.Render.Sun.ManualControl">
            <summary>Set angles directly or use place/date/time</summary>
        </member>
        <member name="P:Rhino.Render.Sun.SkylightOn">
            <summary>Turn skylight on or off</summary>
        </member>
        <member name="P:Rhino.Render.Sun.DaylightSaving">
            <summary>Daylight savings time</summary>
        </member>
        <member name="P:Rhino.Render.Sun.TimeZone">
            <summary>
            Measured in hours += UTC
            </summary>
        </member>
        <member name="P:Rhino.Render.Sun.North">
            <summary>
            Angle in degrees on world X-Y plane that should be considered north in the model. Angle is
            measured starting at X-Axis and travels counterclockwise. Y-Axis would be a north angle of 90
            degrees.
            </summary>
        </member>
        <member name="T:Rhino.Runtime.AssemblyResolver">
            <summary>
            Assembly Resolver for the Rhino App Domain.
            </summary>
        </member>
        <member name="M:Rhino.Runtime.AssemblyResolver.AddSearchFolder(System.String)">
            <summary>
            Register a custom folder with the Assembly Resolver. Folders will be 
            searched recursively, so this could potentially be a very expensive operation. 
            If at all possible, you should consider only registering individual files.
            </summary>
            <param name="folder">Path of folder to include during Assembly Resolver events.</param>
        </member>
        <member name="M:Rhino.Runtime.AssemblyResolver.AddSearchFile(System.String)">
            <summary>
            Register another file with the Assembly Resolver. File must be a .NET assembly, 
            so it should probably be a dll, rhp or exe.
            </summary>
            <param name="file">Path of file to include during Assembly Resolver events.</param>
        </member>
        <member name="T:Rhino.Display.CustomDisplay">
            <summary>
            Provides some basic (indeed, very basic) mechanisms for drawing custom geometry in viewports.
            </summary>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.#ctor(System.Boolean)">
            <summary>
            Constructs a new CustomDisplay instance. You <i>must</i> call
            Dispose() when you are done with this instance, otherwise
            the display methods will never be switched off.
            </summary>
            <param name="enable">If true, the display will be enabled immediately.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.Clear">
            <summary>
            Clear the drawing lists.
            </summary>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddPoint(Rhino.Geometry.Point3d)">
            <summary>
            Adds a new, black point to the display list.
            </summary>
            <param name="point">Point to add.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddPoint(Rhino.Geometry.Point3d,System.Drawing.Color)">
            <summary>
            Adds a new colored point to the display list.
            </summary>
            <param name="point">Point to add.</param>
            <param name="color">Color of point.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddPoint(Rhino.Geometry.Point3d,System.Drawing.Color,Rhino.Display.PointStyle,System.Int32)">
            <summary>
            Adds a new stylized point to the display list.
            </summary>
            <param name="point">Point to add.</param>
            <param name="color">Color of point.</param>
            <param name="style">Display style of point.</param>
            <param name="radius">Radius of point widget.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Adds a collection of black points to the display list.
            </summary>
            <param name="points">Points to add.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Drawing.Color)">
            <summary>
            Adds a collection of colored points to the display list.
            </summary>
            <param name="points">Points to add.</param>
            <param name="color">Color of points.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Drawing.Color,Rhino.Display.PointStyle,System.Int32)">
            <summary>
            Adds a collection of stylized points to the display list.
            </summary>
            <param name="points">Points to add.</param>
            <param name="color">Color of points.</param>
            <param name="style">Display style of points.</param>
            <param name="radius">Radius of point widgets.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddLine(Rhino.Geometry.Line)">
            <summary>
            Adds a new, black line to the display list.
            </summary>
            <param name="line">Line to add.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddLine(Rhino.Geometry.Line,System.Drawing.Color)">
            <summary>
            Adds a new, colored line to the display list.
            </summary>
            <param name="line">Line to add.</param>
            <param name="color">Color of line.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddLine(Rhino.Geometry.Line,System.Drawing.Color,System.Int32)">
            <summary>
            Adds a new, colored line to the display list.
            </summary>
            <param name="line">Line to add.</param>
            <param name="color">Color of line.</param>
            <param name="thickness">Thickness of line.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddVector(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Adds a new, black vector to the display list.
            </summary>
            <param name="anchor">Anchor point of vector.</param>
            <param name="span">Direction and magnitude of vector.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddVector(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color)">
            <summary>
            Adds a new, colored vector to the display list.
            </summary>
            <param name="anchor">Anchor point of vector.</param>
            <param name="span">Direction and magnitude of vector.</param>
            <param name="color">Color of vector.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddVector(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color,System.Boolean)">
            <summary>
            Adds a new, colored vector to the display list.
            </summary>
            <param name="anchor">Anchor point of vector.</param>
            <param name="span">Direction and magnitude of vector.</param>
            <param name="color">Color of vector.</param>
            <param name="drawAnchor">Include a point at the vector anchor.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddArc(Rhino.Geometry.Arc)">
            <summary>
            Adds a new, black arc to the display list.
            </summary>
            <param name="arc">Arc to add.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddArc(Rhino.Geometry.Arc,System.Drawing.Color)">
            <summary>
            Adds a new, colored arc to the display list.
            </summary>
            <param name="arc">Arc to add.</param>
            <param name="color">Color of arc.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddArc(Rhino.Geometry.Arc,System.Drawing.Color,System.Int32)">
            <summary>
            Adds a new, colored arc to the display list.
            </summary>
            <param name="arc">Arc to add.</param>
            <param name="color">Color of arc.</param>
            <param name="thickness">Thickness of arc.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddCircle(Rhino.Geometry.Circle)">
            <summary>
            Adds a new, black circle to the display list.
            </summary>
            <param name="circle">Circle to add.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddCircle(Rhino.Geometry.Circle,System.Drawing.Color)">
            <summary>
            Adds a new, colored arc to the display list.
            </summary>
            <param name="circle">Circle to add.</param>
            <param name="color">Color of circle.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddCircle(Rhino.Geometry.Circle,System.Drawing.Color,System.Int32)">
            <summary>
            Adds a new, colored circle to the display list.
            </summary>
            <param name="circle">Circle to add.</param>
            <param name="color">Color of circle.</param>
            <param name="thickness">Thickness of circle.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddCurve(Rhino.Geometry.Curve)">
            <summary>
            Adds a new, black curve to the display list. 
            The curve will be duplicated so changes to the 
            original will not affect the display.
            </summary>
            <param name="curve">Curve to add.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddCurve(Rhino.Geometry.Curve,System.Drawing.Color)">
            <summary>
            Adds a new, colored curve to the display list.
            The curve will be duplicated so changes to the 
            original will not affect the display.
            </summary>
            <param name="curve">Curve to add.</param>
            <param name="color">Color of curve.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddCurve(Rhino.Geometry.Curve,System.Drawing.Color,System.Int32)">
            <summary>
            Adds a new, colored curve to the display list.
            The curve will be duplicated so changes to the 
            original will not affect the display.
            </summary>
            <param name="curve">Curve to add.</param>
            <param name="color">Color of curve.</param>
            <param name="thickness">Thickness of curve.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddPolygon(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Drawing.Color,System.Drawing.Color,System.Boolean,System.Boolean)">
            <summary>
            Adds a polygon to the drawing list. Polygons are not like Hatches, when you supply a concave 
            polygon, the shading probably won't work.
            </summary>
            <param name="polygon">Points that define the corners of the polygon.</param>
            <param name="fillColor">Fill color of polygon.</param>
            <param name="edgeColor">Edge color of polygon.</param>
            <param name="drawFill">If true, the polygon contents will be drawn.</param>
            <param name="drawEdge">If true, the polygon edge will be drawn.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddText(System.String,Rhino.Geometry.Plane,System.Double)">
            <summary>
            Adds a new, black 3D text object to the display list.
            </summary>
            <param name="text">Text to add.</param>
            <param name="plane">Plane for text orientation.</param>
            <param name="size">Height (in units) of font.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddText(System.String,Rhino.Geometry.Plane,System.Double,System.Drawing.Color)">
            <summary>
            Adds a new, colored 3D text object to the display list.
            </summary>
            <param name="text">Text to add.</param>
            <param name="plane">Plane for text orientation.</param>
            <param name="size">Height (in units) of font.</param>
            <param name="color">Color of text.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.AddText(Rhino.Display.Text3d,System.Drawing.Color)">
            <summary>
             Adds a new 3D text object to the display list.
            </summary>
            <param name="text">Text object to add.</param>
            <param name="color">Color of text object.</param>
        </member>
        <member name="M:Rhino.Display.CustomDisplay.Dispose">
            <summary>
            Dispose this CustomDisplay instance. You must call this function in order to 
            properly shut down the CustomDisplay.
            </summary>
        </member>
        <member name="P:Rhino.Display.CustomDisplay.Enabled">
            <summary>
            Gets or sets the Enabled state of this CustomDisplay instance. 
            If you wish to terminate this CustomDisplay, place a call to Dispose() instead.
            </summary>
        </member>
        <member name="P:Rhino.Display.CustomDisplay.IsDisposed">
            <summary>
            Gets a value indicating whether this CustomDisplay instance has been disposed. 
            Once a CustomDisplay has been disposed, you can no longer use it.
            </summary>
        </member>
        <member name="P:Rhino.Display.CustomDisplay.ClippingBox">
            <summary>
            Gets the clipping box of this CustomDisplay.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Interpolator">
            <summary>
            Exposes a set of standard numeric interpolation algorithms.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.#ctor">
            <summary>
            Constructs a new, empty Interpolator.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.#ctor(System.Int32)">
            <summary>
            Constructs an empty Interpolator with a certain capacity.
            </summary>
            <param name="initialCapacity">Number of items this interpolator can store without resizing.</param>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.#ctor(Rhino.Collections.RhinoList{System.Double})">
            <summary>
            Copy all the numbers from an existing RhinoList.
            </summary>
            <param name="list">List to mimic.</param>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.#ctor(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Constructs an Interpolator from a collection of numbers.
            </summary>
            <param name="collection">Collection of numbers to duplicate.</param>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.#ctor(System.Int32,System.Double)">
            <summary>
            Constructs a new Interpolator with a specified amount of numbers.
            </summary>
            <param name="amount">Number of values to add to this Interpolator. Must be equal to or larger than zero.</param>
            <param name="defaultValue">Number to add.</param>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.InterpolateNearestNeighbour(System.Double)">
            <summary>
            Sample the list of numbers with Nearest Neighbour interpolation. 
            </summary>
            <param name="t">Parameter to sample at. The integer portion of the parameter 
            indicates the index of the left-hand value. If this Interpolator is cyclical, 
            parameters will be wrapped.</param>
            <returns>The sampled value at t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.InterpolateLinear(System.Double)">
            <summary>
            Sample the list of numbers with linear interpolation.
            </summary>
            <param name="t">Parameter to sample at. The integer portion of the parameter 
            indicates the index of the left-hand value. If this Interpolator is cyclical, 
            parameters will be wrapped.</param>
            <returns>The sampled value at t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.InterpolateCosine(System.Double)">
            <summary>
            Sample the list of numbers with cosine interpolation.
            </summary>
            <param name="t">Parameter to sample at. The integer portion of the parameter 
            indicates the index of the left-hand value. If this Interpolator is cyclical, 
            parameters will be wrapped.</param>
            <returns>The sampled value at t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.InterpolateCubic(System.Double)">
            <summary>
            Sample the list of numbers with cubic interpolation.
            </summary>
            <param name="t">Parameter to sample at. The integer portion of the parameter 
            indicates the index of the left-hand value. If this Interpolator is cyclical, 
            parameters will be wrapped.</param>
            <returns>The sampled value at t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.InterpolateCatmullRom(System.Double)">
            <summary>
            Sample the list of numbers with Catmull-Rom interpolation.
            </summary>
            <param name="t">Parameter to sample at. The integer portion of the parameter 
            indicates the index of the left-hand value. If this Interpolator is cyclical, 
            parameters will be wrapped.</param>
            <returns>The sampled value at t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.MapIndex(System.Int32)">
            <summary>
            Map a sample index onto the actual sample list.
            </summary>
            <param name="index">Index to map.</param>
            <returns>The mapped index.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interpolator.SolveParameter(System.Double,System.Int32@,System.Double@)">
            <summary>
            Decompose a sampling parameter into an index and a unitized parameter.
            </summary>
            <param name="param">Parameter to decompose.</param>
            <param name="index">Integer portion of parameter.</param>
            <param name="t">Floating point portion of parameter.</param>
        </member>
        <member name="P:Rhino.Geometry.Interpolator.Cyclical">
            <summary>
            Gets or sets a value indicating whether or not the values inside this Interpolator 
            are to be treated as cyclical (i.e. circular).
            </summary>
        </member>
        <member name="T:Rhino.Display.ColorHSL">
            <summary>
            Represents an HSL (Hue, Saturation, Luminance) color with double precision floating point channels. 
            HSL colors are used primarily in Graphical User Interface environments as they provide a 
            very natural approach to picking colors.
            </summary>
        </member>
        <member name="F:Rhino.Display.ColorHSL.m_a">
            <summary>
            Alpha values are inverted internally! 0 = opaque; 1 = transparent.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorHSL.#ctor(System.Drawing.Color)">
            <summary>
            Constructs a new instance of ColorHSL that is equivalent to an RGB color.
            </summary>
            <param name="rgb">RGB color to mimic.</param>
            <remarks>Exact conversions between color spaces are often not possible.</remarks>
        </member>
        <member name="M:Rhino.Display.ColorHSL.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorHSL with custom channel values.
            </summary>
            <param name="hue">Hue channel value. Hue channels rotate between 0.0 and 1.0.</param>
            <param name="saturation">Saturation channel value. Channel will be limited to 0~1.</param>
            <param name="luminance">Luminance channel value. Channel will be limited to 0~1.</param>
        </member>
        <member name="M:Rhino.Display.ColorHSL.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorHSL with custom channel values.
            </summary>
            <param name="alpha">Alpha channel value. Channel will be limited to 0~1.</param>
            <param name="hue">Hue channel value. Hue channels rotate between 0.0 and 1.0.</param>
            <param name="saturation">Saturation channel value. Channel will be limited to 0~1.</param>
            <param name="luminance">Luminance channel value. Channel will be limited to 0~1.</param>
        </member>
        <member name="M:Rhino.Display.ColorHSL.CreateFromCMYK(Rhino.Display.ColorCMYK)">
            <summary>
            Create the nearest HSL equivalent of a CMYK color.
            </summary>
            <param name="cmyk">Target color in CMYK space.</param>
            <returns>The HSL equivalent of the CMYK color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorHSL.CreateFromXYZ(Rhino.Display.ColorXYZ)">
            <summary>
            Create the nearest HSL equivalent of an XYZ color.
            </summary>
            <param name="xyz">Target color in XYZ space.</param>
            <returns>The HSL equivalent of the XYZ color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorHSL.CreateFromLAB(Rhino.Display.ColorLAB)">
            <summary>
            Create the nearest HSL equivalent of a LAB color.
            </summary>
            <param name="lab">Target color in LAB space.</param>
            <returns>The HSL equivalent of the LAB color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorHSL.CreateFromLCH(Rhino.Display.ColorLCH)">
            <summary>
            Create the nearest HSL equivalent of a LCH color.
            </summary>
            <param name="lch">Target color in LCH space.</param>
            <returns>The HSL equivalent of the LCH color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorHSL.op_Implicit(Rhino.Display.ColorHSL)~System.Drawing.Color">
            <summary>
            Implicitly converts a ColorHSL in a .Net library color.
            </summary>
            <param name="hsl">A HSL color.</param>
            <returns>A ARGB .Net library color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorHSL.ToArgbColor">
            <summary>
            Convert HSL color to an equivalent System.Drawing.Color.
            </summary>
            <returns>A .Net framework library color value.</returns>
        </member>
        <member name="P:Rhino.Display.ColorHSL.H">
            <summary>
            Gets or sets the hue channel value. 
            Hue channels rotate between 0.0 and 1.0.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorHSL.S">
            <summary>
            Gets or sets the saturation channel value. 
            Saturation channels are limited to a 0~1 range.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorHSL.L">
            <summary>
            Gets or sets the luminance channel value. 
            Luminance channels are limited to a 0~1 range.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorHSL.A">
            <summary>
            Gets or sets the alpha channel value. 
            Alpha channels are limited to a 0~1 range.
            </summary>
        </member>
        <member name="T:Rhino.Display.ColorCMYK">
            <summary>
            Represents a CMYK (Cyan, Magenta, Yellow, Key) color with double precision floating point channels. 
            CMYK colors are used primarily in printing environments as they provide a good simulation of physical ink.
            </summary>
        </member>
        <member name="F:Rhino.Display.ColorCMYK.m_a">
            <summary>
            Alpha values are inverted internally! 0 = opaque; 1 = transparent!
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.#ctor(System.Drawing.Color)">
            <summary>
            Initializes a new instance of ColorCMYK that is equivalent to an RGB color.
            </summary>
            <param name="rgb">RGB color to mimic.</param>
            <remarks>Exact conversions between color spaces are often not possible.</remarks>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of ColorCMYK with custom channel values. 
            The cyan, magenta and yellow values will be adjusted based on their 
            combined darkness.
            </summary>
            <param name="cyan">Cyan channel hint.</param>
            <param name="magenta">Magenta channel hint.</param>
            <param name="yellow">Yellow channel hint.</param>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of ColorCMYK with custom channel values. 
            </summary>
            <param name="cyan">Cyan channel value. Cyan channels are limited to the 0.0 and 1.0 range.</param>
            <param name="magenta">Magenta channel value. Magenta channels are limited to the 0.0 and 1.0 range.</param>
            <param name="yellow">Yellow channel value. Yellow channels are limited to the 0.0 and 1.0 range.</param>
            <param name="key">Key channel value. Key channels are limited to the 0.0 and 1.0 range.</param>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of ColorCMYK with custom channel values. 
            </summary>
            <param name="alpha">Alpha channel value. Alpha channels are limited to the 0.0 and 1.0 range.</param>
            <param name="cyan">Cyan channel value. Cyan channels are limited to the 0.0 and 1.0 range.</param>
            <param name="magenta">Magenta channel value. Magenta channels are limited to the 0.0 and 1.0 range.</param>
            <param name="yellow">Yellow channel value. Yellow channels are limited to the 0.0 and 1.0 range.</param>
            <param name="key">Key channel value. Key channels are limited to the 0.0 and 1.0 range.</param>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.CreateFromHSL(Rhino.Display.ColorHSL)">
            <summary>
            Constructs the nearest CMYK equivalent of an HSL color.
            </summary>
            <param name="hsl">Target color in HSL space.</param>
            <returns>The CMYK equivalent of the HSL color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.CreateFromXYZ(Rhino.Display.ColorXYZ)">
            <summary>
            Constructs the nearest CMYK equivalent of an XYZ color.
            </summary>
            <param name="xyz">Target color in XYZ space.</param>
            <returns>The CMYK equivalent of the XYZ color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.CreateFromLAB(Rhino.Display.ColorLAB)">
            <summary>
            Constructs the nearest CMYK equivalent of a LAB color.
            </summary>
            <param name="lab">Target color in LAB space.</param>
            <returns>The CMYK equivalent of the LAB color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.CreateFromLCH(Rhino.Display.ColorLCH)">
            <summary>
            Constructs the nearest CMYK equivalent of a LCH color.
            </summary>
            <param name="lch">Target color in LCH space.</param>
            <returns>The CMYK equivalent of the LCH color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorCMYK.op_Implicit(Rhino.Display.ColorCMYK)~System.Drawing.Color">
            <summary>
            Implicitly converts a CMYK color into a .Net library color.
            </summary>
            <param name="cmyk">A CMYK color.</param>
            <returns>A ARGB .Net library color.</returns>
        </member>
        <member name="P:Rhino.Display.ColorCMYK.C">
            <summary>
            Gets or sets the Cyan channel value. 
            Cyan channels are limited to the 0~1 range.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorCMYK.M">
            <summary>
            Gets or sets the Magenta channel value. 
            Magenta channels are limited to the 0~1 range.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorCMYK.Y">
            <summary>
            Gets or sets the Yellow channel value. 
            Yellow channels are limited to the 0~1 range.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorCMYK.K">
            <summary>
            Gets or sets the Key channel value. 
            Key channels are limited to the 0~1 range.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorCMYK.A">
            <summary>
            Gets or sets the Alpha channel value. 
            Alpha channels are limited to the 0~1 range.
            </summary>
        </member>
        <member name="T:Rhino.Display.ColorXYZ">
            <summary>
            Represents an XYZ (Hue, Saturation, Luminance) color with double precision floating point channels. 
            XYZ colors are based on the CIE 1931 XYZ color space standard and they mimic the natural 
            sensitivity of cones in the human retina.
            </summary>
        </member>
        <member name="F:Rhino.Display.ColorXYZ.m_a">
            <summary>
            Alpha values are inverted internally! 0 = opaque; 1 = transparent!
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.#ctor(System.Drawing.Color)">
            <summary>
            Constructs a new instance of ColorXYZ that is equivalent to an RGB color.
            </summary>
            <param name="rgb">RGB color to mimic.</param>
            <remarks>Exact conversions between color spaces are often not possible.</remarks>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorXYZ with custom channel values.
            </summary>
            <param name="x">X channel value, channel will be limited to 0~1.</param>
            <param name="y">Y channel value, channel will be limited to 0~1.</param>
            <param name="z">Z channel value, channel will be limited to 0~1.</param>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorXYZ with custom channel values.
            </summary>
            <param name="alpha">Alpha channel value, channel will be limited to 0~1.</param>
            <param name="x">X channel value, channel will be limited to 0~1.</param>
            <param name="y">Y channel value, channel will be limited to 0~1.</param>
            <param name="z">Z channel value, channel will be limited to 0~1.</param>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.CreateFromHSL(Rhino.Display.ColorHSL)">
            <summary>
            Create the nearest XYZ equivalent of an HSL color.
            </summary>
            <param name="hsl">Target color in HSL space.</param>
            <returns>The XYZ equivalent of the HSL color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.CreateFromCMYK(Rhino.Display.ColorCMYK)">
            <summary>
            Create the nearest XYZ equivalent of a CMYK color.
            </summary>
            <param name="cmyk">Target color in CMYK space.</param>
            <returns>The XYZ equivalent of the CMYK color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.CreateFromLAB(Rhino.Display.ColorLAB)">
            <summary>
            Create the nearest XYZ equivalent of a Lab color.
            </summary>
            <param name="lab">Target color in LAB space.</param>
            <returns>The XYZ equivalent of the LAB color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.CreateFromLCH(Rhino.Display.ColorLCH)">
            <summary>
            Create the nearest XYZ equivalent of an LCH color.
            </summary>
            <param name="lch">Target color in LCH space.</param>
            <returns>The XYZ equivalent of the LCH color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorXYZ.op_Implicit(Rhino.Display.ColorXYZ)~System.Drawing.Color">
            <summary>
            Implicitly converts a XYZ color into a .Net library color.
            </summary>
            <param name="xyz">A XYZ color.</param>
            <returns>A ARGB .Net library color.</returns>
        </member>
        <member name="P:Rhino.Display.ColorXYZ.X">
            <summary>
            Gets or set the X channel value. Channel will be limited to 0~1.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorXYZ.Y">
            <summary>
            Gets or set the Y channel value. Channel will be limited to 0~1.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorXYZ.Z">
            <summary>
            Gets or set the Z channel value. Channel will be limited to 0~1.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorXYZ.A">
            <summary>
            Gets or set the Alpha channel value. Channel will be limited to 0~1.
            </summary>
        </member>
        <member name="T:Rhino.Display.ColorLAB">
            <summary>
            Represents a LAB (Lightness, A, B) color with double precision floating point channels. 
            LAB colors are based on nonlinearly compressed CIE XYZ color space coordinates.  
            The A and B parameters of a LAB color represent the opponents.
            </summary>
        </member>
        <member name="F:Rhino.Display.ColorLAB.m_alpha">
            <summary>
            Alpha values are inverted internally! 0 = opaque; 1 = transparent!
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorLAB.#ctor(System.Drawing.Color)">
            <summary>
            Constructs a new instance of ColorLAB that is equivalent to an RGB color.
            </summary>
            <param name="rgb">RGB color to mimic.</param>
            <remarks>Exact conversions between color spaces are often not possible.</remarks>
        </member>
        <member name="M:Rhino.Display.ColorLAB.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorLAB with custom channel values.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorLAB.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorLAB with custom channel values.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorLAB.CreateFromHSL(Rhino.Display.ColorHSL)">
            <summary>
            Create the nearest LAB equivalent of an HSL color.
            </summary>
            <param name="hsl">Target color in HSL space.</param>
            <returns>The LAB equivalent of the HSL color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorLAB.CreateFromCMYK(Rhino.Display.ColorCMYK)">
            <summary>
            Create the nearest LAB equivalent of a CMYK color.
            </summary>
            <param name="cmyk">Target color in CMYK space.</param>
            <returns>The LAB equivalent of the CMYK color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorLAB.CreateFromXYZ(Rhino.Display.ColorXYZ)">
            <summary>
            Create the nearest LAB equivalent of an XYZ color.
            </summary>
            <param name="xyz">Target color in XYZ space.</param>
            <returns>The LAB equivalent of the XYZ color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorLAB.CreateFromLCH(Rhino.Display.ColorLCH)">
            <summary>
            Create the nearest LAB equivalent of an LCH color.
            </summary>
            <param name="lch">Target color in LCH space.</param>
            <returns>The LAB equivalent of the LCH color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorLAB.op_Implicit(Rhino.Display.ColorLAB)~System.Drawing.Color">
            <summary>
            Implicitly converts a LAB color into a .Net library color.
            </summary>
            <param name="lab">A LAB color.</param>
            <returns>A ARGB .Net library color.</returns>
        </member>
        <member name="P:Rhino.Display.ColorLAB.L">
            <summary>
            Gets or sets the lightness channel. The channel is limited to 0~1.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorLAB.A">
            <summary>
            Gets or sets the Base channel. The channel is limited to 0~1.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorLAB.B">
            <summary>
            Gets or sets the Opponent channel. The channel is limited to 0~1.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorLAB.Alpha">
            <summary>
            Gets or sets the Alpha channel. The channel is limited to 0~1.
            </summary>
        </member>
        <member name="T:Rhino.Display.ColorLCH">
            <summary>
            Represents an LCH (Lightness, A, B) color with double precision floating point channels. 
            LCH colors (also sometimes called CIELUV) are transformation of the 1931 CIE XYZ color space, 
            in order to approach perceptual uniformity. They are primarily used in computer graphics which 
            deal with colored lights.
            </summary>
        </member>
        <member name="F:Rhino.Display.ColorLCH.m_a">
            <summary>
            Alpha values are inverted internally! 0 = opaque; 1 = transparent!
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorLCH.#ctor(System.Drawing.Color)">
            <summary>
            Constructs a new instance of ColorLCH that is equivalent to an RGB color.
            </summary>
            <param name="rgb">RGB color to mimic.</param>
            <remarks>Exact conversions between color spaces are often not possible.</remarks>
        </member>
        <member name="M:Rhino.Display.ColorLCH.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorLCH with custom channel values.
            </summary>
            <param name="lightness">Value of lightness channel. This channel is limited to 0~1.</param>
            <param name="chroma">Value of chroma channel. This channel is limited to -1~1.</param>
            <param name="hue">Value of chroma channel. This channel is limited to 0~360.</param>
        </member>
        <member name="M:Rhino.Display.ColorLCH.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new instance of ColorLCH with custom channel values.
            </summary>
            <param name="alpha">Value of Alpha channel. This channel is limited to 0~1.</param>
            <param name="lightness">Value of Lightness channel. This channel is limited to 0~1.</param>
            <param name="chroma">Value of Chroma channel. This channel is limited to -1~1.</param>
            <param name="hue">Value of Hue channel. This channel is limited to 0~360.</param>
        </member>
        <member name="M:Rhino.Display.ColorLCH.CreateFromHSL(Rhino.Display.ColorHSL)">
            <summary>
            Create the nearest LCH equivalent of an HSL color.
            </summary>
            <param name="hsl">Target color in HSL space.</param>
            <returns>The LCH equivalent of the HSL color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorLCH.CreateFromCMYK(Rhino.Display.ColorCMYK)">
            <summary>
            Create the nearest LCH equivalent of a CMYK color.
            </summary>
            <param name="cmyk">Target color in CMYK space.</param>
            <returns>The LCH equivalent of the CMYK color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorLCH.CreateFromXYZ(Rhino.Display.ColorXYZ)">
            <summary>
            Create the nearest LCH equivalent of an XYZ color.
            </summary>
            <param name="xyz">Target color in XYZ space.</param>
            <returns>The LCH equivalent of the XYZ color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorLCH.CreateFromLAB(Rhino.Display.ColorLAB)">
            <summary>
            Create the nearest LCH equivalent of a LAB color.
            </summary>
            <param name="lab">Target color in LAB space.</param>
            <returns>The LCH equivalent of the LAB color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorLCH.op_Implicit(Rhino.Display.ColorLCH)~System.Drawing.Color">
            <summary>
            Implicitly converts a LCH color into a .Net library color.
            </summary>
            <param name="lch">A LCH color.</param>
            <returns>A ARGB .Net library color.</returns>
        </member>
        <member name="M:Rhino.Display.ColorLCH.MakePositive">
            <summary>
            Ensure the Chromaticity of this color is positive. 
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorLCH.L">
            <summary>
            Gets or sets the Lightness channel.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorLCH.C">
            <summary>
            Gets or sets the Chroma channel. Chroma is defined from -1.0 to +1.0.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorLCH.H">
            <summary>
            Gets or sets the Hue channel. The hue channel is limited to the 0~360 degree range.
            </summary>
        </member>
        <member name="P:Rhino.Display.ColorLCH.A">
            <summary>
            Gets or sets the Alpha channel. The Alpha channel is limited to the 0~1 range.
            </summary>
        </member>
        <member name="T:Rhino.Display.ColorConverter">
            <summary>
            Exposes static color conversion methods.
            </summary>
        </member>
        <member name="M:Rhino.Display.ColorConverter.XYZ_To_RGB(System.Double,System.Double,System.Double,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Converts XYZ space colors to RGB.
            </summary>
            <param name="x">X channel (0.0~1.0)</param>
            <param name="y">Y channel (0.0~1.0)</param>
            <param name="z">Z channel (0.0~1.0)</param>
            <param name="r">Red channel (0~255)</param>
            <param name="g">Green channel (0~255)</param>
            <param name="b">Blue channel (0~255)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.RGB_To_XYZ(System.Int32,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts RGB space colors to XYZ. 
            </summary>
            <param name="r">Red channel (0~255)</param>
            <param name="g">Green channel (0~255)</param>
            <param name="b">Blue channel (0~255)</param>
            <param name="x">X channel (0.0~1.0)</param>
            <param name="y">Y channel (0.0~1.0)</param>
            <param name="z">Z channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.XYZ_To_CIELAB(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts XYZ space colors to CIE-L*ab. 
            </summary>
            <param name="x">X channel (0.0~1.0)</param>
            <param name="y">Y channel (0.0~1.0)</param>
            <param name="z">Z channel (0.0~1.0)</param>
            <param name="l">Luminance channel (0.0~1.0)</param>
            <param name="a">A channel (0.0~1.0)</param>
            <param name="b">B channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CIELAB_To_XYZ(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts CIE-L*ab space colors to XYZ. 
            </summary>
            <param name="l">Luminance channel (0.0~1.0)</param>
            <param name="a">A channel (0.0~1.0)</param>
            <param name="b">B channel (0.0~1.0)</param>
            <param name="x">X channel (0.0~1.0)</param>
            <param name="y">Y channel (0.0~1.0)</param>
            <param name="z">Z channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CIELAB_To_CIELCH(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts CIE-L*ab space colors to CIE-L*CH. 
            </summary>
            <param name="l">Luminance channel (0.0~1.0)</param>
            <param name="a">A channel (0.0~1.0)</param>
            <param name="b">B channel (0.0~1.0)</param>
            <param name="lum">Luminance channel (0.0~1.0)</param>
            <param name="c">Chroma channel (0.0~1.0)</param>
            <param name="h">Hue channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CIELCH_To_CIELAB(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts CIE-L*CH space colors to CIE-L*ab. 
            </summary>
            <param name="lum">Luminance channel (0.0~1.0)</param>
            <param name="c">Chroma channel (0.0~1.0)</param>
            <param name="h">Hue channel (0.0~1.0)</param>
            <param name="l">Luminance channel (0.0~1.0)</param>
            <param name="a">A channel (0.0~1.0)</param>
            <param name="b">B channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.RGB_To_HSL(System.Int32,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts RGB space colors to HSL. 
            </summary>
            <param name="r">Red channel (0~255)</param>
            <param name="g">Green channel (0~255)</param>
            <param name="b">Blue channel (0~255)</param>
            <param name="h">Hue channel (0.0~1.0)</param>
            <param name="s">Saturation channel (0.0~1.0)</param>
            <param name="l">Luminance channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.HSL_To_RGB(System.Double,System.Double,System.Double,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Converts HSL space colors to RGB. 
            </summary>
            <param name="h">Hue channel (0.0~1.0)</param>
            <param name="s">Saturation channel (0.0~1.0)</param>
            <param name="l">Luminance channel (0.0~1.0)</param>
            <param name="r">Red channel (0~255)</param>
            <param name="g">Green channel (0~255)</param>
            <param name="b">Blue channel (0~255)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.RGB_To_CMY(System.Int32,System.Int32,System.Int32,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts RGB space colors to CMY. 
            </summary>
            <param name="r">Red channel (0~255)</param>
            <param name="g">Green channel (0~255)</param>
            <param name="b">Blue channel (0~255)</param>
            <param name="c">Cyan channel (0.0~1.0)</param>
            <param name="m">Magenta channel (0.0~1.0)</param>
            <param name="y">Yellow channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CMY_To_RGB(System.Double,System.Double,System.Double,System.Byte@,System.Byte@,System.Byte@)">
            <summary>
            Converts CMY space colors to RGB. 
            </summary>
            <param name="c">Cyan channel (0.0~1.0)</param>
            <param name="y">Yellow channel (0.0~1.0)</param>
            <param name="m">Magenta channel (0.0~1.0)</param>
            <param name="r">Red channel (0~255)</param>
            <param name="g">Green channel (0~255)</param>
            <param name="b">Blue channel (0~255)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CMY_To_CMYK(System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts CMY space colors to CMYK. 
            </summary>
            <param name="c">Cyan channel (0.0~1.0)</param>
            <param name="y">Yellow channel (0.0~1.0)</param>
            <param name="m">Magenta channel (0.0~1.0)</param>
            <param name="cyan">Cyan channel (0.0~1.0)</param>
            <param name="magenta">Magenta channel (0.0~1.0)</param>
            <param name="yellow">Yellow channel (0.0~1.0)</param>
            <param name="k">Key channel (0.0~1.0)</param>
        </member>
        <member name="M:Rhino.Display.ColorConverter.CMYK_To_CMY(System.Double,System.Double,System.Double,System.Double,System.Double@,System.Double@,System.Double@)">
            <summary>
            Converts CMYK space colors to CMY. 
            </summary>
            <param name="cyan">Cyan channel (0.0~1.0)</param>
            <param name="magenta">Magenta channel (0.0~1.0)</param>
            <param name="yellow">Yellow channel (0.0~1.0)</param>
            <param name="key">Key channel (0.0~1.0)</param>
            <param name="c">Cyan channel (0.0~1.0)</param>
            <param name="y">Yellow channel (0.0~1.0)</param>
            <param name="m">Magenta channel (0.0~1.0)</param>
        </member>
        <member name="T:Rhino.DocObjects.AnnotationObjectBase">
            <summary>
            Provides a base class for <see cref="T:Rhino.Geometry.AnnotationBase"/>-derived
            objects that are placed in a document.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.RhinoObject">
            <summary>
            Represents an object in the document.
            <para>RhinoObjects should only ever be creatable by the RhinoDoc.</para>
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.NonConstPointer">
            <summary>
            !!!DO NOT CALL THIS FUNCTION UNLESS YOU ARE WORKING WITH CUSTOM RHINO OBJECTS!!!
            </summary>
            <returns>A pointer.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.MeshObjects(System.Collections.Generic.IEnumerable{Rhino.DocObjects.RhinoObject},Rhino.Geometry.MeshingParameters,Rhino.Geometry.Mesh[]@,Rhino.DocObjects.ObjectAttributes[]@)">
            <summary>Mesh Rhino Objects</summary>
            <param name="rhinoObjects">Objects to mesh</param>
            <param name="parameters">The parameters used to create the meshes</param>
            <param name="meshes"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.MeshObjects(System.Collections.Generic.IEnumerable{Rhino.DocObjects.RhinoObject},Rhino.Geometry.MeshingParameters@,System.Boolean@,Rhino.Geometry.Mesh[]@,Rhino.DocObjects.ObjectAttributes[]@)">
            <summary>Mesh Rhino Objects</summary>
            <param name="rhinoObjects">Objects to mesh</param>
            <param name="parameters">The parameters used to create the meshes</param>
            <param name="simpleDialog"></param>
            <param name="meshes"></param>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetRenderMeshes(System.Collections.Generic.IEnumerable{Rhino.DocObjects.RhinoObject},System.Boolean,System.Boolean)">
            <summary>
            Gets the render meshes of some objects.
            </summary>
            <param name="rhinoObjects">An array, a list, or any enumerable set of Rhino objects.</param>
            <param name="okToCreate">true if the method is allowed to instantiate new meshes if they do not exist.</param>
            <param name="returnAllObjects">true if all objects should be returned.</param>
            <returns>An array of object references.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.DuplicateGeometry">
            <summary>
            Constructs a deep (full) copy of the geometry.
            </summary>
            <returns>A copy of the internal geometry.</returns>
            <example>
            <code source='examples\vbnet\ex_duplicateobject.vb' lang='vbnet'/>
            <code source='examples\cs\ex_duplicateobject.cs' lang='cs'/>
            <code source='examples\py\ex_duplicateobject.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.CommitChanges">
            <summary>
            Moves changes made to this RhinoObject into the RhinoDoc.
            </summary>
            <returns>
            true if changes were made.
            </returns>
            <example>
            <code source='examples\vbnet\ex_addlayout.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayout.cs' lang='cs'/>
            <code source='examples\py\ex_addlayout.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.MemoryEstimate">
            <summary>
            Computes an estimate of the number of bytes that this object is using in memory.
            Note that this is a runtime memory estimate and does not directly compare to the
            amount of space take up by the object when saved to a file.
            </summary>
            <returns>The estimated number of bytes this object occupies in memory.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetGroupList">
            <summary>
            Allocates an array of group indices of length GroupCount.
            If <see cref="P:Rhino.DocObjects.RhinoObject.GroupCount"/> is 0, then this method returns null.
            </summary>
            <returns>An array of group indices, or null if <see cref="P:Rhino.DocObjects.RhinoObject.GroupCount"/> is 0.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.IsSelected(System.Boolean)">
            <summary>Check selection state.</summary>
            <param name="checkSubObjects">
            (false is good default)
            If true and the entire object is not selected, and some subset of the object
            is selected, like some edges of a surface, then 3 is returned.
            If false and the entire object is not selected, then zero is returned.
            </param>
            <returns>
            0 = object is not selected.
            1 = object is selected.
            2 = entire object is selected persistently.
            3 = one or more proper sub-objects are selected.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.IsSubObjectSelected(Rhino.Geometry.ComponentIndex)">
            <summary>Check sub-object selection state.</summary>
            <param name="componentIndex">Index of subobject to check.</param>
            <returns>true if the subobject is selected.</returns>
            <remarks>A subobject cannot be persistently selected.</remarks>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetSelectedSubObjects">
            <summary>Get a list of all selected sub-objects.</summary>
            <returns>An array of subobject indices, or null if there are none.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.IsSelectable(System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Reports if an object can be selected.</summary>
            <param name="ignoreSelectionState">
            If true, then selected objects are selectable.
            If false, then selected objects are not selectable.
            </param>
            <param name="ignoreGripsState">
            If true, then objects with grips on can be selected.
            If false, then the value returned by the object's IsSelectableWithGripsOn() function decides if the object can be selected.
            </param>
            <param name="ignoreLayerLocking">
            If true, then objects on locked layers are selectable.
            If false, then objects on locked layers are not selectable.
            </param>
            <param name="ignoreLayerVisibility">
            If true, then objects on hidden layers are selectable.
            If false, then objects on hidden layers are not selectable.
            </param>
            <returns>true if object is capable of being selected.</returns>
            <remarks>
            Objects that are locked, hidden, or on locked or hidden layers
            cannot be selected. If IsSelectableWithGripsOn() returns false,
            then an that object is not selectable if it has grips turned on.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.IsSelectable">
            <summary>Reports if an object can be selected.</summary>
            <returns>true if object is capable of being selected.</returns>
            <remarks>
            Objects that are locked, hidden, or on locked or hidden layers
            cannot be selected. If IsSelectableWithGripsOn() returns false,
            then an that object is not selectable if it has grips turned on.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.IsSubObjectSelectable(Rhino.Geometry.ComponentIndex,System.Boolean)">
            <summary>Reports if a subobject can be selected.</summary>
            <param name="componentIndex">index of subobject to check.</param>
            <param name="ignoreSelectionState">
            If true, then selected objects are selectable.
            If false, then selected objects are not selectable.
            </param>
            <returns>true if the specified subobject can be selected.</returns>
            <remarks>
            Objects that are locked, hidden, or on locked or hidden layers
            cannot be selected. If IsSelectableWithGripsOn() returns false,
            then that object is not selectable if it has grips turned on.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.Select(System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Selects an object.</summary>
            <param name="on">The new selection state; true activates selection.</param>
            <param name="syncHighlight">
            If true, then the object is highlighted if it is selected 
            and unhighlighted if is is not selected.
            <para>Highlighting can be and stay out of sync, as its specification is independent.</para>
            </param>
            <param name="persistentSelect">
            Objects that are persistently selected stay selected when a command terminates.
            </param>
            <param name="ignoreGripsState">
            If true, then objects with grips on can be selected.
            If false, then the value returned by the object's IsSelectableWithGripsOn() function
            decides if the object can be selected when it has grips turned on.
            </param>
            <param name="ignoreLayerLocking">
            If true, then objects on locked layers can be selected.
            If false, then objects on locked layers cannot be selected.
            </param>
            <param name="ignoreLayerVisibility">
            If true, then objects on hidden layers can be selectable.
            If false, then objects on hidden layers cannot be selected.
            </param>
            <returns>
            <para>0: object is not selected.</para>
            <para>1: object is selected.</para>
            <para>2: object is selected persistently.</para>
            </returns>
            <remarks>
            Objects that are locked, hidden, or on locked or hidden layers
            cannot be selected. If IsSelectableWithGripsOn() returns false,
            then an that object is not selectable if it has grips turned on.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.Select(System.Boolean)">
            <summary>Selects an object.</summary>
            <param name="on">The new selection state; true activates selection.</param>
            <returns>
            <para>0: object is not selected.</para>
            <para>1: object is selected.</para>
            <para>2: object is selected persistently.</para>
            </returns>
            <remarks>
            Objects that are locked, hidden, or on locked or hidden layers
            cannot be selected. If IsSelectableWithGripsOn() returns false,
            then an that object is not selectable if it has grips turned on.
            </remarks>
            <example>
            <code source='examples\vbnet\ex_orientonsrf.vb' lang='vbnet'/>
            <code source='examples\cs\ex_orientonsrf.cs' lang='cs'/>
            <code source='examples\py\ex_orientonsrf.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.Select(System.Boolean,System.Boolean)">
            <summary>Selects an object.</summary>
            <param name="on">The new selection state; true activates selection.</param>
            <param name="syncHighlight">
            If true, then the object is hightlighted if it is selected
            and not hightlighted if is is not selected.
            <para>Highlighting can be and stay out of sync, as its specification is independent.</para>
            </param>
            <returns>
            <para>0: object is not selected.</para>
            <para>1: object is selected.</para>
            <para>2: object is selected persistently.</para>
            </returns>
            <remarks>
            Objects that are locked, hidden, or on locked or hidden layers
            cannot be selected. If IsSelectableWithGripsOn() returns false,
            then an that object is not selectable if it has grips turned on.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.SelectSubObject(Rhino.Geometry.ComponentIndex,System.Boolean,System.Boolean)">
            <summary>Reports if an object can be selected.</summary>
            <param name="componentIndex">Index of subobject to check.</param>
            <param name="select">The new selection state; true activates selection.</param>
            <param name="syncHighlight">
            (default=true)
            If true, then the object is highlighted if it is selected 
            and unhighlighted if is is not selected.
            </param>
            <returns>
            0: object is not selected
            1: object is selected
            2: object is selected persistently.
            </returns>
            <remarks>
            Objects that are locked, hidden, or on locked or hidden layers
            cannot be selected. If IsSelectableWithGripsOn() returns false,
            then an that object is not selectable if it has grips turned on.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.UnselectAllSubObjects">
            <summary>
            Removes selection from all subobjects.
            </summary>
            <returns>The number of unselected subobjects.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.IsHighlighted(System.Boolean)">
            <summary>Check highlight state.</summary>
            <param name="checkSubObjects">
            If true and the entire object is not highlighted, and some subset of the object
            is highlighted, like some edges of a surface, then 3 is returned.
            If false and the entire object is not highlighted, then zero is returned.
            </param>
            <returns>
            <para>0: object is not highlighted.</para>
            <para>1: entire object is highlighted.</para>
            <para>3: one or more proper sub-objects are highlighted.</para>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.Highlight(System.Boolean)">
            <summary>
            Modifies the highlighting of the object.
            </summary>
            <param name="enable">true if highlighting should be enabled.</param>
            <returns>true if the object is now highlighted.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.IsSubObjectHighlighted(Rhino.Geometry.ComponentIndex)">
            <summary>
            Determines if a subobject is highlighted.
            </summary>
            <param name="componentIndex">A subobject component index.</param>
            <returns>true if the subobject is highlighted.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetHighlightedSubObjects">
            <summary>
            Gets a list of all highlighted subobjects.
            </summary>
            <returns>An array of all highlighted subobjects; or null is there are none.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.HighlightSubObject(Rhino.Geometry.ComponentIndex,System.Boolean)">
            <summary>
            Highlights a subobject.
            </summary>
            <param name="componentIndex">A subobject component index.</param>
            <param name="highlight">true if the subobject should be highlighted.</param>
            <returns>true if the subobject is now highlighted.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.UnhighlightAllSubObjects">
            <summary>
            Removes highlighting from all subobjects.
            </summary>
            <returns>The number of changed subobjects.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.EnableCustomGrips(Rhino.DocObjects.Custom.CustomObjectGrips)">
            <summary>Turns on/off the object's editing grips.</summary>
            <param name="customGrips">The custom object grips.</param>
            <returns>
            true if the call succeeded.  If you attempt to add custom grips to an
            object that does not support custom grips, then false is returned.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetGrips">
            <summary>
            Returns grips for this object If grips are enabled. If grips are not
            enabled, returns null.
            </summary>
            <returns>An array of grip objects; or null if there are no grips.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.EnableVisualAnalysisMode(Rhino.Display.VisualAnalysisMode,System.Boolean)">
            <summary>
            Used to turn analysis modes on and off.
            </summary>
            <param name="mode">A visual analysis mode.</param>
            <param name="enable">true if the mode should be activated; false otherwise.</param>
            <returns>true if this object supports the analysis mode.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.InVisualAnalysisMode">
            <summary>
            Reports if any visual analysis mode is currently active for an object.
            </summary>
            <returns>true if an analysis mode is active; otherwise false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.InVisualAnalysisMode(Rhino.Display.VisualAnalysisMode)">
            <summary>
            Reports if a visual analysis mode is currently active for an object.
            </summary>
            <param name="mode">
            The mode to check for.
            <para>Use null if you want to see if any mode is active.</para>
            </param>
            <returns>true if the specified analysis mode is active; otherwise false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetActiveVisualAnalysisModes">
            <summary>
            Gets a list of currently enabled analysis modes for this object.
            </summary>
            <returns>An array of visual analysis modes. The array can be empty, but not null.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.ShortDescription(System.Boolean)">
            <summary>
            Gets a localized short descriptive name of the object.
            </summary>
            <param name="plural">true if the descriptive name should in plural.</param>
            <returns>A string with the short localized descriptive name.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.IsMeshable(Rhino.Geometry.MeshType)">
            <summary>
            Returns true if the object is capable of having a mesh of the specified type
            </summary>
            <param name="meshType"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetRenderMeshParameters">
            <summary>
            Meshing parameters that this object uses for generating render meshes. If the
            object's attributes do not have custom meshing parameters, then the document's
            meshing parameters are used.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.MeshCount(Rhino.Geometry.MeshType,Rhino.Geometry.MeshingParameters)">
            <summary>
            RhinoObjects can have several different types of meshes and 
            different numbers of meshes.  A b-rep can have a render and 
            an analysis mesh on each face.  A mesh object has a single 
            render mesh and no analysis mesh. Curve, point, and annotation
            objects have no meshes.
            </summary>
            <param name="meshType">type of mesh to count</param>
            <param name="parameters">
            if not null and if the object can change its mesh (like a brep),
            then only meshes that were created with these mesh parameters are counted.
            </param>
            <returns>number of meshes</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.CreateMeshes(Rhino.Geometry.MeshType,Rhino.Geometry.MeshingParameters,System.Boolean)">
            <summary>
            Create meshes used to render and analyze surface and polysrf objects.
            </summary>
            <param name="meshType">type of meshes to create</param>
            <param name="parameters">
            in parameters that control the quality of the meshes that are created
            </param>
            <param name="ignoreCustomParameters">
            Default should be false. Should the object ignore any custom meshing
            parameters on the object's attributes
            </param>
            <returns>number of meshes created</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetMeshes(Rhino.Geometry.MeshType)">
            <summary>
            Get existing meshes used to render and analyze surface and polysrf objects.
            </summary>
            <param name="meshType"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.SupportsRenderPrimitiveList(Rhino.DocObjects.ViewportInfo,System.Boolean)">
            <summary>
            Determines if custom render meshes will be built for a particular object.
            </summary>
            <param name="viewport">The viewport being rendered.</param>
            <param name="preview">
            Type of mesh to build. If preview is true then a smaller mesh may be
            generated in less time, false is meant when actually rendering.
            </param>
            <returns>
            Returns true if custom render mesh(es) will get built for this object.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetRenderPrimitiveList(Rhino.DocObjects.ViewportInfo,System.Boolean)">
            <summary>
            Build custom render mesh(es) for this object.
            </summary>
            <param name="viewport">The viewport being rendered.</param>
            <param name="preview">
            Type of mesh to build, if preview is true then a smaller mesh may be
            generated in less time, false is meant when actually rendering.
            </param>
            <returns>
            Returns a RenderPrimitiveList if successful otherwise returns null.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.TryGetRenderPrimitiveBoundingBox(Rhino.DocObjects.ViewportInfo,System.Boolean,Rhino.Geometry.BoundingBox@)">
            <summary>
            Get the bounding box for the custom render meshes associated with this
            object.
            </summary>
            <param name="viewport">The viewport being rendered.</param>
            <param name="preview">
            Type of mesh to build, if preview is true then a smaller mesh may be
            generated in less time, false is meant when actually rendering.
            </param>
            <param name="boundingBox">
            This will be set to BoundingBox.Unset on failure otherwise it will be
            the bounding box for the custom render meshes associated with this
            object.
            </param>
            <returns>
            Returns true if the bounding box was successfully calculated otherwise
            returns false on error.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetSubObjects">
            <summary>
            Gets an array of sub-objects.
            </summary>
            <returns>An array of subobjects, or null if there are none.</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetDynamicTransform(Rhino.Geometry.Transform@)">
            <summary>
            While an object is being dynamically tranformed (dragged, rotated, ...),
            the current transformation can be retrieved and used for creating
            dynamic display.
            </summary>
            <param name="transform"></param>
            <returns>
            True if the object is being edited and its transformation
            is available.  False if the object is not being edited,
            in which case the identity xform is returned.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetTextureMapping(System.Int32)">
            <summary>
            
            </summary>
            <param name="channel"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetTextureMapping(System.Int32,Rhino.Geometry.Transform@)">
            <summary>
            Get objects texture mapping
            </summary>
            <param name="channel"></param>
            <param name="objectTransform"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetTextureChannels">
            <summary>
            Get a list of the texture mapping channel Id's associated with object. 
            </summary>
            <returns>
            Returns an array of channel Id's or an empty list if there are not mappings.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetRenderMaterial(System.Boolean)">
            <summary>
            Gets the RenderMaterial that this object uses based on it's attributes
            and the document that the object is associated with. If there is no 
            RenderMaterial associated with this object then null is returned.  If
            null is returned you should call GetMaterial to get the material used
            to render this object.
            </summary>
            <param name="frontMaterial">
            If true, gets the material used to render the object's front side
            otherwise; gets the material used to render the back side of the
            object.
            </param>
            <returns>
            If there is a RenderMaterial associated with this objects' associated
            Material then it is returned otherwise; null is returned.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.GetMaterial(System.Boolean)">
            <summary>
            Gets material that this object uses based on it's attributes and the document
            that the object is associated with.  In the rare case that a document is not
            associated with this object, null will be returned.
            </summary>
            <param name="frontMaterial">
            If true, gets the material used to render the object's front side
            </param>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.OnDraw(Rhino.Display.DrawEventArgs)">
            <summary>
            Called when Rhino wants to draw this object
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.OnDuplicate(Rhino.DocObjects.RhinoObject)">
            <summary>
            Called when this a new instance of this object is created and copied from
            an existing object
            </summary>
            <param name="source"></param>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.OnDeleteFromDocument(Rhino.RhinoDoc)">
            <summary>
            This call informs an object it is about to be deleted.
            Some objects, like clipping planes, need to do a little extra cleanup
            before they are deleted.
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.OnAddToDocument(Rhino.RhinoDoc)">
            <summary>
            This call informs an object it is about to be added to the list of
            active objects in the document.
            </summary>
            <param name="doc"></param>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.IsActiveInViewport(Rhino.Display.RhinoViewport)">
            <summary>
            Determine if this object is active in a particular viewport.
            </summary>
            <param name="viewport"></param>
            <remarks>
            The default implementation tests for space and viewport id. This
            handles things like testing if a page space object is visible in a
            modeling view.
            </remarks>
            <returns>True if the object is active in viewport</returns>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.OnPick(Rhino.Input.Custom.PickContext)">
            <summary>
            Called to determine if this object or some sub-portion of this object should be
            picked given a pick context.
            </summary>
            <param name="context"></param>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.OnPicked(Rhino.Input.Custom.PickContext,System.Collections.Generic.IEnumerable{Rhino.DocObjects.ObjRef})">
            <summary>
            Called when this object has been picked
            </summary>
            <param name="context"></param>
            <param name="pickedItems">
            Items that were picked. This parameter is enumerable because there may
            have been multiple sub-objects picked
            </param>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.OnSelectionChanged">
            <summary>
            Called when the selection state of this object has changed
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.OnTransform(Rhino.Geometry.Transform)">
            <summary>
            Called when a transformation has been applied to the geometry
            </summary>
            <param name="transform"></param>
        </member>
        <member name="M:Rhino.DocObjects.RhinoObject.OnSpaceMorph(Rhino.Geometry.SpaceMorph)">
            <summary>
            Called when a space morph has been applied to the geometry.
            Currently this only works for CustomMeshObject instances
            </summary>
            <param name="morph"></param>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.NextRuntimeSerialNumber">
            <summary>
            Gets the runtime serial number that will be assigned to
            the next Rhino Object that is created.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.ObjectType">
            <summary>
            Gets the Rhino-based object type.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.IsValid">
            <summary>
            Tests an object to see if its data members are correctly initialized.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.Document">
            <summary>
            Gets the document that owns this object.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.Geometry">
            <summary>
            Gets the underlying geometry for this object.
            <para>All rhino objects are composed of geometry and attributes.</para>
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.Attributes">
            <summary>
            Gets or sets the object attributes.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.RuntimeSerialNumber">
            <summary>
            Gets the objects runtime serial number.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.IsDeletable">
            <summary>
            Some objects cannot be deleted, like grips on lights and annotation objects. 
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.IsDeleted">
            <summary>
            true if the object is deleted. Deleted objects are kept by the document
            for undo purposes. Call RhinoDoc.UndeleteObject to undelete an object.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.IsInstanceDefinitionGeometry">
            <summary>
            true if the object is used as part of an instance definition.   
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.IsNormal">
            <summary>
            An object must be in one of three modes: normal, locked or hidden.
            If an object is in normal mode, then the object's layer controls visibility
            and selectability. If an object is locked, then the object's layer controls
            visibility by the object cannot be selected. If the object is hidden, it is
            not visible and it cannot be selected.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.IsLocked">
            <summary>
            An object must be in one of three modes: normal, locked or hidden.
            If an object is in normal mode, then the object's layer controls visibility
            and selectability. If an object is locked, then the object's layer controls
            visibility by the object cannot be selected. If the object is hidden, it is
            not visible and it cannot be selected.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.IsHidden">
            <summary>
            An object must be in one of three modes: normal, locked or hidden.
            If an object is in normal mode, then the object's layer controls visibility
            and selectability. If an object is locked, then the object's layer controls
            visibility by the object cannot be selected. If the object is hidden, it is
            not visible and it cannot be selected.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.IsReference">
            <summary>
            Gets a value indicating if an object is a reference object. An object from a work session
            reference model is a reference object and cannot be modified. An object is
            a reference object if, and only if, it is on a reference layer.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.Visible">
            <summary>Gets the object visibility.</summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.Id">
            <summary>
            Every object has a Guid (globally unique identifier, also known as UUID, or universally
            unique identifier). The default value is Guid.Empty.
            <para>
            When an object is added to a model, the value is checked.  If the value is Guid.Empty, a
            new Guid is created. If the value is not null but it is already used by another object
            in the model, a new Guid is created. If the value is not Guid.Empty and it is not used by
            another object in the model, then that value persists. When an object is updated, by
            a move for example, the value of ObjectId persists.
            </para>
            <para>This value is the same as the one returned by this.Attributes.ObjectId.</para>
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.Name">
            <summary>
            Rhino objects have optional text names.  More than one object in
            a model can have the same name and some objects may have no name.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.GroupCount">
            <summary>Number of groups object belongs to.</summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.GripsOn">
            <summary>Gets or sets the activation state of object default editing grips.</summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.GripsSelected">
            <summary>
            true if grips are turned on and at least one is selected.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.HasDynamicTransform">
            <summary>
            True if the object has a dynamic transformation
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.RenderMaterialInstanceId">
            <summary>
            Gets the instance ID of the render material associated with this object.
            Andy says this was probably around before the RenderMaterial property
            but it is only used internally now so I made it private.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObject.RenderMaterial">
            <summary>
            Gets the render material associated with this object or null if there
            is none.  This does not pay attention to the material source and will
            not check parent objects or layers for a RenderMaterial.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.AnnotationObjectBase.DisplayText">
            <summary>
            Gets the text that is displayed to users.
            </summary>
            <example>
            <code source='examples\vbnet\ex_gettext.vb' lang='vbnet'/>
            <code source='examples\cs\ex_gettext.cs' lang='cs'/>
            <code source='examples\py\ex_gettext.py' lang='py'/>
            </example>
        </member>
        <member name="T:Rhino.DocObjects.LeaderObject">
            <summary>
            Represents a <see cref="T:Rhino.Geometry.Leader"/> that
            is picked in a document
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.LinearDimensionObject">
            <summary>
            Represents a <see cref="T:Rhino.Geometry.LinearDimension"/>
            that is placed in a document.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.LinearDimensionObject.DimensionStyle">
            <summary>
            Gets the <see cref="T:Rhino.DocObjects.DimensionStyle"/>
            associated with this LinearDimensionObject.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.RadialDimensionObject">
            <summary>
            A radius style dimension
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.AngularDimensionObject">
            <summary>
            Angular style dimension
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.TextDotObject">
            <summary>
            Represents a text dot that is a document.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.TextObject">
            <summary>
            Represents a text object in a document.
            <para>This is a wrapper for CRhinoAnnotationText.</para>
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.TextObject.TextGeometry">
            <summary>
            Gets the text entity geometry of this text object.
            </summary>
        </member>
        <member name="T:Rhino.Display.Text3d">
            <summary>
            3D aligned text with font settings.
            </summary>
        </member>
        <member name="M:Rhino.Display.Text3d.#ctor(System.String)">
            <summary>
            Constructs a new instance of Text3d.
            </summary>
            <param name="text">Text string.</param>
        </member>
        <member name="M:Rhino.Display.Text3d.#ctor(System.String,Rhino.Geometry.Plane,System.Double)">
            <summary>
            Constructs a new instance of Text3d.
            </summary>
            <param name="text">Text string.</param>
            <param name="plane">3D Plane for text.</param>
            <param name="height">Height (in units) for text.</param>
        </member>
        <member name="M:Rhino.Display.Text3d.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Display.Text3d.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Display.Text3d.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Display.Text3d.Text">
            <summary>
            Gets or sets the text string for this Text3d object.
            </summary>
        </member>
        <member name="P:Rhino.Display.Text3d.TextPlane">
            <summary>
            Gets or sets the 3D aligned plane for this Text3d object. 
            </summary>
        </member>
        <member name="P:Rhino.Display.Text3d.Height">
            <summary>
            Gets or sets the height (in units) of this Text3d object. 
            The height should be a positive number larger than zero.
            </summary>
        </member>
        <member name="P:Rhino.Display.Text3d.FontFace">
            <summary>
            Gets or sets the FontFace name.
            </summary>
        </member>
        <member name="P:Rhino.Display.Text3d.Bold">
            <summary>
            Gets or sets whether this Text3d object will be drawn in Bold.
            </summary>
        </member>
        <member name="P:Rhino.Display.Text3d.Italic">
            <summary>
            Gets or sets whether this Text3d object will be drawn in Italics.
            </summary>
        </member>
        <member name="P:Rhino.Display.Text3d.BoundingBox">
            <summary>
            Gets the boundingbox for this Text3d object.
            </summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.PaintColor">
            <summary>
            Contains enumerated constant values to represent logical colors associated with elements of the user interface.
            </summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PaintColor.NormalStart">
            <summary>Gradient start for active toolbar tab and non-client area of Rhino.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PaintColor.NormalEnd">
            <summary>Gradient end for active toolbar tab and non-client area of Rhino.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PaintColor.NormalBorder">
            <summary>Edge color used for grippers, toolbar border, resize bars, status bar pane borders.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PaintColor.HotStart">
            <summary>Gradient start for inactive toolbar tab.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PaintColor.HotEnd">
            <summary>Gradient end for inactive toolbar tab.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PaintColor.HotBorder">
            <summary>Inactive toolbar tab border.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PaintColor.PressedStart">
            <summary>Pressed gradient start.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PaintColor.PressedEnd">
            <summary>Pressed gradient end.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PaintColor.PressedBorder">
            <summary>Pressed border.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PaintColor.TextEnabled">
            <summary>Toolbar tab text and status bar text.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PaintColor.TextDisabled">
            <summary>Disabled text color.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PaintColor.MouseOverControlStart">
            <summary>Color for hovering gradient start.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PaintColor.MouseOverControlEnd">
            <summary>Color for hovering gradient end.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PaintColor.MouseOverControlBorder">
            <summary>Color for hovering border.</summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.AppearanceSettingsState">
            <summary>Represents a snapshot of the values in <see cref="T:Rhino.ApplicationSettings.AppearanceSettings"/>.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.DefaultFontFaceName">
            <summary>
            Gets or sets the name of the default font face.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.DefaultLayerColor">
            <summary>
            Gets or sets the default layer color.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.SelectedObjectColor">
            <summary>
            The color used to draw selected objects.
            The default is yellow, but this can be customized by the user.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.LockedObjectColor">
            <summary>Gets or sets the color used to draw locked objects.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.WorldCoordIconXAxisColor">
            <summary>Gets or sets the color of the world X axis of the world coordinates icon,
            appearing usually bottom left in viewports.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.WorldCoordIconYAxisColor">
            <summary>Gets or sets the color of the world Y axis of the world coordinate icon,
            appearing usually bottom left in viewports.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.WorldCoordIconZAxisColor">
            <summary>Gets or sets the color of the world Z axis of the world coordinate icon,
            appearing usually bottom left in viewports.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.TrackingColor">
            <summary>Gets or sets the tracking color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.FeedbackColor">
            <summary>Gets or sets the feedback color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.DefaultObjectColor">
            <summary>Gets or sets the default object color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.ViewportBackgroundColor">
            <summary>Gets or sets the viewport background color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.FrameBackgroundColor">
            <summary>Gets or sets the frame background color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.CommandPromptTextColor">
            <summary>Gets or sets the command prompt text color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.CommandPromptHypertextColor">
            <summary>Gets or sets the comand prompt hypertext color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.CommandPromptBackgroundColor">
            <summary>Gets or sets the comand prompt background color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.CrosshairColor">
            <summary>Gets or sets the crosshair color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.PageviewPaperColor">
            <summary>
            CRhinoPageView paper background. A rectangle is drawn into the background
            of page views to represent the printed area. The alpha portion of the color
            is used to draw the paper blended into the background
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.CurrentLayerBackgroundColor">
            <summary>
            Gets or sets the color used by the layer manager dialog as the background color for the current layer.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.EchoPromptsToHistoryWindow">
            <summary>Gets or sets a value that determines if prompt messages are written to the history window.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.EchoCommandsToHistoryWindow">
            <summary>Gets or sets a value that determines if command names are written to the history window.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.ShowFullPathInTitleBar">
            <summary>Gets or sets a value that determines if the full path of the document is shown in the Rhino title bar.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.ShowCrosshairs">
            <summary>Gets or sets a value that determines if cross hairs are visible.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.GridThinLineColor">
            <summary>Gets or sets the color of the thin line in the grid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.GridThickLineColor">
            <summary>Gets or sets the color of the thick line in the grid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.GridXAxisLineColor">
            <summary>Gets or sets the color of X axis line in the grid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.GridYAxisLineColor">
            <summary>Gets or sets the color of Y axis line in the grid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettingsState.GridZAxisLineColor">
            <summary>Gets or sets the color of Z axis line in the grid.</summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.CommandPromptPosition">
            <summary>
            Defines enumerated constant values for default positions of the command prompt inside the frame of the full editor window.
            </summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.CommandPromptPosition.Top">
            <summary>The command prompt is shown on top.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.CommandPromptPosition.Bottom">
            <summary>The command prompt is shown at the bottom.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.CommandPromptPosition.Floating">
            <summary>The command prompt is shown floating.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.CommandPromptPosition.Hidden">
            <summary>The command prompt is shown hidden.</summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.AppearanceSettings">
            <summary>
            Provides static methods and properties to deal with the appearance of the application.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.AppearanceSettings.GetDefaultState">
            <summary>
            Gets the factory settings of the application.
            </summary>
            <returns>An instance of a class that represents all the default settings joined together.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.AppearanceSettings.GetCurrentState">
            <summary>
            Gets the current settings of the application.
            </summary>
            <returns>An instance of a class that represents all the settings as they appear in the Rhino _Options dialog,
            joined in a single class.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.AppearanceSettings.RestoreDefaults">
            <summary>
            Commits the default settings as the current settings.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.AppearanceSettings.UpdateFromState(Rhino.ApplicationSettings.AppearanceSettingsState)">
            <summary>
            Sets all settings to a particular defined joined state.
            </summary>
            <param name="state">A joined settings object.</param>
        </member>
        <member name="M:Rhino.ApplicationSettings.AppearanceSettings.GetPaintColor(Rhino.ApplicationSettings.PaintColor)">
            <summary>
            Gets the .Net library color that is currently associated with a paint color.
            </summary>
            <param name="whichColor">A color association.</param>
            <returns>A .Net library color.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.AppearanceSettings.SetPaintColor(Rhino.ApplicationSettings.PaintColor,System.Drawing.Color)">
            <summary>
            Sets the logical paint color association to a spacific .Net library color, without forced UI update.
            </summary>
            <param name="whichColor">A logical color association.</param>
            <param name="c">A .Net library color.</param>
        </member>
        <member name="M:Rhino.ApplicationSettings.AppearanceSettings.SetPaintColor(Rhino.ApplicationSettings.PaintColor,System.Drawing.Color,System.Boolean)">
            <summary>
            Sets the logical paint color association to a spacific .Net library color.
            </summary>
            <param name="whichColor">A logical color association.</param>
            <param name="c">A .Net library color.</param>
            <param name="forceUiUpdate">true if the UI should be forced to update.</param>
        </member>
        <member name="M:Rhino.ApplicationSettings.AppearanceSettings.InitialMainWindowState(System.Drawing.Rectangle@,System.Windows.Forms.FormWindowState@)">
            <summary>
            Location where the Main Rhino window attempts to show when the application is first
            started.
            </summary>
            <param name="bounds">The rectangle in which the main window attempts to shows is assigned to this out parameter during the call.</param>
            <param name="state">The form state is assigned to this out parameter during the call.</param>
            <returns>false if the information could not be retrieved.</returns>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.DefaultFontFaceName">
            <summary>
            Gets or sets the default font face name used in Rhino.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.UsePaintColors">
            <summary>
            Gets or sets a value indicating if logical paint colors should be used.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.DefaultLayerColor">
            <summary>
            Gets or sets the default layer color.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.SelectedObjectColor">
            <summary>
            The color used to draw selected objects.
            The default is yellow, but this can be customized by the user.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.LockedObjectColor">
            <summary>color used to draw locked objects.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.WorldCoordIconXAxisColor">
            <summary>
            Gets or sets the color of the world coordinate X axis.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.WorldCoordIconYAxisColor">
            <summary>
            Gets or sets the color of the world coordinate Y axis.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.WorldCoordIconZAxisColor">
            <summary>
            Gets or sets the color of the world coordinate Z axis.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.TrackingColor">
            <summary>
            Gets or sets the tracking color.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.FeedbackColor">
            <summary>
            Gets or sets the feedback color.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.DefaultObjectColor">
            <summary>
            Gets or sets the default color for new objects.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.ViewportBackgroundColor">
            <summary>
            Gets or sets the viewport background color.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.FrameBackgroundColor">
            <summary>
            Gets or sets the background color of the frame.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.CommandPromptTextColor">
            <summary>
            Gets or sets the color of the command prompt text.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.CommandPromptHypertextColor">
            <summary>
            Gets or sets the color of the command prompt hypertext.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.CommandPromptBackgroundColor">
            <summary>
            Gets or sets the color of the command prompt background.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.CrosshairColor">
            <summary>
            Gets or sets the color of the crosshair icon.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.PageviewPaperColor">
            <summary>
             Gets or sets the paper background. A rectangle is drawn into the background
             of page views to represent the printed area. The alpha portion of the color
             is used to draw the paper blended into the background
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.CurrentLayerBackgroundColor">
            <summary>
             Gets or sets the color used by the layer manager dialog as the background color for the current layer.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.GridThinLineColor">
            <summary>
            Gets or sets the color of the thin line of the grid.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.GridThickLineColor">
            <summary>
            Gets or sets the color of the thick line of the grid.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.GridXAxisLineColor">
            <summary>
            Gets or sets the color of the X axis of the grid.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.GridYAxisLineColor">
            <summary>
            Gets or sets the color of the Y axis of the grid.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.GridZAxisLineColor">
            <summary>
            Gets or sets the color of the Z axis of the grid.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.CommandPromptPosition">
            <summary>
            Gets or sets the command prompt position.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.EchoPromptsToHistoryWindow">
            <summary>Gets or sets a value that determines if prompt messages are written to the history window.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.EchoCommandsToHistoryWindow">
            <summary>Gets or sets a value that determines if command names are written to the history window.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.ShowFullPathInTitleBar">
            <summary>Gets or sets a value that determines if the full path of the document is shown in the Rhino title bar.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.ShowCrosshairs">
            <summary>Gets or sets a value that determines if cross hairs are visible.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.MenuVisible">
            <summary>Gets or sets a value that determines if the File menu is visible.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.LanguageIdentifier">
            <summary>Gets or sets the language identifier.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.AppearanceSettings.PreviousLanguageIdentifier">
            <summary>
            Gets or sets the previous language identifier.
            </summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.CommandAliasList">
            <summary>
            Contains static methods and properties to access command aliases.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.CommandAliasList.GetNames">
            <summary>Returns a list of command alias names.</summary>
            <returns>An array of strings. This can be empty.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.CommandAliasList.Clear">
            <summary>Removes all aliases from the list.</summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.CommandAliasList.GetMacro(System.String)">
            <summary>Returns the macro of a command alias.</summary>
            <param name='alias'>[in] The name of the command alias.</param>
        </member>
        <member name="M:Rhino.ApplicationSettings.CommandAliasList.SetMacro(System.String,System.String)">
            <summary>Modifies the macro of a command alias.</summary>
            <param name='alias'>[in] The name of the command alias.</param>
            <param name='macro'>[in] The new command macro to run when the alias is executed.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.CommandAliasList.Add(System.String,System.String)">
            <summary>Adds a new command alias to Rhino.</summary>
            <param name='alias'>[in] The name of the command alias.</param>
            <param name='macro'>[in] The command macro to run when the alias is executed.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.CommandAliasList.Delete(System.String)">
            <summary>Deletes an existing command alias from Rhino.</summary>
            <param name='alias'>[in] The name of the command alias.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.CommandAliasList.IsAlias(System.String)">
            <summary>Verifies that a command alias exists in Rhino.</summary>
            <param name='alias'>[in] The name of the command alias.</param>
            <returns>true if the alias exists.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.CommandAliasList.ToDictionary">
            <summary>
            Constructs a new dictionary that contains: as keys all names and as values all macros.
            <para>Modifications to this dictionary do not affect any Rhino command alias.</para>
            </summary>
            <returns>The new dictionary.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.CommandAliasList.IsDefault">
            <summary>
            Computes a value indicating if the current alias list is the same as the default alias list.
            </summary>
            <returns>true if the current alias list is exactly equal to the default alias list; false otherwise.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.CommandAliasList.GetDefaults">
            <summary>
            Constructs a dictionary containing as keys the default names and as value the default macro.
            <para>The returned dicionary contains a copy of the settings.</para>
            </summary>
            <returns>A new dictionary with the default name/macro combinantions.</returns>
        </member>
        <member name="P:Rhino.ApplicationSettings.CommandAliasList.Count">
            <summary>Returns the number of command alias in Rhino.</summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.EdgeAnalysisSettingsState">
            <summary>Represents a snapshot of <see cref="T:Rhino.ApplicationSettings.EdgeAnalysisSettings"/>.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.EdgeAnalysisSettingsState.ShowEdgeColor">
            <summary>
            Gets or sets a color used to enhance display edges in commands like _ShowEdges and _ShowNakedEdges.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.EdgeAnalysisSettingsState.ShowEdges">
            <summary>
            Gets or sets a value referring to the group of edges that are targeted.
            <para>0 = all.</para>
            <para>1 = naked.</para>
            <para>2 = non-manifold.</para>
            </summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.EdgeAnalysisSettings">
            <summary>
            Contains static methods and properties to modify the visitbility of edges in edge-related commands.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.EdgeAnalysisSettings.GetDefaultState">
            <summary>
            Gets the factory settings of the application.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.EdgeAnalysisSettings.GetCurrentState">
            <summary>
            Gets the current settings of the application.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.EdgeAnalysisSettings.RestoreDefaults">
            <summary>
            Commits the default settings as the current settings.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.EdgeAnalysisSettings.UpdateFromState(Rhino.ApplicationSettings.EdgeAnalysisSettingsState)">
            <summary>
            Sets all settings to a particular defined joined state.
            </summary>
            <param name="state">The particular state.</param>
        </member>
        <member name="P:Rhino.ApplicationSettings.EdgeAnalysisSettings.ShowEdgeColor">
            <summary>Gets or sets a color used to enhance display
            edges in commands like _ShowEdges and _ShowNakedEdges.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.EdgeAnalysisSettings.ShowEdges">
            <summary>
            Gets or sets a value referring to the group of edges that are targeted.
            <para>0 = all.</para>
            <para>1 = naked.</para>
            <para>2 = non-manifold.</para>
            </summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.FileSettingsState">
            <summary>
            Represents a snapshot of <see cref="T:Rhino.ApplicationSettings.FileSettings"/>.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettingsState.AutoSaveInterval">
            <summary>How often the document will be saved when Rhino&apos;s automatic file saving mechanism is enabled.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettingsState.AutoSaveEnabled">
            <summary>Enables or disables Rhino&apos;s automatic file saving mechanism.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettingsState.AutoSaveMeshes">
            <summary>Saves render and display meshes in autosave file.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettingsState.SaveViewChanges">
            <summary>true for users who consider view changes a document change.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettingsState.FileLockingEnabled">
            <summary>Ensures that only one person at a time can have a file open for saving.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettingsState.FileLockingOpenWarning">
            <summary>Displays an information dialog which identifies computer file is open on.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettingsState.ClipboardCopyToPreviousRhinoVersion">
            <summary>
            Gets or sets a value that decides if copies to the clipboard are performed in both the current
            and previous Rhino clipboard formats.  This means you will double the size of what is saved in
            the clipboard but will be able to copy from the current to the previous version using the
            clipboard.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettingsState.ClipboardOnExit">
            <summary>
            Gets or sets a value that determines what to do with clipboad data on exit.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettingsState.CreateBackupFiles">
            <summary>
            Gets or sets a value indicating whether to create backup files.
            </summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.FileSettings">
            <summary>
            Contains static methods and properties relating Rhino files.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.FileSettings.GetDefaultState">
            <summary>
            Returns the default state.
            </summary>
            <returns>A new instance containing the default state.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.FileSettings.GetCurrentState">
            <summary>
            Returns the current state.
            </summary>
            <returns>A new instance containing the current state.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.FileSettings.GetDataFolder(System.Boolean)">
            <summary>
            Gets the data folder for machine or current user.
            </summary>
            <param name="currentUser">true if the query relates to the current user.</param>
            <returns>A directory to user or machine data.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.FileSettings.RecentlyOpenedFiles">
            <summary>
            Returns a list of recently opened files. Note that this function does not
            check to make sure that these files still exist.
            </summary>
            <returns>An array of strings with the paths to the recently opened files.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.FileSettings.AddSearchPath(System.String,System.Int32)">
             <summary>
             Adds a new imagePath to Rhino&apos;s search imagePath list.
             See "Options Files settings" in the Rhino help file for more details.
             </summary>
             <param name='folder'>[in] The valid folder, or imagePath, to add.</param>
             <param name='index'>
             [in] A zero-based position index in the search imagePath list to insert the string.
             If -1, the imagePath will be appended to the end of the list.
             </param>
             <returns>
             The index where the item was inserted if success.
             <para>-1 on failure.</para>
            </returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.FileSettings.DeleteSearchPath(System.String)">
            <summary>
            Removes an existing imagePath from Rhino's search imagePath list.
            See "Options Files settings" in the Rhino help file for more details.
            </summary>
            <param name='folder'>[in] The valid folder, or imagePath, to remove.</param>
            <returns>true or false indicating success or failure.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.FileSettings.FindFile(System.String)">
            <summary>
            Searches for a file using Rhino's search imagePath. Rhino will look for a file in the following locations:
            1. The current document's folder.
            2. Folder's specified in Options dialog, File tab.
            3. Rhino's System folders.
            </summary>
            <param name="fileName">short file name to search for.</param>
            <returns> full imagePath on success; null on error.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.FileSettings.GetSearchPaths">
            <summary>
            Returns all of the imagePath items in Rhino's search imagePath list. See "Options Files settings" in the Rhino help file for more details.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.FileSettings.AutoSaveBeforeCommands">
            <summary>Input list of commands that force AutoSave prior to running.</summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.FileSettings.SetAutoSaveBeforeCommands(System.String[])">
            <summary>Set list of commands that force AutoSave prior to running.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.SearchPathCount">
            <summary>
            Gets the amount of search paths that are currently defined.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.WorkingFolder">
            <summary>
            Returns or sets Rhino's working directory, or folder.
            The working folder is the default folder for all file operations.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.TemplateFolder">
            <summary>Returns or sets the location of Rhino's template files.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.TemplateFile">
            <summary>Returns or sets the location of Rhino&apos;s template file.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.AutoSaveFile">
            <summary>the file name used by Rhino&apos;s automatic file saving mechanism.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.AutoSaveInterval">
            <summary>how often the document will be saved when Rhino&apos;s automatic file saving mechanism is enabled.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.AutoSaveEnabled">
            <summary>Enables or disables Rhino&apos;s automatic file saving mechanism.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.AutoSaveMeshes">
            <summary>save render and display meshes in autosave file.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.SaveViewChanges">
            <summary>true for users who consider view changes a document change.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.FileLockingEnabled">
            <summary>Ensure that only one person at a time can have a file open for saving.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.FileLockingOpenWarning">
            <summary>Gets or sets whether to display the information dialog which identifies computer files.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.CreateBackupFiles">
            <summary>Gets or sets a value that controls the creation of backup files.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.ClipboardCopyToPreviousRhinoVersion">
            <summary>
            Gets or sets a value that decides if copies to the clipboard are performed in both the current
            and previous Rhino clipboard formats.  This means you will double the size of what is saved in
            the clipboard but will be able to copy from the current to the previous version using the
            clipboard.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.ClipboardOnExit">
            <summary>
            Gets or sets a value that determines what to do with clipboad data on exit.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.ExecutableFolder">
            <summary>Returns the directory where the main Rhino executable is located.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.InstallFolder">
            <summary>Returns Rhino's installation folder.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.HelpFilePath">
            <summary>
            Gets the Rhino help file path.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.LocalProfileDataFolder">
            <summary>
            Get full path to a Rhino specific sub-folder under the per-user Local
            (non-roaming) Profile folder.  This is the folder where user-specific
            data is stored.
            
            Windows NT4, 2000, XP, usually someplace like:
              "C:\Documents and Settings\[USERNAME]\Local Settings\Application Data\McNeel\Rhinoceros\[VERSION_NUMBER]\"
            Windows Vista, 7, usually someplace like:
              "C:\Users\[USERNAME]\AppData\Local\McNeel\Rhinoceros\[VERSION_NUMBER]\"
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.FileSettings.DefaultRuiFile">
            <summary>
            Gets the path to the default RUI file.
            </summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.NeverRepeatList">
            <summary>
            Contains static methods and properties relating to the list of commands that are never repeated.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.NeverRepeatList.SetList(System.String[])">
            <summary>Puts the command name tokens in m_dont_repeat_list.</summary>
            <returns>Number of items added to m_dont_repeat_list.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.NeverRepeatList.CommandNames">
            <summary>The list of commands to not repeat.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.NeverRepeatList.UseNeverRepeatList">
             <summary>
             Only use the list if somebody modifies it via CRhinoAppSettings::SetDontRepeatCommands().
             Return value of true means CRhinoCommand don&apos;t repeat flags will be ignored and the m_dont_repeat_list
             will be used instead.  false means the individual CRhinoCommands will determine if they are repeatable.
            </summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.MouseSelectMode">
            <summary>
            Defines enumerated constant values to indicate a particular window selection mode.
            </summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.MouseSelectMode.Crossing">
            <summary>Anything that crosses this window will be selected.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.MouseSelectMode.Window">
            <summary>Anything that is inside this window will be selected.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.MouseSelectMode.Combo">
            <summary>Drag a rectangle from left to right for window select. Drag a rectangle from right to left for crossing select.</summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.MiddleMouseMode">
            <summary>
            Defines enumerated constant values to define what happens when
            either the middle mouse button on a three-button mouse is clicked or after pressing the wheel on a wheeled mouse.
            </summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.MiddleMouseMode.PopupMenu">
            <summary>Pops up two-part menu at the cursor location.
            You can list your favorite commands in the top section.
            The bottom section is the list of most recent commands used.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.MiddleMouseMode.PopupToolbar">
            <summary>
            Choose a toolbar to pop up at the cursor location.
            Create a toolbar containing your favorite commands or object snaps to use as a pop-up toolbar.
            </summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.MiddleMouseMode.RunMacro">
            <summary>
            Lists a series of commands that run when you click the middle mouse button.
            </summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.GeneralSettingsState">
            <summary>
            Represents a snapshot of <see cref="T:Rhino.ApplicationSettings.GeneralSettings"/>.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettingsState.MouseSelectMode">
            <summary>
            Gets or sets the current selection mode.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettingsState.MaximumPopupMenuLines">
            <summary>
            Gets or sets the maximum number of popup menu lines.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettingsState.MinimumUndoSteps">
            <summary>
            Gets or sets the minimum undo steps.
            <para>Undo records will be purged if there are more than MinimumUndoSteps and
            they use more than MaximumUndoMemoryMb.</para>
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettingsState.MaximumUndoMemoryMb">
            <summary>
            Gets or sets the minimum undo memory Mb.
            <para>Undo records will be purged if there are more than MinimumUndoSteps and
            they use more than MaximumUndoMemoryMb.</para>
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettingsState.NewObjectIsoparmCount">
            <summary>
            Gets or sets the number of isoparm curves to show on new objects.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettingsState.MiddleMouseMode">
            <summary>
            Gets or sets what happens when the user clicks the middle mouse.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettingsState.MiddleMousePopupToolbar">
            <summary>
            Gets or sets the toolbar to popup when the middle mouse is clicked on
            a view, this value is only used when MiddleMouseMode is set to
            PopupToolbar.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettingsState.MiddleMouseMacro">
            <summary>
            Gets or sets the toolbar to popup when the middle mouse is clicked on
            a view, this value is only used when MiddleMouseMode is set to
            PopupToolbar.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettingsState.EnableContextMenu">
            <summary>
            true if right mouse down + delay will pop up context menu on a mouse up if no move happens.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettingsState.ContextMenuDelay">
            <summary>
            Gets or sets the time to wait before permitting context menu display.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettingsState.AutoUpdateCommandHelp">
            <summary>
            Gets or sets the command help dialog auto-update feature.
            </summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.GeneralSettings">
            <summary>
            Contains static methods and properties to give access to Rhinoceros settings.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.GeneralSettings.GetDefaultState">
            <summary>
            Gets the factory settings.
            </summary>
            <returns>A new general state with factory settings.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.GeneralSettings.GetCurrentState">
            <summary>
            Gets the current settings.
            </summary>
            <returns>A new general state with current settings.</returns>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettings.MouseSelectMode">
            <summary>
            Gets or sets the current selection mode.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettings.MaximumPopupMenuLines">
            <summary>
            Gets or sets the maximum number of popup menu lines.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettings.MinimumUndoSteps">
            <summary>
            Gets or sets the minimum undo steps.
            <para>Undo records will be purged if there are more than MinimumUndoSteps and
            they use more than MaximumUndoMemoryMb.</para>
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettings.MaximumUndoMemoryMb">
            <summary>
            Gets or sets the minimum undo memory Mb.
            <para>Undo records will be purged if there are more than MinimumUndoSteps and
            they use more than MaximumUndoMemoryMb.</para>
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettings.NewObjectIsoparmCount">
            <summary>
            Gets or sets the number of isoparm curves to show on new objects.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettings.MiddleMouseMode">
            <summary>
            Gets or sets what happens when the user clicks the middle mouse.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettings.MiddleMousePopupToolbar">
            <summary>
            Gets or sets the toolbar to popup when the middle mouse is clicked on
            a view, this value is only used when MiddleMouseMode is set to
            PopupToolbar.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettings.MiddleMouseMacro">
            <summary>
            Gets or sets the toolbar to popup when the middle mouse is clicked on
            a view, this value is only used when MiddleMouseMode is set to
            PopupToolbar.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettings.EnableContextMenu">
            <summary>
            true if right mouse down + delay will pop up context menu on a mouse up if no move happens.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettings.ContextMenuDelay">
            <summary>
            Time to wait before permitting context menu display.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.GeneralSettings.AutoUpdateCommandHelp">
            <summary>
            Command help dialog auto-update feature.
            </summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.ClipboardState">
            <summary>
            Defines enumerated constant values for diferent behaviour that is related to clipboard data.
            </summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ClipboardState.KeepData">
            <summary>Always keep clipboard data, regardless of size and never prompt the user.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ClipboardState.DeleteData">
            <summary>Always delete clipboard data, regardless of size and never prompt the user.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ClipboardState.PromptWhenBig">
            <summary>Prompt user when clipboard memory is large.</summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.CursorMode">
            <summary>
            Defines enumerated constant values for particular OSnap cursor colors.
            </summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.CursorMode.None">
            <summary>
            No OSnap cursor.
            </summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.CursorMode.BlackOnWhite">
            <summary>
            Black on white OSnap cursor.
            </summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.CursorMode.WhiteOnBlack">
            <summary>
            White on black OSnap cursor.
            </summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.OsnapModes">
            <summary>
            Defines several bit masks for each of the OSnap that are defined.
            <para>Refer to the Rhino Help file for further information.</para>
            </summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.OsnapModes.None">
            <summary>No OSnap.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.OsnapModes.Near">
            <summary>Near OSnap.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.OsnapModes.Focus">
            <summary>Focus OSnap.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.OsnapModes.Center">
            <summary>Center OSnap.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.OsnapModes.Vertex">
            <summary>Vertex OSnap.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.OsnapModes.Knot">
            <summary>Knot OSnap.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.OsnapModes.Quadrant">
            <summary>Quadrant OSnap.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.OsnapModes.Midpoint">
            <summary>Midpoint OSnap.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.OsnapModes.Intersection">
            <summary>Intersection OSnap.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.OsnapModes.End">
            <summary>End OSnap.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.OsnapModes.Perpendicular">
            <summary>Perpendicular OSnap.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.OsnapModes.Tangent">
            <summary>Tangent OSnap.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.OsnapModes.Point">
            <summary>Point OSnap.</summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.PointDisplayMode">
            <summary>
            Defines enumerated constant values for world coordinates and CPlane point display modes.
            </summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PointDisplayMode.WorldPoint">
            <summary>Points are displayed in world coordinates.</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.PointDisplayMode.CplanePoint">
            <summary>Points are displayed in CPlane coordinates.</summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.ModelAidSettingsState">
            <summary>
            Represents a snapshot of <see cref="T:Rhino.ApplicationSettings.ModelAidSettings"/>.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.GridSnap">
            <summary>Gets or sets the enabled state of Rhino's grid snap modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.Ortho">
            <summary>Gets or sets the enabled state of Rhino&apos;s ortho modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.Planar">
            <summary>Gets or sets the enabled state of Rhino&apos;s Planar modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.ProjectSnapToCPlane">
            <summary>Gets or sets the enabled state of Rhino&apos;s Project modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.UseHorizontalDialog">
            <summary>Gets or sets the enabled state of Rhino&apos;s use horizontal dialog modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.ExtendTrimLines">
            <summary>Gets or sets the enabled state of Rhino&apos;s extend trim lines.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.ExtendToApparentIntersection">
            <summary>Gets or sets the enabled state of Rhino&apos;s extend to apparent intersections.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.AltPlusArrow">
            <summary>true mean Alt+arrow is used for nudging.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.DisplayControlPolygon">
            <summary>Gets or sets the enabled state of Rhino&apos;s display control polygon.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.HighlightControlPolygon">
            <summary>Gets or sets the enabled state of Rhino&apos;s highlight dialog modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.Osnap">
            <summary>Gets or sets the enabled state of Rhino&apos;s object snap modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.SnapToLocked">
            <summary>Gets or sets the locked state of the snap modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.UniversalConstructionPlaneMode">
            <summary>Gets or sets the locked state of the snap modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.OrthoAngle">
            <summary>Gets or sets the base orthogonal angle.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.NudgeKeyStep">
            <summary>Gets or sets the nudge step amount.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.CtrlNudgeKeyStep">
            <summary>Gets or sets the Ctrl-key based nudge step amount.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.ShiftNudgeKeyStep">
            <summary>Gets or sets the Shift-key based nudge step amount.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.OsnapPickboxRadius">
            <summary>Enables or disables Rhino's planar modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.NudgeMode">
            <summary>0 = world, 1 = cplane, 2 = view, 3 = uvn, -1 = not set.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.ControlPolygonDisplayDensity">
            <summary>Gets or sets the control polygon display density.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.OsnapCursorMode">
            <summary>Gets or sets the OSnap cursor mode.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.OsnapModes">
            <summary>
            Returns or sets Rhino's current object snap mode.
            <para>The mode is a bitwise value based on the OsnapModes enumeration.</para>
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.MousePickboxRadius">
            <summary>Gets or sets the radius of the mouse pick box in pixels.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettingsState.PointDisplay">
            <summary>Gets or sets the point display mode.</summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.ModelAidSettings">
            <summary>
            Contains static methods and properties to modify model aid settings.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.ModelAidSettings.GetCurrentState">
            <summary>
            Gets the current settings.
            </summary>
            <returns>A new model aid state with current settings.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.ModelAidSettings.GetDefaultState">
            <summary>
            Gets the factory settings.
            </summary>
            <returns>A new model aid state with factory settings.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.ModelAidSettings.UpdateFromState(Rhino.ApplicationSettings.ModelAidSettingsState)">
            <summary>
            Updates from a particular setting state.
            </summary>
            <param name="state">The new states that will be set.</param>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.GridSnap">
            <summary>Gets or sets the enabled state of Rhino's grid snap modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.Ortho">
            <summary>Gets or sets the enabled state of Rhino&apos;s ortho modeling aid.</summary>
             <example>
             <code source='examples\vbnet\ex_ortho.vb' lang='vbnet'/>
             <code source='examples\cs\ex_ortho.cs' lang='cs'/>
             <code source='examples\py\ex_ortho.py' lang='py'/>
             </example>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.Planar">
            <summary>Gets or sets the enabled state of Rhino&apos;s Planar modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.ProjectSnapToCPlane">
            <summary>Gets or sets the enabled state of Rhino&apos;s Project modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.UseHorizontalDialog">
            <summary>Gets or sets the enabled state of Rhino&apos;s use horizontal dialog modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.ExtendTrimLines">
            <summary>Gets or sets the enabled state of Rhino&apos;s extend trim lines.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.ExtendToApparentIntersection">
            <summary>Gets or sets the enabled state of Rhino&apos;s extend to apparent intersections.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.AltPlusArrow">
            <summary>true means Alt+arrow is used for nudging.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.DisplayControlPolygon">
            <summary>Gets or sets the enabled state of Rhino&apos;s display control polygon.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.HighlightControlPolygon">
            <summary>Gets or sets the enabled state of Rhino&apos;s highlight dialog modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.Osnap">
            <summary>Enables or disables Rhino&apos;s object snap modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.SnapToLocked">
            <summary>Gets or sets the locked state of the snap modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.UniversalConstructionPlaneMode">
            <summary>Gets or sets the locked state of the snap modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.OrthoAngle">
            <summary>Gets or sets the base orthogonal angle.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.NudgeKeyStep">
            <summary>Gets or sets the nudge step amount.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.CtrlNudgeKeyStep">
            <summary>Gets or sets the Ctrl-key based nudge step amount.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.ShiftNudgeKeyStep">
            <summary>Gets or sets the Shift-key based nudge step amount.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.OsnapPickboxRadius">
            <summary>Enables or disables Rhino's planar modeling aid.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.NudgeMode">
            <summary>0 = world, 1 = cplane, 2 = view, 3 = uvn, -1 = not set.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.ControlPolygonDisplayDensity">
            <summary>Gets or sets the control polygon display density.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.OsnapCursorMode">
            <summary>Gets or sets the OSnap cursor mode.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.OsnapModes">
            <summary>
            Returns or sets Rhino's current object snap mode.
            The mode is a bitwise value based on the OsnapModes enumeration.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.MousePickboxRadius">
            <summary>radius of mouse pick box in pixels.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.PointDisplay">
            <summary>Gets or sets the point display mode.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.AutoGumballEnabled">
            <summary>
            When AutoGumball is on, a gumball automatically appears
            when objects are prepicked.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ModelAidSettings.SnappyGumballEnabled">
            <summary>
            When SnappyGumball is on, a dragging a gumball moves the center point.
            When snappy gumball is off, dragging a gumball moves the mouse down point.
            </summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.ViewSettingsState">
            <summary>
            Represents a snapshot of <see cref="T:Rhino.ApplicationSettings.ViewSettings"/>.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettingsState.PanScreenFraction">
            <summary>Gets or sets the faction used as multiplier to pan the screen.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettingsState.PanReverseKeyboardAction">
            <summary>Gets or sets if panning with the keyboard is reversed.
            <para>false, then Rhino pans the camera in the direction of the arrow key you press.
            true, then Rhino pans the scene instead.</para></summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettingsState.AlwaysPanParallelViews">
            <summary>Gets or sets the 'always pan parallel views' value.
            <para>If the view is not looking straight at the construction plane, then
            sets parallel viewports so they will not rotate.</para></summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettingsState.ZoomScale">
            <summary>
            Gets or sets the step size for zooming with a wheeled mouse or the Page Up and Page Down keys.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettingsState.RotateCircleIncrement">
            <summary>
            Gets or sets the rotation increment.
            <para>When the user rotates a view with the keyboard, Rhino rotates the view in steps.
            The usual step is 1/60th of a circle, which equals six degrees.</para>
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettingsState.RotateReverseKeyboard">
            <summary>
            Gets or sets the rotation direction.
            <para>If true, then Rhino rotates the camera around the scene, otherwise, rotates the scene itself.</para>
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettingsState.RotateToView">
            <summary>
            Gets or sets the rotation reference.
            <para>If true, then the views rotates relative to the view axes; false, than relative to the world x, y, and z axes.</para>
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettingsState.DefinedViewSetCPlane">
            <summary>
            Gets or sets the 'named views set CPlane' value.
            <para>When true, restoring a named view causes the construction plane saved with that view to also restore.</para>
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettingsState.DefinedViewSetProjection">
            <summary>
            Gets or sets the 'named views set projection' value.
            <para>When true, restoring a named view causes the viewport projection saved with the view to also restore.</para>
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettingsState.SingleClickMaximize">
            <summary>
            Gets or sets the 'single-click maximize' value.
            <para>When true, maximizing a viewport needs a single click on the viewport title rather than a double-click.</para>
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettingsState.LinkedViewports">
            <summary>
            Gets or sets the 'linked views' activated setting.
            <para>true enables real-time view synchronization.
            When a standard view is manipulated, the camera lens length of all parallel projection
            viewports are set to match the current viewport.</para>
            </summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.ViewSettings">
            <summary>
            Contains static methods and properties to control view settings.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.ViewSettings.GetDefaultState">
            <summary>
            Gets the view factory settings.
            </summary>
            <returns>A new view state with factory settings.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.ViewSettings.GetCurrentState">
            <summary>
            Gets the current settings.
            </summary>
            <returns>A new view state with current settings.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.ViewSettings.RestoreDefaults">
            <summary>
            Updates from the default setting state.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.ViewSettings.UpdateFromState(Rhino.ApplicationSettings.ViewSettingsState)">
            <summary>
            Updates from a particular setting state.
            </summary>
            <param name="state">The new state that will be set.</param>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettings.PanScreenFraction">
            <summary>Gets or sets the faction used as multiplier to pan the screen.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettings.PanReverseKeyboardAction">
            <summary>Gets or sets if panning with the keyboard is reversed.
            <para>false, then Rhino pans the camera in the direction of the arrow key you press.
            true, then Rhino pans the scene instead.</para></summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettings.AlwaysPanParallelViews">
            <summary>Gets or sets the 'always pan parallel views' value.
            <para>If the view is not looking straight at the construction plane, then
            sets parallel viewports so they will not rotate.</para></summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettings.ZoomScale">
            <summary>
            Gets or sets the step size for zooming with a wheeled mouse or the Page Up and Page Down keys.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettings.RotateCircleIncrement">
            <summary>
            Gets or sets the rotation increment.
            <para>When the user rotates a view with the keyboard, Rhino rotates the view in steps.
            The usual step is 1/60th of a circle, which equals six degrees.</para>
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettings.RotateReverseKeyboard">
            <summary>
            Gets or sets the rotation direction.
            <para>If true, then Rhino rotates the camera around the scene, otherwise, rotates the scene itself.</para>
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettings.RotateToView">
            <summary>
            Gets or sets the rotation reference.
            <para>If true, then the views rotates relative to the view axes; false, than relative to the world x, y, and z axes.</para>
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettings.DefinedViewSetCPlane">
            <summary>
            Gets or sets the 'named views set CPlane' value.
            <para>When true, restoring a named view causes the construction plane saved with that view to also restore.</para>
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettings.DefinedViewSetProjection">
            <summary>
            Gets or sets the 'named views set projection' value.
            <para>When true, restoring a named view causes the viewport projection saved with the view to also restore.</para>
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettings.SingleClickMaximize">
            <summary>
            Gets or sets the 'single-click maximize' value.
            <para>When true, maximizing a viewport needs a single click on the viewport title rather than a double-click.</para>
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.ViewSettings.LinkedViewports">
            <summary>
            Gets or sets the 'linked views' activated setting.
            <para>true enables real-time view synchronization.
            When a standard view is manipulated, the camera lens length of all parallel projection
            viewports are set to match the current viewport.</para>
            </summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.ShortcutKey">
            <summary>
            Shortcut key combinations
            </summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.F1">
            <summary>F1</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.F2">
            <summary>F2</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.F3">
            <summary>F3</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.F4">
            <summary>F4</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.F5">
            <summary>F5</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.F6">
            <summary>F6</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.F7">
            <summary>F7</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.F8">
            <summary>F8</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.F9">
            <summary>F9</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.F10">
            <summary>F10</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.F11">
            <summary>F11</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.F12">
            <summary>F12</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlF1">
            <summary>Ctrl + F1</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlF2">
            <summary>Ctrl + F2</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlF3">
            <summary>Ctrl + F3</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlF4">
            <summary>Ctrl + F4</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlF5">
            <summary>Ctrl + F5</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlF6">
            <summary>Ctrl + F6</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlF7">
            <summary>Ctrl + F7</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlF8">
            <summary>Ctrl + F8</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlF9">
            <summary>Ctrl + F9</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlF10">
            <summary>Ctrl + F10</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlF11">
            <summary>Ctrl + F11</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlF12">
            <summary>Ctrl + F12</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlF1">
            <summary>Shift + Ctrl + F1</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlF2">
            <summary>Shift + Ctrl + F2</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlF3">
            <summary>Shift + Ctrl + F3</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlF4">
            <summary>Shift + Ctrl + F4</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlF5">
            <summary>Shift + Ctrl + F5</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlF6">
            <summary>Shift + Ctrl + F6</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlF7">
            <summary>Shift + Ctrl + F7</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlF8">
            <summary>Shift + Ctrl + F8</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlF9">
            <summary>Shift + Ctrl + F9</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlF10">
            <summary>Shift + Ctrl + F10</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlF11">
            <summary>Shift + Ctrl + F11</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlF12">
            <summary>Shift + Ctrl + F12</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlF1">
            <summary>Alt + Ctrl + F1</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlF2">
            <summary>Alt + Ctrl + F2</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlF3">
            <summary>Alt + Ctrl + F3</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlF4">
            <summary>Alt + Ctrl + F4</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlF5">
            <summary>Alt + Ctrl + F5</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlF6">
            <summary>Alt + Ctrl + F6</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlF7">
            <summary>Alt + Ctrl + F7</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlF8">
            <summary>Alt + Ctrl + F8</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlF9">
            <summary>Alt + Ctrl + F9</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlF10">
            <summary>Alt + Ctrl + F10</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlF11">
            <summary>Alt + Ctrl + F11</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlF12">
            <summary>Alt + Ctrl + F12</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlA">
            <summary>Ctrl + A</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlB">
            <summary>Ctrl + B</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlC">
            <summary>Ctrl + C</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlD">
            <summary>Ctrl + D</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlE">
            <summary>Ctrl + E</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlF">
            <summary>Ctrl + F</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlG">
            <summary>Ctrl + G</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlH">
            <summary>Ctrl + H</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlI">
            <summary>Ctrl + I</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlJ">
            <summary>Ctrl + J</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlK">
            <summary>Ctrl + K</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlL">
            <summary>Ctrl + L</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlM">
            <summary>Ctrl + M</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlN">
            <summary>Ctrl + N</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlO">
            <summary>Ctrl + O</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlP">
            <summary>Ctrl + P</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlQ">
            <summary>Ctrl + Q</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlR">
            <summary>Ctrl + R</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlS">
            <summary>Ctrl + S</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlT">
            <summary>Ctrl + T</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlU">
            <summary>Ctrl + U</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlV">
            <summary>Ctrl + V</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlW">
            <summary>Ctrl + W</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlX">
            <summary>Ctrl + X</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlY">
            <summary>Ctrl + Y</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlZ">
            <summary>Ctrl + Z</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlA">
            <summary>Shift + Ctrl + A</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlB">
            <summary>Shift + Ctrl + B</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlC">
            <summary>Shift + Ctrl + C</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlD">
            <summary>Shift + Ctrl + D</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlE">
            <summary>Shift + Ctrl + E</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlF">
            <summary>Shift + Ctrl + F</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlG">
            <summary>Shift + Ctrl + G</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlH">
            <summary>Shift + Ctrl + H</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlI">
            <summary>Shift + Ctrl + I</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlJ">
            <summary>Shift + Ctrl + J</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlK">
            <summary>Shift + Ctrl + K</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlL">
            <summary>Shift + Ctrl + L</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlM">
            <summary>Shift + Ctrl + M</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlN">
            <summary>Shift + Ctrl + N</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlO">
            <summary>Shift + Ctrl + O</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlP">
            <summary>Shift + Ctrl + P</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlQ">
            <summary>Shift + Ctrl + Q</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlR">
            <summary>Shift + Ctrl + R</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlS">
            <summary>Shift + Ctrl + S</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlT">
            <summary>Shift + Ctrl + T</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlU">
            <summary>Shift + Ctrl + U</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlV">
            <summary>Shift + Ctrl + V</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlW">
            <summary>Shift + Ctrl + W</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlX">
            <summary>Shift + Ctrl + X</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlY">
            <summary>Shift + Ctrl + Y</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlZ">
            <summary>Shift + Ctrl + Z</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlA">
            <summary>Alt + Ctrl + A</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlB">
            <summary>Alt + Ctrl + B</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlC">
            <summary>Alt + Ctrl + C</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlD">
            <summary>Alt + Ctrl + D</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlE">
            <summary>Alt + Ctrl + E</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlF">
            <summary>Alt + Ctrl + F</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlG">
            <summary>Alt + Ctrl + G</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlH">
            <summary>Alt + Ctrl + H</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlI">
            <summary>Alt + Ctrl + I</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlJ">
            <summary>Alt + Ctrl + J</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlK">
            <summary>Alt + Ctrl + K</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlL">
            <summary>Alt + Ctrl + L</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlM">
            <summary>Alt + Ctrl + M</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlN">
            <summary>Alt + Ctrl + N</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlO">
            <summary>Alt + Ctrl + O</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlP">
            <summary>Alt + Ctrl + P</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlQ">
            <summary>Alt + Ctrl + Q</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlR">
            <summary>Alt + Ctrl + R</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlS">
            <summary>Alt + Ctrl + S</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlT">
            <summary>Alt + Ctrl + T</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlU">
            <summary>Alt + Ctrl + U</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlV">
            <summary>Alt + Ctrl + V</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlW">
            <summary>Alt + Ctrl + W</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlX">
            <summary>Alt + Ctrl + X</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlY">
            <summary>Alt + Ctrl + Y</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlZ">
            <summary>Alt + Ctrl + Z</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.Ctrl0">
            <summary>Ctrl + 0</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.Ctrl1">
            <summary>Ctrl + 1</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.Ctrl2">
            <summary>Ctrl + 2</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.Ctrl3">
            <summary>Ctrl + 3</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.Ctrl4">
            <summary>Ctrl + 4</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.Ctrl5">
            <summary>Ctrl + 5</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.Ctrl6">
            <summary>Ctrl + 6</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.Ctrl7">
            <summary>Ctrl + 7</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.Ctrl8">
            <summary>Ctrl + 8</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.Ctrl9">
            <summary>Ctrl + 9</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrl0">
            <summary>Shift + Ctrl + 0</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrl1">
            <summary>Shift + Ctrl + 1</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrl2">
            <summary>Shift + Ctrl + 2</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrl3">
            <summary>Shift + Ctrl + 3</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrl4">
            <summary>Shift + Ctrl + 4</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrl5">
            <summary>Shift + Ctrl + 5</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrl6">
            <summary>Shift + Ctrl + 6</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrl7">
            <summary>Shift + Ctrl + 7</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrl8">
            <summary>Shift + Ctrl + 8</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrl9">
            <summary>Shift + Ctrl + 9</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrl0">
            <summary>Alt + Ctrl + 0</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrl1">
            <summary>Alt + Ctrl + 1</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrl2">
            <summary>Alt + Ctrl + 2</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrl3">
            <summary>Alt + Ctrl + 3</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrl4">
            <summary>Alt + Ctrl + 4</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrl5">
            <summary>Alt + Ctrl + 5</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrl6">
            <summary>Alt + Ctrl + 6</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrl7">
            <summary>Alt + Ctrl + 7</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrl8">
            <summary>Alt + Ctrl + 8</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrl9">
            <summary>Alt + Ctrl + 9</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.Home">
            <summary>Home</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.End">
            <summary>End</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlHome">
            <summary>Ctrl + Home</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlEnd">
            <summary>Ctrl + End</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftHome">
            <summary>Shift + Home</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftEnd">
            <summary>Shift + End</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlHome">
            <summary>Shift + Ctrl + Home</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlEnd">
            <summary>Shift + Ctrl + End</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlHome">
            <summary>Alt + Ctrl + Home</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlEnd">
            <summary>Alt + Ctrl + End</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.PageUp">
            <summary>Page Up</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.PageDown">
            <summary>Page Down</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftPageUp">
            <summary>Shift + Page Up</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftPageDown">
            <summary>Shift + Page Down</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlPageUp">
            <summary>Ctrl + Page Up</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.CtrlPageDown">
            <summary>Ctrl + Page Down</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlPageUp">
            <summary>Shift + Ctrl + Page Up</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.ShiftCtrlPageDown">
            <summary>Shift + Ctrl + Page Down</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlPageUp">
            <summary>Alt + Ctrl + Page Up</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.ShortcutKey.AltCtrlPageDown">
            <summary>Alt + Ctrl + Page Down</summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.ShortcutKeySettings">
            <summary>
            Contains static methods and properties to control keyboard shortcut keys
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.ShortcutKeySettings.GetMacro(Rhino.ApplicationSettings.ShortcutKey)">
            <summary>
            Get macro associated with a given keyboard shortcut
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.ShortcutKeySettings.SetMacro(Rhino.ApplicationSettings.ShortcutKey,System.String)">
            <summary>
            Set macro associated with a keyboard shortcut
            </summary>
            <param name="key"></param>
            <param name="macro"></param>
        </member>
        <member name="T:Rhino.ApplicationSettings.SmartTrackSettingsState">
            <summary>
            Represents a snapshot of <see cref="T:Rhino.ApplicationSettings.SmartTrackSettings"/>.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettingsState.UseSmartTrack">
            <summary>Gets or sets if the 'smart track' feature is active.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettingsState.UseDottedLines">
            <summary>Gets or sets a value indicating if lines are drawn dotted.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettingsState.SmartOrtho">
            <summary>Gets or sets a value indicating if the 'Smart Ortho' feature is active.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettingsState.SmartTangents">
            <summary>Gets or sets a value indicating if the 'Smart Tangents' feature is active.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettingsState.ActivationDelayMilliseconds">
            <summary>Gets or sets the activation delay in milliseconds.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettingsState.MaxSmartPoints">
            <summary>Gets or sets the maximum number of smart points.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettingsState.LineColor">
            <summary>Gets or sets the smart track line color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettingsState.TanPerpLineColor">
            <summary>Gets or sets the tangent and perpendicular line color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettingsState.PointColor">
            <summary>Gets or sets the point color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettingsState.ActivePointColor">
            <summary>Gets or sets the active point color.</summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.SmartTrackSettings">
            <summary>
            Contains static methods and properties that target the Smart Track feature behavior.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.SmartTrackSettings.GetCurrentState">
            <summary>
            Gets the current settings.
            </summary>
            <returns>A new Smart Track state with current settings.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.SmartTrackSettings.GetDefaultState">
            <summary>
            Gets the Smart Track factory settings.
            </summary>
            <returns>A new Smart Track state with factory settings.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.SmartTrackSettings.UpdateFromState(Rhino.ApplicationSettings.SmartTrackSettingsState)">
            <summary>
            Updates from a particular setting state.
            </summary>
            <param name="state">The new state that will be set.</param>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettings.UseSmartTrack">
            <summary>Gets or sets if the Smart Track feature is active.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettings.UseDottedLines">
            <summary>Gets or sets a value indicating if lines are drawn dotted.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettings.SmartOrtho">
            <summary>Gets or sets a value indicating if the 'Smart Ortho' feature is active.
            <para>Orthogonal lines are then drawn automatically.</para></summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettings.SmartTangents">
            <summary>Gets or sets a value indicating if the 'Smart Tangents' feature is active.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettings.ActivationDelayMilliseconds">
            <summary>Gets or sets the activation delay in milliseconds.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettings.MaxSmartPoints">
            <summary>Gets or sets the maximum number of smart points.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettings.LineColor">
            <summary>Gets or sets the smart track line color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettings.TanPerpLineColor">
            <summary>Gets or sets the tangent and perpendicular line color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettings.PointColor">
            <summary>Gets or sets the point color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.SmartTrackSettings.ActivePointColor">
            <summary>Gets or sets the active point color.</summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.CursorTooltipSettingsState">
            <summary>
            Represents a snapshot of <see cref="T:Rhino.ApplicationSettings.CursorTooltipSettings"/>.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettingsState.TooltipsEnabled">
            <summary>Turns on/off cursor tooltips.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettingsState.Offset">
            <summary>
            The x and y distances in pixels from the cursor location to the tooltip.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettingsState.BackgroundColor">
            <summary>Tooltip background color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettingsState.TextColor">
            <summary>Tooltip text color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettingsState.OsnapPane">
            <summary>
            Displays the current object snap selection.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettingsState.DistancePane">
            <summary>
            Displays the distance from the last picked point.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettingsState.PointPane">
            <summary>
            Displays the current construction plane coordinates.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettingsState.RelativePointPane">
            <summary>
            Displays the relative construction plane coordinates and angle from the last picked point.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettingsState.CommandPromptPane">
            <summary>
            Displays the current command prompt.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettingsState.AutoSuppress">
            <summary>
            Attempts to display only the most useful tooltip.
            </summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.CursorTooltipSettings">
            <summary>
            Cursor tooltips place information at the cursor location.
            Note: Turning on cursor tooltips turns off object snap cursors.
            </summary>
        </member>
        <member name="M:Rhino.ApplicationSettings.CursorTooltipSettings.GetCurrentState">
            <summary>
            Gets the current settings.
            </summary>
            <returns>A new cursor tooltip state with current settings.</returns>
        </member>
        <member name="M:Rhino.ApplicationSettings.CursorTooltipSettings.GetDefaultState">
            <summary>
            Gets the cursor tooltip factory settings.
            </summary>
            <returns>A new cursor tooltip state with factory settings.</returns>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettings.TooltipsEnabled">
            <summary>
            Turns on/off cursor tooltips.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettings.Offset">
            <summary>
            The x and y distances in pixels from the cursor location to the tooltip.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettings.BackgroundColor">
            <summary>Tooltip background color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettings.TextColor">
            <summary>Tooltip text color.</summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettings.OsnapPane">
            <summary>
            Displays the current object snap selection.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettings.DistancePane">
            <summary>
            Displays the distance from the last picked point.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettings.PointPane">
            <summary>
            Displays the current construction plane coordinates.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettings.RelativePointPane">
            <summary>
            Displays the relative construction plane coordinates and angle from the last picked point.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettings.CommandPromptPane">
            <summary>
            Displays the current command prompt.
            </summary>
        </member>
        <member name="P:Rhino.ApplicationSettings.CursorTooltipSettings.AutoSuppress">
            <summary>
            Attempts to display only the most useful tooltip.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.BitmapEntry">
            <summary>
            Rhino.DocObjects.Tables.BitmapTable entry
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.BitmapEntry.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            serialization constructor
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="M:Rhino.DocObjects.BitmapEntry.Save(System.String)">
            <summary>
            
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.DocObjects.BitmapEntry.FileName">
            <summary>The name of this bitmap.</summary>
        </member>
        <member name="P:Rhino.DocObjects.BitmapEntry.IsReference">
            <summary>
            Gets a value indicting whether this bitmap is a referenced bitmap. 
            Referenced bitmaps are part of referenced documents.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.Tables.BitmapTable">
            <summary>
            Stores the list of bitmaps in a Rhino document.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.BitmapTable.Find(System.String,System.Boolean,System.String@)">
            <summary>
            This function first attempts to find the file with "name" on the disk.
            If it does find it, "fileName" is set to the full path of the file and
            the BitmapEntry returned will be null, even if there was a BitmapEntry
            with "name" in the bitmap table.
            If the function cannot find the file on the disk, it searches the bitmap
            table.  If it finds it, the returned BitmapEntry entry will be the entry
            in the table with that name.
            Additionally, if "createFile" is true, and an entry is found, the file
            will be written to the disk and it's full path will be contained in "fileName".
            </summary>
            <param name="name">
            Name of the file to search for including file extension.
            </param>
            <param name="createFile">
            If this is true, and the file is not found on the disk but is found in
            the BitmapTable, then the BitmapEntry will get saved to the Rhino bitmap
            file cache and fileName will contain the full path to the cached file.
            </param>
            <param name="fileName">
            The full path to the current location of this file or an empty string
            if the file was not found and/or not extracted successfully.
            </param>
            <returns>
            Returns null if "name" was found on the disk.  If name was not found on the disk,
            returns the BitmapEntry with the specified name if it is found in the bitmap table
            and null if it was not found in the bitmap table.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.BitmapTable.AddBitmap(System.String,System.Boolean)">
            <summary>Adds a new bitmap with specified name to the bitmap table.</summary>
            <param name="bitmapFilename">
            If NULL or empty, then a unique name of the form "Bitmap 01" will be automatically created.
            </param>
            <param name="replaceExisting">
            If true and the there is alread a bitmap using the specified name, then that bitmap is replaced.
            If false and there is already a bitmap using the specified name, then -1 is returned.
            </param>
            <returns>
            index of new bitmap in table on success. -1 on error.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.BitmapTable.DeleteBitmap(System.String)">
            <summary>Deletes a bitmap.</summary>
            <param name="bitmapFilename">The bitmap file name.</param>
            <returns>
            true if successful. false if the bitmap cannot be deleted because it
            is the current bitmap or because it bitmap contains active geometry.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.BitmapTable.ExportToFiles(System.String,System.Int32)">
            <summary>Exports all the bitmaps in the table to files.</summary>
            <param name="directoryPath">
            full path to the directory where the bitmaps should be saved.
            If NULL, a dialog is used to interactively get the directory name.
            </param>
            <param name="overwrite">0 = no, 1 = yes, 2 = ask.</param>
            <returns>Number of bitmaps written.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.BitmapTable.ExportToFile(System.Int32,System.String)">
            <summary>Writes a bitmap to a file.</summary>
            <param name="index">The index of the bitmap to be written.</param>
            <param name="path">
            The full path, including file name and extension, name of the file to write.
            </param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.BitmapTable.GetEnumerator">
            <summary>
            BitmapTable enumerator
            </summary>
            <returns></returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.BitmapTable.Document">
            <summary>Gets the document that owns this bitmap table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.BitmapTable.Count">
            <summary>Gets the number of bitmaps in the table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.BitmapTable.Item(System.Int32)">
            <summary>
            Conceptually, the bitmap table is an array of bitmaps.  The operator[]
            can be used to get individual bitmaps.
            </summary>
            <param name="index">zero based array index.</param>
            <returns>
            Reference to the bitmap.  If index is out of range, then null is
            returned. Note that this reference may become invalid after AddBitmap()
            is called.
            </returns>
        </member>
        <member name="T:Rhino.DocObjects.MorphControlObject">
            <summary>
            Represents a <see cref="T:Rhino.Geometry.MorphControl">MorphControl</see> in a document.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ClippingPlaneObject">
            <summary>
            Represents the object of a <see cref="T:Rhino.Geometry.ClippingPlaneSurface">clipping plane</see>,
            stored in the Rhino document and with attributes.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ClippingPlaneObject.ClippingPlaneGeometry">
            <summary>
            Gets the clipping plane surface.
            </summary>
        </member>
        <member name="T:Rhino.Commands.Style">
            <summary>
            Defines bitwise mask flags for different styles of commands, such as
            <see cref="F:Rhino.Commands.Style.Hidden">Hidden</see> or <see cref="F:Rhino.Commands.Style.DoNotRepeat">DoNotRepeat</see>.
            </summary>
        </member>
        <member name="F:Rhino.Commands.Style.None">
            <summary>
            No flag is defined.
            </summary>
        </member>
        <member name="F:Rhino.Commands.Style.Hidden">
            <summary>
            Also known as a "test" command. The command name does not auto-complete
            when typed on the command line an is therefore not discoverable. Useful
            for writing commands that users don't normally have access to.
            </summary>
        </member>
        <member name="F:Rhino.Commands.Style.ScriptRunner">
            <summary>
            For commands that want to run scripts as if they were typed at the command
            line (like RhinoScript's RunScript command)
            </summary>
        </member>
        <member name="F:Rhino.Commands.Style.Transparent">
            <summary>
            Transparent commands can be run inside of other commands.
            The command does not modify the contents of the model's geometry in any way.
            Examples of transparent commands include commands that change views and toggle
            snap states.  Any command that adds or deletes, a view cannot be transparent.
            </summary>
        </member>
        <member name="F:Rhino.Commands.Style.DoNotRepeat">
            <summary>
            The command should not be repeated by pressing "ENTER" immediately after
            the command finishes.
            </summary>
        </member>
        <member name="F:Rhino.Commands.Style.NotUndoable">
            <summary>
            By default, all commands are undoable.
            </summary>
        </member>
        <member name="T:Rhino.Commands.RunMode">
            <summary>
            Provides enumerated constants for a command running mode. This is currently interactive or scripted.
            </summary>
        </member>
        <member name="F:Rhino.Commands.RunMode.Interactive">
            <summary>
            Can use dialogs for input. Must use message boxes to
            report serious error conditions.
            </summary>
        </member>
        <member name="F:Rhino.Commands.RunMode.Scripted">
            <summary>
            All input must come from command line, GetPoint, GetObject,
            GetString, etc.  Must use message boxes to report serious
            error conditions.  Script mode gets used when a command is
            run with a hyphen (-) prefix.
            </summary>
        </member>
        <member name="T:Rhino.Commands.CommandStyleAttribute">
            <summary>
            Decorates <see cref="T:Rhino.Commands.Command">commands</see> to provide styles.
            </summary>
        </member>
        <member name="M:Rhino.Commands.CommandStyleAttribute.#ctor(Rhino.Commands.Style)">
            <summary>
            Initializes a new command style attribute class.
            </summary>
            <param name="styles">
            Set of values combined using a bitwise OR operation to get the desired combination
            of command styles.
            </param>
        </member>
        <member name="P:Rhino.Commands.CommandStyleAttribute.Styles">
            <summary>
            Gets the associated style.
            </summary>
        </member>
        <member name="T:Rhino.Commands.Result">
            <summary>
            Defines enumerated constant values for several command result types.
            </summary>
        </member>
        <member name="F:Rhino.Commands.Result.Success">
            <summary>Command worked.</summary>
        </member>
        <member name="F:Rhino.Commands.Result.Cancel">
            <summary>User canceled command.</summary>
        </member>
        <member name="F:Rhino.Commands.Result.Nothing">
            <summary>Command did nothing but cancel was not pressed.</summary>
        </member>
        <member name="F:Rhino.Commands.Result.Failure">
            <summary>Command failed (bad input, computational problem, etc.)</summary>
        </member>
        <member name="F:Rhino.Commands.Result.UnknownCommand">
            <summary>Command not found (user probably had a typo in command name).</summary>
        </member>
        <member name="F:Rhino.Commands.Result.CancelModelessDialog">
            <summary>Commands canceled and modeless dialog.</summary>
        </member>
        <member name="F:Rhino.Commands.Result.ExitRhino">
            <summary>exit RhinoCommon.</summary>
        </member>
        <member name="T:Rhino.Commands.MostRecentCommandDescription">
            <summary>
            Stores the macro and display string of the most recent command.
            </summary>
        </member>
        <member name="T:Rhino.Commands.Command">
            <summary>
            Defines a base class for all commands. This class is abstract.
            </summary>
        </member>
        <member name="M:Rhino.Commands.Command.IsValidCommandName(System.String)">
            <summary>
            Determines if a string is a valid command name.
            </summary>
            <param name="name">A string.</param>
            <returns>true if the string is a valid command name.</returns>
        </member>
        <member name="M:Rhino.Commands.Command.GetMostRecentCommands">
            <summary>
            Gets an array of most recent command descriptions.
            </summary>
            <returns>An array of command descriptions.</returns>
        </member>
        <member name="M:Rhino.Commands.Command.#ctor">
            <summary>
            Default protected constructor. It only allows instantiation through subclassing.
            </summary>
        </member>
        <member name="M:Rhino.Commands.Command.RunCommand(Rhino.RhinoDoc,Rhino.Commands.RunMode)">
            <summary>
            Executes the command.
            </summary>
            <param name="doc">The current document.</param>
            <param name="mode">The command running mode.</param>
            <returns>The command result code.</returns>
        </member>
        <member name="M:Rhino.Commands.Command.OnHelp">
            <summary>
            Is called when the user needs assistance with this command.
            </summary>
        </member>
        <member name="M:Rhino.Commands.Command.GetCommandStack">
            <summary>
            Determines if Rhino is currently running a command. Because Rhino allow for transparent commands
            (commands that can be run from inside of other commands), this method returns the total ids of
            active commands.
            </summary>
            <returns>
            Ids of running commands or null if no commands are currently running. 
            The "active" command is at the end of this list.
            </returns>
        </member>
        <member name="M:Rhino.Commands.Command.InCommand">
            <summary>
            Determines if Rhino is currently running a command.
            </summary>
            <returns>true if a command is currently running, false if no commands are currently running.</returns>
        </member>
        <member name="M:Rhino.Commands.Command.InScriptRunnerCommand">
            <summary>
            This is a low level tool to determine if Rhino is currently running
            a script running command like "ReadCommandFile" or the RhinoScript
            plug-in's "RunScript".
            </summary>
            <returns>true if a script running command is active.</returns>
        </member>
        <member name="M:Rhino.Commands.Command.IsCommand(System.String)">
            <summary>
            Determines is a string is a command.
            </summary>
            <param name="name">A string.</param>
            <returns>true if the string is a command.</returns>
        </member>
        <member name="M:Rhino.Commands.Command.LookupCommandId(System.String,System.Boolean)">
            <summary>
            Returns the ID of a command.
            </summary>
            <param name="name">The name of the command.</param>
            <param name="searchForEnglishName">true if the name is to searched in English. This ensures that a '_' is prepended to the name.</param>
            <returns>An of the command, or <see cref="F:System.Guid.Empty"/> on error.</returns>
        </member>
        <member name="M:Rhino.Commands.Command.LookupCommandName(System.Guid,System.Boolean)">
            <summary>
            Returns the command name given a command ID.
            </summary>
            <param name="commandId">A command ID.</param>
            <param name="englishName">true if the requested command is in English.</param>
            <returns>The command name, or null on error.</returns>
        </member>
        <member name="M:Rhino.Commands.Command.GetCommandNames(System.Boolean,System.Boolean)">
            <summary>
            Gets list of command names in Rhino. This list does not include Test, Alpha, or System commands.
            </summary>
            <param name="english">
             if true, retrieve the english name for every command.
             if false, retrieve the local name for every command.
            </param>
            <param name="loaded">
            if true, only get names of currently loaded commands.
            if false, get names of all registered (may not be currently loaded) commands.
            </param>
            <returns>An array instance with command names. This array could be empty, but not null.</returns>
        </member>
        <member name="M:Rhino.Commands.Command.DisplayHelp(System.Guid)">
            <summary>
            Displays help for a command.
            </summary>
            <param name="commandId">A command ID.</param>
        </member>
        <member name="M:Rhino.Commands.Command.ReplayHistory(Rhino.DocObjects.ReplayHistoryData)">
            <summary>
            Repeats an operation of a command.
            </summary>
            <param name="replayData">The replay history information.</param>
            <returns>true if the operation succeeded.
            <para>The default implementation always returns false.</para></returns>
        </member>
        <member name="P:Rhino.Commands.Command.LastCommandId">
            <summary>
            Gets the ID of the last commands.
            </summary>
        </member>
        <member name="P:Rhino.Commands.Command.LastCommandResult">
            <summary>
            Gets the result code of the last command.
            </summary>
        </member>
        <member name="P:Rhino.Commands.Command.PlugIn">
            <summary>
            Gets the plug-in where this commands is placed.
            </summary>
        </member>
        <member name="P:Rhino.Commands.Command.Id">
            <summary>
            Gets the  unique ID of this command. It is best to use a Guid
            attribute for each custom derived command class since this will
            keep the id consistent between sessions of Rhino
            <see cref="T:System.Runtime.InteropServices.GuidAttribute">GuidAttribute</see>
            </summary>
        </member>
        <member name="P:Rhino.Commands.Command.EnglishName">
            <summary>
            Gets the name of the command.
            This method is abstract.
            </summary>
        </member>
        <member name="P:Rhino.Commands.Command.LocalName">
            <summary>
            Gets the local name of the command.
            </summary>
        </member>
        <member name="P:Rhino.Commands.Command.Settings">
            <summary>
            Gets the settings of the command.
            </summary>
        </member>
        <member name="P:Rhino.Commands.Command.CommandContextHelpUrl">
            <summary>
            Gets the URL of the command contextual help. This is usually a location of a local CHM file.
            <para>The default implementation return an empty string.</para>
            </summary>
        </member>
        <member name="E:Rhino.Commands.Command.BeginCommand">
            <summary>
            Called just before command.RunCommand().
            </summary>
        </member>
        <member name="E:Rhino.Commands.Command.EndCommand">
            <summary>
            Called immediately after command.RunCommand().
            </summary>
        </member>
        <member name="E:Rhino.Commands.Command.UndoRedo">
            <summary>
            Used to monitor Rhino's built in undo/redo support.
            </summary>
        </member>
        <member name="P:Rhino.Commands.CommandEventArgs.CommandId">
            <summary>
            Gets the ID of the command that raised this event.
            </summary>
        </member>
        <member name="P:Rhino.Commands.CommandEventArgs.CommandEnglishName">
            <summary>
            Gets the English name of the command that raised this event.
            </summary>
        </member>
        <member name="P:Rhino.Commands.CommandEventArgs.CommandLocalName">
            <summary>
            Gets the name of the command that raised this event in the local language.
            </summary>
        </member>
        <member name="P:Rhino.Commands.CommandEventArgs.CommandPluginName">
            <summary>
            Gets the name of the plug-in that this command belongs to.  If the command is internal
            to Rhino, then this propert is an empty string.
            </summary>
        </member>
        <member name="P:Rhino.Commands.CommandEventArgs.CommandResult">
            <summary>
            Gets the result of the command that raised this event. 
            This value is only meaningful during EndCommand events.
            </summary>
        </member>
        <member name="T:Rhino.Commands.SelCommand">
            <summary>
            For adding nestable selection commands that work like the native Rhino
            SelCrv command, derive your command from SelCommand and override the
            virtual SelFilter function.
            </summary>
        </member>
        <member name="M:Rhino.Commands.SelCommand.SelFilter(Rhino.DocObjects.RhinoObject)">
            <summary>
            Override this virtual function and return true if object should be selected.
            </summary>
            <param name="rhObj">The object to check regarding selection status.</param>
            <returns>true if the object should be selected; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Commands.TransformCommand.SelectObjects(System.String,Rhino.Collections.TransformObjectList)">
            <summary>
            Selects objects within the command.
            </summary>
            <param name="prompt">The selection prompt.</param>
            <param name="list">A list of objects to transform. This is a special list type.</param>
            <returns>The operation result.</returns>
        </member>
        <member name="M:Rhino.Commands.TransformCommand.ResetGrips(Rhino.Collections.TransformObjectList)">
            <summary>
            Sets dynamic grip locations back to starting grip locations. This makes things
            like the Copy command work when grips are "copied".
            </summary>
            <param name="list">A list of object to transform. This is a special list type.</param>
        </member>
        <member name="M:Rhino.DocObjects.HistoryRecord.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.HistoryRecord.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.HistoryRecord.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.DocObjects.HistoryRecord.Handle">
            <summary>
            Wrapped native C++ pointer to CRhinoHistory instance
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ReplayHistoryData.GetRhinoObjRef(System.Int32)">
            <summary>
            In ReplayHistory, use GetRhinoObjRef to convert the information
            in a history record into the ObjRef that has up to date
            RhinoObject pointers
            </summary>
            <param name="id">HistoryRecord value id</param>
            <returns>ObjRef on success, null if not successful</returns>
        </member>
        <member name="P:Rhino.DocObjects.ReplayHistoryData.Document">
            <summary>The document this record belongs to</summary>
        </member>
        <member name="P:Rhino.DocObjects.ReplayHistoryData.HistoryVersion">
            <summary>
            ReplayHistory overrides check the version number to insure the information
            saved in the history record is compatible with the current implementation
            of ReplayHistory
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ReplayHistoryData.RecordId">
            <summary>
            Each history record has a unique id that Rhino assigns when it adds the
            history record to the history record table
            </summary>
        </member>
        <member name="M:Rhino.UI.Panels.RegisterPanel(Rhino.PlugIns.PlugIn,System.Type,System.String,System.Drawing.Icon)">
            <summary>
            You typically register your panel class in your plug-in's OnLoad function.
            This informs Rhino of the existence of your panel class
            </summary>
            <param name="plugin">Plug-in this panel is associated with</param>
            <param name="panelType">
            Class type to construct when a panel is shown.  Currently only types
            that implement the IWin32Window interface are supported. The requirements
            for the class are that it has a parameterless constructor and have a
            GuidAttribute applied with a unique Guid
            </param>
            <param name="caption"></param>
            <param name="icon">Use a 32bit depth icon in order to get proper transparency</param>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyleArrowType.SolidTriangle">
            <summary>2:1</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyleArrowType.Dot">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyleArrowType.Tick">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyleArrowType.ShortTriangle">
            <summary>1:1</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyleArrowType.Arrow">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyleArrowType.Rectangle">
            <summary></summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyleArrowType.LongTriangle">
            <summary>4:1</summary>
        </member>
        <member name="F:Rhino.DocObjects.DimensionStyleArrowType.LongerTriangle">
            <summary>6:1</summary>
        </member>
        <member name="P:Rhino.DocObjects.DimensionStyle.LengthResolution">
            <summary>Linear display precision.</summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.DimStyleTable.Add(System.String)">
            <summary>
            Adds a new dimension style to the document. The new dimension style will be initialized
            with the current default dimension style properties.
            </summary>
            <param name="name">
            Name of the new dimension style. If null or empty, Rhino automatically generates the name.
            </param>
            <returns>index of new dimension style.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.DimStyleTable.Add(System.String,System.Boolean)">
            <summary>
            Adds a new dimension style to the document. The new dimension style will be initialized
            with the current default dimension style properties.
            </summary>
            <param name="name">
            Name of the new dimension style. If null or empty, Rhino automatically generates the name.
            </param>
            <param name="reference">if true the dimstyle will not be saved in files.</param>
            <returns>index of new dimension style.</returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.DimStyleTable.Document">
            <summary>Document that owns this dimstyle table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.DimStyleTable.Count">
            <summary>Number of dimstyles in the table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.DimStyleTable.CurrentDimensionStyleIndex">
            <example>
            <code source='examples\vbnet\ex_dimstyle.vb' lang='vbnet'/>
            <code source='examples\cs\ex_dimstyle.cs' lang='cs'/>
            <code source='examples\py\ex_dimstyle.py' lang='py'/>
            </example>
        </member>
        <member name="T:Rhino.Display.BlendMode">
            <summary>
            Defines enmerated constants for display blend modes.
            </summary>
        </member>
        <member name="F:Rhino.Display.BlendMode.Zero">
            <summary>
            Blends using 0.
            </summary>
        </member>
        <member name="F:Rhino.Display.BlendMode.One">
            <summary>
            Blends using 1.
            </summary>
        </member>
        <member name="F:Rhino.Display.BlendMode.SourceColor">
            <summary>
            Blends using source color.
            </summary>
        </member>
        <member name="F:Rhino.Display.BlendMode.OneMinusSourceColor">
            <summary>
            Blends using 1-source color.
            </summary>
        </member>
        <member name="F:Rhino.Display.BlendMode.SourceAlpha">
            <summary>
            Blends using the source alpha channel.
            </summary>
        </member>
        <member name="F:Rhino.Display.BlendMode.OneMinusSourceAlpha">
            <summary>
            Blends using 1-the source alpha channel.
            </summary>
        </member>
        <member name="F:Rhino.Display.BlendMode.DestinationAlpha">
            <summary>
            Blends using the destination alpha channel.
            </summary>
        </member>
        <member name="F:Rhino.Display.BlendMode.OneMinusDestinationAlpha">
            <summary>
            Blends using 1-the destination alpha channel.
            </summary>
        </member>
        <member name="F:Rhino.Display.BlendMode.DestinationColor">
            <summary>
            Blends using the destination color.
            </summary>
        </member>
        <member name="F:Rhino.Display.BlendMode.OneMinusDestinationColor">
            <summary>
            Blends using 1-the destination color.
            </summary>
        </member>
        <member name="F:Rhino.Display.BlendMode.SourceAlphaSaturate">
            <summary>
            Blends using the source alpha saturation.
            </summary>
        </member>
        <member name="T:Rhino.Display.DisplayBitmap">
            <summary>
            A bitmap resource that can be used by the display pipeline (currently only
            in OpenGL display).  Reuse DisplayBitmaps for drawing if possible; it is
            much more expensive to construct new DisplayBitmaps than it is to reuse
            existing DisplayBitmaps.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayBitmap.#ctor(System.Drawing.Bitmap)">
            <summary>
            Constructs a DisplayBitmap from an existing bitmap.
            </summary>
            <param name="bitmap">The original bitmap.</param>
        </member>
        <member name="M:Rhino.Display.DisplayBitmap.Load(System.String)">
            <summary>
            Load a DisplayBitmap from and image file on disk.
            </summary>
            <param name="path">A location from which to load the file.</param>
            <returns>The new display bitmap, or null on error.</returns>
        </member>
        <member name="M:Rhino.Display.DisplayBitmap.SetBlendFunction(Rhino.Display.BlendMode,Rhino.Display.BlendMode)">
            <summary>
            Sets blending function used to determine how this bitmap is blended
            with the current framebuffer color.  The default setting is SourceAlpha
            for source and OneMinusSourceAlpha for destination.  See OpenGL's
            glBlendFunc for details.
            <para>http://www.opengl.org/sdk/docs/man/xhtml/glBlendFunc.xml</para>
            </summary>
            <param name="source">The source blend mode.</param>
            <param name="destination">The destination blend mode.</param>
        </member>
        <member name="M:Rhino.Display.DisplayBitmap.GetBlendModes(Rhino.Display.BlendMode@,Rhino.Display.BlendMode@)">
            <summary>
            Gets the source and destination blend modes.
            </summary>
            <param name="source">The source blend mode is assigned to this out parameter.</param>
            <param name="destination">The destination blend mode is assigned to this out parameter.</param>
        </member>
        <member name="M:Rhino.Display.DisplayBitmap.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayBitmap.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayBitmap.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Display.DisplayBitmapDrawList.MaximumCachedSortLists">
            <summary>
            Maximum number of cached sort order index lists stored on this class.
            Default is 10, but depending on the number of points in this list you
            may get better performance by setting this value to a certain percentage
            of the point count.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayBitmapDrawList.SortAngleTolerance">
            <summary>
            Angle in radians used to determine if an index list is "parallel enough"
            to a viewports camera angle. Default is 0.0873 radians (5 degrees)
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Particle">
            <summary>
            Represents a simple particle.
            <para>This base class only defines position and display properties (size, color, bitmap id).
            You will most likely create a class that derives from this particle class to perform some
            sort of physical simulation (movement over time or frames).
            </para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Particle.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.Particle"/> class.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Particle.Update">
            <summary>
            Base class implementation does nothing.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Particle.ParentSystem">
            <summary>
            Gets the parent particle system of this particle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Particle.Index">
            <summary>
            Index in ParentSystem for this Particle. Can change when the particle
            system is modified.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Particle.Location">
            <summary>3d Location of the Particle.</summary>
        </member>
        <member name="M:Rhino.Geometry.ParticleSystem.Add(Rhino.Geometry.Particle)">
            <summary>
            Adds a particle to this ParticleSystem. A Particle can only be in one system
            at a time.  If the Particle already exists in a different system, this function
            will return false. You should remove the particle from the other system first
            before adding it.
            </summary>
            <param name="particle">A particle to be added.</param>
            <returns>
            true if this particle was added to the system or if is already in the system.
            false if the particle already exists in a different system.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.ParticleSystem.Remove(Rhino.Geometry.Particle)">
            <summary>
            Removes a single particle from this system.
            </summary>
            <param name="particle">The particle to be removed.</param>
        </member>
        <member name="M:Rhino.Geometry.ParticleSystem.Clear">
            <summary>
            Remove all Particles from this system.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.ParticleSystem.Update">
            <summary>
            Calls Update on every particle in the system.
            </summary>
        </member>
        <member name="T:Rhino.Display.DisplayModeDescription">
            <summary>
            Description of a how Rhino will display in a viewport. These are the modes
            that are listed under "Advanced display" in the options dialog.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayModeDescription.GetDisplayModes">
            <summary>
            Gets all display mode descriptions that Rhino currently knows about.
            </summary>
            <returns>
            Copies of all of the display mode descriptions. If you want to modify
            these descriptions, you must call UpdateDisplayMode or AddDisplayMode.
            </returns>
            <example>
            <code source='examples\vbnet\ex_advanceddisplay.vb' lang='vbnet'/>
            <code source='examples\cs\ex_advanceddisplay.cs' lang='cs'/>
            <code source='examples\py\ex_advanceddisplay.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.DisplayModeDescription.UpdateDisplayMode(Rhino.Display.DisplayModeDescription)">
            <example>
            <code source='examples\vbnet\ex_advanceddisplay.vb' lang='vbnet'/>
            <code source='examples\cs\ex_advanceddisplay.cs' lang='cs'/>
            <code source='examples\py\ex_advanceddisplay.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Display.DisplayModeDescription.DisplayAttributes">
            <example>
            <code source='examples\vbnet\ex_advanceddisplay.vb' lang='vbnet'/>
            <code source='examples\cs\ex_advanceddisplay.cs' lang='cs'/>
            <code source='examples\py\ex_advanceddisplay.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.DisplayConduit.ObjectCulling(Rhino.Display.CullObjectEventArgs)">
            <summary>
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rhino.Display.DisplayConduit.CalculateBoundingBox(Rhino.Display.CalculateBoundingBoxEventArgs)">
            <summary>
            Library developers should override this function to increase the bounding box of scene so it includes the
            geometry that you plan to draw in the "Draw" virtual functions.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="e">The event argument contain the current bounding box state.</param>
            <example>
            <code source='examples\vbnet\ex_meshdrawing.vb' lang='vbnet'/>
            <code source='examples\cs\ex_meshdrawing.cs' lang='cs'/>
            <code source='examples\py\ex_meshdrawing.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.DisplayConduit.CalculateBoundingBoxZoomExtents(Rhino.Display.CalculateBoundingBoxEventArgs)">
            <summary>
            If you want to participate in the Zoom Extents command with your display conduit,
            then you will need to override ZoomExtentsBoundingBox.  Typically you could just
            call your CalculateBoundingBox override, but you may also want to spend a little
            more time here and compute a tighter bounding box for your conduit geometry if
            that is needed.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="e">The event argument contain the current bounding box state.</param>
        </member>
        <member name="M:Rhino.Display.DisplayConduit.PreDrawObjects(Rhino.Display.DrawEventArgs)">
            <summary>
            Called before objects are been drawn. Depth writing and testing are on.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="e">The event argument contain the current viewport and display state.</param>
            <example>
            <code source='examples\vbnet\ex_meshdrawing.vb' lang='vbnet'/>
            <code source='examples\cs\ex_meshdrawing.cs' lang='cs'/>
            <code source='examples\py\ex_meshdrawing.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.DisplayConduit.PreDrawObject(Rhino.Display.DrawObjectEventArgs)">
            <summary>
            Called before every object in the scene is drawn.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Rhino.Display.DisplayConduit.PostDrawObjects(Rhino.Display.DrawEventArgs)">
            <summary>
            Called after all non-highlighted objects have been drawn. Depth writing and testing are
            still turned on. If you want to draw without depth writing/testing, see DrawForeground.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="e">The event argument contains the current viewport and display state.</param>
        </member>
        <member name="M:Rhino.Display.DisplayConduit.DrawForeground(Rhino.Display.DrawEventArgs)">
            <summary>
            Called after all non-highlighted objects have been drawn and PostDrawObjects has been called.
            Depth writing and testing are turned OFF. If you want to draw with depth writing/testing,
            see PostDrawObjects.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="e">The event argument contains the current viewport and display state.</param>
        </member>
        <member name="M:Rhino.Display.DisplayConduit.DrawOverlay(Rhino.Display.DrawEventArgs)">
            <summary>
            If Rhino is in a feedback mode, the draw overlay call allows for temporary geometry to be drawn on top of
            everything in the scene. This is similar to the dynamic draw routine that occurs with custom get point.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="e">The event argument contains the current viewport and display state.</param>
        </member>
        <member name="F:Rhino.Display.PointStyle.ActivePoint">
            <summary>
            Like a control point but includes vertical/horizontal crosshair lines.
            </summary>
        </member>
        <member name="T:Rhino.Display.DisplayPipeline">
             <summary>
             <para>
             The display pipeline calls events during specific phases of drawing
             During the drawing of a single frame the events are called in the following order.
             </para>
             [Begin Drawing of a Frame]
             <list type="bullet">
             <item><description>CalculateBoundingBox</description></item>
             <item><description>CalculateClippingPanes</description></item>
             <item><description>SetupFrustum</description></item>
             <item><description>SetupLighting</description></item>
             <item><description>InitializeFrameBuffer</description></item>
             <item><description>DrawBackground</description></item>
             <item><description>If this is a layout and detail objects exist the channels are called in the
               same order for each detail object (drawn as a nested viewport)</description></item>
             <item><description>PreDrawObjects</description></item>
            
             <item><description>For Each Visible Non Highlighted Object</description>
             <list type="bullet">
             <item><description>SetupObjectDisplayAttributes</description></item>
             <item><description>PreDrawObject</description></item>
             <item><description>DrawObject</description></item>
             <item><description>PostDrawObject</description></item>
             </list></item>
             <item><description>PostDrawObjects - depth writing/testing on</description></item>
             <item><description>DrawForeGround - depth writing/testing off</description></item>
            
             <item><description>For Each Visible Highlighted Object</description>
             <list type="bullet">
             <item><description>SetupObjectDisplayAttributes</description></item>
             <item><description>PreDrawObject</description></item>
             <item><description>DrawObject</description></item>
             <item><description>PostDrawObject</description></item>
             </list></item>
            
             <item><description>PostProcessFrameBuffer (If a delegate exists that requires this)</description></item>
             <item><description>DrawOverlay (if Rhino is in a feedback mode)</description></item>
             </list>
             [End of Drawing of a Frame]
            
             <para>NOTE: There may be multiple DrawObject calls for a single object. An example of when this could
                   happen would be with a shaded sphere. The shaded mesh is first drawn and these channels would
                   be processed; then at a later time the isocurves for the sphere would be drawn.</para>
             </summary>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PushModelTransform(Rhino.Geometry.Transform)">
            <summary>
            Push a model transformation on the engine's model transform stack.
            </summary>
            <param name="xform">Transformation to push.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PopModelTransform">
            <summary>
            Pop a model transformation off the engine's model transform stack.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.EnableDepthTesting(System.Boolean)">
            <summary>
            Enable or disable the DepthTesting behaviour of the engine. 
            When DepthTesting is disabled, objects in front will no 
            longer occlude objects behind them.
            </summary>
            <param name="enable">true to enable DepthTesting, false to disable.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.EnableDepthWriting(System.Boolean)">
            <summary>
            Enable or disable the DepthWriting behaviour of the engine. 
            When DepthWriting is disabled, drawn geometry does not affect the Z-Buffer.
            </summary>
            <param name="enable">true to enable DepthWriting, false to disable.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.EnableColorWriting(System.Boolean)">
            <summary>
            Enable or disable the ColorWriting behaviour of the engine. 
            </summary>
            <param name="enable">true to enable ColorWriting, false to disable.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.EnableLighting(System.Boolean)">
            <summary>
            Enable or disable the Lighting logic of the engine. 
            </summary>
            <param name="enable">true to enable Lighting, false to disable.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.EnableClippingPlanes(System.Boolean)">
            <summary>
            Enable or disable the Clipping Plane logic of the engine. 
            </summary>
            <param name="enable">true to enable Clipping Planes, false to disable.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PushDepthTesting(System.Boolean)">
            <summary>
            Push a DepthTesting flag on the engine's stack.
            </summary>
            <param name="enable">DepthTesting flag.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PopDepthTesting">
            <summary>
            Pop a DepthTesting flag off the engine's stack.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PushDepthWriting(System.Boolean)">
            <summary>
            Push a DepthWriting flag on the engine's stack.
            </summary>
            <param name="enable">DepthWriting flag.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PopDepthWriting">
            <summary>
            Pop a DepthWriting flag off the engine's stack.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PushClipTesting(System.Boolean)">
            <summary>
            Push a ClipTesting flag on the engine's stack.
            </summary>
            <param name="enable">ClipTesting flag.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PopClipTesting">
            <summary>
            Pop a ClipTesting flag off the engine's stack.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PushCullFaceMode(Rhino.Display.CullFaceMode)">
            <summary>
            Push a FaceCull flag on the engine's stack.
            </summary>
            <param name="mode">FaceCull flag.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.PopCullFaceMode">
            <summary>
            Pop a FaceCull flag off the engine's stack.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.CullControlPolygon">
            <summary>
            Returns a value indicating if only points on the side of the surface that
            face the camera are displayed.
            </summary>
            <returns>true if backfaces of surface and mesh control polygons are culled.
            This value is determined by the _CullControlPolygon command.</returns>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.IsVisible(Rhino.Geometry.Point3d)">
            <summary>
            Test a given 3d world coordinate point for visibility inside the view 
            frustum under the current viewport and model transformation settings.
            </summary>
            <param name="worldCoordinate">Point to test for visibility.</param>
            <returns>true if the point is visible, false if it is not.</returns>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.IsVisible(Rhino.DocObjects.RhinoObject)">
            <summary>
            Test a given object for visibility inside the view frustum under the current viewport and model 
            transformation settings. This function calls a virtual IsVisibleFinal function that 
            subclassed pipelines can add extra tests to. In the base class, this test only tests 
            visibility based on the objects world coordinates location and does not pay attention 
            to the object's attributes.
            
            NOTE: Use CRhinoDisplayPipeline::IsVisible() to perform "visibility" 
                  tests based on location (is some part of the object in the view frustum). 
                  Use CRhinoDisplayPipeline::IsActive() to perform "visibility" 
                  tests based on object type.
            </summary>
            <param name="rhinoObject">Object to test.</param>
            <returns>true if the object is visible, false if not.</returns>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.IsVisible(Rhino.Geometry.BoundingBox)">
            <summary>
            Test a given box for visibility inside the view frustum under the current 
            viewport and model transformation settings.
            </summary>
            <param name="bbox">Box to test for visibility.</param>
            <returns>true if at least some portion of the box is visible, false if not.</returns>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.IsActive(Rhino.DocObjects.RhinoObject)">
            <summary>
            Determines if an object can be visible in this viewport based on it's object type and display attributes. 
            This test does not check for visibility based on location of the object. 
            NOTE: Use CRhinoDisplayPipeline::IsVisible() to perform "visibility" 
                  tests based on location (is some part of the object in the view frustum). 
                  Use CRhinoDisplayPipeline::IsActive() to perform "visibility" 
                  tests based on object type.
            </summary>
            <param name="rhinoObject">Object to test.</param>
            <returns>
            true if this object can be drawn in the pipeline's viewport based on it's object type and display attributes.
            </returns>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.InterruptDrawing">
            <summary>
            Tests to see if the pipeline should stop drawing more geometry and just show what it has so far. 
            If a drawing operation is taking a long time, this function will return true and tell Rhino it should just 
            finish up and show the frame buffer. This is used in dynamic drawing operations. 
            </summary>
            <returns>
            true if the pipeline should stop attempting to draw more geometry and just show the frame buffer.
            </returns>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawToBitmap(Rhino.Display.RhinoViewport,System.Int32,System.Int32)">
            <summary>
            Draw a given viewport to an off-screen bitmap.
            </summary>
            <param name="viewport">Viewport to draw.</param>
            <param name="width">Width of target image.</param>
            <param name="height">Height of target image.</param>
            <returns>A bitmap containing the given view, or null on error.</returns>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMeshWires(Rhino.Geometry.Mesh,System.Drawing.Color)">
            <summary>
            Draws all the wires in a given mesh.
            </summary>
            <param name="mesh">Mesh for wire drawing.</param>
            <param name="color">Color of mesh wires.</param>
            <example>
            <code source='examples\vbnet\ex_meshdrawing.vb' lang='vbnet'/>
            <code source='examples\cs\ex_meshdrawing.cs' lang='cs'/>
            <code source='examples\py\ex_meshdrawing.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMeshWires(Rhino.Geometry.Mesh,System.Drawing.Color,System.Int32)">
            <summary>
            Draws all the wires in a given mesh.
            </summary>
            <param name="mesh">Mesh for wire drawing.</param>
            <param name="color">Color of mesh wires.</param>
            <param name="thickness">Thickness (in pixels) of mesh wires.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMeshVertices(Rhino.Geometry.Mesh,System.Drawing.Color)">
            <summary>
            Draws all the vertices in a given mesh.
            </summary>
            <param name="mesh">Mesh for vertex drawing.</param>
            <param name="color">Color of mesh vertices.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMeshShaded(Rhino.Geometry.Mesh,Rhino.Display.DisplayMaterial)">
            <summary>
            Draws the shaded faces of a given mesh.
            </summary>
            <param name="mesh">Mesh to draw.</param>
            <param name="material">Material to draw faces with.</param>
            <example>
            <code source='examples\vbnet\ex_meshdrawing.vb' lang='vbnet'/>
            <code source='examples\cs\ex_meshdrawing.cs' lang='cs'/>
            <code source='examples\py\ex_meshdrawing.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMeshShaded(Rhino.Geometry.Mesh,Rhino.Display.DisplayMaterial,System.Int32[])">
            <summary>
            Draws the shaded faces of a given mesh.
            </summary>
            <param name="mesh">Mesh to draw.</param>
            <param name="material">Material to draw faces with.</param>
            <param name="faceIndices">Indices of specific faces to draw</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMeshFalseColors(Rhino.Geometry.Mesh)">
            <summary>
            Draws the mesh faces as false color patches. 
            The mesh must have Vertex Colors defined for this to work.
            </summary>
            <param name="mesh">Mesh to draw.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBrepShaded(Rhino.Geometry.Brep,Rhino.Display.DisplayMaterial)">
            <summary>
            Draws a shaded mesh representation of a brep.
            </summary>
            <param name="brep">Brep to draw.</param>
            <param name="material">Material to draw faces with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBrepWires(Rhino.Geometry.Brep,System.Drawing.Color)">
            <summary>
            Draws all the wireframe curves of a brep object.
            </summary>
            <param name="brep">Brep to draw.</param>
            <param name="color">Color of Wireframe curves.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBrepWires(Rhino.Geometry.Brep,System.Drawing.Color,System.Int32)">
            <summary>
            Draws all the wireframe curves of a brep object.
            </summary>
            <param name="brep">Brep to draw.</param>
            <param name="color">Color of Wireframe curves.</param>
            <param name="wireDensity">
            "Density" of wireframe curves.
            <para>-1 = no internal wires.</para>
            <para> 0 = default internal wires.</para>
            <para>>0 = custom high density.</para>
            </param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawPoint(Rhino.Geometry.Point3d,System.Drawing.Color)">
            <summary>Draws a point with a given radius, style and color.</summary>
            <param name="point">Location of point in world coordinates.</param>
            <param name="color">Color of point.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawPoint(Rhino.Geometry.Point3d,Rhino.Display.PointStyle,System.Int32,System.Drawing.Color)">
            <summary>Draws a point with a given radius, style and color.</summary>
            <param name="point">Location of point in world coordinates.</param>
            <param name="style">Point display style.</param>
            <param name="radius">Point size in pixels.</param>
            <param name="color">
            Color of point. If style is ControlPoint, this will be the border color.
            </param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.Display.PointStyle,System.Int32,System.Drawing.Color)">
            <summary>Draw a set of points with a given radius, style and color.</summary>
            <param name="points">Location of points in world coordinates.</param>
            <param name="style">Point display style.</param>
            <param name="radius">Point size in pixels.</param>
            <param name="color">
            Color of points. If style is ControlPoint, this will be the border color.
            </param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawPointCloud(Rhino.Geometry.PointCloud,System.Int32)">
            <summary>
            Draws a point cloud.
            </summary>
            <param name="cloud">Point cloud to draw, if the cloud has a color array, it will be used, otherwise the points will be black.</param>
            <param name="size">Size of points.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawPointCloud(Rhino.Geometry.PointCloud,System.Int32,System.Drawing.Color)">
            <summary>
            Draws a point cloud.
            </summary>
            <param name="cloud">Point cloud to draw.</param>
            <param name="size">Size of points.</param>
            <param name="color">Color of points in the cloud, if the cloud has a color array this setting is ignored.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawArrow(Rhino.Geometry.Line,System.Drawing.Color)">
            <summary>
            Draws a single arrow object. An arrow consists of a Shaft and an Arrow head at the end of the shaft.
            </summary>
            <param name="line">Arrow shaft.</param>
            <param name="color">Color of arrow.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawArrow(Rhino.Geometry.Line,System.Drawing.Color,System.Double,System.Double)">
            <summary>
            Draws a single arrow object. 
            An arrow consists of a Shaft and an Arrow head at the end of the shaft.
            </summary>
            <param name="line">Arrow shaft.</param>
            <param name="color">Color of arrow.</param>
            <param name="screenSize">If screenSize != 0.0 then the size (in screen pixels) of the arrow head will be equal to screenSize.</param>
            <param name="relativeSize">If relativeSize != 0.0 and screensize == 0.0 the size of the arrow head will be proportional to the arrow shaft length.</param>
            <example>
            <code source='examples\vbnet\ex_conduitarrowheads.vb' lang='vbnet'/>
            <code source='examples\cs\ex_conduitarrowheads.cs' lang='cs'/>
            <code source='examples\py\ex_conduitarrowheads.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawArrows(Rhino.Geometry.Line[],System.Drawing.Color)">
            <summary>
            Draws a collection of arrow objects. An arrow consists of a Shaft and an Arrow head at the end of the shaft.
            </summary>
            <param name="lines">Arrow shafts.</param>
            <param name="color">Color of arrows.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawArrows(System.Collections.Generic.IEnumerable{Rhino.Geometry.Line},System.Drawing.Color)">
            <summary>
            Draws a collection of arrow objects. An arrow consists of a Shaft and an Arrow head at the end of the shaft. 
            </summary>
            <param name="lines">Arrow shafts.</param>
            <param name="color">Color of arrows.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawArrowHead(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color,System.Double,System.Double)">
            <summary>
            Draws a single arrow head.
            </summary>
            <param name="tip">Point of arrow head tip.</param>
            <param name="direction">Direction in which arrow head is pointing.</param>
            <param name="color">Color of arrow head.</param>
            <param name="screenSize">If screenSize != 0.0, then the size (in screen pixels) of the arrow head will be equal to the screenSize.</param>
            <param name="worldSize">If worldSize != 0.0 and screensize == 0.0 the size of the arrow head will be equal to the number of units in worldSize.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawLineArrow(Rhino.Geometry.Line,System.Drawing.Color,System.Int32,System.Double)">
            <summary>
            Draws an arrow made up of three line segments.
            </summary>
            <param name="line">Base line for arrow.</param>
            <param name="color">Color of arrow.</param>
            <param name="thickness">Thickness (in pixels) of the arrow line segments.</param>
            <param name="size">Size (in world units) of the arrow tip lines.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawLine(Rhino.Geometry.Line,System.Drawing.Color)">
            <summary>
            Draws a single line object.
            </summary>
            <param name="line">Line to draw.</param>
            <param name="color">Color to draw line in.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawLine(Rhino.Geometry.Line,System.Drawing.Color,System.Int32)">
            <summary>
            Draws a single line object.
            </summary>
            <param name="line">Line to draw.</param>
            <param name="color">Color to draw line in.</param>
            <param name="thickness">Thickness (in pixels) of line.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawLine(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Drawing.Color)">
            <summary>
            Draws a single line object.
            </summary>
            <param name="from">Line from point.</param>
            <param name="to">Line to point.</param>
            <param name="color">Color to draw line in.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawLine(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Drawing.Color,System.Int32)">
            <summary>
            Draws a single line object.
            </summary>
            <param name="from">Line from point.</param>
            <param name="to">Line to point.</param>
            <param name="color">Color to draw line in.</param>
            <param name="thickness">Thickness (in pixels) of line.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawDottedLine(Rhino.Geometry.Line,System.Drawing.Color)">
            <summary>
            Draws a single dotted line.
            </summary>
            <param name="line">Line to draw.</param>
            <param name="color">Color of line.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawDottedLine(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Drawing.Color)">
            <summary>
            Draws a single dotted line.
            </summary>
            <param name="from">Line start point.</param>
            <param name="to">Line end point.</param>
            <param name="color">Color of line.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawDottedPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Drawing.Color,System.Boolean)">
            <summary>
            Draws a set of connected lines (polyline) in a dotted pattern.
            </summary>
            <param name="points">End points of each line segment.</param>
            <param name="color">Color of polyline.</param>
            <param name="close">Draw a line between the first and last points.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawLines(System.Collections.Generic.IEnumerable{Rhino.Geometry.Line},System.Drawing.Color)">
            <summary>
            Draws a set of lines with a given color and thickness. If you want the fastest possible set of lines
            to be drawn, pass a Line[] for lines.
            </summary>
            <param name="lines">Lines to draw.</param>
            <param name="color">Color to draw with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawLines(System.Collections.Generic.IEnumerable{Rhino.Geometry.Line},System.Drawing.Color,System.Int32)">
            <summary>
            Draws a set of lines with a given color and thickness. If you want the fastest possible set of lines
            to be drawn, pass a Line[] for lines.
            </summary>
            <param name="lines">Lines to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="thickness">Thickness (in pixels) of lines.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Drawing.Color)">
            <summary>
            Draws a single Polyline object.
            </summary>
            <param name="polyline">Polyline to draw.</param>
            <param name="color">Color to draw in.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Drawing.Color,System.Int32)">
            <summary>
            Draws a single Polyline object.
            </summary>
            <param name="polyline">Polyline to draw.</param>
            <param name="color">Color to draw in.</param>
            <param name="thickness">Thickness (in pixels) of the Polyline.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawPolygon(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Drawing.Color,System.Boolean)">
            <summary>
            Draws a filled polygon.
            </summary>
            <param name="points">
            Collection of world coordinate points that are connected by lines to form a closed shape. 
            Collection must contain at least 3 points.
            </param>
            <param name="color">Color to draw with.</param>
            <param name="filled">
            true if the closed area should be filled with color. 
            false if you want to draw just the border of the closed shape.
            </param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBitmap(Rhino.Display.DisplayBitmap,System.Int32,System.Int32)">
            <summary>
            Draws a bitmap in screen coordinates
            </summary>
            <param name="bitmap">bitmap to draw</param>
            <param name="left">where top/left corner of bitmap should appear in screen coordinates</param>
            <param name="top">where top/left corner of bitmap should appear in screen coordinates</param>
            <example>
            <code source='examples\vbnet\ex_conduitbitmap.vb' lang='vbnet'/>
            <code source='examples\cs\ex_conduitbitmap.cs' lang='cs'/>
            <code source='examples\py\ex_conduitbitmap.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBitmap(Rhino.Display.DisplayBitmap,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            Draws a bitmap in screen coordinates
            </summary>
            <param name="bitmap">bitmap to draw</param>
            <param name="left">where top/left corner of bitmap should appear in screen coordinates</param>
            <param name="top">where top/left corner of bitmap should appear in screen coordinates</param>
            <param name="maskColor">mask color to apply to bitmap for transparent regions</param>
            <example>
            <code source='examples\vbnet\ex_conduitbitmap.vb' lang='vbnet'/>
            <code source='examples\cs\ex_conduitbitmap.cs' lang='cs'/>
            <code source='examples\py\ex_conduitbitmap.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawDot(System.Int32,System.Int32,System.String,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draws a text dot in screen coordinates.
            </summary>
            <param name="screenX">X coordinate (in pixels) of dot center.</param>
            <param name="screenY">Y coordinate (in pixels) of dot center.</param>
            <param name="text">Text content of dot.</param>
            <param name="dotColor">Dot background color.</param>
            <param name="textColor">Dot foreground color.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawDot(System.Int32,System.Int32,System.String)">
            <summary>
            Draws a text dot in screen coordinates.
            </summary>
            <param name="screenX">X coordinate (in pixels) of dot center.</param>
            <param name="screenY">Y coordinate (in pixels) of dot center.</param>
            <param name="text">Text content of dot.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawDot(Rhino.Geometry.Point3d,System.String,System.Drawing.Color,System.Drawing.Color)">
            <summary>
            Draw a text dot in world coordinates.
            </summary>
            <param name="worldPosition">Location of dot in world coordinates.</param>
            <param name="text">Text content of dot.</param>
            <param name="dotColor">Dot background color.</param>
            <param name="textColor">Dot foreground color.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawDot(Rhino.Geometry.Point3d,System.String)">
            <summary>
            Draws a text dot in world coordinates.
            </summary>
            <param name="worldPosition">Location of dot in world coordinates.</param>
            <param name="text">Text content of dot.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBox(Rhino.Geometry.BoundingBox,System.Drawing.Color)">
            <summary>
            Draws the edges of a BoundingBox.
            </summary>
            <param name="box">Box to draw.</param>
            <param name="color">Color to draw in.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBox(Rhino.Geometry.BoundingBox,System.Drawing.Color,System.Int32)">
            <summary>
            Draws the edges of a BoundingBox.
            </summary>
            <param name="box">Box to draw.</param>
            <param name="color">Color to draw in.</param>
            <param name="thickness">Thickness (in pixels) of box edges.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBox(Rhino.Geometry.Box,System.Drawing.Color)">
            <summary>
            Draws the edges of a Box object.
            </summary>
            <param name="box">Box to draw.</param>
            <param name="color">Color to draw in.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBox(Rhino.Geometry.Box,System.Drawing.Color,System.Int32)">
            <summary>
            Draws the edges of a Box object.
            </summary>
            <param name="box">Box to draw.</param>
            <param name="color">Color to draw in.</param>
            <param name="thickness">Thickness (in pixels) of box edges.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBoxCorners(Rhino.Geometry.BoundingBox,System.Drawing.Color)">
            <summary>
            Draws corner widgets of a world aligned boundingbox. 
            Widget size will be 5% of the Box diagonal.
            </summary>
            <param name="box">Box to draw.</param>
            <param name="color">Color to draw with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBoxCorners(Rhino.Geometry.BoundingBox,System.Drawing.Color,System.Double)">
            <summary>
            Draws corner widgets of a world aligned boundingbox. 
            </summary>
            <param name="box">Box to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="size">Size (in model units) of the corner widgets.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawBoxCorners(Rhino.Geometry.BoundingBox,System.Drawing.Color,System.Double,System.Int32)">
            <summary>
            Draws corner widgets of a world aligned boundingbox. 
            </summary>
            <param name="box">Box to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="size">Size (in model units) of the corner widgets.</param>
            <param name="thickness">Thickness (in pixels) of the corner widgets.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMarker(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color)">
            <summary>
            Draws an arrow marker as a view-aligned widget.
            </summary>
            <param name="tip">Location of arrow tip point.</param>
            <param name="direction">Direction of arrow.</param>
            <param name="color">Color of arrow widget.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMarker(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color,System.Int32)">
            <summary>
            Draws an arrow marker as a view-aligned widget.
            </summary>
            <param name="tip">Location of arrow tip point.</param>
            <param name="direction">Direction of arrow.</param>
            <param name="color">Color of arrow widget.</param>
            <param name="thickness">Thickness of arrow widget lines.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMarker(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color,System.Int32,System.Double)">
            <summary>
            Draws an arrow marker as a view-aligned widget.
            </summary>
            <param name="tip">Location of arrow tip point.</param>
            <param name="direction">Direction of arrow.</param>
            <param name="color">Color of arrow widget.</param>
            <param name="thickness">Thickness of arrow widget lines.</param>
            <param name="size">Size (in pixels) of the arrow shaft.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawMarker(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Drawing.Color,System.Int32,System.Double,System.Double)">
            <summary>
            Draws an arrow marker as a view-aligned widget.
            </summary>
            <param name="tip">Location of arrow tip point.</param>
            <param name="direction">Direction of arrow.</param>
            <param name="color">Color of arrow widget.</param>
            <param name="thickness">Thickness of arrow widget lines.</param>
            <param name="size">Size (in pixels) of the arrow shaft.</param>
            <param name="rotation">Rotational angle adjustment (in radians, counter-clockwise of direction.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.Draw2dText(System.String,System.Drawing.Color,Rhino.Geometry.Point2d,System.Boolean)">
            <summary>
            Draws 2D text on the viewport.
            </summary>
            <param name="text">the string to draw.</param>
            <param name="color">text color.</param>
            <param name="screenCoordinate">definition point in screen coordinates (0,0 is top-left corner)</param>
            <param name="middleJustified">if true text is centered around the definition point, otherwise it is lower-left justified.</param>
            <example>
            <code source='examples\vbnet\ex_drawstring.vb' lang='vbnet'/>
            <code source='examples\cs\ex_drawstring.cs' lang='cs'/>
            <code source='examples\py\ex_drawstring.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.Draw2dText(System.String,System.Drawing.Color,Rhino.Geometry.Point2d,System.Boolean,System.Int32)">
            <summary>
            Draws 2D text on the viewport.
            </summary>
            <param name="text">the string to draw.</param>
            <param name="color">text color.</param>
            <param name="screenCoordinate">definition point in screen coordinates (0,0 is top-left corner)</param>
            <param name="middleJustified">if true text is centered around the definition point, otherwise it is lower-left justified.</param>
            <param name="height">height in pixels (good default is 12)</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.Draw2dText(System.String,System.Drawing.Color,Rhino.Geometry.Point2d,System.Boolean,System.Int32,System.String)">
            <summary>
            Draws 2D text on the viewport.
            </summary>
            <param name="text">the string to draw.</param>
            <param name="color">text color.</param>
            <param name="screenCoordinate">definition point in screen coordinates (0,0 is top-left corner)</param>
            <param name="middleJustified">if true text is centered around the definition point, otherwise it is lower-left justified.</param>
            <param name="height">height in pixels (good default is 12)</param>
            <param name="fontface">font name (good default is "Arial")</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.Draw2dText(System.String,System.Drawing.Color,Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Draws 2D text on the viewport.
            </summary>
            <param name="text">the string to draw.</param>
            <param name="color">text color.</param>
            <param name="worldCoordinate">definition point in world coordinates.</param>
            <param name="middleJustified">if true text is centered around the definition point, otherwise it is lower-left justified.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.Draw2dText(System.String,System.Drawing.Color,Rhino.Geometry.Point3d,System.Boolean,System.Int32)">
            <summary>
            Draws 2D text on the viewport.
            </summary>
            <param name="text">the string to draw.</param>
            <param name="color">text color.</param>
            <param name="worldCoordinate">definition point in world coordinates.</param>
            <param name="middleJustified">if true text is centered around the definition point, otherwise it is lower-left justified.</param>
            <param name="height">height in pixels (good default is 12)</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.Draw2dText(System.String,System.Drawing.Color,Rhino.Geometry.Point3d,System.Boolean,System.Int32,System.String)">
            <summary>
            Draws 2D text on the viewport.
            </summary>
            <param name="text">The string to draw.</param>
            <param name="color">Text color.</param>
            <param name="worldCoordinate">Definition point in world coordinates.</param>
            <param name="middleJustified">If true text is centered around the definition point, otherwise it is lower-left justified.</param>
            <param name="height">Height in pixels (good default is 12).</param>
            <param name="fontface">Font name (good default is "Arial").</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.Draw3dText(Rhino.Display.Text3d,System.Drawing.Color,Rhino.Geometry.Plane)">
            <summary>
            Draws 3d text with a different plane than what is defined in the Text3d class.
            </summary>
            <param name="text">The string to draw.</param>
            <param name="color">Text color.</param>
            <param name="textPlane">The plane for the text object.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.Draw3dText(Rhino.Display.Text3d,System.Drawing.Color,Rhino.Geometry.Point3d)">
            <summary>
            Draws 3d text using the Text3d plane with an adjusted origin.
            </summary>
            <param name="text">The string to draw.</param>
            <param name="color">Text color.</param>
            <param name="textPlaneOrigin">The origin of the plane to draw.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.Measure2dText(System.String,Rhino.Geometry.Point2d,System.Boolean,System.Double,System.Int32,System.String)">
            <summary>
            Determines screen rectangle that would be drawn to using the Draw2dText(..) function
            with the same parameters.
            </summary>
            <param name="text">text to measure.</param>
            <param name="definitionPoint">either lower-left or middle of text.</param>
            <param name="middleJustified">true=middle justified. false=lower-left justified.</param>
            <param name="rotationRadians">text rotation in radians</param>
            <param name="height">height in pixels (good default is 12)</param>
            <param name="fontFace">font name (good default is "Arial")</param>
            <returns>rectangle in the viewport's screen coordinates on success.</returns>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawObject(Rhino.DocObjects.RhinoObject,Rhino.Geometry.Transform)">
            <summary>
            Draws a <see cref="T:Rhino.DocObjects.RhinoObject">RhinoObject</see> with an applied transformation.
            </summary>
            <param name="rhinoObject">The Rhino object.</param>
            <param name="xform">The transformation.</param>
            <example>
            <code source="examples\vbnet\ex_arraybydistance.vb" lang="vbnet"/>
            <code source="examples\cs\ex_arraybydistance.cs" lang="cs"/>
            <code source="examples\py\ex_arraybydistance.py" lang="py"/>
            </example>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawArc(Rhino.Geometry.Arc,System.Drawing.Color)">
            <summary>
            Draw a single arc object.
            </summary>
            <param name="arc">Arc to draw.</param>
            <param name="color">Color to draw with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawArc(Rhino.Geometry.Arc,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a single arc object.
            </summary>
            <param name="arc">Arc to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="thickness">Thickness (in pixels) of arc.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCircle(Rhino.Geometry.Circle,System.Drawing.Color)">
            <summary>
            Draw a single circle object.
            </summary>
            <param name="circle">Circle to draw.</param>
            <param name="color">Color to draw with.</param>
            <example>
            <code source='examples\vbnet\ex_getpointdynamicdraw.vb' lang='vbnet'/>
            <code source='examples\cs\ex_getpointdynamicdraw.cs' lang='cs'/>
            <code source='examples\py\ex_getpointdynamicdraw.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCircle(Rhino.Geometry.Circle,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a single circle object.
            </summary>
            <param name="circle">Circle to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="thickness">Thickness (in pixels) of circle.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawSphere(Rhino.Geometry.Sphere,System.Drawing.Color)">
            <summary>
            Draw a wireframe sphere.
            </summary>
            <param name="sphere">Sphere to draw.</param>
            <param name="color">Color to draw with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawSphere(Rhino.Geometry.Sphere,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a wireframe sphere.
            </summary>
            <param name="sphere">Sphere to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="thickness">Thickness (in pixels) of Sphere wires.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawTorus(Rhino.Geometry.Torus,System.Drawing.Color)">
            <summary>
            Draw a wireframe torus.
            </summary>
            <param name="torus">Torus to draw.</param>
            <param name="color">Color to draw with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawTorus(Rhino.Geometry.Torus,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a wireframe torus.
            </summary>
            <param name="torus">Torus to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="thickness">Thickness (in pixels) of torus wires.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCylinder(Rhino.Geometry.Cylinder,System.Drawing.Color)">
            <summary>
            Draw a wireframe cylinder.
            </summary>
            <param name="cylinder">Cylinder to draw.</param>
            <param name="color">Color to draw with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCylinder(Rhino.Geometry.Cylinder,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a wireframe cylinder.
            </summary>
            <param name="cylinder">Cylinder to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="thickness">Thickness (in pixels) of cylinder wires.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCone(Rhino.Geometry.Cone,System.Drawing.Color)">
            <summary>
            Draw a wireframe cone.
            </summary>
            <param name="cone">Cone to draw.</param>
            <param name="color">Color to draw with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCone(Rhino.Geometry.Cone,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a wireframe cone.
            </summary>
            <param name="cone">Cone to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="thickness">Thickness (in pixels) of Cone wires.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCurve(Rhino.Geometry.Curve,System.Drawing.Color)">
            <summary>
            Draw a single Curve object.
            </summary>
            <param name="curve">Curve to draw.</param>
            <param name="color">Color to draw with.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCurve(Rhino.Geometry.Curve,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a single Curve object.
            </summary>
            <param name="curve">Curve to draw.</param>
            <param name="color">Color to draw with.</param>
            <param name="thickness">Thickness (in pixels) of curve.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCurvatureGraph(Rhino.Geometry.Curve,System.Drawing.Color)">
            <summary>
            Draw a typical Rhino Curvature Graph.
            </summary>
            <param name="curve">Base curve for curvature graph.</param>
            <param name="color">Color of curvature graph.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCurvatureGraph(Rhino.Geometry.Curve,System.Drawing.Color,System.Int32)">
            <summary>
            Draw a typical Rhino Curvature Graph.
            </summary>
            <param name="curve">Base curve for curvature graph.</param>
            <param name="color">Color of curvature graph.</param>
            <param name="hairScale">100 = true length, &gt; 100 magnified, &lt; 100 shortened.</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawCurvatureGraph(Rhino.Geometry.Curve,System.Drawing.Color,System.Int32,System.Int32,System.Int32)">
            <summary>
            Draw a typical Rhino Curvature Graph.
            </summary>
            <param name="curve">Base curve for curvature graph.</param>
            <param name="color">Color of curvature graph.</param>
            <param name="hairScale">100 = true length, &gt; 100 magnified, &lt; 100 shortened.</param>
            <param name="hairDensity">&gt;= 0 larger numbers = more hairs (good default is 1).</param>
            <param name="sampleDensity">Between 1 and 10. Higher numbers draw smoother outer curves. (good default is 2).</param>
        </member>
        <member name="M:Rhino.Display.DisplayPipeline.DrawSurface(Rhino.Geometry.Surface,System.Drawing.Color,System.Int32)">
            <summary>
            Draw wireframe display for a single surface.
            </summary>
            <param name="surface">Surface to draw.</param>
            <param name="wireColor">Color to draw with.</param>
            <param name="wireDensity">Thickness (in pixels) or wires to draw.</param>
        </member>
        <member name="E:Rhino.Display.DisplayPipeline.CalculateBoundingBoxZoomExtents">
            <summary>
            Calculate a bounding to include in the Zoom Extents command.
            </summary>
        </member>
        <member name="E:Rhino.Display.DisplayPipeline.PreDrawObjects">
            <summary>
            Called before objects are been drawn. Depth writing and testing are on.
            </summary>
        </member>
        <member name="E:Rhino.Display.DisplayPipeline.PreDrawObject">
            <summary>
            Called right before an individual object is being drawn. NOTE: Do not use this event
            unless you absolutely need to.  It is called for every object in the document and can
            slow disply down if a large number of objects exist in the document
            </summary>
        </member>
        <member name="E:Rhino.Display.DisplayPipeline.PostDrawObjects">
            <summary>
            Called after all non-highlighted objects have been drawn. Depth writing and testing are
            still turned on. If you want to draw without depth writing/testing, see DrawForeground.
            </summary>
        </member>
        <member name="E:Rhino.Display.DisplayPipeline.DrawForeground">
            <summary>
            Called after all non-highlighted objects have been drawn and PostDrawObjects has been called.
            Depth writing and testing are turned OFF. If you want to draw with depth writing/testing,
            see PostDrawObjects.
            </summary>
            <remarks>
            This event is actually passed a DrawForegroundEventArgs, but we could not change
            the event declaration without breaking the SDK. Cast to a DrawForegroundEventArgs
            if you need it.
            </remarks>
        </member>
        <member name="E:Rhino.Display.DisplayPipeline.DrawOverlay">
            <summary>
            If Rhino is in a feedback mode, the draw overlay call allows for temporary geometry to be drawn on top of
            everything in the scene. This is similar to the dynamic draw routine that occurs with custom get point.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.FrameSize">
            <summary>
            Gets the size of the framebuffer that this pipeline is drawing to.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.DefaultCurveThickness">
            <summary>
            Gets the curve thickness as defined by the current display mode. 
            Note: this only applies to curve objects, Brep and Mesh wires may have different settings.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.IsOpenGL">
            <summary>
            Gets a value indicating whether or not this pipeline is drawing into an OpenGL context.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.IsStereoMode">
            <summary>
            Gets a value that indicates whether this pipeline is currently using an 
            engine that is performing stereo style drawing. Stereo drawing is for 
            providing an "enhanced 3-D" effect through stereo viewing devices.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.IsPrinting">
            <summary>
            Gets a value that indicates whether this pipeline 
            is currently drawing for printing purposes.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.IsDynamicDisplay">
            <summary>
            Gets a value that indicates whether the viewport is in Dynamic Display state. 
            Dynamic display is the state a viewport is in when it is rapidly redrawing because of
            an operation like panning or rotating. The pipeline will drop some level of detail
            while inside a dynamic display state to keep the frame rate as high as possible.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.SupportsShading">
            <summary>
            Gets whether or not this pipeline supports shaded meshes.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.StereoProjection">
            <summary>
            Gets the current stereo projection if stereo mode is on.
            <para>0 = left</para>
            <para>1 = right</para>
            If stereo mode is not enables, this property always returns 0.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.ModelTransform">
            <summary>
            Gets or sets the current model transformation that is applied to vertices when drawing.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.ModelTransformIsIdentity">
            <summary>
            Gets a value that indicates whether the Model Transform is an Identity transformation.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.RenderPass">
            <summary>
            Gets the current pass that the pipeline is in for drawing a frame. 
            Typically drawing a frame requires a single pass through the DrawFrameBuffer 
            function, but some special display effects can be achieved through 
            drawing with multiple passes.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.NestLevel">
            <summary>
            Gets the current nested viewport drawing level. 
            This is used to know if you are currently inside the drawing of a nested viewport (detail object in Rhino). 
            <para>Nest level = 0 Drawing is occuring in a standard Rhino viewport or on the page viewport.</para>
            <para>Nest level = 1 Drawing is occuring inside a detail view object.</para>
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.DrawingWires">
            <summary>
            Gets a value that indicates whether the pipeline is currently in a curve
            drawing operation. This is useful when inside of a draw event or display
            conduit to check and see if the geometry is about to be drawn is going to
            be drawing the wire representation of the geometry (mesh, extrusion, or
            brep).  See DrawingSurfaces to check and see if the shaded mesh representation
            of the geometry is going to be drawn.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.DrawingGrips">
            <summary>
            Gets a value that indicates whether the pipeline is currently in a grip drawing operation.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.DrawingSurfaces">
            <summary>
            Gets a value that indicates whether the pipeline is currently in a surface
            drawing operation.  Surface drawing means draw the shaded triangles of a mesh
            representing the surface (mesh, extrusion, or brep).  This is useful when
            inside of a draw event or display conduit to check and see if the geometry is
            about to be drawn as a shaded set of triangles representing the geometry.
            See DrawingWires to check and see if the wireframe representation of the
            geometry is going to be drawn.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipeline.ShadingRequired">
            <summary>
            Gets or sets the "ShadingRequired" flag. This flag gets set inside the pipeline when a request is 
            made to draw a shaded mesh but the current render engine doesn't support shaded 
            mesh drawing...at this point the redraw mechanism will make sure everything will 
            work the next time around.
            </summary>
        </member>
        <member name="M:Rhino.Display.CalculateBoundingBoxEventArgs.IncludeBoundingBox(Rhino.Geometry.BoundingBox)">
            <summary>
            Unites a bounding box with the current display bounding box in order to ensure
            dynamic objects in "box" are drawn.
            </summary>
            <param name="box">The box to unite.</param>
        </member>
        <member name="P:Rhino.Display.CalculateBoundingBoxEventArgs.BoundingBox">
            <summary>
            Gets the current bounding box.
            </summary>
        </member>
        <member name="T:Rhino.Display.ZBufferCapture">
            <summary>
            Provides functionality for getting the zbuffer values from a viewport
            and a given display mode
            </summary>
        </member>
        <member name="M:Rhino.Display.ZBufferCapture.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Display.ZBufferCapture.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Display.ZBufferCapture.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="T:Rhino.Display.DisplayPipelineAttributes">
            <summary>
            Represents display pipeline settings, such as "show transparency" and "show grips".
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipelineAttributes.ShowCurves">
            <summary>Draw curves</summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipelineAttributes.CurveThickness">
            <summary>Pixel thickness for curves</summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipelineAttributes.CurveColor">
            <summary>Color used for drawing curves</summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipelineAttributes.ShadingEnabled">
            <summary>Draw shaded meshes and surfaces</summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipelineAttributes.LockedObjectsDrawBehindOthers">
            <summary>Locked object are drawn behind other objects</summary>
        </member>
        <member name="P:Rhino.Display.DisplayPipelineAttributes.MeshDisplayAttributes.AllMeshWiresColor">
            <summary>
            Color.Empty means that we are NOT using a single color for all mesh wires.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayMaterial.#ctor">
            <summary>
            Constructs a default material.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayMaterial.#ctor(Rhino.Display.DisplayMaterial)">
            <summary>
            Duplicate another material.
            </summary>
        </member>
        <member name="M:Rhino.Display.DisplayMaterial.#ctor(System.Drawing.Color)">
            <summary>
            Constructs a default material with a specific diffuse color.
            </summary>
            <param name="diffuse">Diffuse color of material. The alpha component of the Diffuse color is ignored.</param>
        </member>
        <member name="M:Rhino.Display.DisplayMaterial.#ctor(System.Drawing.Color,System.Double)">
            <summary>
            Constructs a default material with a specific diffuse color and transparency.
            </summary>
            <param name="diffuse">Diffuse color of material. The alpha component of the Diffuse color is ignored.</param>
            <param name="transparency">Transparency factor (0.0 = opaque, 1.0 = transparent)</param>
        </member>
        <member name="M:Rhino.Display.DisplayMaterial.#ctor(System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Drawing.Color,System.Double,System.Double)">
            <summary>
            Constructs a material with custom properties.
            </summary>
            <param name="diffuse">Diffuse color of material. The alpha component of the Diffuse color is ignored.</param>
            <param name="specular">Specular color of material. The alpha component of the Specular color is ignored.</param>
            <param name="ambient">Ambient color of material. The alpha component of the Ambient color is ignored.</param>
            <param name="emission">Emission color of material. The alpha component of the Emission color is ignored.</param>
            <param name="shine">Shine (highlight size) of material.</param>
            <param name="transparency">Transparency of material (0.0 = opaque, 1.0 = transparent)</param>
        </member>
        <member name="M:Rhino.Display.DisplayMaterial.GetBumpTexture(System.Boolean)">
            <summary>
            Gets the bump texture for this display material.
            </summary>
            <returns>The texture, or null if no bump texture has been added to this material.</returns>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.Diffuse">
            <summary>
            Gets or sets the Diffuse color of the Material. 
            The alpha component of the color will be ignored.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.BackDiffuse">
            <summary>
            Gets or sets the Diffuse color of the back side of the Material. 
            The alpha component of the color will be ignored.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.Specular">
            <summary>
            Gets or sets the Specular color of the Material. 
            The alpha component of the color will be ignored.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.BackSpecular">
            <summary>
            Gets or sets the Specular color of the back side of the Material. 
            The alpha component of the color will be ignored.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.Ambient">
            <summary>
            Gets or sets the Ambient color of the Material. 
            The alpha component of the color will be ignored.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.BackAmbient">
            <summary>
            Gets or sets the Ambient color of the back side of the Material. 
            The alpha component of the color will be ignored.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.Emission">
            <summary>
            Gets or sets the Emissive color of the Material. 
            The alpha component of the color will be ignored.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.BackEmission">
            <summary>
            Gets or sets the Emissive color of the back side of the Material. 
            The alpha component of the color will be ignored.
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.Shine">
            <summary>
            Gets or sets the shine factor of the material (0.0 to 1.0)
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.BackShine">
            <summary>
            Gets or sets the shine factor of the back side of the material (0.0 to 1.0)
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.Transparency">
            <summary>
            Gets or sets the transparency of the material (0.0 = opaque to 1.0 = transparent)
            </summary>
        </member>
        <member name="P:Rhino.Display.DisplayMaterial.BackTransparency">
            <summary>
            Gets or sets the transparency of the back side material (0.0 = opaque to 1.0 = transparent)
            </summary>
        </member>
        <member name="T:Rhino.Commands.CustomUndoEventArgs">
            <summary>
            Argument package that is passed to a custom undo delegate
            </summary>
        </member>
        <member name="F:Rhino.Render.ImageFileEvent.Saved">
            <summary>
            Render image file has been successfully written
            </summary>
        </member>
        <member name="F:Rhino.Render.ImageFileEvent.Loaded">
            <summary>
            Render image file has been successfully loaded
            </summary>
        </member>
        <member name="F:Rhino.Render.ImageFileEvent.Deleted">
            <summary>
            Render image file was just deleted
            </summary>
        </member>
        <member name="T:Rhino.Render.ImageFile">
            <summary>
            Controls interaction with RDK render image files
            </summary>
        </member>
        <member name="E:Rhino.Render.ImageFile.Saved">
            <summary>
            Render image file saved, happens when a rendering completes.
            If a plug-in needs to save additional file information it should
            write it to the same folder as the Rhino render image file.  Rhino
            will take care of deleting old data.
            </summary>
        </member>
        <member name="E:Rhino.Render.ImageFile.Loaded">
            <summary>
            Generally called when the "RenderOpenLastRender" command is run,
            this event is raised after the render window has been created and the
            saved scene has been loaded.
            </summary>
        </member>
        <member name="E:Rhino.Render.ImageFile.Deleted">
            <summary>
            Called when the RDK is cleaning up old render image files, a
            plug-in should delete any plug-in specific image files at this
            time.
            </summary>
        </member>
        <member name="T:Rhino.RhinoDoc">
            <summary>
            Represents an active model.
            </summary>
        </member>
        <member name="M:Rhino.RhinoDoc.FindFile(System.String)">
            <summary>
            Search for a file using Rhino's search path.  Rhino will look in the
            following places:
            1. Current model folder
            2. Path specified in options dialog/File tab
            3. Rhino system folders
            4. Rhino executable folder
            </summary>
            <param name="filename"></param>
            <returns>
            Path to existing file if found, an empty string if no file was found
            </returns>
        </member>
        <member name="M:Rhino.RhinoDoc.ReadFileVersion">
            <summary>
            Returns the file version of the current document.  
            Use this function to determine which version of Rhino last saved the document.
            </summary>
            <returns>
            The file version (e.g. 1, 2, 3, 4, etc.) or -1 if the document has not been read from disk.
            </returns>
        </member>
        <member name="M:Rhino.RhinoDoc.GetMeshingParameters(Rhino.Geometry.MeshingParameterStyle)">
            <summary>
            Get MeshingParameters currently used by the document
            </summary>
            <param name="style"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.RhinoDoc.SetCustomMeshingParameters(Rhino.Geometry.MeshingParameters)">
            <summary>
            Set the custom meshing parameters that this document will use. You must also modify the
            MeshingParameterStyle property on the document to Custom if you want these meshing
            parameters to be used
            </summary>
            <param name="mp"></param>
        </member>
        <member name="M:Rhino.RhinoDoc.CreateDefaultAttributes">
            <summary>
            Gets the default object attributes for this document. 
            The attributes will be linked to the currently active layer 
            and they will inherit the Document WireDensity setting.
            </summary>
            <example>
            <code source='examples\vbnet\ex_objectdecoration.vb' lang='vbnet'/>
            <code source='examples\cs\ex_objectdecoration.cs' lang='cs'/>
            <code source='examples\py\ex_objectdecoration.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.RhinoDoc.BeginUndoRecord(System.String)">
            <summary>
            Instructs Rhino to begin recording undo information when the document
            is changed outside of a command. We use this, e.g., to save changes
            caused by the modeless layer or object properties dialogs
            when commands are not running.
            </summary>
            <param name="description">A text describing the record.</param>
            <returns>
            Serial number of record.  Returns 0 if record is not started
            because undo information is already being recorded or
            undo is disabled.
            </returns>
        </member>
        <member name="M:Rhino.RhinoDoc.AddCustomUndoEvent(System.String,System.EventHandler{Rhino.Commands.CustomUndoEventArgs},System.Object)">
            <summary>
            Add a custom undo event so you can undo private plug-in data
            when the user performs an undo or redo
            </summary>
            <param name="description"></param>
            <param name="handler"></param>
            <param name="tag"></param>
            <returns></returns>
            <example>
            <code source='examples\vbnet\ex_customundo.vb' lang='vbnet'/>
            <code source='examples\cs\ex_customundo.cs' lang='cs'/>
            <code source='examples\py\ex_customundo.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.RhinoDoc.ExtractPreviewImage(System.String)">
            <summary>Extracts the bitmap preview image from the specified model (3DM).</summary>
            <param name='path'>
            The model (3DM) from which to extract the preview image.
            If null, the currently loaded model is used.
            </param>
            <returns>true on success.</returns>
        </member>
        <member name="P:Rhino.RhinoDoc.ActiveDoc">
            <summary>
            WARNING!! Do not use the ActiveDoc if you don't have to. Under Mac Rhino the ActiveDoc
            can change while a command is running. Use the doc that is passed to you in your RunCommand
            function or continue to use the same doc after the first call to ActiveDoc.
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Name">
            <summary>Returns the name of the currently loaded Rhino document (3DM file).</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Path">
            <summary>Returns the path of the currently loaded Rhino document (3DM file).</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Notes">
            <summary>Returns or sets the document&apos;s notes.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.ModelAbsoluteTolerance">
            <summary>Model space absolute tolerance.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.ModelAngleToleranceRadians">
            <summary>Model space angle tolerance.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.ModelAngleToleranceDegrees">
            <summary>Model space angle tolerance.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.ModelRelativeTolerance">
            <summary>Model space relative tolerance.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.ModelDistanceDisplayPrecision">
            <example>
            <code source='examples\vbnet\ex_displayprecision.vb' lang='vbnet'/>
            <code source='examples\cs\ex_displayprecision.cs' lang='cs'/>
            <code source='examples\py\ex_displayprecision.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.RhinoDoc.PageAbsoluteTolerance">
            <summary>Page space absolute tolerance.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.PageAngleToleranceRadians">
            <summary>Page space angle tolerance.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.PageAngleToleranceDegrees">
            <summary>Page space angle tolerance.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.PageRelativeTolerance">
            <summary>Page space relative tolerance.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Modified">
            <summary>Returns or sets the document's modified flag.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.PageUnitSystem">
            <example>
            <code source='examples\vbnet\ex_addlayout.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayout.cs' lang='cs'/>
            <code source='examples\py\ex_addlayout.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.RhinoDoc.IsReadOnly">
            <summary>
            Current read-only mode for this document.
            true if the document is can be viewed but NOT saved.
            false if document can be viewed and saved.
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.IsLocked">
            <summary>
            Check to see if the file associated with this document is locked.  If it is
            locked then this is the only document that will be able to write the file.  Other
            instances of Rhino will fail to write this document.
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.DocumentId">
            <summary>
            Gets the Document Id.
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.MeshingParameterStyle">
            <summary>
            Type of MeshingParameters currently used by the document to mesh objects
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Bitmaps">
            <summary>
            bitmaps used in textures, backgrounds, wallpapers, ...
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Materials">
            <summary>Materials in the document.</summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Linetypes">
            <summary>
            Linetypes in the document.
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Layers">
            <summary>
            Layers in the document.
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.Groups">
            <example>
            <code source='examples\vbnet\ex_addobjectstogroup.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addobjectstogroup.cs' lang='cs'/>
            <code source='examples\py\ex_addobjectstogroup.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.RhinoDoc.DimStyles">
            <example>
            <code source='examples\vbnet\ex_dimstyle.vb' lang='vbnet'/>
            <code source='examples\cs\ex_dimstyle.cs' lang='cs'/>
            <code source='examples\py\ex_dimstyle.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.RhinoDoc.HatchPatterns">
            <example>
            <code source='examples\vbnet\ex_hatchcurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_hatchcurve.cs' lang='cs'/>
            <code source='examples\py\ex_hatchcurve.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.RhinoDoc.InstanceDefinitions">
            <example>
            <code source='examples\vbnet\ex_printinstancedefinitiontree.vb' lang='vbnet'/>
            <code source='examples\cs\ex_printinstancedefinitiontree.cs' lang='cs'/>
            <code source='examples\py\ex_printinstancedefinitiontree.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.RhinoDoc.NamedViews">
            <example>
            <code source='examples\vbnet\ex_addnamedview.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnamedview.cs' lang='cs'/>
            <code source='examples\py\ex_addnamedview.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.RhinoDoc.GroundPlane">
            <summary>Gets the ground plane of this document.</summary>
            <exception cref="T:Rhino.Runtime.RdkNotLoadedException">If the RDK is not loaded.</exception>
        </member>
        <member name="P:Rhino.RhinoDoc.InGet">
            <summary>
            Returns true if currently in a GetPoint.Get(), GetObject.GetObjects(), or GetString.Get()
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.IsSendingMail">
            <summary>
            true if Rhino is in the process of sending this document as an email attachment.
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.TemplateFileUsed">
            <summary>
            name of the template file used to create this document. This is a runtime value
            only present if the document was newly created.
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.UndoRecordingIsActive">
            <summary>
            true if undo recording is actually happening now.
            </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.EndOpenDocumentInitialiViewUpdate">
            <summary>
            This event is raised after <see cref="E:Rhino.RhinoDoc.EndOpenDocument"/> when the
            documents initial views have been created and initialized.
            </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.AddRhinoObject">
            <summary>Called if a new object is added to the document.</summary>
        </member>
        <member name="E:Rhino.RhinoDoc.DeleteRhinoObject">
            <summary>
            Called if an object is deleted. At some later point the object can be un-deleted.
            </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.ReplaceRhinoObject">
             <summary>
             Called if an object is about to be replaced.
             If either RhinoDoc::UndoActive() or RhinoDoc::RedoActive() is true,
             then immediatedly after ReplaceObject is called there will be a call
             to DeleteObject and then a call to AddObject.
            
             If both RhinoDoc::UndoActive() and RhinoDoc::RedoActive() are false,
             then immediatedly after ReplaceObject is called there will be a call
             to DeleteObject and then a call to UndeleteObject.
             </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.UndeleteRhinoObject">
            <summary>Called if an object is un-deleted.</summary>
        </member>
        <member name="E:Rhino.RhinoDoc.PurgeRhinoObject">
            <summary>
            Called if an object is being purged from a document. The object will cease to exist forever.
            </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.SelectObjects">
            <summary>
            Called when object(s) are selected.
            </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.DeselectObjects">
            <summary>
            Called when object(s) are deselected.
            </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.DeselectAllObjects">
            <summary>
            Called when all objects are deselected.
            </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.ModifyObjectAttributes">
            <summary>
            Called when all object attributes are changed.
            </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.BeforeTransformObjects">
            <summary>
            Called before objects are being transformed
            </summary>
            <example>
            <code source='examples\vbnet\ex_rhinogettransform.vb' lang='vbnet'/>
            <code source='examples\cs\ex_rhinogettransform.cs' lang='cs'/>
            </example>
        </member>
        <member name="E:Rhino.RhinoDoc.LayerTableEvent">
            <summary>
            Called when any modification happens to a document's layer table.
            </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.InstanceDefinitionTableEvent">
            <summary>
            Called when any modification happens to a document's light table.
            </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.LightTableEvent">
            <summary>
            Called when any modification happens to a document's light table.
            </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.MaterialTableEvent">
            <summary>
            Called when any modification happens to a document's material table.
            </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.GroupTableEvent">
            <summary>
            Called when any modification happens to a document's group table.
            </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.RenderMaterialsTableEvent">
            Called when the <see cref="T:Rhino.Render.RenderMaterialTable"/> has been loaded, is
            about to be cleared or has been cleared.  See <see cref="T:Rhino.RhinoDoc.RenderContentTableEventType"/> for more
            information.
        </member>
        <member name="E:Rhino.RhinoDoc.RenderEnvironmentTableEvent">
            Called when the <see cref="T:Rhino.Render.RenderEnvironmentTable"/> has been loaded, is
            about to be cleared or has been cleared.  See <see cref="T:Rhino.RhinoDoc.RenderContentTableEventType"/> for more
            information.
        </member>
        <member name="E:Rhino.RhinoDoc.RenderTextureTableEvent">
            <summary>
            Called when the <see cref="T:Rhino.Render.RenderTextureTable"/> has been loaded, is
            about to be cleared or has been cleared.  See <see cref="T:Rhino.RhinoDoc.RenderContentTableEventType"/> for more
            information.
            </summary>
        </member>
        <member name="E:Rhino.RhinoDoc.TextureMappingEvent">
            <summary>
            Called when any modification happens to a document objects texture mapping.
            </summary>
        </member>
        <member name="T:Rhino.RhinoDoc.RenderContentTableEventType">
            <summary>
            Type of content table event
            </summary>
        </member>
        <member name="F:Rhino.RhinoDoc.RenderContentTableEventType.Loaded">
            <summary>
            The document has been read and the table has been loaded
            </summary>
        </member>
        <member name="F:Rhino.RhinoDoc.RenderContentTableEventType.Clearing">
            <summary>
            The table is about to be cleared
            </summary>
        </member>
        <member name="F:Rhino.RhinoDoc.RenderContentTableEventType.Cleared">
            <summary>
            The table has been cleared
            </summary>
        </member>
        <member name="F:Rhino.RhinoDoc.RenderContentTableEventType.MaterialAssignmentChanged">
            <summary>
            Object or layer material assignment changed
            </summary>
        </member>
        <member name="T:Rhino.RhinoDoc.RenderContentTableEventArgs">
            <summary>
            Passed to the <see cref="E:Rhino.RhinoDoc.RenderMaterialsTableEvent"/>, <see cref="E:Rhino.RhinoDoc.RenderEnvironmentTableEvent"/> and the
            <see cref="E:Rhino.RhinoDoc.RenderTextureTableEvent"/> events.
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.RenderContentTableEventArgs.Document">
            <summary>
            Document the table belongs to
            </summary>
        </member>
        <member name="P:Rhino.RhinoDoc.RenderContentTableEventArgs.EventType">
            <summary>
            Event type
            </summary>
        </member>
        <member name="F:Rhino.RhinoDoc.TextureMappingEventType.Added">
            <summary>
            Adding texture mapping to a document
            </summary>
        </member>
        <member name="F:Rhino.RhinoDoc.TextureMappingEventType.Deleted">
            <summary>
            A texture mapping was deleted from a document
            </summary>
        </member>
        <member name="F:Rhino.RhinoDoc.TextureMappingEventType.Undeleted">
            <summary>
            A texture mapping was undeleted in a document
            </summary>
        </member>
        <member name="F:Rhino.RhinoDoc.TextureMappingEventType.Modified">
            <summary>
            A texture mapping was modified in a document
            </summary>
        </member>
        <member name="T:Rhino.RhinoDoc.TextureMappingEventArgs">
            <summary>
            Event arguments passed to the RhinoDoc.TextureMappingEvent.
            </summary>
        </member>
        <member name="T:Rhino.DocumentEventArgs">
            <summary>
            Provides document information for RhinoDoc events.
            </summary>
        </member>
        <member name="P:Rhino.DocumentEventArgs.DocumentId">
            <summary>
            Gets the document Id of the document for this event.
            </summary>
        </member>
        <member name="P:Rhino.DocumentEventArgs.Document">
            <summary>
            Gets the document for this event. This field might be null.
            </summary>
        </member>
        <member name="T:Rhino.DocumentOpenEventArgs">
            <summary>
            Provides document information for RhinoDoc events.
            </summary>
        </member>
        <member name="P:Rhino.DocumentOpenEventArgs.FileName">
            <summary>
            Name of file being opened.
            </summary>
        </member>
        <member name="P:Rhino.DocumentOpenEventArgs.Merge">
            <summary>
            true if file is being merged into the current document. This
            occurs during the "Import" command.
            </summary>
        </member>
        <member name="P:Rhino.DocumentOpenEventArgs.Reference">
            <summary>
            true is file is openend as a reference file.
            </summary>
        </member>
        <member name="T:Rhino.DocumentSaveEventArgs">
            <summary>
            Provides document information for RhinoDoc events.
            </summary>
        </member>
        <member name="P:Rhino.DocumentSaveEventArgs.FileName">
            <summary>
            Name of file being written.
            </summary>
        </member>
        <member name="P:Rhino.DocumentSaveEventArgs.ExportSelected">
            <summary>
            true if only selected objects are being written to a file.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.RhinoObjectSelectionEventArgs.Selected">
            <summary>
            Returns true if objects are being selected.
            Returns false if objects are being deseleced.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.RhinoTransformObjectsEventArgs">
            <summary>
            EventArgs passed to RhinoDoc.BeforeTransform.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ViewTable.FlashObjects(System.Collections.Generic.IEnumerable{Rhino.DocObjects.RhinoObject},System.Boolean)">
            <summary>
            Cause objects selection state to change momentarily so the object
            appears to flash on the screen.
            </summary>
            <param name="list">An array, a list or any enumerable set of Rhino objects.</param>
            <param name="useSelectionColor">
            If true, flash between object color and selection color. If false,
            flash between visible and invisible.
            </param>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ViewTable.Redraw">
             <summary>Redraws all views.</summary>
             <remarks>
             If you change something in the active document -- like adding
             objects, deleting objects, modifying layer or object display 
             attributes, etc., then you need to call CRhinoDoc::Redraw to 
             redraw all the views.
            
             If you change something in a particular view like the projection,
             construction plane, background bitmap, etc., then you need to
             call CRhinoView::Redraw to redraw that particular view.
            </remarks>
             <example>
             <code source='examples\vbnet\ex_addcircle.vb' lang='vbnet'/>
             <code source='examples\cs\ex_addcircle.cs' lang='cs'/>
             <code source='examples\py\ex_addcircle.py' lang='py'/>
             </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ViewTable.GetViewList(System.Boolean,System.Boolean)">
            <summary>Gets an array of all the views.</summary>
            <param name="includeStandardViews">true if "Right", "Perspective", etc., view should be included; false otherwise.</param>
            <param name="includePageViews">true if page-related views should be included; false otherwise.</param>
            <returns>A array of Rhino views. This array can be emptry, but not null.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ViewTable.GetPageViews">
            <summary>
            Gets all page views in the document.
            </summary>
            <returns>An array with all page views. The return value can be an empty array but not null.</returns>
            <example>
            <code source='examples\vbnet\ex_addlayout.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayout.cs' lang='cs'/>
            <code source='examples\py\ex_addlayout.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ViewTable.Find(System.Guid)">
            <summary>
            Finds a view in this document with a given main viewport Id.
            </summary>
            <param name="mainViewportId">The ID of the main viewport looked for.</param>
            <returns>View on success. null if the view could not be found in this document.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ViewTable.Find(System.String,System.Boolean)">
            <summary>
            Finds a view in this document with a main viewport that has a given name. Note that there
            may be multiple views in this document that have the same name. This function only returns
            the first view found. If you want to find all the views with a given name, use the GetViewList
            function and iterate through the views.
            </summary>
            <param name="mainViewportName">The name of the main viewport.</param>
            <param name="compareCase">true if capitalization influences comparison; otherwise, false.</param>
            <returns>A Rhino view on success; null on error.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ViewTable.Add(System.String,Rhino.Display.DefinedViewportProjection,System.Drawing.Rectangle,System.Boolean)">
            <summary>
            Constructs a new Rhino view and, at the same time, adds it to the list.
            </summary>
            <param name="title">The title of the new Rhino view.</param>
            <param name="projection">A basic projection type.</param>
            <param name="position">A position.</param>
            <param name="floating">true if the view floats; false if it is docked.</param>
            <returns>The newly constructed Rhino view; or null on error.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ViewTable.AddPageView(System.String)">
            <summary>
            Constructs a new page view with a given title and, at the same time, adds it to the list.
            </summary>
            <param name="title">
            If null or empty, a name will be generated as "Page #" where # is the largest page number.
            </param>
            <returns>The newly created page view on success; or null on error.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ViewTable.AddPageView(System.String,System.Double,System.Double)">
            <summary>
            Constructs a new page view with a given title and size and, at the same time, adds it to the list.
            </summary>
            <param name="title">
            If null or empty, a name will be generated as "Page #" where # is the largest page number.
            </param>
            <param name="pageWidth">The page total width.</param>
            <param name="pageHeight">The page total height.</param>
            <returns>The newly created page view on success; or null on error.</returns>
            <example>
            <code source='examples\vbnet\ex_addlayout.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayout.cs' lang='cs'/>
            <code source='examples\py\ex_addlayout.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.Tables.ViewTable.Document">
            <summary>Document that owns this object table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.ViewTable.ActiveView">
            <summary>
            Gets or Sets the active view.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addbackgroundbitmap.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbackgroundbitmap.cs' lang='cs'/>
            <code source='examples\py\ex_addbackgroundbitmap.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.Tables.ViewTable.RedrawEnabled">
            <summary>Returns or sets (enable or disables) screen redrawing.</summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Find(System.Guid)">
            <summary>
            Uses the object guid to find a rhino object. Deleted objects cannot be found by id.
            The guid is the value that is stored on RhinoObject.Id
            In a single document, no two active objects have the same guid. If an object is
            replaced with a new object, then the guid  persists. For example, if the _Move command
            moves an object, then the moved object inherits it's guid from the starting object.
            If the Copy command copies an object, then the copy gets a new guid. This guid persists
            through file saving/openning operations. This function will not find grip objects.
            </summary>
            <param name="objectId">ID of object to search for.</param>
            <returns>Reference to the rhino object with the objectId or null if no such object could be found.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Find(System.UInt32)">
            <summary>
            Use the object runtime serial number to find a rhino object in the document. This is the value stored on
            RhinoObject.RuntimeObjectSerialNumber. The RhinoObject constructor sets the runtime serial number and every
            instance of a RhinoObject class will have a unique serial number for the duration of the Rhino application.
            If an object is replaced with a new object, then the new object will have a different runtime serial number.
            Deleted objects stored in the undo list maintain their runtime serial numbers and this funtion will return
            pointers to these objects. Call RhinoObject.IsDeleted if you need to determine if the returned object is
            active or deleted.  The runtime serial number is not saved in files.
            </summary>
            <param name="runtimeSerialNumber">Runtime serial number to search for.</param>
            <returns>Reference to the rhino object with the objectId or null if no such object could be found.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.FindByGroup(System.Int32)">
            <summary>
            Finds all RhinoObjects that are in a given group.
            </summary>
            <param name="groupIndex">Index of group to search for.</param>
            <returns>An array of objects that belong to the specified group or null if no objects could be found.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.FindByLayer(Rhino.DocObjects.Layer)">
            <summary>
            Finds all RhinoObjects that are in a given layer.
            </summary>
            <param name="layer">Layer to search.</param>
            <returns>
            Array of objects that belong to the specified group or null if no objects could be found.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.FindByLayer(System.String)">
            <summary>
            Finds all RhinoObjects that are in a given layer.
            </summary>
            <param name="layerName">Name of layer to search.</param>
            <returns>
            Array of objects that belong to the specified group or null if no objects could be found.
            </returns>
            <example>
            <code source='examples\vbnet\ex_sellayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_sellayer.cs' lang='cs'/>
            <code source='examples\py\ex_sellayer.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.FindByFilter(Rhino.DocObjects.ObjectEnumeratorSettings)">
            <summary>
            Same as GetObjectList but converts the result to an array.
            </summary>
            <param name="filter">The object enumerator filter to customize inclusion requirements.</param>
            <returns>A Rhino object array. This array can be emptry but not null.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.FindByUserString(System.String,System.String,System.Boolean)">
            <summary>
            Finds all objects whose UserString matches the search patterns.
            </summary>
            <param name="key">Search pattern for UserString keys (supported wildcards are: ? = any single character, * = any sequence of characters).</param>
            <param name="value">Search pattern for UserString values (supported wildcards are: ? = any single character, * = any sequence of characters).</param>
            <param name="caseSensitive">If true, string comparison will be case sensitive.</param>
            <returns>An array of all objects whose UserString matches with the search patterns or null when no such objects could be found.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.FindByUserString(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Rhino.DocObjects.ObjectType)">
            <summary>
            Finds all objects whose UserString matches the search patterns.
            </summary>
            <param name="key">Search pattern for UserString keys (supported wildcards are: ? = any single character, * = any sequence of characters).</param>
            <param name="value">Search pattern for UserString values (supported wildcards are: ? = any single character, * = any sequence of characters).</param>
            <param name="caseSensitive">If true, string comparison will be case sensitive.</param>
            <param name="searchGeometry">If true, UserStrings attached to the geometry of an object will be searched.</param>
            <param name="searchAttributes">If true, UserStrings attached to the attributes of an object will be searched.</param>
            <param name="filter">Object type filter.</param>
            <returns>An array of all objects whose UserString matches with the search patterns or null when no such objects could be found.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.FindByUserString(System.String,System.String,System.Boolean,System.Boolean,System.Boolean,Rhino.DocObjects.ObjectEnumeratorSettings)">
            <summary>
            Finds all objects whose UserString matches the search patterns.
            </summary>
            <param name="key">Search pattern for UserString keys (supported wildcards are: ? = any single character, * = any sequence of characters).</param>
            <param name="value">Search pattern for UserString values (supported wildcards are: ? = any single character, * = any sequence of characters).</param>
            <param name="caseSensitive">If true, string comparison will be case sensitive.</param>
            <param name="searchGeometry">If true, UserStrings attached to the geometry of an object will be searched.</param>
            <param name="searchAttributes">If true, UserStrings attached to the attributes of an object will be searched.</param>
            <param name="filter">Filter used to restrict the number of objects searched.</param>
            <returns>An array of all objects whose UserString matches with the search patterns or null when no such objects could be found.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.FindByDrawColor(System.Drawing.Color,System.Boolean)">
            <summary>
            Finds all objects whose draw color matches a given color.
            </summary>
            <param name="drawColor">The alpha value of this color is ignored.</param>
            <param name="includeLights">true if lights should be included.</param>
            <returns>An array of Rhino document objects. This array can be empty.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.FindByWindowRegion(Rhino.Display.RhinoViewport,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Boolean,Rhino.DocObjects.ObjectType)">
            <summary>
            Finds objects bounded by a polyline region
            </summary>
            <param name="viewport">viewport to use for selection</param>
            <param name="region">list of points that define the </param>
            <param name="inside">should objects returned be the ones inside of this region (or outside)</param>
            <param name="filter">filter down list by object type</param>
            <returns>An array of RhinoObjects that are inside of this region</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.FindByWindowRegion(Rhino.Display.RhinoViewport,Rhino.Geometry.Point2d,Rhino.Geometry.Point2d,System.Boolean,Rhino.DocObjects.ObjectType)">
            <summary>
            Finds objects bounded by a polyline region
            </summary>
            <param name="viewport">viewport to use for selection</param>
            <param name="screen1">first screen corner</param>
            <param name="screen2">second screen corner</param>
            <param name="inside">should objects returned be the ones inside of this region (or outside)</param>
            <param name="filter">filter down list by object type</param>
            <returns>An array of RhinoObjects that are inside of this region</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.FindByCrossingWindowRegion(Rhino.Display.RhinoViewport,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Boolean,Rhino.DocObjects.ObjectType)">
            <summary>
            Finds objects bounded by a polyline region
            </summary>
            <param name="viewport">viewport to use for selection</param>
            <param name="region">list of points that define the </param>
            <param name="inside">should objects returned be the ones inside of this region (or outside)</param>
            <param name="filter">filter down list by object type</param>
            <returns>An array of RhinoObjects that are inside of this region</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.FindByCrossingWindowRegion(Rhino.Display.RhinoViewport,Rhino.Geometry.Point2d,Rhino.Geometry.Point2d,System.Boolean,Rhino.DocObjects.ObjectType)">
            <summary>
            Finds objects bounded by a region
            </summary>
            <param name="viewport">viewport to use for selection</param>
            <param name="screen1">first screen corner</param>
            <param name="screen2">second screen corner</param>
            <param name="inside">should objects returned be the ones inside of this region (or outside)</param>
            <param name="filter">filter down list by object type</param>
            <returns>An array of RhinoObjects that are inside of this region</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.FindClippingPlanesForViewport(Rhino.Display.RhinoViewport)">
            <summary>
            Finds all of the clipping plane objects that actively clip a viewport.
            </summary>
            <param name="viewport">The viewport in which clipping planes are searched.</param>
            <returns>An array of clipping plane objects. The array can be emptry but not null.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Add(Rhino.Geometry.GeometryBase)">
            <summary>
            Adds geometry that is not further specified.
            <para>This is meant, for example, to handle addition of sets of different geometrical entities.</para>
            </summary>
            <param name="geometry">The base geometry. This cannot be null.</param>
            <returns>The new object ID on success.</returns>
            <exception cref="T:System.ArgumentNullException">If geometry is null.</exception>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Add(Rhino.Geometry.GeometryBase,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds geometry that is not further specified.
            <para>This is meant, for example, to handle addition of sets of different geometrical entities.</para>
            </summary>
            <param name="geometry">The base geometry. This cannot be null.</param>
            <param name="attributes">The object attributes. This can be null.</param>
            <returns>The new object ID on success.</returns>
            <exception cref="T:System.ArgumentNullException">If geometry is null.</exception>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoint(System.Double,System.Double,System.Double)">
            <summary>
            Adds a point object to the document.
            </summary>
            <param name="x">X component of point coordinate.</param>
            <param name="y">Y component of point coordinate.</param>
            <param name="z">Z component of point coordinate.</param>
            <returns>A unique identifier for the object..</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoint(Rhino.Geometry.Point3d)">
            <summary>Adds a point object to the document.</summary>
            <param name="point">location of point.</param>
            <returns>A unique identifier for the object.</returns>
            <example>
            <code source='examples\vbnet\ex_dividebylength.vb' lang='vbnet'/>
            <code source='examples\cs\ex_dividebylength.cs' lang='cs'/>
            <code source='examples\py\ex_dividebylength.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoint(Rhino.Geometry.Point3d,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a point object to the document.</summary>
            <param name="point">location of point.</param>
            <param name="attributes">attributes to apply to point. null is acceptible</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoint(Rhino.Geometry.Point3d,Rhino.DocObjects.ObjectAttributes,Rhino.DocObjects.HistoryRecord,System.Boolean)">
            <summary>Adds a point object to the document</summary>
            <param name="point">location of point</param>
            <param name="attributes">attributes to apply to point. null is acceptible</param>
            <param name="history">history associated with this point. null is acceptable</param>
            <param name="reference">
            true if the object is from a reference file.  Reference objects do
            not persist in archives
            </param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoint(Rhino.Geometry.Point3f)">
            <summary>Adds a point object to the document.</summary>
            <param name="point">location of point.</param>
            <returns>A unique identifier for the object.</returns>
            <example>
            <code source='examples\vbnet\ex_dividebylength.vb' lang='vbnet'/>
            <code source='examples\cs\ex_dividebylength.cs' lang='cs'/>
            <code source='examples\py\ex_dividebylength.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoint(Rhino.Geometry.Point3f,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a point object to the document.</summary>
            <param name="point">location of point.</param>
            <param name="attributes">attributes to apply to point.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Adds multiple points to the document.
            </summary>
            <param name="points">Points to add.</param>
            <returns>List of object ids.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds multiple points to the document.
            </summary>
            <param name="points">Points to add.</param>
            <param name="attributes">Attributes to apply to point objects.</param>
            <returns>List of object ids.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3f})">
            <summary>
            Adds multiple points to the document.
            </summary>
            <param name="points">Points to add.</param>
            <returns>List of object ids.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3f},Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds multiple points to the document.
            </summary>
            <param name="points">Points to add.</param>
            <param name="attributes">Attributes to apply to point objects.</param>
            <returns>List of object ids.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(Rhino.Geometry.PointCloud)">
            <summary>Adds a point cloud object to the document.</summary>
            <param name="cloud">PointCloud to add.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(Rhino.Geometry.PointCloud,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a point cloud object to the document.</summary>
            <param name="cloud">PointCloud to add.</param>
            <param name="attributes">Attributes to apply to point cloud.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(Rhino.Geometry.PointCloud,Rhino.DocObjects.ObjectAttributes,Rhino.DocObjects.HistoryRecord,System.Boolean)">
            <summary>Adds a point cloud object to the document.</summary>
            <param name="cloud">PointCloud to add.</param>
            <param name="attributes">Attributes to apply to point cloud. null is acceptable</param>
            <param name="history">history associated with this pointcloud. null is acceptable</param>
            <param name="reference">
            true if the object is from a reference file.  Reference objects do
            not persist in archives
            </param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>Adds a point cloud object to the document.</summary>
            <param name="points">A list, an array or any enumerable set of points.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a point cloud object to the document.</summary>
            <param name="points">A list, an array or any enumerable set of points.</param>
            <param name="attributes">attributes to apply to point cloud.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPointCloud(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.DocObjects.ObjectAttributes,Rhino.DocObjects.HistoryRecord,System.Boolean)">
            <summary>Adds a point cloud object to the document.</summary>
            <param name="points">A list, an array or any enumerable set of points</param>
            <param name="attributes">Attributes to apply to point cloud. null is acceptable</param>
            <param name="history">history associated with this pointcloud. null is acceptable</param>
            <param name="reference">
            true if the object is from a reference file.  Reference objects do
            not persist in archives
            </param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddClippingPlane(Rhino.Geometry.Plane,System.Double,System.Double,System.Guid)">
            <summary>
            Adds a clipping plane object to Rhino.
            </summary>
            <param name="plane">The plane value.</param>
            <param name="uMagnitude">The size in the U direction.</param>
            <param name="vMagnitude">The size in the V direction.</param>
            <param name="clippedViewportId">Viewport ID that the new clipping plane will clip.</param>
            <returns>A unique identifier for the object.</returns>
            <example>
            <code source='examples\vbnet\ex_addclippingplane.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addclippingplane.cs' lang='cs'/>
            <code source='examples\py\ex_addclippingplane.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddClippingPlane(Rhino.Geometry.Plane,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Adds a clipping plane object to Rhino.
            </summary>
            <param name="plane">The plane value.</param>
            <param name="uMagnitude">The size in the U direction.</param>
            <param name="vMagnitude">The size in the V direction.</param>
            <param name="clippedViewportIds">A list, an array or any enumerable set of viewport IDs
            that the new clipping plane will clip.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddClippingPlane(Rhino.Geometry.Plane,System.Double,System.Double,System.Collections.Generic.IEnumerable{System.Guid},Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds a clipping plane object to Rhino.
            </summary>
            <param name="plane">The plane value.</param>
            <param name="uMagnitude">The size in the U direction.</param>
            <param name="vMagnitude">The size in the V direction.</param>
            <param name="clippedViewportIds">A list, an array or any enumerable set of viewport IDs
            that the new clipping plane will clip.</param>
            <param name="attributes">Document attributes for the plane.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddLinearDimension(Rhino.Geometry.LinearDimension)">
            <example>
            <code source='examples\vbnet\ex_addlineardimension.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlineardimension.cs' lang='cs'/>
            <code source='examples\py\ex_addlineardimension.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddRadialDimension(Rhino.Geometry.RadialDimension)">
            <example>
            <code source='examples\vbnet\ex_addradialdimension.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addradialdimension.cs' lang='cs'/>
            <code source='examples\py\ex_addradialdimension.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddLine(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>Adds a line object to Rhino.</summary>
            <param name="from">The line origin.</param>
            <param name="to">The line end.</param>
            <returns>A unique identifier for the object.</returns>
            <example>
            <code source='examples\vbnet\ex_addline.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addline.cs' lang='cs'/>
            <code source='examples\py\ex_addline.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddLine(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a line object to Rhino.</summary>
            <param name="from">The line origin.</param>
            <param name="to">The line end.</param>
            <param name="attributes">Attributes to apply to line.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddLine(Rhino.Geometry.Line)">
            <summary>Adds a line object to Rhino.</summary>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddLine(Rhino.Geometry.Line,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a line object to Rhino.</summary>
            <param name="line">The line value.</param>
            <param name="attributes">Attributes to apply to line.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>Adds a polyline object to Rhino.</summary>
            <param name="points">A <see cref="T:Rhino.Geometry.Polyline"/>; a list, an array, or any enumerable set of <see cref="T:Rhino.Geometry.Point3d"/>.</param>
            <returns>A unique identifier for the object.</returns>
            <example>
            <code source="examples\vbnet\ex_tightboundingbox.vb" lang="vbnet"/>
            <code source="examples\cs\ex_tightboundingbox.cs" lang="cs"/>
            <code source="examples\py\ex_tightboundingbox.py" lang="py"/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPolyline(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a polyline object to Rhino.</summary>
            <param name="points">A <see cref="T:Rhino.Geometry.Polyline"/>; a list, an array, or any enumerable set of <see cref="T:Rhino.Geometry.Point3d"/>.</param>
            <param name="attributes">attributes to apply to line.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddArc(Rhino.Geometry.Arc)">
            <summary>Adds a curve object to the document representing an arc.</summary>
            <param name="arc">An arc value.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddArc(Rhino.Geometry.Arc,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a curve object to the document representing an arc.</summary>
            <param name="arc">An arc value.</param>
            <param name="attributes">Attributes to apply to arc.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddCircle(Rhino.Geometry.Circle)">
            <summary>Adds a curve object to the document representing a circle.</summary>
            <param name="circle">A circle value.</param>
            <returns>A unique identifier for the object.</returns>
            <example>
            <code source='examples\vbnet\ex_addcircle.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addcircle.cs' lang='cs'/>
            <code source='examples\py\ex_addcircle.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddCircle(Rhino.Geometry.Circle,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a curve object to the document representing a circle.</summary>
            <param name="circle">A circle value.</param>
            <param name="attributes">Attributes to apply to circle.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddEllipse(Rhino.Geometry.Ellipse)">
            <summary>Adds a curve object to the document representing an ellipse.</summary>
            <param name="ellipse">An ellipse value.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddEllipse(Rhino.Geometry.Ellipse,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a curve object to the document representing an ellipse.</summary>
            <param name="ellipse">An ellipse value.</param>
            <param name="attributes">Attributes to apply to ellipse.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddSphere(Rhino.Geometry.Sphere)">
            <example>
            <code source='examples\vbnet\ex_addsphere.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addsphere.cs' lang='cs'/>
            <code source='examples\py\ex_addsphere.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddCurve(Rhino.Geometry.Curve)">
            <summary>Adds a curve object to Rhino.</summary>
            <param name="curve">A curve. A duplicate of this curve is added to Rhino.</param>
            <returns>A unique identifier for the object.</returns>
            <example>
            <code source='examples\vbnet\ex_addnurbscircle.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnurbscircle.cs' lang='cs'/>
            <code source='examples\py\ex_addnurbscircle.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddCurve(Rhino.Geometry.Curve,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a curve object to Rhino.</summary>
            <param name="curve">A curve. A duplicate of this curve is added to Rhino.</param>
            <param name="attributes">Attributes to apply to curve.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddTextDot(System.String,Rhino.Geometry.Point3d)">
            <summary>Adds a text dot object to Rhino.</summary>
            <param name="text">A text string.</param>
            <param name="location">A point position.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddTextDot(System.String,Rhino.Geometry.Point3d,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a text dot object to Rhino.</summary>
            <param name="text">A text string.</param>
            <param name="location">A point position.</param>
            <param name="attributes">Attributes to apply to curve.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddTextDot(Rhino.Geometry.TextDot)">
            <summary>Adds a text dot object to Rhino.</summary>
            <param name="dot">A text dot that will be copied.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddTextDot(Rhino.Geometry.TextDot,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a text dot object to Rhino.</summary>
            <param name="dot">A text dot that will be copied.</param>
            <param name="attributes">Attributes to apply to text dot.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddText(Rhino.Display.Text3d)">
            <summary>
            Adds an annotation text object to the document.
            </summary>
            <param name="text3d">The text object to add.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_textjustify.vb' lang='vbnet'/>
            <code source='examples\cs\ex_textjustify.cs' lang='cs'/>
            <code source='examples\py\ex_textjustify.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddText(Rhino.Display.Text3d,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds an annotation text object to the document.
            </summary>
            <param name="text3d">The text object to add.</param>
            <param name="attributes">Object Attributes.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddText(System.String,Rhino.Geometry.Plane,System.Double,System.String,System.Boolean,System.Boolean)">
            <summary>
            Adds an annotation text object to the document.
            </summary>
            <param name="text">Text string.</param>
            <param name="plane">Plane of text.</param>
            <param name="height">Height of text.</param>
            <param name="fontName">Name of FontFace.</param>
            <param name="bold">Bold flag.</param>
            <param name="italic">Italic flag.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_addtext.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addtext.cs' lang='cs'/>
            <code source='examples\py\ex_addtext.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddText(System.String,Rhino.Geometry.Plane,System.Double,System.String,System.Boolean,System.Boolean,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds an annotation text object to the document.
            </summary>
            <param name="text">Text string.</param>
            <param name="plane">Plane of text.</param>
            <param name="height">Height of text.</param>
            <param name="fontName">Name of FontFace.</param>
            <param name="bold">Bold flag.</param>
            <param name="italic">Italic flag.</param>
            <param name="attributes">Attributes that will be linked with the object.</param>
            <returns>The Guid of the newly added object or Guid.Empty on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddSurface(Rhino.Geometry.Surface)">
            <summary>Adds a surface object to Rhino.</summary>
            <param name="surface">A duplicate of this surface is added to Rhino.</param>
            <returns>A unique identifier for the object.</returns>
            <example>
            <code source='examples\vbnet\ex_addtorus.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addtorus.cs' lang='cs'/>
            <code source='examples\py\ex_addtorus.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddSurface(Rhino.Geometry.Surface,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a surface object to Rhino.</summary>
            <param name="surface">A duplicate of this surface is added to Rhino.</param>
            <param name="attributes">Attributes that will be linked with the surface object.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddExtrusion(Rhino.Geometry.Extrusion)">
            <summary>Adds an extrusion object to Rhino.</summary>
            <param name="extrusion">A duplicate of this extrusion is added to Rhino.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddExtrusion(Rhino.Geometry.Extrusion,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds an extrusion object to Rhino.</summary>
            <param name="extrusion">A duplicate of this extrusion is added to Rhino.</param>
            <param name="attributes">Attributes that will be linked with the extrusion object.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddMesh(Rhino.Geometry.Mesh)">
            <summary>Adds a mesh object to Rhino.</summary>
            <param name="mesh">A duplicate of this mesh is added to Rhino.</param>
            <returns>A unique identifier for the object.</returns>
            <example>
            <code source='examples\vbnet\ex_addmesh.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addmesh.cs' lang='cs'/>
            <code source='examples\py\ex_addmesh.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddMesh(Rhino.Geometry.Mesh,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a mesh object to Rhino.</summary>
            <param name="mesh">A duplicate of this mesh is added to Rhino.</param>
            <param name="attributes">Attributes that will be linked with the mesh object.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddBrep(Rhino.Geometry.Brep)">
            <summary>Adds a brep object to Rhino.</summary>
            <param name="brep">A duplicate of this brep is added to Rhino.</param>
            <returns>A unique identifier for the object.</returns>
            <example>
            <code source='examples\vbnet\ex_addbrepbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbrepbox.cs' lang='cs'/>
            <code source='examples\py\ex_addbrepbox.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddBrep(Rhino.Geometry.Brep,Rhino.DocObjects.ObjectAttributes)">
            <summary>Adds a brep object to Rhino.</summary>
            <param name="brep">A duplicate of this brep is added to Rhino.</param>
            <param name="attributes">attributes to apply to brep.</param>
            <returns>A unique identifier for the object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddInstanceObject(System.Int32,Rhino.Geometry.Transform)">
            <summary>
            
            </summary>
            <param name="instanceDefinitionIndex"></param>
            <param name="instanceXform"></param>
            <returns></returns>
            <example>
            <code source='examples\cs\ex_nestedblock.cs' lang='cs'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddLeader(Rhino.Geometry.Plane,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point2d})">
            <example>
            <code source='examples\vbnet\ex_leader.vb' lang='vbnet'/>
            <code source='examples\cs\ex_leader.cs' lang='cs'/>
            <code source='examples\py\ex_leader.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddHatch(Rhino.Geometry.Hatch)">
            <example>
            <code source='examples\vbnet\ex_hatchcurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_hatchcurve.cs' lang='cs'/>
            <code source='examples\py\ex_hatchcurve.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AddPictureFrame(Rhino.Geometry.Plane,System.String,System.Boolean,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Creates a PictureFrame object from a plane and a path to an image file,
            Note, a PictureFrame object is just a Plane surface or mesh that has a
            material with a texture assigned to it that displays in all display
            modes.
            </summary>
            <param name="plane">
            Plane in which the PictureFrame will be created.  Bottom left corner of
            picture will be at plane's origin, width will be in the plane's x axis
            direction, height will be in the plane's y axis direction.
            </param>
            <param name="texturePath">path to an image file</param>
            <param name="asMesh">
            If true, the function will make a MeshObject rather than a surface
            </param>
            <param name="width">
            Width of the resulting PictureFrame. If 0.0, the width of the pictureframe
            is the width of the image if height is also 0.0 or calculated from the
            height and aspect ratio of the image if height is not 0.0.
            </param>
            <param name="height">
            Height of the resulting PictureFrame. If 0.0, the height of the pictureframe
            is the height of the image if width is also 0.0 or calculated from the width
            and aspect ratio of the image if width is not 0.0.
            </param>
            <param name="selfIllumination">
            If true, the image mapped to the picture frame plane always displays at full
            intensity and is not affected by light or shadow.
            </param>
            <param name="embedBitmap">
            If true, the funtion adds the the image to the bitmaptable of the document
            to which the PictureFrame will be added
            </param>
            <returns>A unique identifier for the object</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Delete(Rhino.DocObjects.ObjRef,System.Boolean)">
            <summary>
            Deletes objref.Object(). The deletion can be undone by calling UndeleteObject(). 
            </summary>
            <param name="objref">objref.Object() will be deleted.</param>
            <param name="quiet">If false, a message box will appear when an object cannot be deleted.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Delete(Rhino.DocObjects.RhinoObject,System.Boolean)">
            <summary>
            Deletes object from document. The deletion can be undone by calling UndeleteObject(). 
            </summary>
            <param name="obj">The object to delete.</param>
            <param name="quiet">If false, a message box will appear when an object cannot be deleted.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Delete(System.Guid,System.Boolean)">
            <summary>
            Deletes object from document. The deletion can be undone by calling UndeleteObject(). 
            </summary>
            <param name="objectId">Id of the object to delete.</param>
            <param name="quiet">If false, a message box will appear when an object cannot be deleted.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Delete(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
            <summary>
            Deletes a collection of objects from the document.
            </summary>
            <param name="objectIds">Ids of all objects to delete.</param>
            <param name="quiet">If false, a message box will appear when an object cannot be deleted.</param>
            <returns>The number of successfully deleted objects.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Purge(System.UInt32)">
            <summary>
            Removes object from document and deletes the pointer. Typically you will
            want to call Delete instead in order to keep the object on the undo list.
            </summary>
            <param name="runtimeSerialNumber">A runtime serial number of the object that will be deleted.</param>
            <returns>true if the object was purged; otherwise false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Purge(Rhino.DocObjects.RhinoObject)">
            <summary>
            Removes object from document and deletes the pointer. Typically you will
            want to call Delete instead in order to keep the object on the undo list.
            </summary>
            <param name="rhinoObject">A Rhino object that will be deleted.</param>
            <returns>true if the object was purged; otherwise false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Select(Rhino.DocObjects.ObjRef)">
            <summary>
            Select a single object.
            </summary>
            <param name="objref">Object represented by this ObjRef is selected.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Select(Rhino.DocObjects.ObjRef,System.Boolean)">
            <summary>
            Select or deselects a single object.
            </summary>
            <param name="objref">Object represented by this ObjRef is selected.</param>
            <param name="select">If true, the object will be selected, if false, it will be deselected.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Select(Rhino.DocObjects.ObjRef,System.Boolean,System.Boolean)">
            <summary>
            Select or deselects a single object.
            </summary>
            <param name="objref">Object represented by this ObjRef is selected.</param>
            <param name="select">If true, the object will be selected, if false, it will be deselected.</param>
            <param name="syncHighlight">
            If true, then the object is highlighted if it is selected 
            and unhighlighted if is is not selected.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Select(Rhino.DocObjects.ObjRef,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Select or deselects a single object.
            </summary>
            <param name="objref">Object represented by this ObjRef is selected.</param>
            <param name="select">If true, the object will be selected, if false, it will be deselected.</param>
            <param name="syncHighlight">
            If true, then the object is highlighted if it is selected 
            and unhighlighted if is is not selected.
            </param>
            <param name="persistentSelect">
            Objects that are persistently selected stay selected when a command terminates.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Select(Rhino.DocObjects.ObjRef,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Select or deselects a single object.
            </summary>
            <param name="objref">Object represented by this ObjRef is selected.</param>
            <param name="select">If true, the object will be selected, if false, it will be deselected.</param>
            <param name="syncHighlight">
            If true, then the object is highlighted if it is selected 
            and unhighlighted if is is not selected.
            </param>
            <param name="persistentSelect">
            Objects that are persistently selected stay selected when a command terminates.
            </param>
            <param name="ignoreGripsState">
            If true, then objects with grips on can be selected.
            If false, then the value returned by the object's IsSelectableWithGripsOn() function
            decides if the object can be selected when it has grips turned on.
            </param>
            <param name="ignoreLayerLocking">
            If true, then objects on locked layers can be selected. 
            </param>
            <param name="ignoreLayerVisibility">
            If true, then objects on hidden layers can be selectable.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Select(System.Collections.Generic.IEnumerable{Rhino.DocObjects.ObjRef})">
            <summary>
            Selects a collection of objects.
            </summary>
            <param name="objRefs">References to objects to select.</param>
            <returns>Number of objects successfully selected.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Select(System.Collections.Generic.IEnumerable{Rhino.DocObjects.ObjRef},System.Boolean)">
            <summary>
            Selects or deselects a collection of objects.
            </summary>
            <param name="objRefs">References to objects to select or deselect.</param>
            <param name="select">
            If true, objects will be selected. 
            If false, objects will be deselected.
            </param>
            <returns>Number of objects successfully selected or deselected.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Select(System.Guid)">
            <summary>
            Select a single object.
            </summary>
            <param name="objectId">Id of object to select.</param>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_dividebylength.vb' lang='vbnet'/>
            <code source='examples\cs\ex_dividebylength.cs' lang='cs'/>
            <code source='examples\py\ex_dividebylength.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Select(System.Guid,System.Boolean)">
            <summary>
            Select or deselects a single object.
            </summary>
            <param name="objectId">Id of object to select.</param>
            <param name="select">If true, the object will be selected, if false, it will be deselected.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Select(System.Guid,System.Boolean,System.Boolean)">
            <summary>
            Select or deselects a single object.
            </summary>
            <param name="objectId">Id of object to select.</param>
            <param name="select">If true, the object will be selected, if false, it will be deselected.</param>
            <param name="syncHighlight">
            If true, then the object is highlighted if it is selected 
            and unhighlighted if is is not selected.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Select(System.Guid,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Select or deselects a single object.
            </summary>
            <param name="objectId">Id of object to select.</param>
            <param name="select">If true, the object will be selected, if false, it will be deselected.</param>
            <param name="syncHighlight">
            If true, then the object is highlighted if it is selected 
            and unhighlighted if is is not selected.
            </param>
            <param name="persistentSelect">
            Objects that are persistently selected stay selected when a command terminates.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Select(System.Guid,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Select or deselects a single object.
            </summary>
            <param name="objectId">Id of object to select.</param>
            <param name="select">If true, the object will be selected, if false, it will be deselected.</param>
            <param name="syncHighlight">
            If true, then the object is highlighted if it is selected 
            and unhighlighted if is is not selected.
            </param>
            <param name="persistentSelect">
            Objects that are persistently selected stay selected when a command terminates.
            </param>
            <param name="ignoreGripsState">
            If true, then objects with grips on can be selected.
            If false, then the value returned by the object's IsSelectableWithGripsOn() function
            decides if the object can be selected when it has grips turned on.
            </param>
            <param name="ignoreLayerLocking">
            If true, then objects on locked layers can be selected. 
            </param>
            <param name="ignoreLayerVisibility">
            If true, then objects on hidden layers can be selectable.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Select(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Selects a collection of objects.
            </summary>
            <param name="objectIds">Ids of objects to select.</param>
            <returns>Number of objects successfully selected.</returns>
            <example>
            <code source='examples\vbnet\ex_curvesurfaceintersect.vb' lang='vbnet'/>
            <code source='examples\cs\ex_curvesurfaceintersect.cs' lang='cs'/>
            <code source='examples\py\ex_curvesurfaceintersect.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Select(System.Collections.Generic.IEnumerable{System.Guid},System.Boolean)">
            <summary>
            Selects or deselects a collection of objects.
            </summary>
            <param name="objectIds">Ids of objects to select or deselect.</param>
            <param name="select">
            If true, objects will be selected. 
            If false, objects will be deselected.
            </param>
            <returns>Number of objects successfully selected or deselected.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.UnselectAll(System.Boolean)">
            <summary>Unselect objects.</summary>
            <param name="ignorePersistentSelections">
            if true, then objects that are persistently selected will not be unselected.
            </param>
            <returns>Number of object that were unselected.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.UnselectAll">
            <summary>Unselect objects.</summary>
            <returns>Number of object that were unselected.</returns>
            <example>
            <code source='examples\vbnet\ex_crvdeviation.vb' lang='vbnet'/>
            <code source='examples\cs\ex_crvdeviation.cs' lang='cs'/>
            <code source='examples\py\ex_crvdeviation.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.ModifyAttributes(Rhino.DocObjects.ObjRef,Rhino.DocObjects.ObjectAttributes,System.Boolean)">
            <summary>
            Modifies an object's attributes.  Cannot be used to change object id.
            </summary>
            <param name="objref">reference to object to modify.</param>
            <param name="newAttributes">new attributes.</param>
            <param name="quiet">if true, then warning message boxes are disabled.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.ModifyAttributes(Rhino.DocObjects.RhinoObject,Rhino.DocObjects.ObjectAttributes,System.Boolean)">
            <summary>
            Modifies an object's attributes.  Cannot be used to change object id.
            </summary>
            <param name="obj">object to modify.</param>
            <param name="newAttributes">new attributes.</param>
            <param name="quiet">if true, then warning message boxes are disabled.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.ModifyAttributes(System.Guid,Rhino.DocObjects.ObjectAttributes,System.Boolean)">
            <summary>
            Modifies an object's attributes.  Cannot be used to change object id.
            </summary>
            <param name="objectId">Id of object to modify.</param>
            <param name="newAttributes">new attributes.</param>
            <param name="quiet">if true, then warning message boxes are disabled.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.ModifyRenderMaterial(Rhino.DocObjects.RhinoObject,Rhino.Render.RenderMaterial)">
            <summary>
            Modifies an object's render material assignment, this will set the
            objects material source to ObjectMaterialSource.MaterialFromObject.
            </summary>
            <param name="obj">Object to modify.</param>
            <param name="material">
            Material to assign to this object.
            </param>
            <returns>
            Returns true on success otherwise returns false.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.ModifyRenderMaterial(Rhino.DocObjects.ObjRef,Rhino.Render.RenderMaterial)">
            <summary>
            Modifies an object's render material assignment, this will set the
            objects material source to ObjectMaterialSource.MaterialFromObject.
            </summary>
            <param name="objRef">Object to modify.</param>
            <param name="material">
            Material to assign to this object.
            </param>
            <returns>
            Returns true on success otherwise returns false.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.ModifyRenderMaterial(System.Guid,Rhino.Render.RenderMaterial)">
            <summary>
            Modifies an object's render material assignment, this will set the
            objects material source to ObjectMaterialSource.MaterialFromObject.
            </summary>
            <param name="objectId">Id of object to modify.</param>
            <param name="material">
            Material to assign to this object.
            </param>
            <returns>
            Returns true on success otherwise returns false.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.ModifyTextureMapping(Rhino.DocObjects.ObjRef,System.Int32,Rhino.Render.TextureMapping)">
            <summary>
            
            </summary>
            <param name="objRef"></param>
            <param name="channel"></param>
            <param name="mapping"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.ModifyTextureMapping(System.Guid,System.Int32,Rhino.Render.TextureMapping)">
            <summary>
            
            </summary>
            <param name="objId"></param>
            <param name="channel"></param>
            <param name="mapping"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.ModifyTextureMapping(Rhino.DocObjects.RhinoObject,System.Int32,Rhino.Render.TextureMapping)">
            <summary>
            
            </summary>
            <param name="obj"></param>
            <param name="channel"></param>
            <param name="mapping"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.DocObjects.RhinoObject)">
            <summary>
            Replaces one object with another. Conceptually, this function is the same as calling
            Setting new_object attributes = old_object attributes
            DeleteObject(old_object);
            AddObject(old_object);
            </summary>
            <param name="objref">reference to old object to be replaced. The objref.Object() will be deleted.</param>
            <param name="newObject">new replacement object - must not be in document.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Point3d)">
            <summary>Replaces one object with new point object.</summary>
            <param name="objref">
            Reference to old object to be replaced. The object objref.Object() will be deleted.
            </param>
            <param name="point">new point to be added.  The point is copied.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid,Rhino.Geometry.Point3d)">
            <summary>Replaces one object with new point object.</summary>
            <param name="objectId">Id of object to be replaced.</param>
            <param name="point">new point to be added.  The point is copied.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.TextDot)">
            <summary>Replaces one object with new textdot object.</summary>
            <param name="objref">
            Reference to old object to be replaced. The object objref.Object() will be deleted.
            </param>
            <param name="dot">new textdot to be added.  The textdot is copied.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid,Rhino.Geometry.TextDot)">
            <summary>Replaces one object with new textdot object.</summary>
            <param name="objectId">Id of object to be replaced.</param>
            <param name="dot">new textdot to be added.  The textdot is copied.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Line)">
            <summary>Replaces one object with new line curve object.</summary>
            <param name="objref">
            Reference to old object to be replaced. The object objref.Object() will be deleted.
            </param>
            <param name="line">new line to be added.  The line is copied.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid,Rhino.Geometry.Line)">
            <summary>Replaces one object with new line curve object.</summary>
            <param name="objectId">Id of object to be replaced.</param>
            <param name="line">new line to be added.  The line is copied.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Circle)">
            <summary>Replaces one object with new curve object.</summary>
            <param name="objref">
            Reference to old object to be replaced. The object objref.Object() will be deleted.
            </param>
            <param name="circle">new circle to be added.  The circle is copied.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid,Rhino.Geometry.Circle)">
            <summary>Replaces one object with new curve object.</summary>
            <param name="objectId">Id of object to be replaced.</param>
            <param name="circle">new circle to be added.  The circle is copied.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Arc)">
            <summary>Replaces one object with new curve object.</summary>
            <param name="objref">
            Reference to old object to be replaced. The object objref.Object() will be deleted.
            </param>
            <param name="arc">new arc to be added.  The arc is copied.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid,Rhino.Geometry.Arc)">
            <summary>Replaces one object with new curve object.</summary>
            <param name="objectId">Id of object to be replaced.</param>
            <param name="arc">new arc to be added.  The arc is copied.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Polyline)">
            <summary>Replaces one object with new curve object.</summary>
            <param name="objref">
            Reference to old object to be replaced. The object objref.Object() will be deleted.
            </param>
            <param name="polyline">new polyline to be added.  The polyline is copied.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid,Rhino.Geometry.Polyline)">
            <summary>Replaces one object with new curve object.</summary>
            <param name="objectId">Id of object to be replaced.</param>
            <param name="polyline">new polyline to be added.  The polyline is copied.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Curve)">
            <summary>
            Replaces one object with new curve object.
            </summary>
            <param name="objref">reference to old object to be replaced. The objref.Object() will be deleted.</param>
            <param name="curve">
            New curve to be added. A duplicate of the curve is added to the Rhino model.
            </param>
            <returns>true if successful.</returns>
            <example>
            <code source='examples\vbnet\ex_insertknot.vb' lang='vbnet'/>
            <code source='examples\cs\ex_insertknot.cs' lang='cs'/>
            <code source='examples\py\ex_insertknot.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid,Rhino.Geometry.Curve)">
            <summary>Replaces one object with new curve object.</summary>
            <param name="objectId">Id of object to be replaced.</param>
            <param name="curve">
            New curve to be added. A duplicate of the curve is added to the Rhino model.
            </param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Surface)">
            <summary>
            Replaces one object with new surface object.
            </summary>
            <param name="objref">reference to old object to be replaced. The objref.Object() will be deleted.</param>
            <param name="surface">
            new surface to be added
            A duplicate of the surface is added to the Rhino model.
            </param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid,Rhino.Geometry.Surface)">
            <summary>Replaces one object with new surface object.</summary>
            <param name="objectId">Id of object to be replaced.</param>
            <param name="surface">
            new surface to be added
            A duplicate of the surface is added to the Rhino model.
            </param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Brep)">
            <summary>
            Replaces one object with new brep object.
            </summary>
            <param name="objref">reference to old object to be replaced. The objref.Object() will be deleted.</param>
            <param name="brep">
            new brep to be added
            A duplicate of the brep is added to the Rhino model.
            </param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid,Rhino.Geometry.Brep)">
            <summary>Replaces one object with new brep object.</summary>
            <param name="objectId">Id of object to be replaced.</param>
            <param name="brep">
            new surface to be added
            A duplicate of the brep is added to the Rhino model.
            </param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.Mesh)">
            <summary>
            Replaces one object with new mesh object.
            </summary>
            <param name="objref">reference to old object to be replaced. The objref.Object() will be deleted.</param>
            <param name="mesh">
            new mesh to be added
            A duplicate of the mesh is added to the Rhino model.
            </param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid,Rhino.Geometry.Mesh)">
            <summary>Replaces one object with new mesh object.</summary>
            <param name="objectId">Id of object to be replaced.</param>
            <param name="mesh">
            new mesh to be added
            A duplicate of the mesh is added to the Rhino model.
            </param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.TextEntity)">
            <summary>
            Replaces one object with new text object.
            </summary>
            <param name="objref">reference to old object to be replaced. The objref.Object() will be deleted.</param>
            <param name="text">
            new text to be added
            A duplicate of the text is added to the Rhino model.
            </param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid,Rhino.Geometry.TextEntity)">
            <summary>
            Replaces one object with new text object.
            </summary>
            <param name="objectId">Id of object to be replaced.</param>
            <param name="text">
            new text to be added
            A duplicate of the text is added to the Rhino model.
            </param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(Rhino.DocObjects.ObjRef,Rhino.Geometry.PointCloud)">
            <summary>
            Replaces one object with new pointcloud object.
            </summary>
            <param name="objref">reference to old object to be replaced. The objref.Object() will be deleted.</param>
            <param name="pointcloud">
            new pointcloud to be added
            A duplicate of the pointcloud is added to the Rhino model.
            </param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Replace(System.Guid,Rhino.Geometry.PointCloud)">
            <summary>
            Replaces one object with new pointcloud object.
            </summary>
            <param name="objectId">Id of object to be replaced.</param>
            <param name="pointcloud">
            new pointcloud to be added
            A duplicate of the pointcloud is added to the Rhino model.
            </param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.MostRecentObject">
            <summary>
            Gets the most recently added object that is still in the Document.
            </summary>
            <returns>The most recent (non-deleted) object in the document, or null if no such object exists.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.AllObjectsSince(System.UInt32)">
            <summary>
            Gets all the objects that have been added to the document since a given runtime serial number. 
            </summary>
            <param name="runtimeSerialNumber">Runtime serial number of the last object not to include in the list.</param>
            <returns>An array of objects or null if no objects were added since the given runtime serial number.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Hide(Rhino.DocObjects.ObjRef,System.Boolean)">
            <summary>
            If objref.Object().IsNormal() is true, then the object will be hidden.
            </summary>
            <param name="objref">reference to object to hide.</param>
            <param name="ignoreLayerMode">
            if true, the object will be hidden even if it is on a layer that is locked or off.
            </param>
            <returns>true if the object was successfully hidden.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Hide(Rhino.DocObjects.RhinoObject,System.Boolean)">
            <summary>
            If obj.IsNormal() is true, then the object will be hidden.
            </summary>
            <param name="obj">object to hide.</param>
            <param name="ignoreLayerMode">
            if true, the object will be hidden even if it is on a layer that is locked or off.
            </param>
            <returns>true if the object was successfully hidden.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Hide(System.Guid,System.Boolean)">
            <summary>
            If Object().IsNormal() is true, then the object will be hidden.
            </summary>
            <param name="objectId">Id of object to hide.</param>
            <param name="ignoreLayerMode">
            if true, the object will be hidden even if it is on a layer that is locked or off.
            </param>
            <returns>true if the object was successfully hidden.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Show(Rhino.DocObjects.ObjRef,System.Boolean)">
            <summary>
            If objref.Object().IsHidden() is true, then the object will be returned to normal (visible and selectable) mode.
            </summary>
            <param name="objref">reference to normal object to show.</param>
            <param name="ignoreLayerMode">
            if true, the object will be shown even if it is on a layer that is locked or off.
            </param>
            <returns>true if the object was successfully shown.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Show(Rhino.DocObjects.RhinoObject,System.Boolean)">
            <summary>
            If obj.IsHidden() is true, then the object will be returned to normal (visible and selectable) mode.
            </summary>
            <param name="obj">the normal object to show.</param>
            <param name="ignoreLayerMode">
            if true, the object will be shown even if it is on a layer that is locked or off.
            </param>
            <returns>true if the object was successfully shown.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Show(System.Guid,System.Boolean)">
            <summary>
            If Object().IsHidden() is true, then the object will be returned to normal (visible and selectable) mode.
            </summary>
            <param name="objectId">Id of the normal object to show.</param>
            <param name="ignoreLayerMode">
            if true, the object will be shown even if it is on a layer that is locked or off.
            </param>
            <returns>true if the object was successfully shown.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Lock(Rhino.DocObjects.ObjRef,System.Boolean)">
            <summary>
            If objref.Object().IsNormal() is true, then the object will be locked.
            </summary>
            <param name="objref">reference to normal object to lock.</param>
            <param name="ignoreLayerMode">
            if true, the object will be locked even if it is on a layer that is locked or off.
            </param>
            <returns>true if the object was successfully locked.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Lock(Rhino.DocObjects.RhinoObject,System.Boolean)">
            <summary>
            If obj.IsNormal() is true, then the object will be locked.
            </summary>
            <param name="obj">normal object to lock.</param>
            <param name="ignoreLayerMode">
            if true, the object will be locked even if it is on a layer that is locked or off.
            </param>
            <returns>true if the object was successfully locked.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Lock(System.Guid,System.Boolean)">
            <summary>
            If objref.Object().IsNormal() is true, then the object will be locked.
            </summary>
            <param name="objectId">Id of normal object to lock.</param>
            <param name="ignoreLayerMode">
            if true, the object will be locked even if it is on a layer that is locked or off.
            </param>
            <returns>true if the object was successfully locked.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Unlock(Rhino.DocObjects.ObjRef,System.Boolean)">
            <summary>
            If objref.Object().IsLocked() is true, then the object will be returned to normal (visible and selectable) mode.
            </summary>
            <param name="objref">reference to locked object to unlock.</param>
            <param name="ignoreLayerMode">
            if true, the object will be unlocked even if it is on a layer that is locked or off.
            </param>
            <returns>true if the object was successfully unlocked.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Unlock(Rhino.DocObjects.RhinoObject,System.Boolean)">
            <summary>
            If obj.IsLocked() is true, then the object will be returned to normal (visible and selectable) mode.
            </summary>
            <param name="obj">locked object to unlock.</param>
            <param name="ignoreLayerMode">
            if true, the object will be unlocked even if it is on a layer that is locked or off.
            </param>
            <returns>true if the object was successfully unlocked.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Unlock(System.Guid,System.Boolean)">
            <summary>
            If Object().IsLocked() is true, then the object will be returned to normal (visible and selectable) mode.
            </summary>
            <param name="objectId">Id of locked object to unlock.</param>
            <param name="ignoreLayerMode">
            if true, the object will be unlocked even if it is on a layer that is locked or off.
            </param>
            <returns>true if the object was successfully unlocked.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Transform(Rhino.DocObjects.ObjRef,Rhino.Geometry.Transform,System.Boolean)">
            <summary>
            Constructs a new object that is the transformation of the existing object
            and deletes the existing object if deleteOriginal is true.
            </summary>
            <param name="objref">
            reference to object to transform. The objref.Object() will be deleted if deleteOriginal is true.
            </param>
            <param name="xform">transformation to apply.</param>
            <param name="deleteOriginal">
            if true, the original object is deleted
            if false, the original object is not deleted.
            </param>
            <returns>
            Id of the new object that is the transformation of the existing_object.
            The new object has identical attributes.
            </returns>
            <remarks>
            If the object is locked or on a locked layer, then it cannot be transformed.
            </remarks>
            <example>
            <code source='examples\vbnet\ex_orientonsrf.vb' lang='vbnet'/>
            <code source='examples\cs\ex_orientonsrf.cs' lang='cs'/>
            <code source='examples\py\ex_orientonsrf.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Transform(Rhino.DocObjects.RhinoObject,Rhino.Geometry.Transform,System.Boolean)">
            <summary>
            Constructs a new object that is the transformation of the existing object
            and deletes the existing object if deleteOriginal is true.
            </summary>
            <param name="obj">
            Rhino object to transform. This object will be deleted if deleteOriginal is true.
            </param>
            <param name="xform">transformation to apply.</param>
            <param name="deleteOriginal">
            if true, the original object is deleted
            if false, the original object is not deleted.
            </param>
            <returns>
            Id of the new object that is the transformation of the existing_object.
            The new object has identical attributes.
            </returns>
            <remarks>
            If the object is locked or on a locked layer, then it cannot be transformed.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Transform(System.Guid,Rhino.Geometry.Transform,System.Boolean)">
            <summary>
            Constructs a new object that is the transformation of the existing object
            and deletes the existing object if deleteOriginal is true.
            </summary>
            <param name="objectId">
            Id of rhino object to transform. This object will be deleted if deleteOriginal is true.
            </param>
            <param name="xform">transformation to apply.</param>
            <param name="deleteOriginal">
            if true, the original object is deleted
            if false, the original object is not deleted.
            </param>
            <returns>
            Id of the new object that is the transformation of the existing_object.
            The new object has identical attributes.
            </returns>
            <remarks>
            If the object is locked or on a locked layer, then it cannot be transformed.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.TransformWithHistory(Rhino.DocObjects.ObjRef,Rhino.Geometry.Transform)">
            <summary>
            Constructs a new object that is the transformation of the existing object
            and records history of the transformation if history recording is turned on.
            If history recording is not enabled, this function will act the same as
            Transform(objref, xform, false)
            </summary>
            <param name="objref">
            reference to object to transform.
            </param>
            <param name="xform">transformation to apply.</param>
            <returns>
            Id of the new object that is the transformation of the existing_object.
            The new object has identical attributes.
            </returns>
            <remarks>
            If the object is locked or on a locked layer, then it cannot be transformed.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.TransformWithHistory(Rhino.DocObjects.RhinoObject,Rhino.Geometry.Transform)">
            <summary>
            Constructs a new object that is the transformation of the existing object
            and records history of the transformation if history recording is turned on.
            If history recording is not enabled, this function will act the same as
            Transform(obj, xform, false)
            </summary>
            <param name="obj">
            Rhino object to transform.
            </param>
            <param name="xform">transformation to apply.</param>
            <returns>
            Id of the new object that is the transformation of the existing_object.
            The new object has identical attributes.
            </returns>
            <remarks>
            If the object is locked or on a locked layer, then it cannot be transformed.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.TransformWithHistory(System.Guid,Rhino.Geometry.Transform)">
            <summary>
            Constructs a new object that is the transformation of the existing object
            and records history of the transformation if history recording is turned on.
            If history recording is not enabled, this function will act the same as
            Transform(objectId, xform, false)
            </summary>
            <param name="objectId">
            Id of rhino object to transform.
            </param>
            <param name="xform">transformation to apply.</param>
            <returns>
            Id of the new object that is the transformation of the existing_object.
            The new object has identical attributes.
            </returns>
            <remarks>
            If the object is locked or on a locked layer, then it cannot be transformed.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Duplicate(Rhino.DocObjects.ObjRef)">
            <summary>
            Duplicates the object that is referenced by objref.
            <para>Same as Transform(objref, <see cref="P:Rhino.Geometry.Transform.Identity">Transform.Identity</see>, false)</para>
            </summary>
            <param name="objref">A Rhino object reference to follow for object duplication.</param>
            <returns>The new object ID.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Duplicate(Rhino.DocObjects.RhinoObject)">
            <summary>
            Duplicates the object that is referenced by obj.
            <para>Same as TransformObject(obj, <see cref="P:Rhino.Geometry.Transform.Identity">Transform.Identity</see>y, false)</para>
            </summary>
            <param name="obj">A Rhino object to duplicate.</param>
            <returns>The new object ID.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.Duplicate(System.Guid)">
            <summary>
            Same as TransformObject(objref, ON_Xform.Identity, false)
            </summary>
            <param name="objectId">An ID to an object in the document that needs to be duplicated.</param>
            <returns>The new object ID.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.GripUpdate(Rhino.DocObjects.RhinoObject,System.Boolean)">
            <summary>
            Altered grip positions on a RhinoObject are used to calculate an updated object
            that is added to the document.
            </summary>
            <param name="obj">object with modified grips to update.</param>
            <param name="deleteOriginal">if true, obj is deleted from the document.</param>
            <returns>new RhinoObject on success; otherwise null.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.GetObjectList(Rhino.DocObjects.ObjectEnumeratorSettings)">
            <example>
            <code source='examples\vbnet\ex_findobjectsbyname.vb' lang='vbnet'/>
            <code source='examples\cs\ex_findobjectsbyname.cs' lang='cs'/>
            <code source='examples\py\ex_findobjectsbyname.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.ObjectTable.GetObjectList(System.Type)">
            <example>
            <code source='examples\vbnet\ex_dimstyle.vb' lang='vbnet'/>
            <code source='examples\cs\ex_dimstyle.cs' lang='cs'/>
            <code source='examples\py\ex_dimstyle.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.Tables.ObjectTable.Document">
            <summary>
            Gets the document that owns this object table.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.ObjectTable.BoundingBox">
            <summary>
            Gets the boundingbox for all objects (normal, locked and hidden) in this
            document that exist in "model" space. This bounding box does not include
            objects that exist in layout space.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.ObjectTable.BoundingBoxVisible">
            <summary>
            Gets the boundingbox for all visible objects (normal and locked) in this
            document that exist in "model" space. This bounding box does not include
            hidden objects or any objects that exist in layout space.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.StringTable.GetValue(System.String,System.String)">
            <summary>
            Gets a user data string from the document.
            </summary>
            <param name="section">The section at which to get the value.</param>
            <param name="entry">The entry to search for.</param>
            <returns>The user data.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.StringTable.GetSectionNames">
            <summary>
            Returns a list of all the section names for user data strings in the document.
            <para>By default a section name is a key that is prefixed with a string separated by a backslash.</para>
            </summary>
            <returns>An array of section names. This can be empty, but not null.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.StringTable.GetEntryNames(System.String)">
            <summary>
            Return list of all entry names for a given section of user data strings in the document.
            </summary>
            <param name="section">The section from which to retrieve section names.</param>
            <returns>An array of section names. This can be empty, but not null.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.StringTable.SetString(System.String,System.String,System.String)">
            <summary>
            Adds or sets a user data string to the document.
            </summary>
            <param name="section">The section.</param>
            <param name="entry">The entry name.</param>
            <param name="value">The entry value.</param>
            <returns>
            The previous value if successful and a previous value existed.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.StringTable.Delete(System.String,System.String)">
            <summary>
            Removes user data strings from the document.
            </summary>
            <param name="section">name of section to delete. If null, all sections will be deleted.</param>
            <param name="entry">name of entry to delete. If null, all entries will be deleted for a given section.</param>
        </member>
        <member name="P:Rhino.DocObjects.Tables.StringTable.Document">
            <summary>Document that owns this object table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.StringTable.Count">
            <summary>
            The number of user data strings in the current document.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectEnumeratorSettings">
            <summary>
            Settings used for getting an enumerator of objects in a document
            See Rhino.Collections.ObjectTable.GetEnumerator()
            </summary>
            <example>
            <code source='examples\vbnet\ex_moveobjectstocurrentlayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_moveobjectstocurrentlayer.cs' lang='cs'/>
            <code source='examples\py\ex_moveobjectstocurrentlayer.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.ObjectEnumeratorSettings.#ctor">
            <example>
            <code source='examples\vbnet\ex_findobjectsbyname.vb' lang='vbnet'/>
            <code source='examples\cs\ex_findobjectsbyname.cs' lang='cs'/>
            <code source='examples\py\ex_findobjectsbyname.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.ObjectEnumeratorSettings.IdefObjects">
            <summary>
            When true, ONLY Instance Definitions will be returned
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectEnumeratorSettings.IncludeLights">
            <example>
            <code source='examples\vbnet\ex_objectiterator.vb' lang='vbnet'/>
            <code source='examples\cs\ex_objectiterator.cs' lang='cs'/>
            <code source='examples\py\ex_objectiterator.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.ObjectEnumeratorSettings.IncludeGrips">
            <example>
            <code source='examples\vbnet\ex_objectiterator.vb' lang='vbnet'/>
            <code source='examples\cs\ex_objectiterator.cs' lang='cs'/>
            <code source='examples\py\ex_objectiterator.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.ObjectEnumeratorSettings.NameFilter">
            <example>
            <code source='examples\vbnet\ex_findobjectsbyname.vb' lang='vbnet'/>
            <code source='examples\cs\ex_findobjectsbyname.cs' lang='cs'/>
            <code source='examples\py\ex_findobjectsbyname.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.ObjectEnumeratorSettings.ViewportFilter">
            <summary>
            Filter on value of object->IsActiveInViewport()
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Arc">
            <summary>
            Represents the value of a plane, two angles and a radius in
            a subcurve of a three-dimensional circle.
            
            <para>The curve is parameterized by an angle expressed in radians. For an IsValid arc
            the total subtended angle AngleRadians() = Domain()(1) - Domain()(0) must satisfy
            0 &lt; AngleRadians() &lt; 2*Pi</para>
            
            <para>The parameterization of the Arc is inherited from the Circle it is derived from.
            In particular</para>
            <para>t -> center + cos(t)*radius*xaxis + sin(t)*radius*yaxis</para>
            <para>where xaxis and yaxis, (part of Circle.Plane) form an othonormal frame of the plane
            containing the circle.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Circle,System.Double)">
            <summary>
            Initializes a new instance of an arc from a base circle and an angle.
            </summary>
            <param name="circle">Circle to base arc upon.</param>
            <param name="angleRadians">Sweep angle of arc (in radians)</param>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Circle,Rhino.Geometry.Interval)">
            <summary>
            Initializes a new instance of an arc from a base circle and an interval of angles.
            </summary>
            <param name="circle">Circle to base arc upon.</param>
            <param name="angleIntervalRadians">
            Increasing angle interval in radians with angleIntervalRadians.Length() &lt;= 2.0*Math.PI.
            </param>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Plane,System.Double,System.Double)">
            <summary>
            Initializes a new arc from a base plane, a radius value and an angle.
            </summary>
            <param name="plane">The plane of the arc (arc center will be located at plane origin)</param>
            <param name="radius">Radius of arc.</param>
            <param name="angleRadians">Sweep angle of arc (in radians)</param>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Point3d,System.Double,System.Double)">
            <summary>
            Initializes a new horizontal arc at the given center point, with a custom radius and angle.
            </summary>
            <param name="center">Center point of arc.</param>
            <param name="radius">Radius of arc.</param>
            <param name="angleRadians">Sweep angle of arc (in radians)</param>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Point3d,System.Double,System.Double)">
            <summary>
            Initializes a new aligned arc at the given center point, with a custom radius and angle.
            </summary>
            <param name="plane">Alignment plane for arc. The arc will be parallel to this plane.</param>
            <param name="center">Center point for arc.</param>
            <param name="radius">Radius of arc.</param>
            <param name="angleRadians">Sweep angle of arc (in radians)</param>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new arc through three points. If the points are coincident 
            or colinear, this will result in an Invalid arc.
            </summary>
            <param name="startPoint">Start point of arc.</param>
            <param name="pointOnInterior">Point on arc interior.</param>
            <param name="endPoint">End point of arc.</param>
        </member>
        <member name="M:Rhino.Geometry.Arc.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new arc from end points and a tangent vector. 
            If the tangent is parallel with the endpoints this will result in an Invalid arc.
            </summary>
            <param name="pointA">Start point of arc.</param>
            <param name="tangentA">Tangent at start of arc.</param>
            <param name="pointB">End point of arc.</param>
        </member>
        <member name="M:Rhino.Geometry.Arc.Trim(Rhino.Geometry.Interval)">
            <summary>
            Sets arc's angle domain (in radians) as a subdomain of the circle.
            </summary>
            <param name="domain">
            0 &lt; domain[1] - domain[0] &lt;= 2.0 * RhinoMath.Pi.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.Equals(System.Object)">
            <summary>
            Determines whether another object is an arc and has the same value as this arc.
            </summary>
            <param name="obj">An object.</param>
            <returns>true if obj is an arc and is exactly equal to this arc; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.Equals(Rhino.Geometry.Arc)">
            <summary>
            Determines whether another arc has the same value as this arc.
            </summary>
            <param name="other">An arc.</param>
            <returns>true if obj is equal to this arc; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.GetHashCode">
            <summary>
            Computes a hash code for the present arc.
            </summary>
            <returns>A non-unique integer that represents this arc.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.op_Equality(Rhino.Geometry.Arc,Rhino.Geometry.Arc)">
            <summary>
            Determines whether two arcs have equal values.
            </summary>
            <param name="a">The first arc.</param>
            <param name="b">The second arc.</param>
            <returns>true if all values of the two arcs are exactly equal; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.op_Inequality(Rhino.Geometry.Arc,Rhino.Geometry.Arc)">
            <summary>
            Determines whether two arcs have different values.
            </summary>
            <param name="a">The first arc.</param>
            <param name="b">The second arc.</param>
            <returns>true if any value of the two arcs differ; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.BoundingBox">
            <summary>
            Computes the 3D axis aligned bounding box for this arc.
            </summary>
            <returns>Bounding box of arc.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.PointAt(System.Double)">
            <summary>
            Gets the point at the given arc parameter.
            </summary>
            <param name="t">Arc parameter to evaluate.</param>
            <returns>The point at the given parameter.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.TangentAt(System.Double)">
            <summary>
            Gets the tangent at the given parameter.
            </summary>
            <param name="t">Parameter of tangent to evaluate.</param>
            <returns>The tangent at the arc at the given parameter.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.ClosestParameter(Rhino.Geometry.Point3d)">
            <summary>
            Gets parameter on the arc closest to a test point.
            </summary>
            <param name="testPoint">Point to get close to.</param>
            <returns>Parameter (in radians) of the point on the arc that
            is closest to the test point. If testPoint is the center
            of the arc, then the starting point of the arc is
            (arc.Domain()[0]) returned. If no parameter could be found, 
            RhinoMath.UnsetValue is returned.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Computes the point on an arc that is closest to a test point.
            </summary>
            <param name="testPoint">Point to get close to.</param>
            <returns>
            The point on the arc that is closest to testPoint. If testPoint is
            the center of the arc, then the starting point of the arc is returned.
            UnsetPoint on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.Reverse">
            <summary>
            Reverses the orientation of the arc. Changes the domain from [a,b]
            to [-b,-a].
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Arc.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the arc using a Transformation matrix.
            </summary>
            <param name="xform">Transformations to apply. 
            Note that arcs cannot handle non-euclidian transformations.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.ToNurbsCurve">
            <summary>
            Initializes a nurbs curve representation of this arc. 
            This amounts to the same as calling NurbsCurve.CreateFromArc().
            </summary>
            <returns>A nurbs curve representation of this arc or null if no such representation could be made.</returns>
        </member>
        <member name="M:Rhino.Geometry.Arc.EpsilonEquals(Rhino.Geometry.Arc,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.Arc.Invalid">
            <summary>
            Initializes a new instance of an invalid arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Unset">
            <summary>
            Gets an Arc with Unset components.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.IsValid">
            <summary>
            Gets a value indicating whether or not this arc is valid.
            Detail:
             Radius&gt;0 and 0&lt;AngleRadians()&lt;=2*Math.Pi.
            </summary>
            <returns>true if the arc is valid.</returns>
        </member>
        <member name="P:Rhino.Geometry.Arc.IsCircle">
            <summary>
            Gets a value indicating whether or not this arc is a complete circle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Plane">
            <summary>
            Gets or sets the plane in which this arc lies.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Radius">
            <summary>
            Gets or sets the radius of this arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Diameter">
            <summary>
            Gets or sets the Diameter of this arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Center">
            <summary>
            Gets or sets the center point for this arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Circumference">
            <summary>
            Gets the circumference of the circle that is coincident with this arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Length">
            <summary>
            Gets the length of the arc. (Length = Radius * (subtended angle in radians)).
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.StartPoint">
            <summary>
            Gets the start point of the arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.MidPoint">
            <summary>
            Gets the mid-point of the arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.EndPoint">
            <summary>
            Gets the end point of the arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.AngleDomain">
            <summary>
            Gets or sets the angle domain (in Radians) of this arc.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.StartAngle">
            <summary>
            Gets or sets the start angle (in Radians) for this arc segment.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.EndAngle">
            <summary>
            Gets or sets the end angle (in Radians) for this arc segment.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.Angle">
            <summary>
            Gets or sets the sweep -or subtended- angle (in Radians) for this arc segment.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.StartAngleDegrees">
            <summary>
            Gets or sets the start angle (in Radians) for this arc segment.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.EndAngleDegrees">
            <summary>
            Gets or sets the end angle (in Radians) for this arc segment.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Arc.AngleDegrees">
            <summary>
            Gets or sets the sweep -or subtended- angle (in Radians) for this arc segment.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.BoundingBox">
            <summary>
            Represents the value of two points in a bounding box 
            defined by the two extreme corner points.
            <para>This box is therefore aligned to the world X, Y and Z axes.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Constructs a new boundingbox from two corner points.
            </summary>
            <param name="min">Point containing all the minimum coordinates.</param>
            <param name="max">Point containing all the maximum coordinates.</param>
            <example>
            <code source='examples\vbnet\ex_addbrepbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbrepbox.cs' lang='cs'/>
            <code source='examples\py\ex_addbrepbox.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a boundingbox from numeric extremes.
            </summary>
            <param name="minX">Lower extreme for box X size.</param>
            <param name="minY">Lower extreme for box Y size.</param>
            <param name="minZ">Lower extreme for box Z size.</param>
            <param name="maxX">Upper extreme for box X size.</param>
            <param name="maxY">Upper extreme for box Y size.</param>
            <param name="maxZ">Upper extreme for box Z size.</param>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.#ctor(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Constructs a boundingbox from a collection of points.
            </summary>
            <param name="points">Points to include in the boundingbox.</param>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.ToString">
            <summary>
            Constructs the string representation of this aligned boundingbox.
            </summary>
            <returns>Text.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.PointAt(System.Double,System.Double,System.Double)">
            <summary>
            Evaluates the boundingbox with normalized parameters.
            <para>The box has idealized side length of 1x1x1.</para>
            </summary>
            <param name="tx">Normalized (between 0 and 1 is inside the box) parameter along the X direction.</param>
            <param name="ty">Normalized (between 0 and 1 is inside the box) parameter along the Y direction.</param>
            <param name="tz">Normalized (between 0 and 1 is inside the box) parameter along the Z direction.</param>
            <returns>The point at the {tx, ty, tz} parameters.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Finds the closest point on or in the boundingbox.
            </summary>
            <param name="point">Sample point.</param>
            <returns>The point on or in the box that is closest to the sample point.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.ClosestPoint(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Finds the closest point on or in the boundingbox.
            </summary>
            <param name="point">Sample point.</param>
            <param name="includeInterior">If false, the point is projected onto the boundary faces only, 
            otherwise the interior of the box is also taken into consideration.</param>
            <returns>The point on or in the box that is closest to the sample point.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.FurthestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Finds the furthest point on the Box.
            </summary>
            <param name="point">Sample point.</param>
            <returns>The point on the box that is furthest from the sample point.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Inflate(System.Double)">
            <summary>
            Inflates the box with equal amounts in all directions. 
            Inflating with negative amounts may result in decreasing boxes. 
            <para>Invalid boxes can not be inflated.</para>
            </summary>
            <param name="amount">Amount (in model units) to inflate this box in all directions.</param>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Inflate(System.Double,System.Double,System.Double)">
            <summary>
            Inflate the box with custom amounts in all directions. 
            Inflating with negative amounts may result in decreasing boxes. 
            <para>InValid boxes can not be inflated.</para>
            </summary>
            <param name="xAmount">Amount (in model units) to inflate this box in the x direction.</param>
            <param name="yAmount">Amount (in model units) to inflate this box in the y direction.</param>
            <param name="zAmount">Amount (in model units) to inflate this box in the z direction.</param>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Contains(Rhino.Geometry.Point3d)">
            <summary>
            Tests a point for boundingbox inclusion. This is the same as calling Contains(point, false)
            </summary>
            <param name="point">Point to test.</param>
            <returns>true if the point is on the inside of or coincident with this boundingbox; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Contains(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Tests a point for BoundingBox inclusion.
            </summary>
            <param name="point">Point to test.</param>
            <param name="strict">If true, the point needs to be fully on the inside of the BoundingBox. 
            I.e. coincident points will be considered 'outside'.</param>
            <returns>
            <para>If 'strict' is affirmative, true if the point is inside this boundingbox; false if it is on the surface or outside.</para>
            <para>If 'strict' is negative, true if the point is on the surface or on the inside of the boundingbox; otherwise false.</para>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Contains(Rhino.Geometry.BoundingBox)">
            <summary>
            Determines whether this boundingbox contains another boundingbox.
            <para>This is the same as calling Contains(box,false).</para>
            </summary>
            <param name="box">Box to test.</param>
            <returns>true if the box is on the inside of this boundingbox, or is coincident with the surface of it.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Contains(Rhino.Geometry.BoundingBox,System.Boolean)">
            <summary>
            Determines whether this boundingbox contains another boundingbox.
            <para>The user can choose how to treat boundingboxes with coincidents surfaces.</para>
            </summary>
            <param name="box">Box to test.</param>
            <param name="strict">If true, the box needs to be fully on the inside of the boundingbox. 
            I.e. coincident boxes will be considered 'outside'.</param>
            <returns>true if the box is (strictly) on the inside of this BoundingBox.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.MakeValid">
            <summary>
            Ensures that the box is defined in an increasing fashion along X, Y and Z axes.
            If the Min or Max points are unset, this function will not change the box.
            </summary>
            <returns>true if the box was made valid, false if the box could not be made valid.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Corner(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets one of the eight corners of the box.
            </summary>
            <param name="minX">true for the minimum on the X axis; false for the maximum.</param>
            <param name="minY">true for the minimum on the Y axis; false for the maximum.</param>
            <param name="minZ">true for the minimum on the Z axis; false for the maximum.</param>
            <returns>The requested point.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.IsDegenerate(System.Double)">
            <summary>
            Determines whether a bounding box is degenerate (flat) in one or more directions.
            </summary>
            <param name="tolerance">
            Distances &lt;= tolerance will be considered to be zero.  If tolerance
            is negative (default), then a scale invarient tolerance is used.
            </param>
            <returns>
            0 = box is not degenerate
            1 = box is a rectangle (degenerate in one direction).
            2 = box is a line (degenerate in two directions).
            3 = box is a point (degenerate in three directions)
            4 = box is not valid.
            </returns>
            <example>
            <code source='examples\vbnet\ex_curvebrepbox.vb' lang='vbnet'/>
            <code source='examples\cs\ex_curvebrepbox.cs' lang='cs'/>
            <code source='examples\py\ex_curvebrepbox.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.GetCorners">
             <summary>
             Gets an array filled with the 8 corner points of this box.
             <para>See remarks for the return order.</para>
             </summary>
             <returns>An array of 8 corners.</returns>
             <remarks>
             <para>[0] Min.X, Min.Y, Min.Z</para>
             <para>[1] Max.X, Min.Y, Min.Z</para>
             <para>[2] Max.X, Max.Y, Min.Z</para>
             <para>[3] Min.X, Max.Y, Min.Z</para>
            
             <para>[4] Min.X, Min.Y, Max.Z</para>
             <para>[5] Max.X, Min.Y, Max.Z</para>
             <para>[6] Max.X, Max.Y, Max.Z</para>
             <para>[7] Min.X, Max.Y, Max.Z</para>
             </remarks>
             <example>
             <code source='examples\vbnet\ex_elevation.vb' lang='vbnet'/>
             <code source='examples\cs\ex_elevation.cs' lang='cs'/>
             <code source='examples\py\ex_elevation.py' lang='py'/>
             </example>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.GetEdges">
            <summary>
            Gets an array of the 12 edges of this box.
            </summary>
            <returns>If the boundingbox IsValid, the 12 edges; otherwise, null.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Transform(Rhino.Geometry.Transform)">
            <summary>
            Updates this boundingbox to be the smallest axis aligned
            boundingbox that contains the transformed result of its 8 original corner
            points.
            </summary>
            <param name="xform">A transform.</param>
            <returns>true if this operation is sucessfull; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.ToBrep">
            <summary>
            Constructs a <see cref="T:Rhino.Geometry.Brep"/> representation of this boundingbox.
            </summary>
            <returns>If this operation is sucessfull, a Brep representation of this box; otherwise null.</returns>
            <example>
            <code source="examples\vbnet\ex_addbrepbox.vb" lang="vbnet"/>
            <code source="examples\cs\ex_addbrepbox.cs" lang="cs"/>
            <code source="examples\py\ex_addbrepbox.py" lang="py"/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Union(Rhino.Geometry.BoundingBox)">
            <summary>
            Updates this BoundingBox to represent the union of itself and another box.
            </summary>
            <param name="other">Box to include in this union.</param>
            <remarks>If either this BoundingBox or the other BoundingBox is InValid, 
            the Valid BoundingBox will be the only one included in the union.</remarks>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Union(Rhino.Geometry.Point3d)">
            <summary>
            Updates this BoundingBox to represent the union of itself and a point.
            </summary>
            <param name="point">Point to include in the union.</param>
            <remarks>If this boundingbox is InValid then the union will be 
            the BoundingBox containing only the point. If the point is InValid, 
            this BoundingBox will remain unchanged.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Union(Rhino.Geometry.BoundingBox,Rhino.Geometry.BoundingBox)">
            <summary>
            Returns a new BoundingBox that represents the union of boxes a and b.
            </summary>
            <param name="a">First box to include in union.</param>
            <param name="b">Second box to include in union.</param>
            <returns>The BoundingBox that contains both a and b.</returns>
            <remarks>Invalid boxes are ignored and will not affect the union.</remarks>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Intersection(Rhino.Geometry.BoundingBox,Rhino.Geometry.BoundingBox)">
            <summary>
            Computes the intersection of two bounding boxes.
            </summary>
            <param name="a">A first bounding box.</param>
            <param name="b">A second bounding box.</param>
            <returns>The intersection bounding box.</returns>
        </member>
        <member name="M:Rhino.Geometry.BoundingBox.Union(Rhino.Geometry.BoundingBox,Rhino.Geometry.Point3d)">
            <summary>
            Returns a new BoundingBox that represents the union of a bounding box and a point.
            </summary>
            <param name="box">Box to include in the union.</param>
            <param name="point">Point to include in the union.</param>
            <returns>The BoundingBox that contains both the box and the point.</returns>
            <remarks>Invalid boxes and points are ignored and will not affect the union.</remarks>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Empty">
            <summary>
            Gets an [Empty] boundingbox. An Empty box is an invalid structure that has negative width.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Unset">
            <summary>
            Gets a boundingbox that has Unset coordinates for Min and Max.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.IsValid">
            <summary>
            Gets a value that indicates whether or not this boundingbox is valid. 
            Empty boxes are not valid, and neither are boxes with unset points.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Min">
            <summary>
            Gets or sets the point in the minimal corner.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Max">
            <summary>
            Gets or sets the point in the maximal corner.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Center">
            <summary>
            Gets the point in the center of the boundingbox.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.BoundingBox.Diagonal">
            <summary>
            Gets the diagonal vector of this BoundingBox. 
            The diagonal connects the Min and Max points. 
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Circle">
            <summary>
            Represents a circle in 3D.
            <para>The values used are a radius and an orthonormal frame	of the plane containing the circle,
            with origin at the center.</para>
            <para>The circle is parameterized by radians from 0 to 2 Pi given by</para>
            <para>t -> center + cos(t)*radius*xaxis + sin(t)*radius*yaxis</para>
            <para>where center, xaxis and yaxis define the orthonormal frame of the circle plane.</para>
            </summary>
            <remarks>>An IsValid circle has positive radius and an IsValid plane defining the frame.</remarks>
        </member>
        <member name="M:Rhino.Geometry.Circle.TryFitCircleTT(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Double,System.Double)">
            <summary>
            Try to fit a circle to two curves using tangent relationships.
            </summary>
            <param name="c1">First curve to touch.</param>
            <param name="c2">Second curve to touch.</param>
            <param name="t1">Parameter on first curve close to desired solution.</param>
            <param name="t2">Parameter on second curve closet to desired solution.</param>
            <returns>Valid circle on success, Circle.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.TryFitCircleTTT(Rhino.Geometry.Curve,Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Double,System.Double,System.Double)">
            <summary>
            Try to fit a circle to three curves using tangent relationships.
            </summary>
            <param name="c1">First curve to touch.</param>
            <param name="c2">Second curve to touch.</param>
            <param name="c3">Third curve to touch.</param>
            <param name="t1">Parameter on first curve close to desired solution.</param>
            <param name="t2">Parameter on second curve closet to desired solution.</param>
            <param name="t3">Parameter on third curve close to desired solution.</param>
            <returns>Valid circle on success, Circle.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(System.Double)">
            <summary>
            Initializes a circle with center (0,0,0) in the world XY plane.
            </summary>
            <param name="radius">Radius of circle, should be a positive number.</param>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Plane,System.Double)">
            <summary>
            Initializes a circle on a plane with a given radius.
            </summary>
            <param name="plane">Plane of circle. Plane origin defines the center of the circle.</param>
            <param name="radius">Radius of circle (should be a positive value).</param>
            <example>
            <code source='examples\vbnet\ex_addcircle.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addcircle.cs' lang='cs'/>
            <code source='examples\py\ex_addcircle.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Initializes a circle parallel to the world XY plane with given center and radius.
            </summary>
            <param name="center">Center of circle.</param>
            <param name="radius">Radius of circle (should be a positive value).</param>
            <example>
            <code source='examples\vbnet\ex_addtruncatedcone.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addtruncatedcone.cs' lang='cs'/>
            <code source='examples\py\ex_addtruncatedcone.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Arc)">
            <summary>
            Initializes a circle from an arc.
            </summary>
            <param name="arc">Arc that defines the plane and radius.</param>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Initializes a circle through three 3d points. The start/end of the circle is at point1.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Initializes a circle parallel to a given plane with given center and radius.
            </summary>
            <param name="plane">Plane for circle.</param>
            <param name="center">Center point override.</param>
            <param name="radius">Radius of circle (should be a positive value).</param>
        </member>
        <member name="M:Rhino.Geometry.Circle.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Initializes a circle from two 3d points and a tangent at the first point.
            The start/end of the circle is at point "startPoint".
            </summary>
            <param name="startPoint">Start point of circle.</param>
            <param name="tangentAtP">Tangent vector at start.</param>
            <param name="pointOnCircle">Point coincident with desired circle.</param>
            <remarks>May create an Invalid circle</remarks>
        </member>
        <member name="M:Rhino.Geometry.Circle.IsInPlane(Rhino.Geometry.Plane,System.Double)">
            <summary>
            Evaluates whether or not this circle is co-planar with a given plane.
            </summary>
            <param name="plane">Plane.</param>
            <param name="tolerance">Tolerance to use.</param>
            <returns>true if the circle plane is co-planar with the given plane within tolerance.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.PointAt(System.Double)">
            <summary>
            Circles use trigonometric parameterization: 
            t -> center + cos(t)*radius*xaxis + sin(t)*radius*yaxis.
            </summary>
            <param name="t">Parameter of point to evaluate.</param>
            <returns>The point on the circle at the given parameter.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.TangentAt(System.Double)">
            <summary>
            Circles use trigonometric parameterization: 
            t -> center + cos(t)*radius*xaxis + sin(t)*radius*yaxis.
            </summary>
            <param name="t">Parameter of tangent to evaluate.</param>
            <returns>The tangent at the circle at the given parameter.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.DerivativeAt(System.Int32,System.Double)">
            <summary>
            Determines the value of the Nth derivative at a parameter. 
            </summary>
            <param name="derivative">Which order of derivative is wanted.</param>
            <param name="t">Parameter to evaluate derivative. Valid values are 0, 1, 2 and 3.</param>
            <returns>The derivative of the circle at the given parameter.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.ClosestParameter(Rhino.Geometry.Point3d,System.Double@)">
            <summary>
            Gets the parameter on the circle which is closest to a test point.
            </summary>
            <param name="testPoint">Point to project onto the circle.</param>
            <param name="t">Parameter on circle closes to testPoint.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Gets the point on the circle which is closest to a test point.
            </summary>
            <param name="testPoint">Point to project onto the circle.</param>
            <returns>
            The point on the circle that is closest to testPoint or
            Point3d.Unset on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms this circle using an xform matrix. 
            </summary>
            <param name="xform">Transformation to apply.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>
            Circles may not be transformed accurately if the xform defines a 
            non-euclidian transformation.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Circle.Rotate(System.Double,System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotates the circle around an axis that starts at the base plane origin.
            </summary>
            <param name="sinAngle">The value returned by Math.Sin(angle) to compose the rotation.</param>
            <param name="cosAngle">The value returned by Math.Cos(angle) to compose the rotation.</param>
            <param name="axis">A rotation axis.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.Rotate(System.Double,System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotates the circle around an axis that starts at the provided point.
            </summary>
            <param name="sinAngle">The value returned by Math.Sin(angle) to compose the rotation.</param>
            <param name="cosAngle">The value returned by Math.Cos(angle) to compose the rotation.</param>
            <param name="axis">A rotation direction.</param>
            <param name="point">A rotation base point.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.Rotate(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotates the circle through a given angle.
            </summary>
            <param name="angle">Angle (in radians) of the rotation.</param>
            <param name="axis">Rotation axis.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.Rotate(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotates the circle through a given angle.
            </summary>
            <param name="angle">Angle (in radians) of the rotation.</param>
            <param name="axis">Rotation axis.</param>
            <param name="point">Rotation anchor point.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.Translate(Rhino.Geometry.Vector3d)">
            <summary>
            Moves the circle.
            </summary>
            <param name="delta">Translation vector.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.Reverse">
            <summary>
            Reverse the orientation of the circle. Changes the domain from [a,b]
            to [-b,-a].
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Circle.ToNurbsCurve">
            <summary>
            Constructs a nurbs curve representation of this circle. 
            This amounts to the same as calling NurbsCurve.CreateFromCircle().
            </summary>
            <returns>A nurbs curve representation of this circle or null if no such representation could be made.</returns>
        </member>
        <member name="M:Rhino.Geometry.Circle.EpsilonEquals(Rhino.Geometry.Circle,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.Circle.Unset">
            <summary>
            Gets a circle with Unset components.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Circle.IsValid">
            <summary> 
            A valid circle has radius larger than 0.0 and a base plane which is must also be valid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Circle.Radius">
            <summary>
            Gets or sets the radius of this circle. 
            Radii should be positive values.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Circle.Diameter">
            <summary>
            Gets or sets the diameter (radius * 2.0) of this circle. 
            Diameters should be positive values.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Circle.Plane">
            <summary>
            Gets or sets the plane of the circle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Circle.Center">
            <summary>
            Gets or sets the center point of this circle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Circle.Normal">
            <summary>
            Gets the normal vector for this circle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Circle.Circumference">
            <summary>
            Gets or sets the circumference of this circle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Circle.BoundingBox">
            <summary>
            Gets the circle's 3d axis aligned bounding box.
            </summary>
            <returns>3d bounding box.</returns>
        </member>
        <member name="T:Rhino.Geometry.Cone">
            <summary>
            Represents the center plane, radius and height values in a right circular cone.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Cone.#ctor(Rhino.Geometry.Plane,System.Double,System.Double)">
            <summary>
            Initializes a new cone with a specified base plane, height and radius.
            </summary>
            <param name="plane">Base plane of cone.</param>
            <param name="height">Height of cone.</param>
            <param name="radius">Radius of cone.</param>
        </member>
        <member name="M:Rhino.Geometry.Cone.AngleInRadians">
            <summary>
            Computes the angle (in radians) between the axis and the 
            side of the cone.
            The angle and the height have the same sign.
            </summary>
            <returns>Math.Atan(Radius / Height) if the height is not 0; 0 if the radius is 0; Math.PI otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Cone.AngleInDegrees">
            <summary>
            Computes the angle (in degrees) between the axis and the 
            side of the cone.
            The angle and the height have the same sign.
            </summary>
            <returns>An angle in degrees.</returns>
        </member>
        <member name="M:Rhino.Geometry.Cone.ToNurbsSurface">
            <summary>
            Constructs a Nurbs surface representation of this Cone. 
            This is synonymous with calling NurbsSurface.CreateFromCone().
            </summary>
            <returns>A Nurbs surface representation of the cone or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Cone.ToRevSurface">
            <summary>
            Constructs a RevSurface representation of this Cone. 
            This is synonymous with calling RevSurface.CreateFromCone().
            </summary>
            <returns>A RevSurface representation of the cone or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Cone.ToBrep(System.Boolean)">
            <summary>
            Gets a Brep representation of the cone with a single
            face for the cone, an edge along the cone seam, 
            and vertices at the base and apex ends of this seam edge.
            The optional cap is a single face with one circular edge 
            starting and ending at the base vertex.
            </summary>
            <param name="capBottom">true if the bottom should be filled with a surface. false otherwise.</param>
            <returns>A brep (polysurface) representation of this cone values.</returns>
        </member>
        <member name="M:Rhino.Geometry.Cone.EpsilonEquals(Rhino.Geometry.Cone,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.Cone.Unset">
            <summary>
            Gets an invalid Cone.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cone.Plane">
            <summary>
            Gets or sets the base plane of the cone.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cone.Height">
            <summary>
            Gets or sets the height of the circular right cone.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cone.Radius">
            <summary>
            Gets or sets the radius of the cone.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cone.IsValid">
            <summary>
            true if plane is valid, height is not zero and radius is not zero.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cone.BasePoint">
            <summary>Center of base circle.</summary>
        </member>
        <member name="P:Rhino.Geometry.Cone.ApexPoint">
            <summary>Point at tip of the cone.</summary>
        </member>
        <member name="P:Rhino.Geometry.Cone.Axis">
            <summary>Unit vector axis of cone.</summary>
        </member>
        <member name="T:Rhino.Geometry.BlendContinuity">
            <summary>
            Used in curve and surface blending functions
            </summary>
        </member>
        <member name="F:Rhino.Geometry.BlendContinuity.Position">
            <summary></summary>
        </member>
        <member name="F:Rhino.Geometry.BlendContinuity.Tangency">
            <summary></summary>
        </member>
        <member name="F:Rhino.Geometry.BlendContinuity.Curvature">
            <summary></summary>
        </member>
        <member name="T:Rhino.Geometry.CurveOffsetCornerStyle">
            <summary>
            Defines enumerated values for all implemented corner styles in curve offsets.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOffsetCornerStyle.None">
            <summary>
            The dafault value.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOffsetCornerStyle.Sharp">
            <summary>
            Offsets and extends curves with a straight line until they intersect.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOffsetCornerStyle.Round">
            <summary>
            Offsets and fillets curves with an arc of radius equal to the offset distance.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOffsetCornerStyle.Smooth">
            <summary>
            Offsets and connects curves with a smooth (G1 continuity) curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOffsetCornerStyle.Chamfer">
            <summary>
            Offsets and connects curves with a straight line between their endpoints.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveKnotStyle">
            <summary>
            Defines enumerated values for knot spacing styles in interpolated curves.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.Uniform">
            <summary>
            Parameter spacing between consecutive knots is 1.0.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.Chord">
            <summary>
            Chord length spacing, requires degree=3 with CV1 and CVn1 specified.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.ChordSquareRoot">
            <summary>
            Square root of chord length, requires degree=3 with CV1 and CVn1 specified.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.UniformPeriodic">
            <summary>
            Periodic with uniform spacing.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.ChordPeriodic">
            <summary>
            Periodic with chord length spacing.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveKnotStyle.ChordSquareRootPeriodic">
            <summary>
            Periodic with square roor of chord length spacing. 
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveOrientation">
            <summary>
            Defines enumerated values for closed curve orientations.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOrientation.Undefined">
            <summary>
            Orientation is undefined.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOrientation.Clockwise">
            <summary>
            The curve's orientation is clockwise in the xy plane.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveOrientation.CounterClockwise">
            <summary>
            The curve's orientation is counter clockwise in the xy plane.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.PointContainment">
            <summary>
            Defines enumerated values for closed curve/point spatial relationships.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointContainment.Unset">
            <summary>
            Relation is meaningless.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointContainment.Inside">
            <summary>
            Point is on the interior of the region implied by the closed curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointContainment.Outside">
            <summary>
            Point is on the exterior of the region implied by the closed curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PointContainment.Coincident">
            <summary>
            Point is coincident with the curve and therefor neither inside not outside.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.RegionContainment">
            <summary>
            Defines enumerated values for closed curve/closed curve relationships.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.RegionContainment.Disjoint">
            <summary>
            There is no common area between the two regions.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.RegionContainment.MutualIntersection">
            <summary>
            The two curves intersect. There is therefore no full containment relationship either way.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.RegionContainment.AInsideB">
            <summary>
            Region bounded by curveA (first curve) is inside of curveB (second curve).
            </summary>
        </member>
        <member name="F:Rhino.Geometry.RegionContainment.BInsideA">
            <summary>
            Region bounded by curveB (second curve) is inside of curveA (first curve).
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveExtensionStyle">
            <summary>
            Defines enumerated values for styles to use during curve extension, such as "Line", "Arc" or "Smooth".
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveExtensionStyle.Line">
            <summary>
            Curve ends will be propagated linearly according to tangents.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveExtensionStyle.Arc">
            <summary>
            Curve ends will be propagated arc-wise according to curvature.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveExtensionStyle.Smooth">
            <summary>
            Curve ends will be propagated smoothly according to curvature.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveSimplifyOptions">
            <summary>
            Enumerates the options to use when simplifying a curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.None">
            <summary>
            No option is specified.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.SplitAtFullyMultipleKnots">
            <summary>
            Split NurbsCurves at fully multiple knots. 
            Effectively turning single nurbs segments with kinks into multiple segments.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.RebuildLines">
            <summary>
            Replace linear segments with LineCurves.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.RebuildArcs">
            <summary>
            Replace partially circular segments with ArcCurves.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.RebuildRationals">
            <summary>
            Replace rational nurbscurves with constant weights 
            with an equivalent non-rational NurbsCurve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.AdjustG1">
            <summary>
            Adjust Curves at G1-joins.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.Merge">
            <summary>
            Merge adjacent co-linear lines or co-circular arcs 
            or combine consecutive line segments into a polyline.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveSimplifyOptions.All">
            <summary>
            Implies all of the simplification functions will be used.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveEnd">
            <summary>
            Defines the extremes of a curve through a flagged enumeration. 
            </summary>
            <example>
            <code source='examples\vbnet\ex_extendcurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_extendcurve.cs' lang='cs'/>
            <code source='examples\py\ex_extendcurve.py' lang='py'/>
            </example>
        </member>
        <member name="F:Rhino.Geometry.CurveEnd.None">
            <summary>
            Not the start nor the end.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveEnd.Start">
            <summary>
            The frontal part of the curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveEnd.End">
            <summary>
            The tail part of the curve.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveEnd.Both">
            <summary>
            Both the start and the end of the curve.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.CurveEvaluationSide">
            <summary>
            Defines enumerated values for the options that defines a curve evaluation side when evaluating kinks.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveEvaluationSide.Default">
            <summary>
            The default evaluation side.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveEvaluationSide.Below">
            <summary>
            The below evaluation side.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.CurveEvaluationSide.Above">
            <summary>
            The above evaluation side.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Cylinder">
            <summary>
            Represents the values of a plane, a radius and two heights -on top and beneath-
            that define a right circular cylinder.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.#ctor(Rhino.Geometry.Circle)">
            <summary>
            Constructs a new cylinder with infinite height.
            </summary>
            <param name="baseCircle">Base circle for infinite cylinder.</param>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.#ctor(Rhino.Geometry.Circle,System.Double)">
            <summary>
            Constructs a new cylinder with a finite height.
            </summary>
            <param name="baseCircle">Base circle for cylinder.</param>
            <param name="height">Height of cylinder (zero for infinite cylinder).</param>
            <example>
            <code source='examples\vbnet\ex_addcylinder.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addcylinder.cs' lang='cs'/>
            <code source='examples\py\ex_addcylinder.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.CircleAt(System.Double)">
            <summary>
            Compute the circle at the given elevation parameter.
            </summary>
            <param name="linearParameter">Height parameter for circle section.</param>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.LineAt(System.Double)">
            <summary>
            Compute the line at the given angle parameter. This line will be degenerate if the cylinder is infite.
            </summary>
            <param name="angularParameter">Angle parameter for line section.</param>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.ToBrep(System.Boolean,System.Boolean)">
            <summary>
            Constructs a Brep representation of this Cylinder. 
            This is synonymous with calling NurbsSurface.CreateFromCylinder().
            </summary>
            <param name="capBottom">If true, the bottom of the cylinder will be capped.</param>
            <param name="capTop">If true, the top of the cylinder will be capped.</param>
            <returns>A Brep representation of the cylinder or null.</returns>
            <example>
            <code source='examples\vbnet\ex_addcylinder.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addcylinder.cs' lang='cs'/>
            <code source='examples\py\ex_addcylinder.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.ToNurbsSurface">
            <summary>
            Constructs a Nurbs surface representation of this cylinder. 
            This is synonymous with calling NurbsSurface.CreateFromCylinder().
            </summary>
            <returns>A Nurbs surface representation of the cylinder or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.ToRevSurface">
            <summary>
            Constructs a RevSurface representation of this Cylinder. 
            This is synonymous with calling RevSurface.CreateFromCylinder().
            </summary>
            <returns>A RevSurface representation of the cylinder or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Cylinder.EpsilonEquals(Rhino.Geometry.Cylinder,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.Unset">
            <summary>
            Gets an invalid Cylinder.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.IsValid">
            <summary>
            Gets a boolean value indicating whether this cylinder is valid.
            <para>A valid cylinder is represented by a valid circle and two valid heights.</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.IsFinite">
            <summary>
            true if the cylinder is finite (Height0 != Height1)
            false if the cylinder is infinite.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.Center">
            <summary>
            Gets the center point of the defining circle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.Axis">
            <summary>
            Gets the axis direction of the cylinder.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.TotalHeight">
            <summary>
            Gets the height of the cylinder. 
            Infinite cylinders have a height of zero, not Double.PositiveInfinity.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.Height1">
            <summary>
            Gets or sets the start height of the cylinder. 
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Cylinder.Height2">
            <summary>
            Gets or sets the end height of the cylinder. 
            If the end height equals the start height, the cylinder is 
            presumed to be infinite.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Ellipse">
            <summary>
            Represents the values of a plane and the two semiaxes radii in an ellipse.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Ellipse.#ctor(Rhino.Geometry.Plane,System.Double,System.Double)">
            <summary>
            Initializes a new ellipse from base plane and both principal radii.
            </summary>
            <param name="plane">Base plane of ellipse.</param>
            <param name="radius1">Ellipse radius along base plane X direction.</param>
            <param name="radius2">Ellipse radius along base plane Y direction.</param>
        </member>
        <member name="M:Rhino.Geometry.Ellipse.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new ellipse from a center point and the two semiaxes intersections.
            </summary>
            <param name="center">A center for the ellipse. The avarage of the foci.</param>
            <param name="second">The intersection of the ellipse X axis with the ellipse itself.</param>
            <param name="third">A point that determines the radius along the Y semiaxis.
            <para>If the point is at right angle with the (center - second point) vector,
            it will be the intersection of the ellipse Y axis with the ellipse itself.</para>
            </param>
        </member>
        <member name="M:Rhino.Geometry.Ellipse.ToNurbsCurve">
            <summary>
            Constructs a nurbs curve representation of this ellipse. 
            <para>This is equivalent to calling NurbsCurve.CreateFromEllipse().</para>
            </summary>
            <returns>A nurbs curve representation of this ellipse or null if no such representation could be made.</returns>
        </member>
        <member name="M:Rhino.Geometry.Ellipse.EpsilonEquals(Rhino.Geometry.Ellipse,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.Ellipse.Plane">
            <summary>
            Gets or sets the base plane of the ellipse.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Ellipse.Radius1">
            <summary>
            Gets or sets the radius of the ellipse along the base plane X semiaxis.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Ellipse.Radius2">
            <summary>
            Gets or sets the radius of the ellipse along the base plane Y semiaxis.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Line">
            <summary>
            Represents the value of start and end points in a single line segment.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Line.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Constructs a new line segment between two points.
            </summary>
            <param name="from">Start point of line.</param>
            <param name="to">End point of line.</param>
        </member>
        <member name="M:Rhino.Geometry.Line.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Constructs a new line segment from start point and span vector.
            </summary>
            <param name="start">Start point of line segment.</param>
            <param name="span">Direction and length of line segment.</param>
        </member>
        <member name="M:Rhino.Geometry.Line.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Constructs a new line segment from start point, direction and length.
            </summary>
            <param name="start">Start point of line segment.</param>
            <param name="direction">Direction of line segment.</param>
            <param name="length">Length of line segment.</param>
        </member>
        <member name="M:Rhino.Geometry.Line.#ctor(System.Double,System.Double,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new line segment between two points.
            </summary>
            <param name="x0">The X coordinate of the first point.</param>
            <param name="y0">The Y coordinate of the first point.</param>
            <param name="z0">The Z coordinate of the first point.</param>
            <param name="x1">The X coordinate of the second point.</param>
            <param name="y1">The Y coordinate of the second point.</param>
            <param name="z1">The Z coordinate of the second point.</param>
        </member>
        <member name="M:Rhino.Geometry.Line.TryFitLineToPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.Geometry.Line@)">
            <summary>
            Attempt to fit a line through a set of points.
            </summary>
            <param name="points">The points through which to fit.</param>
            <param name="fitLine">The resulting line on success.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.TryCreateBetweenCurves(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Double@,System.Double@,System.Boolean,System.Boolean,Rhino.Geometry.Line@)">
            <summary>
            Creates a line segment between a pair of curves such that the line segment is either tangent or perpendicular to each of the curves.
            </summary>
            <param name="curve0">The first curve.</param>
            <param name="curve1">The second curve.</param>
            <param name="t0">Parameter value of point on curve0. Seed value at input and solution at output.</param>
            <param name="t1">Parameter value of point on curve 0.  Seed value at input and solution at output.</param>
            <param name="perpendicular0">Find line Perpendicuar to (true) or tangent to (false) curve0.</param>
            <param name="perpendicular1">Find line Perpendicuar to (true) or tangent to (false) curve1.</param>
            <param name="line">The line segment if successful.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.Equals(System.Object)">
            <summary>
            Determines whether an object is a line that has the same value as this line.
            </summary>
            <param name="obj">An object.</param>
            <returns>true if obj is a Line and has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.Equals(Rhino.Geometry.Line)">
            <summary>
            Determines whether a line has the same value as this line.
            </summary>
            <param name="other">A line.</param>
            <returns>true if other has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.EpsilonEquals(Rhino.Geometry.Line,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Line.GetHashCode">
            <summary>
            Computes a hash number that represents this line.
            </summary>
            <returns>A number that is not unique to the value of this line.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.ToString">
            <summary>
            Contructs the string representation of this line, in the form "From,To".
            </summary>
            <returns>A text string.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.Flip">
            <summary>
            Flip the endpoints of the line segment.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Line.PointAt(System.Double)">
            <summary>
            Evaluates the line at the specified parameter.
            </summary>
            <param name="t">Parameter to evaluate line segment at. Line parameters are normalised parameters.</param>
            <returns>The point at the specified parameter.</returns>
            <example>
            <code source='examples\vbnet\ex_intersectlines.vb' lang='vbnet'/>
            <code source='examples\cs\ex_intersectlines.cs' lang='cs'/>
            <code source='examples\py\ex_intersectlines.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Line.ClosestParameter(Rhino.Geometry.Point3d)">
            <summary>
            Finds the parameter on the infinite line segment that is closest to a test point.
            </summary>
            <param name="testPoint">Point to project onto the line.</param>
            <returns>The parameter on the line that is closest to testPoint.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.ClosestPoint(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Finds the point on the (in)finite line segment that is closest to a test point.
            </summary>
            <param name="testPoint">Point to project onto the line.</param>
            <param name="limitToFiniteSegment">If true, the projection is limited to the finite line segment.</param>
            <returns>The point on the (in)finite line that is closest to testPoint.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.DistanceTo(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Compute the shortest distance between this line segment and a test point.
            </summary>
            <param name="testPoint">Point for distance computation.</param>
            <param name="limitToFiniteSegment">If true, the distance is limited to the finite line segment.</param>
            <returns>The shortest distance between this line segment and testPoint.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.MinimumDistanceTo(Rhino.Geometry.Point3d)">
            <summary>
            Finds the shortest distance between this line as a finite segment
            and a test point.
            </summary>
            <param name="testPoint">A point to test.</param>
            <returns>The minimum distance.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.MinimumDistanceTo(Rhino.Geometry.Line)">
            <summary>
            Finds the shortest distance between this line as a finite segment
            and another finite segment.
            </summary>
            <param name="testLine">A line to test.</param>
            <returns>The minimum distance.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.MaximumDistanceTo(Rhino.Geometry.Point3d)">
            <summary>
            Finds the largest distance between this line as a finite segment
            and a test point.
            </summary>
            <param name="testPoint">A point to test.</param>
            <returns>The maximum distance.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.MaximumDistanceTo(Rhino.Geometry.Line)">
            <summary>
            Finds the largest distance between this line as a finite segment
            and another finite segment.
            </summary>
            <param name="testLine">A line to test.</param>
            <returns>The maximum distance.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transform the line using a Transformation matrix.
            </summary>
            <param name="xform">Transform to apply to this line.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.ToNurbsCurve">
            <summary>
            Constructs a nurbs curve representation of this line. 
            This amounts to the same as calling NurbsCurve.CreateFromLine().
            </summary>
            <returns>A nurbs curve representation of this line or null if no such representation could be made.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.Extend(System.Double,System.Double)">
            <summary>
            Extend the line by custom distances on both sides.
            </summary>
            <param name="startLength">
            Distance to extend the line at the start point. 
            Positive distance result in longer lines.
            </param>
            <param name="endLength">
            Distance to extend the line at the end point. 
            Positive distance result in longer lines.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.ExtendThroughBox(Rhino.Geometry.BoundingBox)">
            <summary>
            Ensure the line extends all the way through a box. 
            Note, this does not result in the shortest possible line 
            that overlaps the box.
            </summary>
            <param name="box">Box to extend through.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.ExtendThroughBox(Rhino.Geometry.BoundingBox,System.Double)">
            <summary>
            Ensure the line extends all the way through a box. 
            Note, this does not result in the shortest possible line that overlaps the box.
            </summary>
            <param name="box">Box to extend through.</param>
            <param name="additionalLength">Additional length to append at both sides of the line.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.ExtendThroughBox(Rhino.Geometry.Box)">
            <summary>
            Ensure the line extends all the way through a box. 
            Note, this does not result in the shortest possible line that overlaps the box.
            </summary>
            <param name="box">Box to extend through.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.ExtendThroughBox(Rhino.Geometry.Box,System.Double)">
            <summary>
            Ensure the line extends all the way through a box. 
            Note, this does not result in the shortest possible line that overlaps the box.
            </summary>
            <param name="box">Box to extend through.</param>
            <param name="additionalLength">Additional length to append at both sides of the line.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.TryGetPlane(Rhino.Geometry.Plane@)">
            <summary>
            Gets a plane that contains the line. The origin of the plane is at the start of the line.
            If possible, a plane parallel to the world xy, yz, or zx plane is returned.
            </summary>
            <param name="plane">If the return value is true, the plane out parameter is assigned during this call.</param>
            <returns>true on success.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.op_Equality(Rhino.Geometry.Line,Rhino.Geometry.Line)">
            <summary>
            Determines whether two lines have the same value.
            </summary>
            <param name="a">A line.</param>
            <param name="b">Another line.</param>
            <returns>true if a has the same coordinates as b; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Line.op_Inequality(Rhino.Geometry.Line,Rhino.Geometry.Line)">
            <summary>
            Determines whether two lines have different values.
            </summary>
            <param name="a">A line.</param>
            <param name="b">Another line.</param>
            <returns>true if a has any coordinate that distinguishes it from b; otherwise false.</returns>
        </member>
        <member name="P:Rhino.Geometry.Line.From">
            <summary>
            Start point of line segment.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.FromX">
            <summary>
            Gets or sets the X coordinate of the line From point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.FromY">
            <summary>
            Gets or sets the Y coordinate of the line From point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.FromZ">
            <summary>
            Gets or sets the Z coordinate of the line From point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.To">
            <summary>
            End point of line segment.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.ToX">
            <summary>
            Gets or sets the X coordinate of the line To point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.ToY">
            <summary>
            Gets or sets the Y coordinate of the line To point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.ToZ">
            <summary>
            Gets or sets the Z coordinate of the line To point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.Unset">
            <summary>
            Gets a line segment which has <see cref="P:Rhino.Geometry.Point3d.Unset"/> end points.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.IsValid">
            <summary>
            Gets a value indicating whether or not this line is valid. 
            Valid lines must have valid start and end points.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.Length">
            <summary>
            Gets or sets the length of this line segment. 
            Note that a negative length will invert the line segment without 
            making the actual length negative. The line From point will remain fixed 
            when a new Length is set.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Line.Direction">
            <summary>
            Gets the direction of this line segment. 
            The length of the direction vector equals the length of 
            the line segment.
            </summary>
            <example>
            <code source='examples\vbnet\ex_intersectlines.vb' lang='vbnet'/>
            <code source='examples\cs\ex_intersectlines.cs' lang='cs'/>
            <code source='examples\py\ex_intersectlines.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.Line.UnitTangent">
            <summary>
            Gets the tangent of the line segment. 
            Note that tangent vectors are always unit vectors.
            </summary>
            <value>Sets only the direction of the line, the length is maintained.</value>
        </member>
        <member name="P:Rhino.Geometry.Line.BoundingBox">
            <summary>
            Gets the line's 3d axis aligned bounding box.
            </summary>
            <returns>3d bounding box.</returns>
        </member>
        <member name="T:Rhino.Geometry.NurbsCurve">
            <summary>
            Represents a Non Uniform Rational B-Splines (NURBS) curve.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.CreateFromLine(Rhino.Geometry.Line)">
            <summary>
            Gets a non-rational, degree 1 Nurbs curve representation of the line.
            </summary>
            <returns>Curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.CreateFromArc(Rhino.Geometry.Arc)">
            <summary>
            Gets a rational degree 2 NURBS curve representation
            of the arc. Note that the parameterization of NURBS curve
            does not match arc's transcendental paramaterization.
            </summary>
            <returns>Curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.CreateFromCircle(Rhino.Geometry.Circle)">
            <summary>
            Gets a rational degree 2 NURBS curve representation
            of the circle. Note that the parameterization of NURBS curve
            does not match circle's transcendental paramaterization.  
            Use GetRadianFromNurbFormParameter() and
            GetParameterFromRadian() to convert between the NURBS curve 
            parameter and the transcendental parameter.
            </summary>
            <returns>Curve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.CreateFromEllipse(Rhino.Geometry.Ellipse)">
            <summary>
            Gets a rational degree 2 NURBS curve representation of the ellipse.
            <para>Note that the parameterization of the NURBS curve does not match
            with the transcendental paramaterization of the ellipsis.</para>
            </summary>
            <returns>A nurbs curve representation of this ellipse or null if no such representation could be made.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.IsDuplicate(Rhino.Geometry.NurbsCurve,Rhino.Geometry.NurbsCurve,System.Boolean,System.Double)">
            <summary>
            Determines if two curves are similar.
            </summary>
            <param name="curveA">First curve used in comparison.</param>
            <param name="curveB">Second curve used in comparison.</param>
            <param name="ignoreParameterization">if true, parameterization and orientaion are ignored.</param>
            <param name="tolerance">tolerance to use when comparing control points.</param>
            <returns>true if curves are similar within tolerance.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.Create(System.Boolean,System.Int32,System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Constructs a 3D NURBS curve from a list of control points.
            </summary>
            <param name="periodic">If true, create a periodic uniform curve. If false, create a clamped uniform curve.</param>
            <param name="degree">(>=1) degree=order-1.</param>
            <param name="points">control vertex locations.</param>
            <returns>
            new NURBS curve on success
            null on error.
            </returns>
            <example>
            <code source='examples\vbnet\ex_addnurbscurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnurbscurve.cs' lang='cs'/>
            <code source='examples\py\ex_addnurbscurve.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.#ctor(Rhino.Geometry.NurbsCurve)">
            <summary>
            Initializes a NURBS curve by copying its values from another NURBS curve.
            </summary>
            <param name="other">The other curve. This value can be null.</param>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Protected constructor for internal use.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.#ctor(System.Int32,System.Int32)">
            <summary>
            Constructs a new Nurbscurve with a specific degree and control-point count.
            </summary>
            <param name="degree">Degree of curve. Must be equal to or larger than 1 and smaller than or equal to 11.</param>
            <param name="pointCount">Number of control-points.</param>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.#ctor(System.Int32,System.Boolean,System.Int32,System.Int32)">
            <summary>
            Constructs a new NurbsCurve with knot and CV memory allocated.
            </summary>
            <param name="dimension">&gt;=1.</param>
            <param name="rational">true to make a rational NURBS.</param>
            <param name="order">(&gt;= 2) The order=degree+1.</param>
            <param name="pointCount">(&gt;= order) number of control vertices.</param>
            <example>
            <code source='examples\vbnet\ex_addnurbscircle.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnurbscircle.cs' lang='cs'/>
            <code source='examples\py\ex_addnurbscircle.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.IncreaseDegree(System.Int32)">
            <summary>
            Increase the degree of this curve.
            </summary>
            <param name="desiredDegree">The desired degree. 
            Degrees should be number between and including 1 and 11.</param>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_nurbscurveincreasedegree.vb' lang='vbnet'/>
            <code source='examples\cs\ex_nurbscurveincreasedegree.cs' lang='cs'/>
            <code source='examples\py\ex_nurbscurveincreasedegree.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.MakePiecewiseBezier(System.Boolean)">
            <summary>
            Clamps ends and adds knots so the NURBS curve has bezier spans 
            (all distinct knots have multiplitity = degree).
            </summary>
            <param name="setEndWeightsToOne">
            If true and the first or last weight is not one, then the first and
            last spans are reparameterized so that the end weights are one.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.Reparameterize(System.Double)">
            <summary>
            Use a linear fractional transformation to reparameterize the NURBS curve.
            This does not change the curve's domain.
            </summary>
            <param name="c">
            reparameterization constant (generally speaking, c should be > 0). The
            control points and knots are adjusted so that
            output_nurbs(t) = input_nurbs(lambda(t)), where lambda(t) = c*t/( (c-1)*t + 1 ).
            Note that lambda(0) = 0, lambda(1) = 1, lambda'(t) > 0, 
            lambda'(0) = c and lambda'(1) = 1/c.
            </param>
            <returns>true if successful.</returns>
            <remarks>
            The cv and knot values are values are changed so that output_nurbs(t) = input_nurbs(lambda(t)).
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.GrevilleParameter(System.Int32)">
            <summary>
            Gets the greville (edit point) parameter that belongs 
            to the control point at the specified index.
            </summary>
            <param name="index">Index of Greville (Edit) point.</param>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.GrevillePoint(System.Int32)">
            <summary>
            Gets the greville (edit point) parameter that belongs 
            to the control point at the specified index.
            </summary>
            <param name="index">Index of Greville (Edit) point.</param>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.GrevilleParameters">
            <summary>
            Gets all Greville (Edit point) parameters for this curve.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.GrevillePoints">
            <summary>
            Gets all Greville (Edit) points for this curve.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.EpsilonEquals(Rhino.Geometry.NurbsCurve,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.CreateSpiral(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Creates a C1 cubic NURBS approximation of a helix or spiral. For a helix,
            you may have radius0 == radius1. For a spiral radius0 == radius0 produces
            a circle. Zero and negative radii are permissible.
            </summary>
            <param name="axisStart">Helix's axis starting point or center of spiral.</param>
            <param name="axisDir">Helix's axis vector or normal to spiral's plane.</param>
            <param name="radiusPoint">
            Point used only to get a vector that is perpedicular to the axis. In
            particular, this vector must not be (anti)parallel to the axis vector.
            </param>
            <param name="pitch">
            The pitch, where a spiral has a pitch = 0, and pitch > 0 is the distance
            between the helix's "threads".
            </param>
            <param name="turnCount">The number of turns in spiral or helix. Positive
            values produce counter-clockwise orientation, negitive values produce
            clockwise orientation. Note, for a helix, turnCount * pitch = length of
            the helix's axis.
            </param>
            <param name="radius0">The starting radius.</param>
            <param name="radius1">The ending radius.</param>
            <returns>NurbsCurve on success, null on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.NurbsCurve.CreateSpiral(Rhino.Geometry.Curve,System.Double,System.Double,Rhino.Geometry.Point3d,System.Double,System.Double,System.Double,System.Double,System.Int32)">
            <summary>
            Create a C2 non-rational uniform cubic NURBS approximation of a swept helix or spiral.
            </summary>
            <param name="railCurve">The rail curve.</param>
            <param name="t0">Starting portion of rail curve's domain to sweep along.</param>
            <param name="t1">Ending portion of rail curve's domain to sweep along.</param>
            <param name="radiusPoint">
            Point used only to get a vector that is perpedicular to the axis. In
            particular, this vector must not be (anti)parallel to the axis vector.
            </param>
            <param name="pitch">
            The pitch. Positive values produce counter-clockwise orientation,
            negative values produce clockwise orientation.
            </param>
            <param name="turnCount">
            The turn count. If != 0, then the resulting helix will have this many
            turns. If = 0, then pitch must be != 0 and the approximate distance
            between turns will be set to pitch. Positive values produce counter-clockwise
            orientation, negitive values produce clockwise orientation.
            </param>
            <param name="radius0">
            The starting radius. At least one radii must benonzero. Negative values
            are allowed.
            </param>
            <param name="radius1">
            The ending radius. At least ont radii must be nonzero. Negative values
            are allowed.
            </param>
            <param name="pointsPerTurn">
            Number of points to intepolate per turn. Must be greater than 4.
            When in doubt, use 12.
            </param>
            <returns>NurbsCurve on success, null on failure.</returns>
        </member>
        <member name="P:Rhino.Geometry.NurbsCurve.Order">
            <summary>
            Gets the order of the curve. Order = Degree + 1.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.NurbsCurve.IsRational">
            <summary>
            Gets a value indicating whether or not the curve is rational. 
            Rational curves have control-points with custom weights.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.NurbsCurve.Knots">
            <summary>
            Gets access to the knots (or "knot vector") of this nurbs curve.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addnurbscircle.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnurbscircle.cs' lang='cs'/>
            <code source='examples\py\ex_addnurbscircle.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.NurbsCurve.Points">
            <summary>
            Gets access to the control points of this nurbs curve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.NurbsCurve.HasBezierSpans">
            <summary>
            Returns true if the NURBS curve has bezier spans (all distinct knots have multiplitity = degree)
            </summary>
        </member>
        <member name="T:Rhino.Geometry.ControlPoint">
            <summary>
            Represents control-point geometry with three-dimensional position and weight.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new unweighted control point.
            </summary>
            <param name="x">X coordinate of Control Point.</param>
            <param name="y">Y coordinate of Control Point.</param>
            <param name="z">Z coordinate of Control Point.</param>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new weighted control point.
            </summary>
            <param name="x">X coordinate of Control Point.</param>
            <param name="y">Y coordinate of Control Point.</param>
            <param name="z">Z coordinate of Control Point.</param>
            <param name="weight">Weight factor of Control Point. 
            You should not use weights equal to or less than zero.</param>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.#ctor(Rhino.Geometry.Point3d)">
            <summary>
            Constructs a new unweighted control point.
            </summary>
            <param name="pt">Coordinate of Control Point.</param>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.#ctor(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Constructs a new weighted control point.
            </summary>
            <param name="pt">Coordinate of Control Point.</param>
            <param name="weight">Weight factor of Control Point. 
            You should not use weights equal to or less than zero.</param>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.#ctor(Rhino.Geometry.Point4d)">
            <summary>
            Constructs a new weighted control point.
            </summary>
            <param name="pt">Control point values.</param>
        </member>
        <member name="M:Rhino.Geometry.ControlPoint.EpsilonEquals(Rhino.Geometry.ControlPoint,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.ControlPoint.Unset">
            <summary>
            Gets the predefined unset control point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ControlPoint.Location">
            <summary>
            Gets or sets the location of the control point. 
            Internally, Rhino stores the location of a weighted control-point 
            as a pre-multiplied coordinate, but RhinoCommon always provides 
            Euclidean coordinates for control-points, regardless of weight.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ControlPoint.Weight">
            <summary>
            Gets or sets the weight of this control point.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Collections.NurbsCurveKnotList">
            <summary>
            Provides access to the knot vector of a nurbs curve.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.EnsurePrivateCopy">
            <summary>
            If you want to keep a copy of this class around by holding onto it in a variable after a command
            completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can
            call this function as many times as you want.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.InsertKnot(System.Double)">
            <summary>
            Inserts a knot and update control point locations.
            Does not change parameterization or locus of curve.
            </summary>
            <param name="value">Knot value to insert.</param>
            <returns>true on success, false on failure.</returns>
            <example>
            <code source='examples\vbnet\ex_insertknot.vb' lang='vbnet'/>
            <code source='examples\cs\ex_insertknot.cs' lang='cs'/>
            <code source='examples\py\ex_insertknot.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.InsertKnot(System.Double,System.Int32)">
            <summary>
            Inserts a knot and update control point locations.
            Does not change parameterization or locus of curve.
            </summary>
            <param name="value">Knot value to insert.</param>
            <param name="multiplicity">Multiplicity of knot to insert.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.KnotMultiplicity(System.Int32)">
            <summary>Get knot multiplicity.</summary>
            <param name="index">Index of knot to query.</param>
            <returns>The multiplicity (valence) of the knot.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.CreateUniformKnots(System.Double)">
            <summary>
            Compute a clamped, uniform knot vector based on the current
            degree and control point count. Does not change values of control
            vertices.
            </summary>
            <param name="knotSpacing">Spacing of subsequent knots.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.CreatePeriodicKnots(System.Double)">
            <summary>
            Compute a clamped, uniform, periodic knot vector based on the current
            degree and control point count. Does not change values of control
            vertices.
            </summary>
            <param name="knotSpacing">Spacing of subsequent knots.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.ClampEnd(Rhino.Geometry.CurveEnd)">
            <summary>
            Clamp end knots. Does not modify control point locations.
            </summary>
            <param name="end">Curve end to clamp.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.SuperfluousKnot(System.Boolean)">
            <summary>
            Computes the knots that are superfluous because they are not used in NURBs evaluation.
            These make it appear so that the first and last curve spans are different from interior spans.
            <para>http://wiki.mcneel.com/developer/onsuperfluousknot</para>
            </summary>
            <param name="start">true if the query targets the first knot. Otherwise, the last knot.</param>
            <returns>A component.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurveKnotList.EpsilonEquals(Rhino.Geometry.Collections.NurbsCurveKnotList,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurveKnotList.Count">
            <summary>Total number of knots in this curve.</summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurveKnotList.Item(System.Int32)">
            <summary>
            Gets or sets the knot vector value at the given index.
            </summary>
            <param name="index">Index of knot to access.</param>
            <returns>The knot value at [index]</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurveKnotList.IsClampedStart">
            <summary>
            Gets a value indicating whether or not the knot vector is clamped at the start of the curve. 
            Clamped curves start at the first control-point. This requires fully multiple knots.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurveKnotList.IsClampedEnd">
            <summary>
            Gets a value indicating whether or not the knot vector is clamped at the end of the curve. 
            Clamped curves are coincident with the first and last control-point. This requires fully multiple knots.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Collections.NurbsCurvePointList">
            <summary>
            Provides access to the control points of a nurbs curve.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.EnsurePrivateCopy">
            <summary>
            If you want to keep a copy of this class around by holding onto it in a variable after a command
            completes, call EnsurePrivateCopy to make sure that this class is not tied to the document. You can
            call this function as many times as you want.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.ControlPolygon">
            <summary>
            Constructs a polyline through all the control points. 
            Note that periodic curves generate a closed polyline with <i>fewer</i> 
            points than control-points.
            </summary>
            <returns>A polyline connecting all control points.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.ChangeEndWeights(System.Double,System.Double)">
             <summary>
             Use a combination of scaling and reparameterization to change the end weights to the specified values.
             </summary>
             <param name="w0">Weight for first control point.</param>
             <param name="w1">Weight for last control point.</param>
             <returns>true on success, false on failure.</returns>
            <remarks>
             The domain, euclidean locations of the control points, and locus of the curve
             do not change, but the weights, homogeneous cv values and internal knot values
             may change. If w0 and w1 are 1 and the curve is not rational, the curve is not changed.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.MakeRational">
            <summary>
            Turns the curve into a Rational nurbs curve.
            </summary>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.MakeNonRational">
            <summary>
            Sets all the control points to 1.0.
            </summary>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(System.Int32,System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets a specific control-point.
            </summary>
            <param name="index">Index of control-point to set.</param>
            <param name="x">X coordinate of control-point.</param>
            <param name="y">Y coordinate of control-point.</param>
            <param name="z">Z coordinate of control-point.</param>
            <param name="weight">Weight of control-point.</param>
            <example>
            <code source='examples\vbnet\ex_addnurbscircle.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnurbscircle.cs' lang='cs'/>
            <code source='examples\py\ex_addnurbscircle.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(System.Int32,Rhino.Geometry.Point3d)">
            <summary>
            Sets a specific control-point.
            </summary>
            <param name="index">Index of control-point to set.</param>
            <param name="point">Coordinate of control-point.</param>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.SetPoint(System.Int32,Rhino.Geometry.Point4d)">
            <summary>
            Sets a specific weighted control-point.
            </summary>
            <param name="index">Index of control-point to set.</param>
            <param name="point">Coordinate and weight of control-point.</param>
        </member>
        <member name="M:Rhino.Geometry.Collections.NurbsCurvePointList.EpsilonEquals(Rhino.Geometry.Collections.NurbsCurvePointList,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurvePointList.Count">
            <summary>
            Gets the number of control points in this curve.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurvePointList.Item(System.Int32)">
            <summary>
            Gets or sets the control point location at the given index.
            </summary>
            <param name="index">Index of control vertex to access.</param>
            <returns>The control vertex at [index]</returns>
        </member>
        <member name="P:Rhino.Geometry.Collections.NurbsCurvePointList.ControlPolygonLength">
            <summary>
            Gets the length of the polyline connecting all control points.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.PlaneFitResult">
            <summary>
            Enumerates all possible outcomes of a Least-Squares plane fitting operation.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PlaneFitResult.Failure">
            <summary>
            No plane could be found.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PlaneFitResult.Success">
            <summary>
            A plane was successfully fitted.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.PlaneFitResult.Inconclusive">
            <summary>
            A valid plane was found, but it is an inconclusive result. 
            This might happen with co-linear points for example.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Plane">
            <summary>
            Represents the value of a center point and two axes in a plane in three dimensions.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Plane.#ctor(Rhino.Geometry.Plane)">
            <summary>Copy constructor.
            <para>This is nothing special and performs the same as assigning to another variable.</para>
            </summary>
            <param name="other">The source plane value.</param>
        </member>
        <member name="M:Rhino.Geometry.Plane.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Constructs a plane from a point and a normal vector.
            </summary>
            <param name="origin">Origin point of the plane.</param>
            <param name="normal">Non-zero normal to the plane.</param>
            <seealso>CreateFromNormal</seealso>
            <example>
            <code source='examples\vbnet\ex_addcylinder.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addcylinder.cs' lang='cs'/>
            <code source='examples\py\ex_addcylinder.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Plane.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Constructs a plane from a point and two vectors in the plane.
            </summary>
            <param name='origin'>Origin point of the plane.</param>
            <param name='xDirection'>
            Non-zero vector in the plane that determines the x-axis direction.
            </param>
            <param name='yDirection'>
            Non-zero vector not parallel to x_dir that is used to determine the
            yaxis direction. y_dir does not need to be perpendicular to x_dir.
            </param>
        </member>
        <member name="M:Rhino.Geometry.Plane.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Initializes a plane from three non-colinear points.
            </summary>
            <param name='origin'>Origin point of the plane.</param>
            <param name='xPoint'>
            Second point in the plane. The x-axis will be parallel to x_point-origin.
            </param>
            <param name='yPoint'>
            Third point on the plane that is not colinear with the first two points.
            yaxis*(y_point-origin) will be &gt; 0.
            </param>
            <example>
            <code source='examples\vbnet\ex_addclippingplane.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addclippingplane.cs' lang='cs'/>
            <code source='examples\py\ex_addclippingplane.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Plane.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a plane from an equation
            ax+by+cz=d.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Plane.FitPlaneToPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.Geometry.Plane@)">
            <summary>Fit a plane through a collection of points.</summary>
            <param name="points">Points to fit to.</param>
            <param name="plane">Resulting plane.</param>
            <returns>A value indicating the result of the operation.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.FitPlaneToPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},Rhino.Geometry.Plane@,System.Double@)">
            <summary>Fit a plane through a collection of points.</summary>
            <param name="points">Points to fit to.</param>
            <param name="plane">Resulting plane.</param>
            <param name="maximumDeviation">The distance from the furthest point to the plane.</param>
            <returns>A value indicating the result of the operation.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.op_Equality(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
            <summary>
            Determines if two planes are equal.
            </summary>
            <param name="a">A first plane.</param>
            <param name="b">A second plane.</param>
            <returns>true if the two planes have all equal components; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.op_Inequality(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
            <summary>
            Determines if two planes are different.
            </summary>
            <param name="a">A first plane.</param>
            <param name="b">A second plane.</param>
            <returns>true if the two planes have any different componet components; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.Equals(System.Object)">
            <summary>
            Determines if an object is a plane and has the same components as this plane.
            </summary>
            <param name="obj">An object.</param>
            <returns>true if obj is a plane and has the same components as this plane; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.Equals(Rhino.Geometry.Plane)">
            <summary>
            Determines if another plane has the same components as this plane.
            </summary>
            <param name="plane">A plane.</param>
            <returns>true if plane has the same components as this plane; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.GetHashCode">
            <summary>
            Gets a non-unique hashing code for this entity.
            </summary>
            <returns>A particular number for a specific instance of plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.ToString">
            <summary>
            Constructs the string representation of this plane.
            </summary>
            <returns>Text.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.GetPlaneEquation">
            <summary>
            Gets the plane equation for this plane in the format of Ax+By+Cz+D=0.
            </summary>
            <returns>
            Array of four values.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.ValueAt(Rhino.Geometry.Point3d)">
            <summary>
            Get the value of the plane equation at the point.
            </summary>
            <param name="p">evaulation point.</param>
            <returns>returns pe[0]*p.X + pe[1]*p.Y + pe[2]*p.Z + pe[3] where
            pe[0], pe[1], pe[2] and pe[3] are the coeeficients of the plane equation.
            
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.PointAt(System.Double,System.Double)">
            <summary>
            Evaluate a point on the plane.
            </summary>
            <param name="u">evaulation parameter.</param>
            <param name="v">evaulation parameter.</param>
            <returns>plane.origin + u*plane.xaxis + v*plane.yaxis.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.PointAt(System.Double,System.Double,System.Double)">
            <summary>
            Evaluate a point on the plane.
            </summary>
            <param name="u">evaulation parameter.</param>
            <param name="v">evaulation parameter.</param>
            <param name="w">evaulation parameter.</param>
            <returns>plane.origin + u*plane.xaxis + v*plane.yaxis + z*plane.zaxis.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.ExtendThroughBox(Rhino.Geometry.BoundingBox,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@)">
            <summary>
            Extends this plane through a bounding box. 
            </summary>
            <param name="box">A box to use as minimal extension boundary.</param>
            <param name="s">
            If this function returns true, 
            the s parameter returns the Interval on the plane along the X direction that will 
            encompass the Box.
            </param>
            <param name="t">
            If this function returns true, 
            the t parameter returns the Interval on the plane along the Y direction that will 
            encompass the Box.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.ExtendThroughBox(Rhino.Geometry.Box,Rhino.Geometry.Interval@,Rhino.Geometry.Interval@)">
            <summary>
            Extend this plane through a Box. 
            </summary>
            <param name="box">A box to use for extension.</param>
            <param name="s">
            If this function returns true, 
            the s parameter returns the Interval on the plane along the X direction that will 
            encompass the Box.
            </param>
            <param name="t">
            If this function returns true, 
            the t parameter returns the Interval on the plane along the Y direction that will 
            encompass the Box.
            </param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.ClosestParameter(Rhino.Geometry.Point3d,System.Double@,System.Double@)">
            <summary>
            Gets the parameters of the point on the plane closest to a test point.
            </summary>
            <param name="testPoint">Point to get close to.</param>
            <param name="s">Parameter along plane X-direction.</param>
            <param name="t">Parameter along plane Y-direction.</param>
            <returns>
            true if a parameter could be found, 
            false if the point could not be projected successfully.
            </returns>
            <example>
            <code source='examples\vbnet\ex_addlineardimension2.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlineardimension2.cs' lang='cs'/>
            <code source='examples\py\ex_addlineardimension2.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Plane.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Gets the point on the plane closest to a test point.
            </summary>
            <param name="testPoint">Point to get close to.</param>
            <returns>
            The point on the plane that is closest to testPoint, 
            or Point3d.Unset on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.DistanceTo(Rhino.Geometry.Point3d)">
            <summary>
            Returns the signed distance from testPoint to its projection onto this plane. 
            If the point is below the plane, a negative distance is returned.
            </summary>
            <param name="testPoint">Point to test.</param>
            <returns>Signed distance from this plane to testPoint.</returns>
            <example>
            <code source='examples\vbnet\ex_issurfaceinplane.vb' lang='vbnet'/>
            <code source='examples\cs\ex_issurfaceinplane.cs' lang='cs'/>
            <code source='examples\py\ex_issurfaceinplane.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Plane.RemapToPlaneSpace(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d@)">
            <summary>
            Convert a point from World space coordinates into Plane space coordinates.
            </summary>
            <param name="ptSample">World point to remap.</param>
            <param name="ptPlane">Point in plane (s,t,d) coordinates.</param>
            <returns>true on success, false on failure.</returns>
            <remarks>D stands for distance, not disease.</remarks>
        </member>
        <member name="M:Rhino.Geometry.Plane.Flip">
            <summary>
            Flip this plane by swapping out the X and Y axes and inverting the Z axis.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Plane.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transform the plane with a Transformation matrix.
            </summary>
            <param name="xform">Transformation to apply to plane.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.Translate(Rhino.Geometry.Vector3d)">
            <summary>
            Translate (move) the plane along a vector.
            </summary>
            <param name="delta">Translation (motion) vector.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.Rotate(System.Double,System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotate the plane about its origin point.
            </summary>
            <param name="sinAngle">Sin(angle).</param>
            <param name="cosAngle">Cos(angle).</param>
            <param name="axis">Axis of rotation.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.Rotate(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotate the plane about its origin point.
            </summary>
            <param name="angle">Angle in radians.</param>
            <param name="axis">Axis of rotation.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.Rotate(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotate the plane about a custom anchor point.
            </summary>
            <param name="angle">Angle in radians.</param>
            <param name="axis">Axis of rotation.</param>
            <param name="centerOfRotation">Center of rotation.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.Rotate(System.Double,System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>Rotate the plane about a custom anchor point.</summary>
            <param name="sinAngle">Sin(angle)</param>
            <param name="cosAngle">Cos(angle)</param>
            <param name="axis">Axis of rotation.</param>
            <param name="centerOfRotation">Center of rotation.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Plane.EpsilonEquals(Rhino.Geometry.Plane,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.Plane.Origin">
            <summary>
            Gets or sets the origin point of this plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.OriginX">
            <summary>
            Gets or sets the X coordinate of the origin of this plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.OriginY">
            <summary>
            Gets or sets the Y coordinate of the origin of this plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.OriginZ">
            <summary>
            Gets or sets the Z coordinate of the origin of this plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.XAxis">
            <summary>
            Gets or sets the X axis vector of this plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.YAxis">
            <summary>
            Gets or sets the Y axis vector of this plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.ZAxis">
            <summary>
            Gets or sets the Z axis vector of this plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.WorldXY">
            <summary>
            plane coincident with the World XY plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.WorldYZ">
            <summary>
            plane coincident with the World YZ plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.WorldZX">
            <summary>
            plane coincident with the World ZX plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.Unset">
            <summary>
            Gets a plane that contains Unset origin and axis vectors.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.Normal">
            <summary>
            Gets the normal of this plane. This is essentially the ZAxis of the plane.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Plane.IsValid">
            <summary>
            Gets a value indicating whether or not this is a valid plane. 
            A plane is considered to be valid when all fields contain reasonable 
            information and the equation jibes with point and zaxis.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Point2f">
            <summary>
            Represents the two coordinates of a point in two-dimensional space,
            using <see cref="T:System.Single"/>-precision floating point numbers.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point2f.#ctor(System.Single,System.Single)">
            <summary>
            Initializes a new two-dimensional point from two components.
            </summary>
            <param name="x">X component of vector.</param>
            <param name="y">Y component of vector.</param>
        </member>
        <member name="M:Rhino.Geometry.Point2f.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new two-dimensional point from two double-precision floating point numbers as coordinates.
            <para>Coordinates will be internally converted to floating point numbers. This might cause precision loss.</para>
            </summary>
            <param name="x">X component of vector.</param>
            <param name="y">Y component of vector.</param>
        </member>
        <member name="M:Rhino.Geometry.Point2f.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is a <see cref="T:Rhino.Geometry.Point2f"/> and has the same values as the present point.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is Point2f and has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.Equals(Rhino.Geometry.Point2f)">
            <summary>
            Determines whether the specified <see cref="T:Rhino.Geometry.Point2f"/> has the same values as the present point.
            </summary>
            <param name="point">The specified point.</param>
            <returns>true if point has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.EpsilonEquals(Rhino.Geometry.Point2f,System.Single)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.CompareTo(Rhino.Geometry.Point2f)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.Point2f"/> with another <see cref="T:Rhino.Geometry.Point2f"/>.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.Point2f"/> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this.X &lt; other.X</para>
            <para>-1: if this.X == other.X and this.Y &lt; other.Y</para>
            <para>+1: otherwise.</para>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.GetHashCode">
            <summary>
            Computes a hash number that represents the current point.
            </summary>
            <returns>A hash code that is not unique for each point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.ToString">
            <summary>
            Constructs the string representation for the current point.
            </summary>
            <returns>The point representation in the form X,Y.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.op_Equality(Rhino.Geometry.Point2f,Rhino.Geometry.Point2f)">
            <summary>
            Determines whether two <see cref="T:Rhino.Geometry.Point2f"/> have equal values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the coordinates of the two points are exactly equal; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.op_Inequality(Rhino.Geometry.Point2f,Rhino.Geometry.Point2f)">
            <summary>
            Determines whether two <see cref="T:Rhino.Geometry.Point2f"/> have different values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the two points differ in any coordinate; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.op_LessThan(Rhino.Geometry.Point2f,Rhino.Geometry.Point2f)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Point2f"/> comes before
            (has inferior sorting value than) the second point.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>true if a.X is smaller than b.X, or a.X == b.X and a.Y is smaller than b.Y; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.op_LessThanOrEqual(Rhino.Geometry.Point2f,Rhino.Geometry.Point2f)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Point2f"/> comes before
            (has inferior sorting value than) the second point, or it is equal to it.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>true if a.X is smaller than b.X, or a.X == b.X and a.Y &lt;= b.Y; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.op_GreaterThan(Rhino.Geometry.Point2f,Rhino.Geometry.Point2f)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Point2f"/> comes after
            (has superior sorting value than) the second point.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>true if a.X is larger than b.X, or a.X == b.X and a.Y is larger than b.Y; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2f.op_GreaterThanOrEqual(Rhino.Geometry.Point2f,Rhino.Geometry.Point2f)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Point2f"/> comes after
            (has superior sorting value than) the second point, or it is equal to it.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>true if a.X is larger than b.X, or a.X == b.X and a.Y &gt;= b.Y; otherwise, false.</returns>
        </member>
        <member name="P:Rhino.Geometry.Point2f.Unset">
            <summary>
            Gets the standard unset point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point2f.IsValid">
            <summary>
            Gets a value indicating whether this point is considered valid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point2f.X">
            <summary>
            Gets or sets the X (first) component of the vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point2f.Y">
            <summary>
            Gets or sets the Y (second) component of the vector.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Point3f">
            <summary>
            Represents the three coordinates of a point in three-dimensional space,
            using <see cref="T:System.Single"/>-precision floating point numbers.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Initializes a new two-dimensional vector from two components.
            </summary>
            <param name="x">X component of vector.</param>
            <param name="y">Y component of vector.</param>
            <param name="z">Z component of vector.</param>
        </member>
        <member name="M:Rhino.Geometry.Point3f.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is a Point3f and has the same values as the present point.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is Point3f and has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.Equals(Rhino.Geometry.Point3f)">
            <summary>
            Determines whether the specified Point3f has the same values as the present point.
            </summary>
            <param name="point">The specified point.</param>
            <returns>true if point has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.EpsilonEquals(Rhino.Geometry.Point3f,System.Single)">
            <summary>
            Check that all values in other are withing epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.CompareTo(Rhino.Geometry.Point3f)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.Point3f"/> with another <see cref="T:Rhino.Geometry.Point3f"/>.
            <para>Component evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.Point3d"/> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this.X &lt; other.X</para>
            <para>-1: if this.X == other.X and this.Y &lt; other.Y</para>
            <para>-1: if this.X == other.X and this.Y == other.Y and this.Z &lt; other.Z</para>
            <para>+1: otherwise.</para>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.GetHashCode">
            <summary>
            Computes a hash code for the present point.
            </summary>
            <returns>A non-unique integer that represents this point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.ToString">
            <summary>
            Constructs the string representation for the current point.
            </summary>
            <returns>The point representation in the form X,Y,Z.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.DistanceTo(Rhino.Geometry.Point3f)">
            <summary>
            Computes the distance between two points.
            </summary>
            <param name="other">Other point for distance measurement.</param>
            <returns>The length of the line between this and the other point; or 0 if any of the points is not valid.</returns>
            <example>
            <code source='examples\vbnet\ex_intersectcurves.vb' lang='vbnet'/>
            <code source='examples\cs\ex_intersectcurves.cs' lang='cs'/>
            <code source='examples\py\ex_intersectcurves.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Point3f.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the present point in place. The transformation matrix acts on the left of the point. i.e.,
            <para>result = transformation*point</para>
            </summary>
            <param name="xform">Transformation to apply.</param>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_Equality(Rhino.Geometry.Point3f,Rhino.Geometry.Point3f)">
            <summary>
            Determines whether two points have equal values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the coordinates of the two points are exactly equal; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_Inequality(Rhino.Geometry.Point3f,Rhino.Geometry.Point3f)">
            <summary>
            Determines whether two points have different values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the two points differ in any coordinate; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_LessThan(Rhino.Geometry.Point3f,Rhino.Geometry.Point3f)">
            <summary>
            Determines whether the first specified point comes before (has inferior sorting value than) the second point.
            <para>Coordinates evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if a.X is smaller than b.X,
            or a.X == b.X and a.Y is smaller than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z is smaller than b.Z;
            otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_LessThanOrEqual(Rhino.Geometry.Point3f,Rhino.Geometry.Point3f)">
            <summary>
            Determines whether the first specified point comes before
            (has inferior sorting value than) the second point, or it is equal to it.
            <para>Coordinates evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if a.X is smaller than b.X,
            or a.X == b.X and a.Y is smaller than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z &lt;= b.Z;
            otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_GreaterThan(Rhino.Geometry.Point3f,Rhino.Geometry.Point3f)">
            <summary>
            Determines whether the first specified point comes after (has superior sorting value than) the second point.
            <para>Coordinates evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if a.X is larger than b.X,
            or a.X == b.X and a.Y is larger than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z is larger than b.Z;
            otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_GreaterThanOrEqual(Rhino.Geometry.Point3f,Rhino.Geometry.Point3f)">
            <summary>
            Determines whether the first specified point comes after
            (has superior sorting value than) the second point, or it is equal to it.
            <para>Coordinates evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if a.X is larger than b.X,
            or a.X == b.X and a.Y is larger than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z &gt;= b.Z;
            otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.op_Subtraction(Rhino.Geometry.Point3f,Rhino.Geometry.Point3f)">
            <summary>
            Subtracts a point from another point.
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">Another point.</param>
            <returns>A new vector that is the difference of point minus vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3f.Subtract(Rhino.Geometry.Point3f,Rhino.Geometry.Point3f)">
            <summary>
            Subtracts a point from another point.
            <para>(Provided for languages that do not support operator overloading. You can use the - operator otherwise)</para>
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">Another point.</param>
            <returns>A new vector that is the difference of point minus vector.</returns>
        </member>
        <member name="P:Rhino.Geometry.Point3f.Origin">
            <summary>
            Gets the value of a point at location 0,0,0.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point3f.Unset">
            <summary>
            Gets the value of a point at location RhinoMath.UnsetValue,RhinoMath.UnsetValue,RhinoMath.UnsetValue.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point3f.X">
            <summary>
            Gets or sets the X (first) component of the vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point3f.Y">
            <summary>
            Gets or sets the Y (second) component of the vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point3f.Z">
            <summary>
            Gets or sets the Z (third) component of the vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point3f.IsValid">
            <summary>
            Each coordinate of the point must pass the <see cref="M:Rhino.RhinoMath.IsValidSingle(System.Single)"/> test.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Vector2f">
            <summary>
            Represents the two components of a vector in two-dimensional space,
            using <see cref="T:System.Single"/>-precision floating point numbers.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is a Vector2f and has the same values as the present vector.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is Vector2f and has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.Equals(Rhino.Geometry.Vector2f)">
            <summary>
            Determines whether the specified vector has the same values as the present vector.
            </summary>
            <param name="vector">The specified vector.</param>
            <returns>true if obj is Vector2f and has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.EpsilonEquals(Rhino.Geometry.Vector2f,System.Single)">
            <summary>
            Check that all values in other are withing epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.CompareTo(Rhino.Geometry.Vector2f)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.Vector2f"/> with another <see cref="T:Rhino.Geometry.Vector2f"/>.
            <para>Components evaluation priority is first X, then Y.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.Vector2f"/> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this.X &lt; other.X</para>
            <para>-1: if this.X == other.X and this.Y &lt; other.Y</para>
            <para>+1: otherwise.</para>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.GetHashCode">
            <summary>
            Computes a hash number that represents the current vector.
            </summary>
            <returns>A hash code that is not unique for each vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.ToString">
            <summary>
            Constructs the string representation of the current vector.
            </summary>
            <returns>The vector representation in the form X,Y,Z.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.op_Equality(Rhino.Geometry.Vector2f,Rhino.Geometry.Vector2f)">
            <summary>
            Determines whether two vectors have equal values.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if the components of the two vectors are exactly equal; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.op_Inequality(Rhino.Geometry.Vector2f,Rhino.Geometry.Vector2f)">
            <summary>
            Determines whether two vectors have different values.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if the two vectors differ in any component; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.op_LessThan(Rhino.Geometry.Vector2f,Rhino.Geometry.Vector2f)">
            <summary>
            Determines whether the first specified vector comes before
            (has inferior sorting value than) the second vector.
            <para>Components have decreasing evaluation priority: first X, then Y.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>true if a.X is smaller than b.X, or a.X == b.X and a.Y is smaller than b.Y; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.op_LessThanOrEqual(Rhino.Geometry.Vector2f,Rhino.Geometry.Vector2f)">
            <summary>
            Determines whether the first specified vector comes before
            (has inferior sorting value than) the second vector, or it is equal to it.
            <para>Components have decreasing evaluation priority: first X, then Y.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>true if a.X is smaller than b.X, or a.X == b.X and a.Y &lt;= b.Y; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.op_GreaterThan(Rhino.Geometry.Vector2f,Rhino.Geometry.Vector2f)">
            <summary>
            Determines whether the first specified vector comes after (has superior sorting value than) the second vector.
            <para>Components have decreasing evaluation priority: first X, then Y.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>true if a.X is larger than b.X, or a.X == b.X and a.Y is larger than b.Y; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2f.op_GreaterThanOrEqual(Rhino.Geometry.Vector2f,Rhino.Geometry.Vector2f)">
            <summary>
            Determines whether the first specified vector comes after
            (has superior sorting value than) the second vector, or it is equal to it.
            <para>Components have decreasing evaluation priority: first X, then Y.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>true if a.X is larger than b.X, or a.X == b.X and a.Y &gt;= b.Y; otherwise, false.</returns>
        </member>
        <member name="P:Rhino.Geometry.Vector2f.X">
            <summary>
            Gets or sets the X (first) component of this vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector2f.Y">
            <summary>
            Gets or sets the Y (second) component of this vector.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Vector3f">
            <summary>
            Represents the three components of a vector in three-dimensional space,
            using <see cref="T:System.Single"/>-precision floating point numbers.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.#ctor(System.Single,System.Single,System.Single)">
            <summary>
            Constructs a new vector from 3 single precision numbers.
            </summary>
            <param name="x">X component of vector.</param>
            <param name="y">Y component of vector.</param>
            <param name="z">Z component of vector.</param>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is a Vector3f and has the same values as the present vector.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is Vector3f and has the same components as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Equals(Rhino.Geometry.Vector3f)">
            <summary>
            Determines whether the specified vector has the same values as the present vector.
            </summary>
            <param name="vector">The specified vector.</param>
            <returns>true if vector has the same components as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.EpsilonEquals(Rhino.Geometry.Vector3f,System.Single)">
            <summary>
            Check that all values in other are withing epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.CompareTo(Rhino.Geometry.Vector3f)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.Vector3f"/> with another <see cref="T:Rhino.Geometry.Vector3f"/>.
            <para>Component evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.Vector3f"/> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this.X &lt; other.X</para>
            <para>-1: if this.X == other.X and this.Y &lt; other.Y</para>
            <para>-1: if this.X == other.X and this.Y == other.Y and this.Z &lt; other.Z</para>
            <para>+1: otherwise.</para>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.GetHashCode">
            <summary>
            Computes a hash number that represents the current vector.
            </summary>
            <returns>A hash code that is not unique for each vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.ToString">
            <summary>
            Constructs the string representation of the current vector.
            </summary>
            <returns>The vector representation in the form X,Y,Z.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Unitize">
            <summary>
            Unitizes the vector in place. A unit vector has length 1 unit. 
            <para>An invalid or zero length vector cannot be unitized.</para>
            </summary>
            <returns>true on success or false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the vector in place.
            <para>The transformation matrix acts on the left of the vector; i.e.,</para>
            <para>result = transformation*vector</para>
            </summary>
            <param name="transformation">Transformation matrix to apply.</param>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Rotate(System.Double,Rhino.Geometry.Vector3f)">
            <summary>
            Rotates this vector around a given axis.
            </summary>
            <param name="angleRadians">Angle of rotation (in radians).</param>
            <param name="rotationAxis">Axis of rotation.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Reverse">
            <summary>
             Reverses (inverts) this vector in place.
             <para>If this vector contains RhinoMath.UnsetValue, the 
             reverse will also be invalid and false will be returned.</para>
            </summary>
            <returns>true on success or false if the vector is invalid.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.PerpendicularTo(Rhino.Geometry.Vector3f)">
            <summary>
             Sets this vector to be perpendicular to another vector. 
             Result is not unitized.
            </summary>
             <param name="other">Vector to use as guide.</param>
            <returns>true on success, false if input vector is zero or invalid.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_Equality(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Determines whether two vectors have equal values.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if the components of the two vectors are exactly equal; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_Inequality(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Determines whether two vectors have different values.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if the two vectors differ in any component; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_LessThan(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Determines whether the first specified vector comes before
            (has inferior sorting value than) the second vector.
            <para>Components evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if a.X is smaller than b.X,
            or a.X == b.X and a.Y is smaller than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z is smaller than b.Z;
            otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_LessThanOrEqual(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Determines whether the first specified vector comes before
            (has inferior sorting value than) the second vector, or it is equal to it.
            <para>Components evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if a.X is smaller than b.X,
            or a.X == b.X and a.Y is smaller than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z &lt;= b.Z;
            otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_GreaterThan(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Determines whether the first specified vector comes after (has superior sorting value than)
            the second vector.
            <para>Components evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if a.X is larger than b.X,
            or a.X == b.X and a.Y is larger than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z is larger than b.Z;
            otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_GreaterThanOrEqual(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Determines whether the first specified vector comes after (has superior sorting value than)
            the second vector, or it is equal to it.
            <para>Components evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if a.X is larger than b.X,
            or a.X == b.X and a.Y is larger than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z &gt;= b.Z;
            otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_Addition(Rhino.Geometry.Point3f,Rhino.Geometry.Vector3f)">
            <summary>
            Sums up a point and a vector, and returns a new point.
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that results from the addition of point and vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Add(Rhino.Geometry.Point3f,Rhino.Geometry.Vector3f)">
            <summary>
            Sums up a point and a vector, and returns a new point.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that results from the addition of point and vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_Multiply(Rhino.Geometry.Vector3f,System.Single)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is the original vector coordinatewise multiplied by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Multiply(Rhino.Geometry.Vector3f,System.Single)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is the original vector coordinatewise multiplied by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.op_Multiply(System.Single,Rhino.Geometry.Vector3f)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            </summary>
            <param name="t">A number.</param>
            <param name="vector">A vector.</param>
            <returns>A new vector that is the original vector coordinatewise multiplied by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.Multiply(System.Single,Rhino.Geometry.Vector3f)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="t">A number.</param>
            <param name="vector">A vector.</param>
            <returns>A new vector that is the original vector coordinatewise multiplied by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3f.CrossProduct(Rhino.Geometry.Vector3f,Rhino.Geometry.Vector3f)">
            <summary>
            Computes the cross product (or vector product, or exterior product) of two vectors.
            <para>This operation is not commutative.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>A new vector that is perpendicular to both a and b,
            <para>has Length == a.Length * b.Length and</para>
            <para>with a result that is oriented following the right hand rule.</para>
            </returns>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.Zero">
            <summary>
            Gets the value of the vector with components 0,0,0.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.XAxis">
            <summary>
            Gets the value of the vector with components 1,0,0.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.YAxis">
            <summary>
            Gets the value of the vector with components 0,1,0.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.ZAxis">
            <summary>
            Gets the value of the vector with components 0,0,1.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.Unset">
            <summary>
            Gets the value of the vector with each component set to RhinoMath.UnsetValue.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.X">
            <summary>
            Gets or sets the X (first) component of this vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.Y">
            <summary>
            Gets or sets the Y (second) component of this vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.Z">
            <summary>
            Gets or sets the Z (third) component of this vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3f.Length">
            <summary>
            Computes the length (or magnitude, or size) of this vector.
            This is an application of Pythagoras' theorem.
            If this vector is invalid, its length is considered 0.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Quaternion">
            <summary>
            Represents the four coefficient values in a quaternion.
            <para>The first value <i>a</i> is the real part,
            while the rest multipies <i>i</i>, <i>j</i> and <i>k</i>, that are imaginary.</para>
            <para>quaternion = a + bi + cj + dk</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new quaternion with the provided coefficients.
            </summary>
            <param name="a">A number. This is the real part.</param>
            <param name="b">Another number. This is the first coefficient of the imaginary part.</param>
            <param name="c">Another number. This is the second coefficient of the imaginary part.</param>
            <param name="d">Another number. This is the third coefficient of the imaginary part.</param>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Equality(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            Determines whether two quaternions have the same value.
            </summary>
            <param name="a">A quaternion.</param>
            <param name="b">Another quaternion.</param>
            <returns>true if the quaternions have exactly equal coefficients; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Inequality(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            Determines whether two quaternions have different values.
            </summary>
            <param name="a">A quaternion.</param>
            <param name="b">Another quaternion.</param>
            <returns>true if the quaternions differ in any coefficient; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Equals(Rhino.Geometry.Quaternion)">
            <summary>
            Determines whether this quaternion has the same value of another quaternion.
            </summary>
            <param name="other">Another quaternion to compare.</param>
            <returns>true if the quaternions have exactly equal coefficients; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Equals(System.Object)">
            <summary>
            Determines whether an object is a quaternion and has the same value of this quaternion.
            </summary>
            <param name="obj">Another object to compare.</param>
            <returns>true if obj is a quaternion and has exactly equal coefficients; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.EpsilonEquals(Rhino.Geometry.Quaternion,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.GetHashCode">
            <summary>
            Gets a non-unique but repeatable hashing code for this quaternion.
            </summary>
            <returns>A signed number.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Set(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Sets all coefficients of the quaternion.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Multiply(Rhino.Geometry.Quaternion,System.Int32)">
            <summary>
            Multiplies (scales) all quaternion coefficients by a factor and returns a new quaternion with the result.
            </summary>
            <param name="q">A quaternion.</param>
            <param name="x">A number.</param>
            <returns>A new quaternion.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Multiply(Rhino.Geometry.Quaternion,System.Single)">
            <summary>
            Multiplies (scales) all quaternion coefficients by a factor and returns a new quaternion with the result.
            </summary>
            <param name="q">A quaternion.</param>
            <param name="x">A number.</param>
            <returns>A new quaternion.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Multiply(Rhino.Geometry.Quaternion,System.Double)">
            <summary>
            Multiplies (scales) all quaternion coefficients by a factor and returns a new quaternion with the result.
            </summary>
            <param name="q">A quaternion.</param>
            <param name="x">A number.</param>
            <returns>A new quaternion.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Division(Rhino.Geometry.Quaternion,System.Double)">
            <summary>
            Divides all quaternion coefficients by a factor and returns a new quaternion with the result.
            </summary>
            <param name="q">A quaternion.</param>
            <param name="y">A number.</param>
            <returns>A new quaternion.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Addition(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            Adds two quaternions.
            <para>This sums each quaternion coefficient with its correspondant and returns
            a new result quaternion.</para>
            </summary>
            <param name="a">A quaternion.</param>
            <param name="b">Another quaternion.</param>
            <returns>A new quaternion.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Subtraction(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            Subtracts a quaternion from another one.
            <para>This computes the difference of each quaternion coefficient with its
            correspondant and returns a new result quaternion.</para>
            </summary>
            <param name="a">A quaternion.</param>
            <param name="b">Another quaternion.</param>
            <returns>A new quaternion.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.op_Multiply(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            Multiplies a quaternion with another one.
            <para>Quaternion multiplication (Hamilton product) is not commutative.</para>
            </summary>
            <param name="a">The first term.</param>
            <param name="b">The second term.</param>
            <returns>A new quaternion.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Invert">
            <summary>
            Modifies this quaternion to become
            <para>(a/L2, -b/L2, -c/L2, -d/L2),</para>
            <para>where L2 = length squared = (a*a + b*b + c*c + d*d).</para>
            <para>This is the multiplicative inverse, i.e.,
            (a,b,c,d)*(a/L2, -b/L2, -c/L2, -d/L2) = (1,0,0,0).</para>
            </summary>
            <returns>
            true if successful. false if the quaternion is zero and cannot be inverted.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.DistanceTo(Rhino.Geometry.Quaternion)">
            <summary>
            Computes the distance or norm of the difference between this and another quaternion.
            </summary>
            <param name="q">Another quaternion.</param>
            <returns>(this - q).Length.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Distance(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            Returns the distance or norm of the difference between two quaternions.
            </summary>
            <param name="p">A quaternion.</param>
            <param name="q">Another quaternion.</param>
            <returns>(p - q).Length()</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.MatrixForm">
            <summary>
            Returns 4x4 real valued matrix form of the quaternion
            a  b  c  d
            -b  a -d  c
            -c  d  a -b
            -d -c  b  a
            which has the same arithmetic properties as the quaternion. 
            </summary>
            <returns>A transform value.</returns>
            <remarks>
            Do not confuse this with the rotation defined by the quaternion. This
            function will only be interesting to math nerds and is not useful in
            rendering or animation applications.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Unitize">
            <summary>
            Scales the quaternion's coordinates so that a*a + b*b + c*c + d*d = 1.
            </summary>
            <returns>
            true if successful.  false if the quaternion is zero and cannot be unitized.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.SetRotation(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Sets the quaternion to cos(angle/2), sin(angle/2)*x, sin(angle/2)*y, sin(angle/2)*z
            where (x,y,z) is the unit vector parallel to axis.  This is the unit quaternion
            that represents the rotation of angle about axis.
            </summary>
            <param name="angle">in radians.</param>
            <param name="axisOfRotation">The direction of the axis of rotation.</param>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Rotation(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Returns the unit quaternion
            cos(angle/2), sin(angle/2)*x, sin(angle/2)*y, sin(angle/2)*z
            where (x,y,z) is the unit vector parallel to axis.  This is the
            unit quaternion that represents the rotation of angle about axis.
            </summary>
            <param name="angle">An angle in radians.</param>
            <param name="axisOfRotation">The axis of rotation.</param>
            <returns>A new quaternion.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.SetRotation(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
            <summary>
            Sets the quaternion to the unit quaternion which rotates
            plane0.xaxis to plane1.xaxis, plane0.yaxis to plane1.yaxis,
            and plane0.zaxis to plane1.zaxis.
            </summary>
            <param name="plane0">The "from" rotation plane. Origin point is ignored.</param>
            <param name="plane1">The "to" rotation plane. Origin point is ignored.</param>
            <remarks>The plane origins are ignored</remarks>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Rotation(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
            <summary>
            Returns the unit quaternion that represents the the rotation that maps
            plane0.xaxis to plane1.xaxis, plane0.yaxis to plane1.yaxis, and 
            plane0.zaxis to plane1.zaxis.
            </summary>
            <param name="plane0">The first plane.</param>
            <param name="plane1">The second plane.</param>
            <returns>A quaternion value.</returns>
            <remarks>The plane origins are ignored</remarks>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.GetRotation(System.Double@,Rhino.Geometry.Vector3d@)">
            <summary>
            Returns the rotation defined by the quaternion.
            </summary>
            <param name="angle">An angle in radians.</param>
            <param name="axis">unit axis of rotation of 0 if (b,c,d) is the zero vector.</param>
            <returns>True if the operation succeeded; otherwise, false.</returns>
            <remarks>
            If the quaternion is not unitized, the rotation of its unitized form is returned.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.GetRotation(Rhino.Geometry.Plane@)">
            <summary>
            Returns the frame created by applying the quaternion's rotation
            to the canonical world frame (1,0,0),(0,1,0),(0,0,1).
            </summary>
            <param name="plane">A plane. This out value will be assigned during this call.</param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Rotate(Rhino.Geometry.Vector3d)">
            <summary>
            Rotates a 3d vector. This operation is also called conjugation,
            because the result is the same as
            (q.Conjugate()*(0,x,y,x)*q/q.LengthSquared).Vector.
            </summary>
            <param name="v">The vector to be rotated.</param>
            <returns>
            R*v, where R is the rotation defined by the unit quaternion.
            This is mathematically the same as the values
            (Inverse(q)*(0,x,y,z)*q).Vector
            and
            (q.Conjugate()*(0,x,y,x)*q/q.LengthSquared).Vector.
            </returns>
            <remarks>
            If you need to rotate more than a dozen or so vectors,
            it will be more efficient to calculate the rotation
            matrix once and use it repeatedly.
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.Product(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            The quaternion product of p and q.  This is the same value as p*q.
            </summary>
            <param name="p">The first trasform.</param>
            <param name="q">The second trasform.</param>
            <returns>A transform value.</returns>
        </member>
        <member name="M:Rhino.Geometry.Quaternion.CrossProduct(Rhino.Geometry.Quaternion,Rhino.Geometry.Quaternion)">
            <summary>
            Computes the vector cross product of p and q = (0,x,y,z),
            <para>where (x,y,z) = <see cref="M:Rhino.Geometry.Vector3d.CrossProduct(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">CrossProduct</see>(p.<see cref="P:Rhino.Geometry.Quaternion.Vector">Vector</see>,q.<see cref="P:Rhino.Geometry.Quaternion.Vector">Vector</see>).</para>
            <para>This <b>is not the same</b> as the quaternion product p*q.</para>
            </summary>
            <param name="p">A quaternion.</param>
            <param name="q">Another quaternion.</param>
            <returns>A new quaternion.</returns>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Zero">
            <summary>
            Returns the dafault quaternion, where all coefficients are 0.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Identity">
            <summary>
            Returns the (1,0,0,0) quaternion.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.I">
            <summary>
            Returns the (0,1,0,0) quaternion.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.J">
            <summary>
            Returns the (0,0,1,0) quaternion.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.K">
            <summary>
            Returns the (0,0,0,1) quaternion.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.A">
            <summary>
            Gets or sets the real part of the quaternion.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.B">
            <summary>
            Gets or sets the first imaginary coefficient of the quaternion.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.C">
            <summary>
            Gets or sets the second imaginary coefficient of the quaternion.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.D">
            <summary>
            Gets or sets the third imaginary coefficient of the quaternion.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.IsValid">
            <summary>
            Determines if the four coefficients are valid numbers within RhinoCommon.
            <para>See <see cref="M:Rhino.RhinoMath.IsValidDouble(System.Double)"/>.</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Conjugate">
            <summary>
            Gets a new quaternion that is the conjugate of this quaternion.
            <para>This is (a,-b,-c,-d)</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Inverse">
            <summary>
            Computes a new inverted quaternion,
            <para>(a/L2, -b/L2, -c/L2, -d/L2),</para>
            <para>where L2 = length squared = (a*a + b*b + c*c + d*d).</para>
            This is the multiplicative inverse, i.e.,
            (a,b,c,d)*(a/L2, -b/L2, -c/L2, -d/L2) = (1,0,0,0).
            If this is the zero quaternion, then the zero quaternion is returned.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Length">
            <summary>
            Returns the length or norm of the quaternion.
            </summary>
            <value>Math.Sqrt(a*a + b*b + c*c + d*d)</value>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.LengthSquared">
            <summary>
            Gets the result of (a^2 + b^2 + c^2 + d^2).
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Vector">
            <summary>
            The imaginary part of the quaternion
            <para>(B,C,D)</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.Scalar">
            <summary>
            The real (scalar) part of the quaternion
            <para>This is <see cref="P:Rhino.Geometry.Quaternion.A"/>.</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.IsZero">
            <summary>
            true if a, b, c, and d are all zero.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.IsScalar">
            <summary>
            true if b, c, and d are all zero.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Quaternion.IsVector">
            <summary>
            true if a = 0 and at least one of b, c, or d is not zero.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Sphere">
            <summary>
            Represents the plane and radius values of a sphere.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Sphere.#ctor(Rhino.Geometry.Point3d,System.Double)">
            <example>
            <code source='examples\vbnet\ex_addsphere.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addsphere.cs' lang='cs'/>
            <code source='examples\py\ex_addsphere.py' lang='py'/>
            </example>
            <summary>
            Initializes a new sphere given center point and radius.
            </summary>
            <param name="center">A center point.</param>
            <param name="radius">A radius value.</param>
        </member>
        <member name="M:Rhino.Geometry.Sphere.#ctor(Rhino.Geometry.Plane,System.Double)">
            <summary>
            Initializes a new sphere given the plane of the equator circle and radius.
            </summary>
            <param name="equatorialPlane">A plane that will be intesecting
            the sphere at the same distance from both poles (parameterization
            singularieties).</param>
            <param name="radius">A radius value.</param>
        </member>
        <member name="M:Rhino.Geometry.Sphere.FitSphereToPoints(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Attempts to fit a sphere to a collection of points.
            </summary>
            <param name="points">Points to fit. The collection must contain at least two points.</param>
            <returns>The Sphere that best approximates the points or Sphere.Unset on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.LatitudeRadians(System.Double)">
            <summary>
            Computes the parallel at a specific latitude angle.
            <para>The angle is specified in radians.</para>
            </summary>
            <param name="radians">An angle in radians for the parallel.</param>
            <returns>A circle.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.LatitudeDegrees(System.Double)">
            <summary>
            Computes the parallel at a specific latitude angle.
            <para>The angle is specified in degrees.</para>
            </summary>
            <param name="degrees">An angle in degrees for the meridian.</param>
            <returns>A circle.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.LongitudeRadians(System.Double)">
            <summary>
            Computes the meridian at a specific longitude angle.
            <para>The angle is specified in radians.</para>
            </summary>
            <param name="radians">An angle in radians.</param>
            <returns>A circle.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.LongitudeDegrees(System.Double)">
            <summary>
            Computes the meridian at a specific longitude angle.
            <para>The angle is specified in degrees.</para>
            </summary>
            <param name="degrees">An angle in degrees.</param>
            <returns>A circle.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.PointAt(System.Double,System.Double)">
            <summary>Evaluates the sphere at specific longitude and latitude angles.</summary>
            <param name="longitudeRadians">A number within the interval [0, 2pi].</param>
            <param name="latitudeRadians">A number within the interval [-pi/2,pi/2].</param>
            <returns>A point value.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.NormalAt(System.Double,System.Double)">
            <summary>
            Computes the normal at a specific angular location on the sphere.
            </summary>
            <param name="longitudeRadians">A number within the interval [0, 2pi].</param>
            <param name="latitudeRadians">A number within the interval [-pi/2, pi/2].</param>
            <returns>A vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.ClosestPoint(Rhino.Geometry.Point3d)">
            <summary>
            Returns point on sphere that is closest to given point.
            </summary>
            <param name="testPoint">Point to project onto Sphere.</param>
            <returns>Point on sphere surface closest to testPoint.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.ClosestParameter(Rhino.Geometry.Point3d,System.Double@,System.Double@)">
            <summary>
            Finds the angle parameters on this sphere that are closest to a test point.
            </summary>
            <param name="testPoint">Point to project onto the sphere.</param>
            <param name="longitudeRadians">The longitudinal angle (in radians; 0.0 to 2pi) where the sphere approaches testPoint best.</param>
            <param name="latitudeRadians">The latitudinal angle (in radians; -0.5pi to +0.5pi) where the sphere approaches testPoint best.</param>
            <returns>true on success, false on failure. This function will fail if the point it coincident with the sphere center.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Rotate(System.Double,System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotates this sphere about the center point.
            </summary>
            <param name="sinAngle">sin(angle)</param>
            <param name="cosAngle">cos(angle)</param>
            <param name="axisOfRotation">The direction of the axis of rotation.</param>
            <returns>true on success; false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Rotate(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotates the sphere about the center point.
            </summary>
            <param name="angleRadians">Angle of rotation (in radians)</param>
            <param name="axisOfRotation">Rotation axis.</param>
            <returns>true on success; false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Rotate(System.Double,System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotates this sphere about a point and an axis.
            </summary>
            <param name="sinAngle">sin(angle)</param>
            <param name="cosAngle">cod(angle)</param>
            <param name="axisOfRotation">Axis of rotation.</param>
            <param name="centerOfRotation">Center of rotation.</param>
            <returns>true on success; false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Rotate(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotates this sphere about a point and an axis.
            </summary>
            <param name="angleRadians">Rotation angle (in Radians)</param>
            <param name="axisOfRotation">Axis of rotation.</param>
            <param name="centerOfRotation">Center of rotation.</param>
            <returns>true on success; false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Translate(Rhino.Geometry.Vector3d)">
            <summary>
            Moves this sphere along a motion vector.
            </summary>
            <param name="delta">Motion vector.</param>
            <returns>true on success; false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms this sphere. Note that non-similarity preserving transformations 
            cannot be applied to a sphere as that would result in an ellipsoid.
            </summary>
            <param name="xform">Transformation matrix to apply.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.ToBrep">
            <summary>
            Converts this sphere is it Brep representation
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.ToNurbsSurface">
            <summary>
            Converts this sphere to its NurbsSurface representation. 
            This is synonymous with calling NurbsSurface.CreateFromSphere().
            </summary>
            <returns>A nurbs surface representation of this sphere or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.ToRevSurface">
            <summary>
            Converts this Sphere to a RevSurface representation. 
            This is synonymous with calling RevSurface.CreateFromSphere().
            </summary>
            <returns>A surface of revolution representation of this sphere or null.</returns>
        </member>
        <member name="M:Rhino.Geometry.Sphere.EpsilonEquals(Rhino.Geometry.Sphere,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.Sphere.Unset">
            <summary>
            Gets a sphere with invalid members.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Sphere.IsValid">
            <summary>
            Gets a value that indicates whether the sphere is valid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Sphere.BoundingBox">
            <summary>
            Gets the world aligned boundingbox for this Sphere. 
            If the Sphere is Invalid, an empty box is returned.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Sphere.Diameter">
            <summary>
            Gets or sets the diameter for this sphere.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Sphere.Radius">
            <summary>
            Gets or sets the Radius for this sphere.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Sphere.EquitorialPlane">
            <summary>
            Gets or sets the Equatorial plane for this sphere.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Sphere.Center">
            <summary>
            Gets or sets the center point of the sphere.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Sphere.NorthPole">
            <summary>
            Gets the point at the North Pole of the sphere.
            <para>This is the parameterization singularity that can be obtained,
            at V value +Math.Pi/2.</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Sphere.SouthPole">
            <summary>
            Gets the point at the South Pole of the sphere.
            <para>This is the parameterization singularity that can be obtained,
            at V value -Math.Pi/2.</para>
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Torus">
            <summary>
            Represents the value of a plane and two radii in a torus that is oriented in three-dimensional space.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Torus.#ctor(Rhino.Geometry.Plane,System.Double,System.Double)">
            <summary>
            Initializes a new Torus from base pane and two radii.
            </summary>
            <param name="basePlane">Base plane for major radius circle.</param>
            <param name="majorRadius">Radius of circle that lies at the heart of the torus.</param>
            <param name="minorRadius">Radius of torus section.</param>
            <example>
            <code source='examples\vbnet\ex_addtorus.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addtorus.cs' lang='cs'/>
            <code source='examples\py\ex_addtorus.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Torus.ToNurbsSurface">
            <summary>
            Converts this torus to its nurbs surface representation. 
            This is synonymous with calling NurbsSurface.CreateFromTorus().
            </summary>
            <returns>A nurbs surface representation of this torus, or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Torus.ToRevSurface">
            <summary>
            Convert this torus to a surface of revolution representation. 
            This is synonymous with calling RevSurface.CreateFromTorus().
            </summary>
            <returns>A surface of revolution representation of this torus, or null on error.</returns>
            <example>
            <code source='examples\vbnet\ex_addtorus.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addtorus.cs' lang='cs'/>
            <code source='examples\py\ex_addtorus.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Torus.EpsilonEquals(Rhino.Geometry.Torus,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.Torus.Unset">
            <summary>
            Gets an invalid Torus.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Torus.IsValid">
            <summary>
            Gets a value indicating whether this torus is valid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Torus.Plane">
            <summary>
            Gets or sets the plane for the torus large circle.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Torus.MajorRadius">
            <summary>
            Gets or sets the radius of the circle that lies at the heart of the torus.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Torus.MinorRadius">
            <summary>
            Gets or sets the radius of the torus section.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Transform">
            <summary>
            Represents the values in a 4x4 transform matrix.
            <para>This is parallel to C++ ON_Xform.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Transform.#ctor(System.Double)">
            <summary>
            Initializes a new transform matrix with a specified value along the diagonal.
            </summary>
            <param name="diagonalValue">Value to assign to all diagonal cells except M33 which is set to 1.0.</param>
        </member>
        <member name="M:Rhino.Geometry.Transform.Translation(Rhino.Geometry.Vector3d)">
            <summary>
            Constructs a new translation (move) transformation. 
            </summary>
            <param name="motion">Translation (motion) vector.</param>
            <returns>A transform matrix which moves geometry along the motion vector.</returns>
            <example>
            <code source='examples\vbnet\ex_constrainedcopy.vb' lang='vbnet'/>
            <code source='examples\cs\ex_constrainedcopy.cs' lang='cs'/>
            <code source='examples\py\ex_constrainedcopy.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Transform.Translation(System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new translation (move) tranformation. 
            Right column is (dx, dy, dz, 1.0).
            </summary>
            <param name="dx">Distance to translate (move) geometry along the world X axis.</param>
            <param name="dy">Distance to translate (move) geometry along the world Y axis.</param>
            <param name="dz">Distance to translate (move) geometry along the world Z axis.</param>
            <returns>A transform matrix which moves geometry with the specified distances.</returns>
            <example>
            <code source='examples\vbnet\ex_transformbrep.vb' lang='vbnet'/>
            <code source='examples\cs\ex_transformbrep.cs' lang='cs'/>
            <code source='examples\py\ex_transformbrep.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Transform.Scale(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Constructs a new uniform scaling transformation with a specified scaling anchor point.
            </summary>
            <param name="anchor">Defines the anchor point of the scaling operation.</param>
            <param name="scaleFactor">Scaling factor in all directions.</param>
            <returns>A transform matrix which scales geometry uniformly around the anchor point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Scale(Rhino.Geometry.Plane,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a new non-uniform scaling transformation with a specified scaling anchor point.
            </summary>
            <param name="plane">Defines the center and orientation of the scaling operation.</param>
            <param name="xScaleFactor">Scaling factor along the anchor plane X-Axis direction.</param>
            <param name="yScaleFactor">Scaling factor along the anchor plane Y-Axis direction.</param>
            <param name="zScaleFactor">Scaling factor along the anchor plane Z-Axis direction.</param>
            <returns>A transformation matrix which scales geometry non-uniformly.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Rotation(System.Double,System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Constructs a new rotation transformation with specified angle, rotation center and rotation axis.
            </summary>
            <param name="sinAngle">Sin of the rotation angle.</param>
            <param name="cosAngle">Cos of the rotation angle.</param>
            <param name="rotationAxis">Axis direction of rotation.</param>
            <param name="rotationCenter">Center point of rotation.</param>
            <returns>A transformation matrix which rotates geometry around an anchor point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Rotation(System.Double,Rhino.Geometry.Point3d)">
            <summary>
            Constructs a new rotation transformation with specified angle and rotation center.
            </summary>
            <param name="angleRadians">Angle (in Radians) of the rotation.</param>
            <param name="rotationCenter">Center point of rotation. Rotation axis is vertical.</param>
            <returns>A transformation matrix which rotates geometry around an anchor point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Rotation(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Constructs a new rotation transformation with specified angle, rotation center and rotation axis.
            </summary>
            <param name="angleRadians">Angle (in Radians) of the rotation.</param>
            <param name="rotationAxis">Axis direction of rotation operation.</param>
            <param name="rotationCenter">Center point of rotation. Rotation axis is vertical.</param>
            <returns>A transformation matrix which rotates geometry around an anchor point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Rotation(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Constructs a new rotation transformation with start and end directions and rotation center.
            </summary>
            <param name="startDirection">A start direction.</param>
            <param name="endDirection">An end direction.</param>
            <param name="rotationCenter">A rotation center.</param>
            <returns>A transformation matrix which rotates geometry around an anchor point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Rotation(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Constructs a transformation that maps X0 to X1, Y0 to Y1, Z0 to Z1.
            </summary>
            <param name="x0">First "from" vector.</param>
            <param name="y0">Second "from" vector.</param>
            <param name="z0">Third "from" vector.</param>
            <param name="x1">First "to" vector.</param>
            <param name="y1">Second "to" vector.</param>
            <param name="z1">Third "to" vector.</param>
            <returns>A rotation transformation value.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Mirror(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Create mirror transformation matrix
            The mirror transform maps a point Q to 
            Q - (2*(Q-P)oN)*N, where
            P = pointOnMirrorPlane and N = normalToMirrorPlane.
            </summary>
            <param name="pointOnMirrorPlane">Point on the mirror plane.</param>
            <param name="normalToMirrorPlane">Normal vector to the mirror plane.</param>
            <returns>A transformation matrix which mirrors geometry in a specified plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Mirror(Rhino.Geometry.Plane)">
            <summary>
            Constructs a new Mirror transformation.
            </summary>
            <param name="mirrorPlane">Plane that defines the mirror orientation and position.</param>
            <returns>A transformation matrix which mirrors geometry in a specified plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.ChangeBasis(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
            <summary>
            Computes a change of basis transformation. A basis change is essentially a remapping 
            of geometry from one coordinate system to another.
            </summary>
            <param name="plane0">Coordinate system in which the geometry is currently described.</param>
            <param name="plane1">Target coordinate system in which we want the geometry to be described.</param>
            <returns>
            A transformation matrix which orients geometry from one coordinate system to another on success.
            Transform.Unset on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.PlaneToPlane(Rhino.Geometry.Plane,Rhino.Geometry.Plane)">
            <example>
            <code source='examples\vbnet\ex_orientonsrf.vb' lang='vbnet'/>
            <code source='examples\cs\ex_orientonsrf.cs' lang='cs'/>
            <code source='examples\py\ex_orientonsrf.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Transform.ChangeBasis(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Computes a change of basis transformation. A basis change is essentially a remapping 
            of geometry from one coordinate system to another.
            </summary>
            <param name="initialBasisX">can be any 3d basis.</param>
            <param name="initialBasisY">can be any 3d basis.</param>
            <param name="initialBasisZ">can be any 3d basis.</param>
            <param name="finalBasisX">can be any 3d basis.</param>
            <param name="finalBasisY">can be any 3d basis.</param>
            <param name="finalBasisZ">can be any 3d basis.</param>
            <returns>
            A transformation matrix which orients geometry from one coordinate system to another on success.
            Transform.Unset on failure.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.PlanarProjection(Rhino.Geometry.Plane)">
            <summary>
            Constructs a projection transformation.
            </summary>
            <param name="plane">Plane onto which everything will be perpendicularly projected.</param>
            <returns>A transformation matrix which projects geometry onto a specified plane.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Shear(Rhino.Geometry.Plane,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Constructs a Shear transformation.
            </summary>
            <param name="plane">Base plane for shear.</param>
            <param name="x">Shearing vector along plane x-axis.</param>
            <param name="y">Shearing vector along plane y-axis.</param>
            <param name="z">Shearing vector along plane z-axis.</param>
            <returns>A transformation matrix which shear geometry.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.op_Equality(Rhino.Geometry.Transform,Rhino.Geometry.Transform)">
            <summary>
            Determines if two transformations are equal in value.
            </summary>
            <param name="a">A tranform.</param>
            <param name="b">Another tranform.</param>
            <returns>true if transforms are equal; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.op_Inequality(Rhino.Geometry.Transform,Rhino.Geometry.Transform)">
            <summary>
            Determines if two transformations are different in value.
            </summary>
            <param name="a">A tranform.</param>
            <param name="b">Another tranform.</param>
            <returns>true if transforms are different; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.op_Multiply(Rhino.Geometry.Transform,Rhino.Geometry.Transform)">
            <summary>
            Multiplies (combines) two transformations.
            </summary>
            <param name="a">First transformation.</param>
            <param name="b">Second transformation.</param>
            <returns>A transformation matrix that combines the effect of both input transformations. 
            The resulting Transform gives the same result as though you'd first apply A then B.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.op_Multiply(Rhino.Geometry.Transform,Rhino.Geometry.Point3d)">
            <summary>
            Multiplies a transformation by a point and gets a new point.
            </summary>
            <param name="m">A transformation.</param>
            <param name="p">A point.</param>
            <returns>The tranformed point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.op_Multiply(Rhino.Geometry.Transform,Rhino.Geometry.Vector3d)">
            <summary>
            Multiplies a transformation by a vector and gets a new vector.
            </summary>
            <param name="m">A transformation.</param>
            <param name="v">A vector.</param>
            <returns>The tranformed vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Multiply(Rhino.Geometry.Transform,Rhino.Geometry.Transform)">
            <summary>
            Multiplies (combines) two transformations.
            <para>This is the same as the * operator between two transformations.</para>
            </summary>
            <param name="a">First transformation.</param>
            <param name="b">Second transformation.</param>
            <returns>A transformation matrix that combines the effect of both input transformations. 
            The resulting Transform gives the same result as though you'd first apply A then B.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.TransformBoundingBox(Rhino.Geometry.BoundingBox)">
            <summary>
            Computes a new boundingbox that is the smallest axis aligned
            boundingbox that contains the transformed result of its 8 original corner
            points.
            </summary>
            <returns>A new bounding box.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.TransformList(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Given a list, an array or any enumerable set of points, computes a new array of tranformed points.
            </summary>
            <param name="points">A list, an array or any enumerable set of points to be left untouched and copied.</param>
            <returns>A new array.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Equals(System.Object)">
            <summary>
            Determines if another object is a transform and its value equals this transform value.
            </summary>
            <param name="obj">Another object.</param>
            <returns>true if obj is a transform and has the same value as this transform; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Equals(Rhino.Geometry.Transform)">
            <summary>
            Determines if another transform equals this transform value.
            </summary>
            <param name="other">Another transform.</param>
            <returns>true if other has the same value as this transform; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.GetHashCode">
            <summary>
            Gets a non-unique hashing code for this transform.
            </summary>
            <returns>A number that can be used to hash this transform in a dictionary.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.ToString">
            <summary>
            Returns a string representation of this transform.
            </summary>
            <returns>A textual representation.</returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.TryGetInverse(Rhino.Geometry.Transform@)">
            <summary>
            Attempts to get the inverse transform of this transform.
            </summary>
            <param name="inverseTransform">The inverse transform. This out reference will be assigned during this call.</param>
            <returns>
            true on success. 
            If false is returned and this Transform is Invalid, inserveTransform will be set to this Transform. 
            If false is returned and this Transform is Valid, inverseTransform will be set to a pseudo inverse.
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.Transpose">
            <summary>
            Flip row/column values
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.ToFloatArray(System.Boolean)">
            <summary>
            Return the matrix as a linear array of 16 float values
            </summary>
            <param name="rowDominant"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Transform.CompareTo(Rhino.Geometry.Transform)">
            <summary>
            Compares this transform with another transform.
            <para>M33 has highest value, then M32, etc..</para>
            </summary>
            <param name="other">Another transform.</param>
            <returns>-1 if this &lt; other; 0 if both are equal; 1 otherwise.</returns>
        </member>
        <member name="P:Rhino.Geometry.Transform.Identity">
            <summary>
            Gets a new identity transform matrix. An identity matrix defines no transformation.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.Unset">
            <summary>
            Gets an XForm filled with RhinoMath.UnsetValue.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.M00">
            <summary>Gets or sets this[0,0].</summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.M01">
            <summary>Gets or sets this[0,1].</summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.M02">
            <summary>Gets or sets this[0,2].</summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.M03">
            <summary>Gets or sets this[0,3].</summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.M10">
            <summary>Gets or sets this[1,0].</summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.M11">
            <summary>Gets or sets this[1,1].</summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.M12">
            <summary>Gets or sets this[1,2].</summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.M13">
            <summary>Gets or sets this[1,3].</summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.M20">
            <summary>Gets or sets this[2,0].</summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.M21">
            <summary>Gets or sets this[2,1].</summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.M22">
            <summary>Gets or sets this[2,2].</summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.M23">
            <summary>Gets or sets this[2,3].</summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.M30">
            <summary>Gets or sets this[3,0].</summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.M31">
            <summary>Gets or sets this[3,1].</summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.M32">
            <summary>Gets or sets this[3,2].</summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.M33">
            <summary>Gets or sets this[3,3].</summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the matrix value at the given row and column indixes.
            </summary>
            <param name="row">Index of row to access, must be 0, 1, 2 or 3.</param>
            <param name="column">Index of column to access, must be 0, 1, 2 or 3.</param>
            <returns>The value at [row, column]</returns>
            <value>The new value at [row, column]</value>
        </member>
        <member name="P:Rhino.Geometry.Transform.IsValid">
            <summary>
            Gets a value indicating whether or not this Transform is a valid matrix. 
            A valid transform matrix is not allowed to have any invalid numbers.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.SimilarityType">
            <summary>
            Gets a value indicating whether or not the Transform maintains similarity. 
            The easiest way to think of Similarity is that any circle, when transformed, 
            remains a circle. Whereas a non-similarity Transform deforms circles into ellipses.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Transform.Determinant">
            <summary>
            The determinant of this 4x4 matrix.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.TransformSimilarityType">
            <summary>
            Lists all possible outcomes for transform similarity.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TransformSimilarityType.OrientationReversing">
            <summary>
            Similarity is preserved, but orientation is flipped.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TransformSimilarityType.NotSimilarity">
            <summary>
            Similarity is not preserved. Geometry needs to be deformable for this Transform to operate correctly.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.TransformSimilarityType.OrientationPreserving">
            <summary>
            Similarity and orientation are preserved.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SpaceMorph">
            <summary>
            Represents a spacial, Euclidean morph.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SpaceMorph.Morph(Rhino.Geometry.GeometryBase)">
            <summary>Apply the space morph to geometry.</summary>
            <param name="geometry">Geometry to morph.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.SpaceMorph.IsMorphable(Rhino.Geometry.GeometryBase)">
            <summary>
            true if the geometry can be morphed by calling SpaceMorph.Morph(geometry)
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SpaceMorph.MorphPoint(Rhino.Geometry.Point3d)">
            <summary>Morphs an Euclidean point. <para>This method is abstract.</para></summary>
            <param name="point">A point that will be morphed by this function.</param>
            <returns>Resulting morphed point.</returns>
        </member>
        <member name="P:Rhino.Geometry.SpaceMorph.Tolerance">
            <summary>
            The desired accuracy of the morph. This value is primarily used for deforming
            surfaces and breps. The default is 0.0 and any value &lt;= 0.0 is ignored by
            morphing functions. The Tolerance value does not affect the way meshes and points
            are morphed.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.SpaceMorph.QuickPreview">
            <summary>
            true if the morph should be done as quickly as possible because the result
            is being used for some type of dynamic preview. If QuickPreview is true,
            the tolerance may be ignored.
            The QuickPreview value does not affect the way meshes and points are morphed.
            The default is false.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.SpaceMorph.PreserveStructure">
            <summary>
            true if the morph should be done in a way that preserves the structure of the geometry.
            In particular, for NURBS objects, true means that only the control points are moved.
            The PreserveStructure value does not affect the way meshes and points are morphed.
            The default is false.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Morphs.TwistSpaceMorph">
            <summary>Deforms objects by rotating them around an axis.</summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.TwistSpaceMorph.#ctor">
            <summary>
            Constructs a twist space morph.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.TwistSpaceMorph.MorphPoint(Rhino.Geometry.Point3d)">
            <summary>Morphs an Euclidean point. <para>This method is abstract.</para></summary>
            <param name="point">A point that will be morphed by this function.</param>
            <returns>Resulting morphed point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Morphs.TwistSpaceMorph.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.TwistSpaceMorph.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.TwistSpaceMorph.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Geometry.Morphs.TwistSpaceMorph.TwistAxis">
            <summary>Axis to rotate about.</summary>
        </member>
        <member name="P:Rhino.Geometry.Morphs.TwistSpaceMorph.TwistAngleRadians">
            <summary>
            Twist angle in radians.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Morphs.TwistSpaceMorph.InfiniteTwist">
            <summary>
            If true, the deformation is constant throughout the object, even if the axis is shorter than the object. 
            If false, the deformation takes place only the length of the axis.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Morphs.BendSpaceMorph">
            <summary>
            Deforms objects by bending along a spine arc.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.BendSpaceMorph.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Boolean,System.Boolean)">
            <summary>
            Constructs a bend space morph.
            </summary>
            <param name="start">Start of spine that represents the original orientation of the object.</param>
            <param name="end">End of spine.</param>
            <param name="point">Point to bend through.</param>
            <param name="straight">If false, then point determines the region to bend. If true, only the spine region is bent.</param>
            <param name="symmetric">If false, then only one end of the object bends. If true, then the object will bend symmetrically around the center if you start the spine in the middle of the object.</param>
        </member>
        <member name="M:Rhino.Geometry.Morphs.BendSpaceMorph.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Constructs a bend space morph.
            </summary>
            <param name="start">Start of spine that represents the original orientation of the object.</param>
            <param name="end">End of spine.</param>
            <param name="point">Used for bend direction.</param>
            <param name="angle">Bend angle in radians.</param>
            <param name="straight">If false, then point determines the region to bend. If true, only the spine region is bent.</param>
            <param name="symmetric">If false, then only one end of the object bends. If true, then the object will bend symmetrically around the center if you start the spine in the middle of the object.</param>
        </member>
        <member name="M:Rhino.Geometry.Morphs.BendSpaceMorph.MorphPoint(Rhino.Geometry.Point3d)">
            <summary>Morphs an Euclidean point.</summary>
            <param name="point">A point that will be morphed by this object.</param>
            <returns>Resulting morphed point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Morphs.BendSpaceMorph.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.BendSpaceMorph.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.BendSpaceMorph.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Geometry.Morphs.BendSpaceMorph.IsValid">
            <summary>
            Returns true if the space morph definition is valid, false otherwise.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Morphs.TaperSpaceMorph">
            <summary>
            Deforms objects toward or away from a specified axis.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.TaperSpaceMorph.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Constructs a taper space morph.
            </summary>
            <param name="start">Start of the taper axis.</param>
            <param name="end">End of the taper axis.</param>
            <param name="startRadius">Radius at start point.</param>
            <param name="endRadius">Radius at end point.</param>
            <param name="bFlat">If true, then a one-directional, one-dimensional taper is created.</param>
            <param name="infiniteTaper">If false, the deformation takes place only the length of the axis. If true, the deformation happens throughout the object, even if the axis is shorter.</param>
        </member>
        <member name="M:Rhino.Geometry.Morphs.TaperSpaceMorph.MorphPoint(Rhino.Geometry.Point3d)">
            <summary>Morphs an Euclidean point.</summary>
            <param name="point">A point that will be morphed by this object.</param>
            <returns>Resulting morphed point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Morphs.TaperSpaceMorph.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.TaperSpaceMorph.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.TaperSpaceMorph.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Geometry.Morphs.TaperSpaceMorph.IsValid">
            <summary>
            Returns true if the space morph definition is valid, false otherwise.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Morphs.MaelstromSpaceMorph">
            <summary>
            Deforms objects in a spiral as if they were caught in a whirlpool.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.MaelstromSpaceMorph.#ctor(Rhino.Geometry.Plane,System.Double,System.Double,System.Double)">
            <summary>
            Constructs a maelstrom space morph.
            </summary>
            <param name="plane">Plane on which the base circle will lie. Origin of the plane will be the center point of the circle.</param>
            <param name="radius0">First radius.</param>
            <param name="radius1">Second radius.</param>
            <param name="angle">Coil angle in radians.</param>
            <remarks>
            <para>
            If radius0 = radius1 &gt; 0, then the morph is a rotation where the angle of rotation is proportional to the radius.
            
            If radius0 &lt; radius1, then everything inside of the circle of radius radius0 if fixed, the rotation angle increases
            smoothly from 0 at radius0 to m_a at radius1, and everything outside of the circle of radius radius1 is rotated by angle.
            
            If radius0 &gt; radius1, then everything outside of the circle of radius radius0 if fixed, the rotation angle increases
            smoothly from 0 at radius0 to m_a at radius1, and everything inside of the circle of radius radius1 is rotated by angle.
            </para>
            </remarks>
        </member>
        <member name="M:Rhino.Geometry.Morphs.MaelstromSpaceMorph.MorphPoint(Rhino.Geometry.Point3d)">
            <summary>Morphs an Euclidean point.</summary>
            <param name="point">A point that will be morphed by this object.</param>
            <returns>Resulting morphed point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Morphs.MaelstromSpaceMorph.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.MaelstromSpaceMorph.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.MaelstromSpaceMorph.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Geometry.Morphs.MaelstromSpaceMorph.IsValid">
            <summary>
            Returns true if the space morph definition is valid, false otherwise.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Morphs.StretchSpaceMorph">
            <summary>
            Deforms objects toward or away from a specified axis.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.StretchSpaceMorph.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Constructs a stretch space morph.
            </summary>
            <param name="start">Start of stretch axis.</param>
            <param name="end">End of stretch axis.></param>
            <param name="point">End of new stretch axis.</param>
        </member>
        <member name="M:Rhino.Geometry.Morphs.StretchSpaceMorph.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Constructs a stretch space morph.
            </summary>
            <param name="start">Start of stretch axis.</param>
            <param name="end">End of stretch axis.></param>
            <param name="length">Length of new stretch axis.</param>
        </member>
        <member name="M:Rhino.Geometry.Morphs.StretchSpaceMorph.MorphPoint(Rhino.Geometry.Point3d)">
            <summary>Morphs an Euclidean point.</summary>
            <param name="point">A point that will be morphed by this object.</param>
            <returns>Resulting morphed point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Morphs.StretchSpaceMorph.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.StretchSpaceMorph.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.StretchSpaceMorph.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Geometry.Morphs.StretchSpaceMorph.IsValid">
            <summary>
            Returns true if the space morph definition is valid, false otherwise.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Morphs.SporphSpaceMorph">
            <summary>
            Deforms an object from a source surface to a target surface.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.SporphSpaceMorph.#ctor(Rhino.Geometry.Surface,Rhino.Geometry.Surface)">
            <summary>
            Constructs a sporph space morph.
            </summary>
            <param name="surface0">Base surface.</param>
            <param name="surface1">Target surface.</param>
        </member>
        <member name="M:Rhino.Geometry.Morphs.SporphSpaceMorph.#ctor(Rhino.Geometry.Surface,Rhino.Geometry.Surface,Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Constructs a sporph space morph.
            </summary>
            <param name="surface0">Base surface.</param>
            <param name="surface1">Target surface.</param>
            <param name="surface0Param">U,V parameter on surface0 used for orienting.</param>
            <param name="surface1Param">U,V parameter on surface1 used for orienting.</param>
        </member>
        <member name="M:Rhino.Geometry.Morphs.SporphSpaceMorph.MorphPoint(Rhino.Geometry.Point3d)">
            <summary>Morphs an Euclidean point.</summary>
            <param name="point">A point that will be morphed by this object.</param>
            <returns>Resulting morphed point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Morphs.SporphSpaceMorph.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.SporphSpaceMorph.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.SporphSpaceMorph.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Geometry.Morphs.SporphSpaceMorph.IsValid">
            <summary>
            Returns true if the space morph definition is valid, false otherwise.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Morphs.FlowSpaceMorph">
            <summary>
            Re-aligns objects from a base curve to a target curve.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.FlowSpaceMorph.#ctor(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Boolean)">
            <summary>
            Constructs a flow space morph.
            </summary>
            <param name="curve0">Base curve.</param>
            <param name="curve1">Target curve.</param>
            <param name="preventStretching"></param>
        </member>
        <member name="M:Rhino.Geometry.Morphs.FlowSpaceMorph.#ctor(Rhino.Geometry.Curve,Rhino.Geometry.Curve,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Constructs a flow space morph.
            </summary>
            <param name="curve0">Base curve.</param>
            <param name="curve1">Target curve.</param>
            <param name="reverseCurve0">If true, then direction of curve0 is reversed.</param>
            <param name="reverseCurve1">If true, then direction of curve1 is reversed.</param>
            <param name="preventStretching">If true, the length of the objects along the curve directions are not changed. If false, objects are stretched or compressed in the curve direction so that the relationship to the target curve is the same as it is to the base curve.</param>
        </member>
        <member name="M:Rhino.Geometry.Morphs.FlowSpaceMorph.MorphPoint(Rhino.Geometry.Point3d)">
            <summary>Morphs an Euclidean point.</summary>
            <param name="point">A point that will be morphed by this object.</param>
            <returns>Resulting morphed point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Morphs.FlowSpaceMorph.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.FlowSpaceMorph.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.FlowSpaceMorph.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Geometry.Morphs.FlowSpaceMorph.IsValid">
            <summary>
            Returns true if the space morph definition is valid, false otherwise.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Morphs.SplopSpaceMorph">
            <summary>
            Rotates, scales, and wraps objects on a surface.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.SplopSpaceMorph.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Surface,Rhino.Geometry.Point2d)">
            <summary>
            Constructs a flow space morph.
            </summary>
            <param name="plane">Source plane of deformation.</param>
            <param name="surface">Surface to wrap objects onto.</param>
            <param name="surfaceParam">U,V parameter on surface used for orienting.</param>
        </member>
        <member name="M:Rhino.Geometry.Morphs.SplopSpaceMorph.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Surface,Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Constructs a flow space morph.
            </summary>
            <param name="plane">Source plane of deformation.</param>
            <param name="surface">Surface to wrap objects onto.</param>
            <param name="surfaceParam">U,V parameter on surface used for orienting.</param>
            <param name="scale">Scale factor.</param>
        </member>
        <member name="M:Rhino.Geometry.Morphs.SplopSpaceMorph.#ctor(Rhino.Geometry.Plane,Rhino.Geometry.Surface,Rhino.Geometry.Point2d,System.Double,System.Double)">
            <summary>
            Constructs a flow space morph.
            </summary>
            <param name="plane">Source plane of deformation.</param>
            <param name="surface">Surface to wrap objects onto.</param>
            <param name="surfaceParam">U,V parameter on surface used for orienting.</param>
            <param name="scale">Scale factor. To ignore, use Rhino.RhinoMath.UnsetValue.</param>
            <param name="angle">Rotation angle in radians. To ignore, use Rhino.RhinoMath.UnsetValue.</param>
        </member>
        <member name="M:Rhino.Geometry.Morphs.SplopSpaceMorph.MorphPoint(Rhino.Geometry.Point3d)">
            <summary>Morphs an Euclidean point.</summary>
            <param name="point">A point that will be morphed by this object.</param>
            <returns>Resulting morphed point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Morphs.SplopSpaceMorph.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.SplopSpaceMorph.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Morphs.SplopSpaceMorph.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="P:Rhino.Geometry.Morphs.SplopSpaceMorph.IsValid">
            <summary>
            Returns true if the space morph definition is valid, false otherwise.
            </summary>
        </member>
        <member name="T:Rhino.FileIO.File3dmTypeCodes">
            <summary>
            Typecode format 4 bytes long
            <code>
            x xxxxxxxxxxxxxxx,x xxx xxxx xxxx x x xx
            | |               | |               | |  |
            |        |        |                 |
            |        |        |         |       +---  &quot;stuff&quot; bit
            |        |        |         |
            |        |        |         +-- specific codes
            |        |        |
            |        |        +-- RESERVED - DO NOT USE (should be 0) (will be used to control CRC on/off)
            |        |
            |        +-- category:_000 0000 0000 0001  Legacy geometry    TCODE_LEGACY_GEOMETRY
            |                     _000 0000 0000 0010  openNURBS object   TCODE_OPENNURBS_OBJECT
            |                     _000 0000 0000 0100  -- RESERVED - DO NOT USE (should be 0 in any typecode) -- 
            |                     _000 0000 0000 1000  -- RESERVED - DO NOT USE (should be 0 in any typecode) --                     
            |                     _000 0000 0001 0000  Geometry           TCODE_GEOMETRY
            |                     _000 0000 0010 0000  Annotation
            |                     _000 0000 0100 0000  Display Attributes TCODE_DISPLAY
            |                     _000 0000 1000 0000  Rendering          TCODE_RENDER     
            |                     _000 0001 0000 0000                         
            |                     _000 0010 0000 0000  Interface          TCODE_INTERFACE 
            |                     _000 0100 0000 0000  -- RESERVED - DO NOT USE (should be 0 in any typecode) --
            |                     _000 1000 0000 0000  Tolerances         TCODE_TOLERANCE
            |                     _001 0000 0000 0000  Tables             TCODE_TABLE    
            |                     _010 0000 0000 0000  Table record       TCODE_TABLEREC
            |                     _100 0000 0000 0000  User information   TCODE_USER
            | 
            +-- format: 0 - data size in header  - data block follows    TCODE_SHORT
                        1 - data in header - no data block follows
            </code>
            </summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_COMMENTBLOCK">
            <summary>
             (0x00000001)
             The TCODE_COMMENTBLOCK is the first chunk in the file, starts 32 bytes into
             the file, and contains text information terminated with a ^m_z.  This ^m_z and
             contents of this chunk were expanded in February 2000.  Files written with
             code released earlier than this will not have the ^m_z.
            </summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_ENDOFFILE">
            <summary>
             (0x00007FFF)
             The TCODE_ENDOFFILE is the last chunk in the file and the first 4 bytes
             of information in this chunk is an integer that contains the file length.
             This chunk was added in February 2000 and files written with code released
             earlier than this will not have this termination block.
            </summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_ENDOFFILE_GOO">
            <summary>
            (0x00007FFE)
            this typecode is returned when a rogue eof marker is found
            Some v1 3dm file writers put these markers in a "goo".
            Simply skip these chunks and continue.
            </summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_OPENNURBS_OBJECT">
            <summary>0x00020000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_GEOMETRY">
            <summary>0x0010000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_ANNOTATION">
            <summary>0x0020000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_DISPLAY">
            <summary>0x0040000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_RENDER">
            <summary>0x0080000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_INTERFACE">
            <summary>0x02000000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_TOLERANCE">
            <summary>0x08000000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_TABLE">
            <summary>0x10000000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_TABLEREC">
            <summary>0x20000000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_USER">
            <summary>0x40000000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_SHORT">
            <summary>0x80000000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_CRC">
            <summary>0x8000.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_ANONYMOUS_CHUNK">
            <summary>(TCODE_USER | TCODE_CRC | 0x0000)</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_MATERIAL_TABLE">
            <summary>rendering materials.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_LAYER_TABLE">
            <summary>layers.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_LIGHT_TABLE">
            <summary>rendering lights.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_OBJECT_TABLE">
            <summary>geometry and annotation.</summary>
        </member>
        <member name="F:Rhino.FileIO.File3dmTypeCodes.TCODE_PROPERTIES_TABLE">
            <summary>
            Model Properties: revision history, notes, preview image.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.BrepObject">
            <summary>
            Represents a <see cref="T:Rhino.Geometry.Brep">brep</see> in a document.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.BrepObject.DuplicateBrepGeometry">
            <summary>
            Constructs a new deep copy of the brep geometry.
            </summary>
            <returns>The copy of the geometry.</returns>
        </member>
        <member name="P:Rhino.DocObjects.BrepObject.BrepGeometry">
            <summary>
            Gets the brep geometry linked with this object.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.SurfaceObject">
            <summary>
            Represents a <see cref="T:Rhino.Geometry.Surface">surface</see> in a document.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.SurfaceObject.DuplicateSurfaceGeometry">
            <summary>
            Constructs a new deep copy of the surface geometry.
            </summary>
            <returns>The copy of the geometry.</returns>
        </member>
        <member name="P:Rhino.DocObjects.SurfaceObject.SurfaceGeometry">
            <summary>
            Gets the surface geometry linked with this object.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.CurveObject">
            <summary>
            A Rhino Object that represents curve geometry and attributes
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Custom.CustomCurveObject.SetCurve(Rhino.Geometry.Curve)">
            <summary>
            Only for developers who are defining custom subclasses of CurveObject.
            Directly sets the internal curve geometry for this object.  Note that
            this function does not work with Rhino's "undo".
            </summary>
            <param name="curve"></param>
            <returns>
            The old curve geometry that was set for this object
            </returns>
            <remarks>
            Note that this function does not work with Rhino's "undo".  The typical
            approach for adjusting the curve geometry is to modify the object that you
            get when you call the CurveGeometry property and then call CommitChanges.
            </remarks>
        </member>
        <member name="T:Rhino.DocObjects.Tables.NamedConstructionPlaneTable">
            <summary>
            Contains all named construction planes in a rhino document.
            <para>This class cannot be inherited.</para>
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Find(System.String)">
            <summary>Finds a named construction plane.</summary>
            <param name="name">
            Name of construction plane to search for.
            </param>
            <returns>
            &gt;=0 index of the construction plane with the given name.
            -1 no construction plane found with the given name.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Add(System.String,Rhino.Geometry.Plane)">
            <summary>
            Adds named construction plane to document.
            </summary>
            <param name="name">
            If name is empty, a unique name is automatically created.
            If there is already a named onstruction plane with the same name, that 
            construction plane is replaced.
            </param>
            <param name="plane">The plane value.</param>
            <returns>
            0 based index of named construction plane.
            -1 on failure.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Delete(System.Int32)">
            <summary>
            Remove named construction plane from the document.
            </summary>
            <param name="index">zero based array index.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Delete(System.String)">
            <summary>
            Remove named construction plane from the document.
            </summary>
            <param name="name">name of the construction plane.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Document">
            <summary>Gets the document that owns this table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Count">
            <summary>Number of construction planes in the table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.NamedConstructionPlaneTable.Item(System.Int32)">
            <summary>
            Conceptually, the named construction plane table is an array of ConstructionPlanes
            and their associated names. The operator[] can be used to get individual ConstructionPlanes.
            </summary>
            <param name="index">Zero based array index.</param>
            <returns>
            A construction plane at the index, or null on error.
            </returns>
        </member>
        <member name="T:Rhino.DocObjects.Tables.NamedViewTable">
            <summary>
            All named views in a rhino document.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.NamedViewTable.FindByName(System.String)">
            <summary>Finds a named view.</summary>
            <param name="name">name to search for.</param>
            <returns>
            &gt;=0 index of the found named view
            -1 no named view found.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.NamedViewTable.Add(System.String,System.Guid)">
            <summary>
            Adds named view to document which is based on an existing viewport.
            </summary>
            <param name="name">
            If name is empty, a unique name is automatically created.
            If there is already a named view with the same name, that view is replaced.
            </param>
            <param name="viewportId">
            Id of an existing viewport in the document. View information is copied from this viewport.</param>
            <returns>
            0 based index of named view.
            -1 on failure.
            </returns>
            <example>
            <code source='examples\vbnet\ex_addnamedview.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnamedview.cs' lang='cs'/>
            <code source='examples\py\ex_addnamedview.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.NamedViewTable.Delete(System.Int32)">
            <summary>Remove named view from the document.</summary>
            <param name="index">index of the named view in the named view table.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.NamedViewTable.Delete(System.String)">
            <summary>Remove named view from the document.</summary>
            <param name="name">name of the view.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.NamedViewTable.Restore(System.Int32,Rhino.Display.RhinoView,System.Boolean)">
            <summary>
            Sets the MainViewport of a standard RhinoView to a named views settings
            </summary>
            <param name="index"></param>
            <param name="view"></param>
            <param name="backgroundBitmap"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.NamedViewTable.Document">
            <summary>Document that owns this table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.NamedViewTable.Count">
            <summary>Number of named views in the table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.NamedViewTable.Item(System.Int32)">
            <summary>
            Conceptually, the named view table is an array of ViewInfo and their associated names.
            The indexing operator ([] in C#) can be used to get individual ViewInfo items.
            </summary>
            <param name="index">Zero based array index.</param>
            <returns>The view that was found.</returns>
        </member>
        <member name="P:Rhino.FileIO.FileReadOptions.ImportMode">
            <summary>
            true means we are merging whatever is being read into an existing document.
             This means you need to consider things like:
            <para>
            If the information being read is in a different unit system, it should be
            scaled if UseScaleGeometry is true.
            </para>
            <para>
            There can be existing layers, fonts, materials, dimension styles, hatch
            patterns, and so on with the same name as items being read from the file.
            </para>
            </summary>
        </member>
        <member name="P:Rhino.FileIO.FileReadOptions.OpenMode">
            <summary>
            true means we are reading the information into an empty document.  This
            means you need to consider things like:
            <list type="bullet">
            <item><description>Setting the unit system (if the file has a unit system)</description></item>
            <item><description>Creating a default layer if one is not there.</description></item>
            <item><description>Setting up appropriate views when you're finished reading.</description></item>
            </list>
            </summary>
        </member>
        <member name="P:Rhino.FileIO.FileReadOptions.NewMode">
            <summary>
            true means we are reading template information in something like
            a OnFileNew event.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.FileReadOptions.InsertMode">
            <summary>
            true means we are reading information that will be used to create an
            instance definition or some other type of "inserting" that is supported
            by Rhino's "Insert" command.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.FileReadOptions.ImportReferenceMode">
            <summary>
            true means we are reading information for a work session reference model
            or a linked instance definition.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.FileReadOptions.BatchMode">
            <summary>
            true means you cannot ask questions during reading. (no dialogs, no "getters", etc.)
            </summary>
        </member>
        <member name="P:Rhino.FileIO.FileReadOptions.UseScaleGeometry">
            <summary>
            If this parameter is true, then no questions are asked when unit conversion
            scaling is optional and the setting specified by ScaleGeometry is used.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.FileReadOptions.ScaleGeometry">
            <summary>
            <para>
            true: If ImportMode is true and the geometry in the file being read has
            a unit system different from the model's unit system, then apply the unit
            conversion scale to the file's geometry before adding it to the model.
            </para>
            <para>
            false: Do not scale. Once case where this happens is when an instance
            definition is read from a file and the model space instance references
            have been scaled. In case the instance definition geometry cannot be
            scaled or the net result is that the size of the instance reference
            object is scaled by the square of the scale factor.
            </para>
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.Tables.FontTable">
            <summary>
            Font tables store the list of fonts in a Rhino document.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.FontTable.FindOrCreate(System.String,System.Boolean,System.Boolean)">
            <example>
            <code source='examples\vbnet\ex_textjustify.vb' lang='vbnet'/>
            <code source='examples\cs\ex_textjustify.cs' lang='cs'/>
            <code source='examples\py\ex_textjustify.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.Tables.FontTable.Document">
            <summary>Document that owns this table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.FontTable.Count">
            <summary>Number of fonts in the table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.FontTable.CurrentIndex">
            <summary>
            At all times, there is a "current" font.  Unless otherwise specified,
            new dimension objects are assigned to the current font. The current
            font is never deleted.
            Returns: Zero based font index of the current font.
            </summary>
        </member>
        <member name="T:Rhino.Input.Custom.GetLine">
            <summary>
            Use to interactively get a line.  The Rhino "Line" command uses GetLine.
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetLine.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetLine.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetLine.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="M:Rhino.Input.Custom.GetLine.Get(Rhino.Geometry.Line@)">
            <summary>
            Perform the 'get' operation.
            </summary>
            <param name="line"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetLine.EnableFromBothSidesOption(System.Boolean)">
            <summary>
            If true, then the "BothSides" option shows up when the
            start point is inteactively picked.
            </summary>
            <param name="on"></param>
        </member>
        <member name="M:Rhino.Input.Custom.GetLine.EnableFromMidPointOption(System.Boolean)">
            <summary>
            If true, the the "MidPoint" options shows up
            </summary>
            <param name="on"></param>
        </member>
        <member name="M:Rhino.Input.Custom.GetLine.EnableAllVariations(System.Boolean)">
            <summary>
            If true, then all line variations are shown if the default line mode is used
            </summary>
            <param name="on"></param>
        </member>
        <member name="M:Rhino.Input.Custom.GetLine.SetFirstPoint(Rhino.Geometry.Point3d)">
            <summary>
            Use SetFirstPoint to specify the line's starting point and skip
            the start point interactive picking
            </summary>
            <param name="point"></param>
        </member>
        <member name="P:Rhino.Input.Custom.GetLine.FirstPointPrompt">
            <summary>Prompt when getting first point</summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetLine.MidPointPrompt">
            <summary>Prompt when getting midpoint</summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetLine.SecondPointPrompt">
            <summary>Prompt when getting second point</summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetLine.AcceptZeroLengthLine">
            <summary>
            Controls whether or not a zero length line is acceptable.
            The default is to require the user to keep picking the end
            point until we get a point different than the start point.
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetLine.HaveFeedbackColor">
            <summary>
            If true, the feedback color is used to draw the dynamic
            line when the second point is begin picked.  If false,
            the active layer color is used.
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetLine.FeedbackColor">
            <summary>
            If set, the feedback color is used to draw the dynamic
            line when the second point is begin picked.  If not set,
            the active layer color is used.
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetLine.FixedLength">
            <summary>
            If FixedLength > 0, the line must have the specified length
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetLine.GetLineMode">
            <summary>
            Mode used
            </summary>
        </member>
        <member name="T:Rhino.Collections.TransformObjectList">
            <summary>
            Used by the TransformCommand and GetTransform classes.
            </summary>
        </member>
        <member name="M:Rhino.Collections.TransformObjectList.GetBoundingBox(System.Boolean,System.Boolean)">
            <summary>
            Gets the bounding box of all of the objects that this list contains.
            </summary>
            <param name="regularObjects">true if any object except grips should be included; otherwise false.</param>
            <param name="grips">true if grips should be included; otherwise false.</param>
            <returns>
            Unset BoundingBox if this list is empty.
            </returns>
        </member>
        <member name="M:Rhino.Collections.TransformObjectList.Clear">
            <summary> Remove all elements from this list </summary>
        </member>
        <member name="M:Rhino.Collections.TransformObjectList.Add(Rhino.DocObjects.RhinoObject)">
            <summary> Add a RhinoObject to this list </summary>
            <param name="rhinoObject"></param>
        </member>
        <member name="M:Rhino.Collections.TransformObjectList.Add(Rhino.DocObjects.ObjRef)">
            <summary>
            Add an ObjRef to this list. Use this to add Polyedges so the references are properly counted
            </summary>
            <param name="objref"></param>
        </member>
        <member name="P:Rhino.Collections.TransformObjectList.Count">
            <summary> Number of elements in this list </summary>
        </member>
        <member name="T:Rhino.Input.Custom.GetBaseClass">
            <summary>
            Base class for GetObject, GetPoint, GetSphere, etc.
            
            You will never directly create a GetBaseClass but you will use its member
            functions after calling GetObject.Gets(), GetPoint.Get(), and so on.
            
            Provides tools to set command prompt, set command options, and specify
            if the "get" can optionally accept numbers, nothing (pressing enter),
            and undo.
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.SetCommandPrompt(System.String)">
            <summary>
            Sets prompt message that appears in the command prompt window.
            </summary>
            <param name="prompt">command prompt message.</param>
            <example>
            <code source='examples\vbnet\ex_addline.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addline.cs' lang='cs'/>
            <code source='examples\py\ex_addline.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.SetCommandPromptDefault(System.String)">
            <summary>
            Sets message that describes what default value will be used if the user presses enter.
            This description appears in angle brackets &lt;> in the command prompt window. You do
            not need to provide a default value description unless you explicity enable AcceptNothing.
            </summary>
            <param name="defaultValue">description of default value.</param>
            <example>
            ON_3dPoint default_center = new ON_3dPoint(2,3,4);
            GetPoint gp = new GetPoint();
            gp.SetCommandPrompt( "Center point" );
            gp.SetCommandPromptDefault( "(2,3,4)" );
            gp.AcceptNothing(true);
            gp.GetPoint();
            if ( gp.Result() == GetResult.Nothing )
              point = default_center;
            </example>
            <remarks>
            If you have a simple default point, number, or string, it is easier to use SetDefaultPoint,
            SetDefaultNumber, or SetDefaultString. SetCommandPromptDefault and AcceptNothing can be used
            for providing more advanced UI behavior.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.SetDefaultPoint(Rhino.Geometry.Point3d)">
            <summary>
            Sets a point as default value that will be returned if the user presses the ENTER key during the get.
            </summary>
            <param name="point">value for default point.</param>
            <remarks>
            Calling SetDefaultPoint will automatically handle setting the command prompt default and reacting to
            the user pressing ENTER.  If the user presses enter to accept the default point, GetResult.Point is
            returned and RhinoGet.GotDefault() will return true. Calling SetDefaultPoint will clear any previous
            calls to SetDefaultString or SetDefaultNumber.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.SetDefaultNumber(System.Double)">
            <summary>
            Sets a number as default value that will be returned if the user presses ENTER key during the get.
            </summary>
            <param name="defaultNumber">value for default number.</param>
            <remarks>
            Calling SetDefaultNumber will automatically handle setting the command prompt default and
            reacting to the user pressing ENTER. If the user presses ENTER to accept the default number,
            GetResult.Number is returned and RhinoGet.GotDefault() will return true. Calling
            SetDefaultNumber will clear any previous calls to SetDefaultString or SetDefaultPoint.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.SetDefaultInteger(System.Int32)">
            <summary>
            Sets a number as default value that will be returned if the user presses ENTER key during the get.
            </summary>
            <param name="defaultValue">value for default number.</param>
            <remarks>
            Calling SetDefaultInteger will automatically handle setting the command prompt default and
            reacting to the user pressing ENTER. If the user presses ENTER to accept the default integer,
            GetResult.Number is returned and CRhinoGet.GotDefault() will return true. Calling
            SetDefaultNumber will clear any previous calls to SetDefaultString or SetDefaultPoint.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.SetDefaultString(System.String)">
            <summary>
            Sets a string as default value that will be returned
            if the user presses ENTER key during the get.
            </summary>
            <param name="defaultValue">value for default string.</param>
            <remarks>
            Calling SetDefaultString will automatically handle setting the command prompt
            default and reacting to the user pressing ENTER. If the user presses ENTER to
            accept the default string, GetResult.String is returned and RhinoGet.GotDefault()
            will return true. Calling SetDefaultString will clear any previous calls to
            SetDefaultNumber or SetDefaultPoint.
            </remarks>
            <example>
            <code source='examples\vbnet\ex_addlayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayer.cs' lang='cs'/>
            <code source='examples\py\ex_addlayer.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.SetDefaultColor(System.Drawing.Color)">
            <summary>
            Sets a color as default value that will be returned if the user presses ENTER key during the get.
            </summary>
            <param name="defaultColor">value for default color.</param>
            <remarks>
            Calling SetDefaultColor will automatically handle setting the command prompt default and
            reacting to the user pressing ENTER.  If the user presses ENTER to accept the default color,
            GetResult.Color is returned and RhinoGet.GotDefault() will return true. Calling
            SetDefaultColor will clear any previous calls to SetDefaultString or SetDefaultPoint.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.SetWaitDuration(System.Int32)">
            <summary>
            Sets the wait duration (in milliseconds) of the getter. If the duration passes without 
            the user making a decision, the GetResult.Timeout code is returned.
            </summary>
            <param name="milliseconds">Number of milliseconds to wait.</param>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.ClearDefault">
            <summary>
            Clears any defaults set using SetDefaultPoint, SetDefaultNumber, SetDefaultString, or SetCommandPromptDefault.
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.GotDefault">
            <summary>
            Returns true if user pressed Enter to accept a default point, number,
            or string set using SetDefaultPoint, SetDefaultNumber, or SetDefaultString.
            </summary>
            <returns>true if the result if the default point, number or string set. Otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOption(System.String)">
            <summary>
            Adds a command line option.
            </summary>
            <param name="englishOption">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <returns>
            option index value (&gt;0) or 0 if option cannot be added.
            </returns>
            <example>
            <code source='examples\vbnet\ex_advanceddisplay.vb' lang='vbnet'/>
            <code source='examples\cs\ex_advanceddisplay.cs' lang='cs'/>
            <code source='examples\py\ex_advanceddisplay.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOption(System.String,System.String)">
            <summary>
            Adds a command line option.
            </summary>
            <param name="englishOption">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="englishOptionValue">The option value in English, visualized after an equality sign.</param>
            <returns>
            Option index value (&gt;0) or 0 if option cannot be added.
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOption(Rhino.UI.LocalizeStringPair)">
            <summary>
            Adds a command line option.
            </summary>
            <param name="optionName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <returns>
            option index value (&gt;0) or 0 if option cannot be added.
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOption(Rhino.UI.LocalizeStringPair,Rhino.UI.LocalizeStringPair)">
            <summary>
            Adds a command line option.
            </summary>
            <param name="optionName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="optionValue">The localized value visualized after an equality sign.</param>
            <returns>
            option index value (&gt;0) or 0 if option cannot be added.
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionDouble(System.String,Rhino.Input.Custom.OptionDouble@,System.String)">
            <summary>
            Adds a command line option to get numbers and automatically save the value.
            </summary>
            <param name="englishName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="numberValue">Current value.</param>
            <param name="prompt">
            option prompt shown if the user selects this option.  If null or empty, then the
            option name is used as the get number prompt.
            </param>
            <returns>
            option index value (&gt;0) or 0 if option cannot be added.
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionDouble(Rhino.UI.LocalizeStringPair,Rhino.Input.Custom.OptionDouble@,System.String)">
            <summary>
            Adds a command line option to get numbers and automatically saves the value.
            </summary>
            <param name="optionName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="numberValue">The current number value.</param>
            <param name="prompt">
            option prompt shown if the user selects this option.  If null or empty, then the
            option name is used as the get number prompt.
            </param>
            <returns>
            option index value (&gt;0) or 0 if option cannot be added.
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionDouble(System.String,Rhino.Input.Custom.OptionDouble@)">
            <summary>
            Adds a command line option to get numbers and automatically save the value.
            </summary>
            <param name="englishName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="numberValue">The current number value.</param>
            <returns>
            Option index value (&gt;0) or 0 if option cannot be added.
            </returns>
            <example>
            <code source='examples\vbnet\ex_commandlineoptions.vb' lang='vbnet'/>
            <code source='examples\cs\ex_commandlineoptions.cs' lang='cs'/>
            <code source='examples\py\ex_commandlineoptions.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionDouble(Rhino.UI.LocalizeStringPair,Rhino.Input.Custom.OptionDouble@)">
            <summary>
            Adds a command line option to get numbers and automatically save the value.
            </summary>
            <param name="optionName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="numberValue">The current number value.</param>
            <returns>
            option index value (&gt;0) or 0 if option cannot be added.
            </returns>
            <example>
            <code source='examples\vbnet\ex_commandlineoptions.vb' lang='vbnet'/>
            <code source='examples\cs\ex_commandlineoptions.cs' lang='cs'/>
            <code source='examples\py\ex_commandlineoptions.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionInteger(System.String,Rhino.Input.Custom.OptionInteger@,System.String)">
            <summary>
            Adds a command line option to get integers and automatically save the value.
            </summary>
            <param name="englishName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="intValue">The current integer value.</param>
            <param name="prompt">
            option prompt shown if the user selects this option.  If null or empty, then the
            option name is used as the get number prompt.
            </param>
            <returns>
            option index value (&gt;0) or 0 if option cannot be added.
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionInteger(Rhino.UI.LocalizeStringPair,Rhino.Input.Custom.OptionInteger@,System.String)">
            <summary>
            Adds a command line option to get integers and automatically save the value.
            </summary>
            <param name="optionName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="intValue">The current integer value.</param>
            <param name="prompt">
            option prompt shown if the user selects this option.  If null or empty, then the
            option name is used as the get number prompt.
            </param>
            <returns>
            option index value (&gt;0) or 0 if option cannot be added.
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionInteger(System.String,Rhino.Input.Custom.OptionInteger@)">
            <summary>
            Adds a command line option to get integers and automatically save the value.
            </summary>
            <param name="englishName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="intValue">The current integer value.</param>
            <returns>
            option index value (&gt;0) or 0 if option cannot be added.
            </returns>
            <example>
            <code source='examples\vbnet\ex_commandlineoptions.vb' lang='vbnet'/>
            <code source='examples\cs\ex_commandlineoptions.cs' lang='cs'/>
            <code source='examples\py\ex_commandlineoptions.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionInteger(Rhino.UI.LocalizeStringPair,Rhino.Input.Custom.OptionInteger@)">
            <summary>
            Adds a command line option to get integers and automatically save the value.
            </summary>
            <param name="optionName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="intValue">The current integer value.</param>
            <returns>
            option index value (&gt;0) or 0 if option cannot be added.
            </returns>
            <example>
            <code source='examples\vbnet\ex_commandlineoptions.vb' lang='vbnet'/>
            <code source='examples\cs\ex_commandlineoptions.cs' lang='cs'/>
            <code source='examples\py\ex_commandlineoptions.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionColor(Rhino.UI.LocalizeStringPair,Rhino.Input.Custom.OptionColor@,System.String)">
            <summary>
            Add a command line option to get colors and automatically save the value.
            </summary>
            <param name="optionName">option description.</param>
            <param name="colorValue">The current color value.</param>
            <param name="prompt">option prompt shown if the user selects this option</param>
            <returns>option index value (&gt;0) or 0 if option cannot be added.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionColor(Rhino.UI.LocalizeStringPair,Rhino.Input.Custom.OptionColor@)">
            <summary>
            Add a command line option to get colors and automatically save the value.
            </summary>
            <param name="optionName">option description</param>
            <param name="colorValue">The current color value.</param>
            <returns>option index value (&gt;0) or 0 if option cannot be added.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionColor(System.String,Rhino.Input.Custom.OptionColor@,System.String)">
            <summary>
            Add a command line option to get colors and automatically save the value.
            </summary>
            <param name="englishName">option description</param>
            <param name="colorValue">The current color value.</param>
            <param name="prompt">The command prompt will show this during picking.</param>
            <returns>option index value (&gt;0) or 0 if option cannot be added.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionColor(System.String,Rhino.Input.Custom.OptionColor@)">
            <summary>
            Add a command line option to get colors and automatically save the value.
            </summary>
            <param name="englishName">option description</param>
            <param name="colorValue">The current color value.</param>
            <returns>option index value (&gt;0) or 0 if option cannot be added.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionToggle(System.String,Rhino.Input.Custom.OptionToggle@)">
            <summary>
            Adds a command line option to toggle a setting.
            </summary>
            <param name="englishName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="toggleValue">The current toggle value.</param>
            <returns>option index value (&gt;0) or 0 if option cannot be added.</returns>
            <example>
            <code source='examples\vbnet\ex_commandlineoptions.vb' lang='vbnet'/>
            <code source='examples\cs\ex_commandlineoptions.cs' lang='cs'/>
            <code source='examples\py\ex_commandlineoptions.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionToggle(Rhino.UI.LocalizeStringPair,Rhino.Input.Custom.OptionToggle@)">
            <summary>
            Adds a command line option to toggle a setting.
            </summary>
            <param name="optionName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="toggleValue">The current toggle value.</param>
            <returns>option index value (&gt;0) or 0 if option cannot be added.</returns>
            <example>
            <code source='examples\vbnet\ex_commandlineoptions.vb' lang='vbnet'/>
            <code source='examples\cs\ex_commandlineoptions.cs' lang='cs'/>
            <code source='examples\py\ex_commandlineoptions.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionList(System.String,System.Collections.Generic.IEnumerable{System.String},System.Int32)">
            <summary>
            Adds a command line list option.
            </summary>
            <param name="englishOptionName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="listValues">The string values.</param>
            <param name="listCurrentIndex">Zero based index of current option.</param>
            <returns>option index value (&gt;0) or 0 if option cannot be added.</returns>
            <example>
            <code source='examples\vbnet\ex_objectdisplaymode.vb' lang='vbnet'/>
            <code source='examples\cs\ex_objectdisplaymode.cs' lang='cs'/>
            <code source='examples\py\ex_objectdisplaymode.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionList(Rhino.UI.LocalizeStringPair,System.Collections.Generic.IEnumerable{Rhino.UI.LocalizeStringPair},System.Int32)">
            <summary>
            Adds a command line list option.
            </summary>
            <param name="optionName">
            Must only consist of letters and numbers (no characters list periods, spaces, or dashes)
            </param>
            <param name="listValues">The string values.</param>
            <param name="listCurrentIndex">Zero based index of current option.</param>
            <returns>option index value (&gt;0) or 0 if option cannot be added.</returns>
            <example>
            <code source='examples\vbnet\ex_objectdisplaymode.vb' lang='vbnet'/>
            <code source='examples\cs\ex_objectdisplaymode.cs' lang='cs'/>
            <code source='examples\py\ex_objectdisplaymode.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionEnumList``1(System.String,``0)">
            <summary>
            Add a choice of enum values as list option 
            </summary>
            <typeparam name="T">The enum type</typeparam>
            <param name="englishOptionName">The name of the option</param>
            <param name="defaultValue">The default value</param>
            <exception cref="T:System.ArgumentException">Gets thrown if defaultValue provided is not an enum type.</exception>
            <returns>Option index</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AddOptionEnumSelectionList``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Int32)">
            <summary>
            Add a list of enum values as option list. Use enumSelection[go.Option.CurrentListOptionIndex] to retrieve selection.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="englishOptionName"></param>
            <param name="enumSelection"></param>
            <param name="listCurrentIndex"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.GetSelectedEnumValue``1">
            <summary>
            Returns the selected enum value. Use this in combination with <see cref="M:Rhino.Input.Custom.GetBaseClass.AddOptionEnumList``1(System.String,``0)"/>
            </summary>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.ArgumentException">Gets thrown if type T is not an enum type.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If 0 &gt;= CurrentListOptionIndex or CurrentListOptionIndex &gt; N where N is the number of enum values.</exception>
            <returns></returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.GetSelectedEnumValueFromSelectionList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Returns the selected enum value by looking at the list of values from which to select.
            Use this in combination with <see cref="M:Rhino.Input.Custom.GetBaseClass.AddOptionEnumSelectionList``1(System.String,System.Collections.Generic.IEnumerable{``0},System.Int32)"/>
            </summary>
            <typeparam name="T"></typeparam>
            <param name="selectionList"> </param>
            <exception cref="T:System.ArgumentException">Gets thrown if type T is not an enum type.</exception>
            <exception cref="T:System.IndexOutOfRangeException">If 0 &gt;= CurrentListOptionIndex or CurrentListOptionIndex &gt; N where N is the number of enum values.</exception>
            <returns></returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.ClearCommandOptions">
            <summary>Clear all command options.</summary>
            <example>
            <code source='examples\vbnet\ex_arraybydistance.vb' lang='vbnet'/>
            <code source='examples\cs\ex_arraybydistance.cs' lang='cs'/>
            <code source='examples\py\ex_arraybydistance.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.EnableTransparentCommands(System.Boolean)">
            <summary>
            Control the availability of transparent commands during the get.
            </summary>
            <param name="enable">
            If true, then transparent commands can be run during the get.
            If false, then transparent commands cannot be run during the get.
            </param>
            <remarks>
            Some Rhino commands are "transparent" and can be run inside of other
            commands.  Examples of transparent commands include the view
            manipulation commands like ZoomExtents, Top, etc., and the selection
            commands like SelAll, SelPoint, etc.
            By default transparent commands can be run during any get. If you
            want to disable this feature, then call EnableTransparentCommands(false)
            before calling GetString, GetPoint, GetObject, etc.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AcceptNothing(System.Boolean)">
            <summary>
            If you want to allow the user to be able to press enter in order to
            skip selecting a something in GetPoint.Get(), GetObject::GetObjects(),
            etc., then call AcceptNothing( true ) beforehand.
            </summary>
            <param name="enable">true if user is able to press enter in order to skip selecting.</param>
            <example>
            <code source='examples\vbnet\ex_addlayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayer.cs' lang='cs'/>
            <code source='examples\py\ex_addlayer.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AcceptUndo(System.Boolean)">
            <summary>
            If you want to allow the user to have an 'undo' option in GetPoint.Get(),
            GetObject.GetObjects(), etc., then call AcceptUndo(true) beforehand.
            </summary>
            <param name="enable">true if user is able to choose the 'Undo' option.</param>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AcceptNumber(System.Boolean,System.Boolean)">
            <summary>
            If you want to allow the user to be able to type in a number during GetPoint.Get(),
            GetObject::GetObjects(), etc., then call AcceptNumber() beforehand.
            If the user chooses to type in a number, then the result code GetResult.Number is
            returned and you can use RhinoGet.Number() to get the value of the number. If you
            are using GetPoint and you want "0" to return (0,0,0) instead of the number zero, 
            then set acceptZero = false.
            </summary>
            <param name="enable">true if user is able to type a number.</param>
            <param name="acceptZero">
            If you are using GetPoint and you want "0" to return (0,0,0) instead of the number zero, 
            then set acceptZero = false.
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AcceptPoint(System.Boolean)">
            <summary>
            If you want to allow the user to be able to type in a point then call AcceptPoint(true)
            before calling GetPoint()/GetObject(). If the user chooses to type in a number, then
            the result code GetResult.Point is returned and you can use RhinoGet.Point()
            to get the value of the point.
            </summary>
            <param name="enable">true if user is able to type in a point.</param>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AcceptColor(System.Boolean)">
            <summary>
            If you want to allow the user to be able to type in a color r,g,b or name
            during GetPoint.Get(), GetObject::GetObjects(), etc., then call AcceptColor(true)
            before calling GetPoint()/GetObject(). If the user chooses to type in a color,
            then the result code GetResult.Color is returned and you can use RhinoGet.Color()
            to get the value of the color.  If the get accepts points, then the user will not
            be able to type in r,g,b colors but will be able to type color names.
            </summary>
            <param name="enable">true if user is able to type a color.</param>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.AcceptString(System.Boolean)">
            <summary>
            If you want to allow the user to be able to type in a string during GetPoint.Get(),
            GetObject::GetObjects(), etc., then call AcceptString(true) before calling
            GetPoint()/GetObject(). If the user chooses to type in a string, then the result code
            GetResult.String is returned and you can use RhinoGet.String() to get the value of the string.
            </summary>
            <param name="enable">true if user is able to type a string.</param>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.Result">
            <summary>Returns result of the Get*() call.</summary>
            <returns>The result of the last Get*() call.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.CommandResult">
            <summary>
            Helper method for getting command result value from getter results.
            </summary>
            <returns>The converted command result.</returns>
            <example>
            <code source='examples\vbnet\ex_addbackgroundbitmap.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbackgroundbitmap.cs' lang='cs'/>
            <code source='examples\py\ex_addbackgroundbitmap.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.Number">
            <summary>
            Gets a number if GetPoint.Get(), GetObject.GetObjects(), etc., returns GetResult.Number.
            </summary>
            <returns>The number chosen by the user.</returns>
            <example>
            <code source='examples\vbnet\ex_addbackgroundbitmap.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbackgroundbitmap.cs' lang='cs'/>
            <code source='examples\py\ex_addbackgroundbitmap.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.StringResult">
            <summary>
            Gets a string if GetPoint.Get(), GetObject.GetObjects(), etc., returns GetResult.String.
            </summary>
            <returns>The string chosen by the user.</returns>
            <example>
            <code source='examples\vbnet\ex_addlayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayer.cs' lang='cs'/>
            <code source='examples\py\ex_addlayer.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.Point">
            <summary>
            Gets a point if Get*() returns GetResult.Point.
            </summary>
            <returns>The point chosen by the user.</returns>
            <example>
            <code source='examples\vbnet\ex_addline.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addline.cs' lang='cs'/>
            <code source='examples\py\ex_addline.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.Vector">
            <summary>
            Gets a direction if Get*() returns GetResult.Point (Set by some digitizers, but in general it's (0,0,0).
            </summary>
            <returns>The vector chosen by the user.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.Color">
            <summary>Gets a color if Get*() returns GetResult.Color.</summary>
            <returns>The color chosen by the user.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.View">
            <summary>
            Gets a view the user clicked in during GetPoint.Get(), GetObject.GetObjects(), etc.
            </summary>
            <returns>The view chosen by the user.</returns>
            <example>
            <code source='examples\vbnet\ex_addbackgroundbitmap.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbackgroundbitmap.cs' lang='cs'/>
            <code source='examples\py\ex_addbackgroundbitmap.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.PickRectangle">
            <summary>
            If the get was a GetObjects() and the mouse was used to select the objects,
            then the returned rect has left &lt; right and top &lt; bottom. This rect
            is the Windows GDI screen coordinates of the picking rectangle.
            RhinoViewport.GetPickXform( pick_rect, pick_xform )
            will calculate the picking transformation that was used.
            In all other cases, left=right=top=bottom=0;
            </summary>
            <returns>The picking rectangle; or 0 in the specified cases.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.Point2d">
            <summary>
            Returns location in view of point in selected in GetPoint::Get() or GetPoint::Get2dPoint().
            (0,0) = upper left corner of window.
            </summary>
            <returns>The location.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.Rectangle2d">
            <summary>
            Returns the location in the view of the 2d rectangle selected in GetPoint::Get2dRectangle().
            rect.left &lt; rect.right and rect.top &lt; rect.bottom
            (0,0) = upper left corner of window.
            </summary>
            <returns>The rectangle.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetBaseClass.Line2d">
            <summary>
            Returns two points defining the location in the view window of the 2d line selected
            in GetPoint::Get2dLine().
            <para>(0,0) = upper left corner of window.</para>
            </summary>
            <returns>An array with two 2D points.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.#ctor">
            <summary>Create a new GetPoint.</summary>
            <example>
            <code source='examples\vbnet\ex_addline.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addline.cs' lang='cs'/>
            <code source='examples\py\ex_addline.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.SetBasePoint(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Sets a base point used by ortho snap, from snap, planar snap, etc.
            </summary>
            <param name="basePoint">The new base point.</param>
            <param name="showDistanceInStatusBar">
            If true, then the distance from base_point to the current point will be in the
            status bar distance pane.
            </param>
            <example>
            <code source='examples\vbnet\ex_addline.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addline.cs' lang='cs'/>
            <code source='examples\py\ex_addline.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.ConstrainDistanceFromBasePoint(System.Double)">
            <summary>
            Sets distance constraint from base point.
            </summary>
            <param name="distance">
            pass UnsetValue to clear this constraint. Pass 0.0 to disable the
            ability to set this constraint by typing a number during GetPoint.
            </param>
            <remarks>
            If the base point is set and the distance from base point constraint
            is > 0, then the picked point is constrained to be this distance
            from the base point.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.DrawLineFromPoint(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Use DrawLineFromPoint() if you want a dynamic line drawn from a point to the point being picked.
            </summary>
            <param name="startPoint">
            The line is drawn from startPoint to the point being picked. If the base
            point has not been set, then it is set to startPoint.
            </param>
            <param name="showDistanceInStatusBar">
            if true, the distance from the basePoint to the point begin picked is shown in the status bar.
            </param>
            <remarks>
            Calling DrawLineFromPoint automatically enables drawing the line. Use
            EnableDrawLineFromPoint() to toggle the line drawing state.
            </remarks>
            <example>
            <code source='examples\vbnet\ex_addline.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addline.cs' lang='cs'/>
            <code source='examples\py\ex_addline.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.EnableDrawLineFromPoint(System.Boolean)">
            <summary>
            Controls drawing of dynamic a line from the start point.
            </summary>
            <param name="enable">
            if true, a dynamic line is drawn from the DrawLineFromPoint startPoint to the point being picked.
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.PermitOrthoSnap(System.Boolean)">
            <summary>
            Controls availability of ortho snap. Default is true.
            </summary>
            <param name="permit">
            if true, then GetPoint pays attention to the Rhino "ortho snap" and "planar snap" settings
            reported by ModelAidSettings.Ortho and ModelAidSettings.Planar.
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.PermitFromOption(System.Boolean)">
            <summary>
            Control the availability of the built-in "From" option. By default, the "From" option is enabled.
            </summary>
            <param name="permit">
            if true, then the "From" option is automatically avaiable in GetPoint.
            </param>
            <remarks>
            The GetPoint "From" option is never visible on the command line and the user must
            type the complete option name to activate the "From" option. When the GetPoint "From"
            snap is enabled, the user set/change the base point during GetPoint by typing "From" and
            picking a point.
            A related option is the builit-in distance from base point constraint that is can be set
            before GetPoint is called by passing a value to GetPoint::ConstrainDistanceFromBasePoint 
            or during GetPoint by entering a number.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.PermitConstraintOptions(System.Boolean)">
            <summary>
            Control the availability of the built-in linear, planar, curve, and surface
            constraint options like "Along", "AlongPerp", "AlongTan", "AlongParallel",
            "Between", "OnCrv", "OnSrf", ".x", ".y", ".z", ".xy", etc.
            </summary>
            <param name="permit">
            if true, then the built-in contraint options are automatically avaiable in GetPoint.
            </param>
            <remarks>
            By default, these built-in constraint options are availble unless an explicit
            constraint is added by calling one of the GetPoint::Constrain functions. Calling
            GetPoint::ClearConstraints automatically enables the built-in constraint options.
            The built-in constraint options are never visible on the command line and the
            user must type the complete option name to activate these options.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.PermitTabMode(System.Boolean)">
            <summary>
            Permits the use of the tab key to define a line constraint.
            </summary>
            <param name="permit">If true, then the built-in tab key mode is available.</param>
            <remarks>By default, use of the tab key is supported.</remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.PermitElevatorMode(System.Int32)">
            <summary>
            Permits the use of the control key to define a line constraint.
            </summary>
            <param name="permitMode">
            0: no elevator modes are permitted
            1: fixed plane elevator mode (like the Line command)
            2: cplane elevator mode (like object dragging)
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.PermitObjectSnap(System.Boolean)">
            <summary>
            By default, object snaps like "end", "near", etc. are controled by the user.
            If you want to disable this ability, then call PermitObjectSnap(false).
            </summary>
            <param name="permit">true to permit snapping to objects.</param>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.AddSnapPoint(Rhino.Geometry.Point3d)">
            <summary>
            Adds a point to the list of osnap points.
            </summary>
            <param name="point">A point.</param>
            <returns>Total number of snap points.</returns>
            <remarks>
            When point osnap is enabled, GetPoint will snap to points in the Rhino model.
            If you want the user to be able to snap to additional points, then use
            GetPoint::AddSnapPoints to specify the locations of these additional points.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.AddSnapPoints(Rhino.Geometry.Point3d[])">
            <summary>
            Adds points to the list of osnap points.
            </summary>
            <param name="points">An array of points to snap onto.</param>
            <returns>Total number of snap points.</returns>
            <remarks>
            When point osnap is enabled, GetPoint will snap to points in the Rhino model.
            If you want the user to be able to snap to additional points, then use
            GetPoint::AddSnapPoints to specify the locations of these additional points.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.AddConstructionPoint(Rhino.Geometry.Point3d)">
            <summary>
            Adds a point to the list of construction points.
            </summary>
            <param name="point">A point to be added.</param>
            <returns>Total number of construction points.</returns>
            <remarks>
            Construction points are like snap points except that they get snapped to even when
            point osnap is off.  Typically, there are only a few construction points while there
            can be many snap points. For example, when polylines are drawn the start point is a
            construction point and the other points are snap points.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.AddConstructionPoints(Rhino.Geometry.Point3d[])">
            <summary>
            Adds points to the list of construction points.
            </summary>
            <param name="points">An array of points to be added.</param>
            <returns>Total number of construction points.</returns>
            <remarks>
            Construction points are like snap points except that they get snapped to even when
            point osnap is off.  Typically, there are only a few construction points while there
            can be many snap points. For example, when polylines are drawn the start point is a
            construction point and the other points are snap points.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.ClearSnapPoints">
            <summary>
            Remove all snap points.
            </summary>
            <remarks>
            When point osnap is enabled, GetPoint will snap to points in the Rhino model.
            If you want the user to be able to snap to additional points, then use GetPoint::AddSnapPoints
            tp specify the locations of these additional points.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.ClearConstructionPoints">
            <summary>
            Remove all construction points.
            </summary>
            <remarks>
            Construction points are like snap points except that they get snapped to
            even when point osnap is off. Typically, there are only a few construction
            points while there can be many snap points. For example, when polylines
            are drawn the start point is a construction point and the other points are
            snap points.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.GetSnapPoints">
            <summary>
            Gets current snap points.
            </summary>
            <returns>An array of points.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.GetConstructionPoints">
            <summary>
            Gets current construction points.
            </summary>
            <returns>An array of points.</returns>
            <remarks>
            Construction points are like snap points except that they get snapped to
            even when point osnap is off. Typically, there are only a few construction
            points while there can be many snap points. For example, when polylines
            are drawn the start point is a construction point and the other points are
            snap points.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.EnableCurveSnapTangentBar(System.Boolean,System.Boolean)">
            <summary>
            Controls display of the curve snap tangent bar icon.
            </summary>
            <param name="drawTangentBarAtSnapPoint">
            true to draw a tangent bar icon whenever GetPoint snaps to a curve.
            </param>
            <param name="drawEndPoints">
            true to draw points at the end of the tangent bar.
            </param>
            <remarks>
            The tangent bar is drawn by GetPoint::DynamicDraw. If you override GetPoint::DynamicDraw,
            then you must call the base class function.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.EnableCurveSnapPerpBar(System.Boolean,System.Boolean)">
            <summary>
            Controls display of the curve snap perpendicular bar icon.
            </summary>
            <param name="drawPerpBarAtSnapPoint">
            true to draw a tangent bar icon  whenever GetPoint snaps to a curve.
            </param>
            <param name="drawEndPoints">
            true to draw points at the end of the tangent bar.
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.EnableCurveSnapArrow(System.Boolean,System.Boolean)">
            <summary>
            Controls display of the curve snap arrow icon.
            </summary>
            <param name="drawDirectionArrowAtSnapPoint">
            true to draw arrow icon whenever GetPoint snaps to a curve.
            </param>
            <param name="reverseArrow">
            true if arrow icon direction should be the reverse of the first derivative direction.
            </param>
            <remarks>
            The tangent bar is drawn by GetPoint::DynamicDraw. If you override GetPoint::DynamicDraw,
            then you must call the base class function.
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.EnableSnapToCurves(System.Boolean)">
            <summary>
            If you want GetPoint() to try to snap to curves when the mouse is near a curve
            (like the center point in the Circle command when the AroundCurve option is on),
            then enable the snap to curves option.
            </summary>
            <param name="enable">Whether points should be enabled.</param>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>Constrains the picked point to lie on a line.</summary>
            <param name="from">The start point of constraint.</param>
            <param name="to">The end point of constraint.</param>
            <returns>true if constraint could be applied.</returns>
            <example>
            <code source='examples\vbnet\ex_arraybydistance.vb' lang='vbnet'/>
            <code source='examples\cs\ex_arraybydistance.cs' lang='cs'/>
            <code source='examples\py\ex_arraybydistance.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Line)">
            <summary>Constrains the picked point to lie on a line.</summary>
            <param name="line">A line to use as constraint.</param>
            <returns>true if constraint could be applied.</returns>
            <example>
            <code source='examples\vbnet\ex_constrainedcopy.vb' lang='vbnet'/>
            <code source='examples\cs\ex_constrainedcopy.cs' lang='cs'/>
            <code source='examples\py\ex_constrainedcopy.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Arc)">
            <summary>Constrains the picked point to lie on an arc.</summary>
            <param name="arc">An arc to use as constraint.</param>
            <returns>true if constraint could be applied.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Circle)">
            <summary>Constrains the picked point to lie on a circle.</summary>
            <param name="circle">A circle to use as constraint.</param>
            <returns>true if constraint could be applied.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Plane,System.Boolean)">
            <summary>constrain the picked point to lie on a plane.</summary>
            <param name="plane">A plane to use as constraint.</param>
            <param name="allowElevator">true if elevator mode should be allowed at user request.</param>
            <returns>true if constraint could be applied.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Sphere)">
            <summary>Constrains the picked point to lie on a sphere.</summary>
            <param name="sphere">A sphere to use as constraint.</param>
            <returns>true if constraint could be applied.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Cylinder)">
            <summary>Constrains the picked point to lie on a cylinder.</summary>
            <param name="cylinder">A cylinder to use as constraint.</param>
            <returns>true if constraint could be applied.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Curve,System.Boolean)">
            <summary>Constrains the picked point to lie on a curve.</summary>
            <param name="curve">A curve to use as constraint.</param>
            <param name="allowPickingPointOffObject">
            defines whether the point pick is allowed to happen off object. When false,
            a "no no" cursor is shown when the cursor is not on the object. When true,
            a normal point picking cursor is used and the marker is visible also when
            the cursor is not on the object.
            </param>
            <returns>true if constraint could be applied.</returns>
            <example>
            <code source='examples\vbnet\ex_insertknot.vb' lang='vbnet'/>
            <code source='examples\cs\ex_insertknot.cs' lang='cs'/>
            <code source='examples\py\ex_insertknot.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Surface,System.Boolean)">
            <summary>Constrains the picked point to lie on a surface.</summary>
            <param name="surface">A surface to use as constraint.</param>
            <param name="allowPickingPointOffObject">
            defines whether the point pick is allowed to happen off object. When false,
            a "no no" cursor is shown when the cursor is not on the object. When true,
            a normal point picking cursor is used and the marker is visible also when
            the cursor is not on the object.
            </param>
            <returns>true if constraint could be applied.</returns>
            <example>
            <code source='examples\vbnet\ex_orientonsrf.vb' lang='vbnet'/>
            <code source='examples\cs\ex_orientonsrf.cs' lang='cs'/>
            <code source='examples\py\ex_orientonsrf.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Brep,System.Int32,System.Int32,System.Boolean)">
            <summary>Constrains the picked point to lie on a brep.</summary>
            <param name="brep">A brep to use as constraint.</param>
            <param name="wireDensity">
            When wire_density&lt;0, isocurve intersection snapping is turned off, when wire_density>=0, the value
            defines the isocurve density used for isocurve intersection snapping.
            </param>
            <param name="faceIndex">
            When face_index &lt;0, constrain to whole brep. When face_index >=0, constrain to individual face.
            </param>
            <param name="allowPickingPointOffObject">
            defines whether the point pick is allowed to happen off object. When false,
            a "no no" cursor is shown when the cursor is not on the object. When true,
            a normal point picking cursor is used and the marker is visible also when
            the cursor is not on the object.
            </param>
            <returns>true if constraint could be applied.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Constrain(Rhino.Geometry.Mesh,System.Boolean)">
            <summary>Constrains the picked point to lie on a mesh.</summary>
            <param name="mesh">A mesh to use as constraint.</param>
            <param name="allowPickingPointOffObject">
            defines whether the point pick is allowed to happen off object. When false,
            a "no no" cursor is shown when the cursor is not on the object. When true,
            a normal point picking cursor is used and the marker is visible also when
            the cursor is not on the object.
            </param>
            <returns>true if constraint could be applied.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.ConstrainToConstructionPlane(System.Boolean)">
            <summary>
            If enabled, the picked point is constrained to be on the active construction plane.
            If the base point is set, then the point is constrained to be on the plane that contains
            the base point and is parallel to the active construction plane. By default this
            constraint is enabled.
            </summary>
            <param name="throughBasePoint">true if the base point should be used as compulsory level reference.</param>
            <returns>
            If true and the base point is set, then the point is constrained to be on the plane parallel
            to the construction plane that passes through the base point, even when planar mode is off.
            If throughBasePoint is false, then the base point shift only happens if planar mode is on.
            </returns>
            <example>
            <code source='examples\vbnet\ex_addbackgroundbitmap.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbackgroundbitmap.cs' lang='cs'/>
            <code source='examples\py\ex_addbackgroundbitmap.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.ConstrainToTargetPlane">
            <summary>
            Constrains point to lie on a plane that is parallel to the
            viewing plane and passes through the view's target point.
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.ConstrainToVirtualCPlaneIntersection(Rhino.Geometry.Plane)">
            <summary>
            If enabled, the picked point is constrained to be on the 
            intersection of the plane and the virtual CPlane going through
            the plane origin.
            If the planes are parallel, the constraint works just like planar constraint.
            </summary>
            <param name="plane">The plane used for the plane - virtual CPlane intersection.</param>
            <returns>true if the operation succeeded; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.ClearConstraints">
            <summary>
            Removes any explicit constraints added by calls to GetPoint::Constraint() and enable
            the built-in constraint options.
            </summary>
            <example>
            <code source='examples\vbnet\ex_arraybydistance.vb' lang='vbnet'/>
            <code source='examples\cs\ex_arraybydistance.cs' lang='cs'/>
            <code source='examples\py\ex_arraybydistance.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.InterruptMouseMove">
            <summary>
            If you have lengthy computations in OnMouseMove() and/or DymanicDraw()
            overrides, then periodically call InterruptMouseMove() to see if you
            should interrupt your work because the mouse has moved again.
            </summary>
            <returns>true if you should interrupt your work; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.OnMouseMove(Rhino.Input.Custom.GetPointMouseEventArgs)">
            <summary>Calls the <see cref="E:Rhino.Input.Custom.GetPoint.MouseMove"/> event and can/should be called by overriding implementation.</summary>
            <param name="e">Current argument for the event.</param>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.OnMouseDown(Rhino.Input.Custom.GetPointMouseEventArgs)">
            <summary>Default calls the MouseDown event.</summary>
            <param name="e">Current argument for the event.</param>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.OnDynamicDraw(Rhino.Input.Custom.GetPointDrawEventArgs)">
            <summary>Default calls the DynamicDraw event.</summary>
            <param name="e">Current argument for the event.</param>
            <example>
            <code source='examples\vbnet\ex_getpointdynamicdraw.vb' lang='vbnet'/>
            <code source='examples\cs\ex_getpointdynamicdraw.cs' lang='cs'/>
            <code source='examples\py\ex_getpointdynamicdraw.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.OnPostDrawObjects(Rhino.Display.DrawEventArgs)">
            <summary>
            In the "rare" case that you need to draw some depth buffered geometry during
            a GetPoint operation, override the OnPostDrawObjects function.
            NOTE!! Overriding this function comes with a significant performance penalty because the
            scene needs to be fully regenerated every frame where the standard
            DynamicDraw event draws temporary decorations (geometry) on top of a static scene.
            </summary>
            <param name="e">Current argument for the event.</param>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Get(System.Boolean)">
            <summary>
            After setting up options and so on, call this method to get a 3d point.
            </summary>
            <param name="onMouseUp">
            If false, the point is returned when the left mouse button goes down.
            If true, the point is returned when the left mouse button goes up.
            </param>
            <returns><see cref="F:Rhino.Input.GetResult.Point"/> if the user chose a point; other enumeration value otherwise.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.Get">
            <summary>
            After setting up options and so on, call GetPoint::Get to get a 3d point. The
            point is retrieved when the mouse goes down.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addline.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addline.cs' lang='cs'/>
            <code source='examples\py\ex_addline.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.PointOnObject">
            <summary>
            Call this function to see if the point was on an object. If the point was
            on an object an ObjRef is returned; otherwise null is returned.
            </summary>
            <returns>A point object reference.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetPoint.PointOnCurve(System.Double@)">
            <summary>
            Use to determine is point was on a curve.
            </summary>
            <param name="t">
            If the point was on a curve, then the t is the curve
            parameter for the point.  The point returned by Point()
            is the same as curve.PointAt(t).
            </param>
            <returns>A curve at a specified parameter value.</returns>
            <example>
            <code source='examples\vbnet\ex_insertknot.vb' lang='vbnet'/>
            <code source='examples\cs\ex_insertknot.cs' lang='cs'/>
            <code source='examples\py\ex_insertknot.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Input.Custom.GetPoint.DynamicDrawColor">
            <summary>
            Color used by CRhinoGetPoint::DynamicDraw to draw the current point and
            the line from the base point to the current point.
            </summary>
        </member>
        <member name="E:Rhino.Input.Custom.GetPoint.MouseMove">
            <summary>
            Called every time the mouse moves. MouseMove is called once per mouse move and is called
            BEFORE any calls to OnDynamicDraw. If you are doing anything that takes a long time,
            periodically call InterruptMouseMove() to see if you should stop. If the view is such
            that the 2d screen point can't be mapped to a 3d point, the 'point' argument will be Unset.
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetPoint.Tag">
            <summary>
            Gets or sets an arbitrary object that can be attached to this <see cref="T:Rhino.Input.Custom.GetPoint"/> instance.
            Useful for passing some/ information that you may need in a DynamicDraw event since you can get at this Tag from
            the GetPointDrawEventArgs.
            </summary>
            <example>
            <code source="examples\vbnet\ex_arraybydistance.vb" lang="vbnet"/>
            <code source="examples\cs\ex_arraybydistance.cs" lang="cs"/>
            <code source="examples\py\ex_arraybydistance.py" lang="py"/>
            </example>
        </member>
        <member name="E:Rhino.Input.Custom.GetPoint.MouseDown">
            <summary>
            Called during Get2dRectangle, Get2dLine, and GetPoint(..,true) when the mouse down event for
            the initial point occurs. This function is not called during ordinary point getting because
            the mouse down event terminates an ordinary point get and returns a GetResult.Point result.
            </summary>
        </member>
        <member name="E:Rhino.Input.Custom.GetPoint.DynamicDraw">
             <summary>
             Event to use if you want to dynamically draw things as the mouse/digitizer moves.
             Every time the mouse moves, DynamicDraw will be called once per viewport. The
             calls to DynamicDraw happen AFTER the call to MouseMove.
            
             If you are drawing anything that takes a long time, periodically call 
             InterruptMouseMove() to see if you should stop.
             </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetPoint.FullFrameRedrawDuringGet">
            <summary>
            In the "RARE" case that you need to draw some depth buffered geometry during
            a Get() operation, setting this value to true will force entire frames to be redrawn
            while the user moves the mouse. This allows DisplayPipeline events to be triggered
            as well as OnPostDrawObjects
            NOTE!! Setting this value to true comes with a significant performance penalty because the
            scene needs to be fully regenerated every frame where the standard
            DynamicDraw event draws temporary decorations (geometry) on top of a static scene.
            </summary>
        </member>
        <member name="E:Rhino.Input.Custom.GetPoint.PostDrawObjects">
            <summary>
            Same as the DisplayPipeline.PostDrawObjects, but only works during the 
            operation of the Get() function.
            NOTE: You must set FullFrameRedrawDuringGet to true in order for this
            event to be called.
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetTransform.AddTransformObjects(Rhino.Collections.TransformObjectList)">
            <summary>
            Adds any objects you want transformed and grips you want transformed.
            Make sure no duplicates are in the list and that no grip ownwers are
            passed in as objects.
            </summary>
            <param name="list">A custom transform object list.</param>
        </member>
        <member name="M:Rhino.Input.Custom.GetTransform.CalculateTransform(Rhino.Display.RhinoViewport,Rhino.Geometry.Point3d)">
            <summary>
            Retrieves the final transformation.
            <para>Override this virtual function to provide your own custom transformation method.</para>
            </summary>
            <param name="viewport">A Rhino viewport that the user is using.</param>
            <param name="point">A point that the user is selecting.</param>
            <returns>A transformation matrix value.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetTransform.GetXform">
            <summary>
            Gets the Transformation.
            <para>Call this after having set up options and so on.</para>
            </summary>
            <returns>The result based on user choice.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.GripsDrawEventArgs.DrawControlPolygonLine(Rhino.Geometry.Line,Rhino.DocObjects.Custom.GripStatus,Rhino.DocObjects.Custom.GripStatus)">
            <summary>
            Draws the lines in a control polygons.
            <para>This is an helper function.</para>
            </summary>
            <param name="line">Line between two grips.</param>
            <param name="startStatus">Grip status at start of line.</param>
            <param name="endStatus">Grip status at end of line.</param>
        </member>
        <member name="M:Rhino.DocObjects.Custom.GripsDrawEventArgs.DrawControlPolygonLine(Rhino.Geometry.Line,System.Int32,System.Int32)">
            <summary>
            Draws the lines in a control polygons.
            <para>This is an helper function.</para>
            </summary>
            <param name="line">Line between two grips.</param>
            <param name="startStatus">Index of Grip status at start of line.</param>
            <param name="endStatus">Index if Grip status at end of line.</param>
        </member>
        <member name="M:Rhino.DocObjects.Custom.GripsDrawEventArgs.DrawControlPolygonLine(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Int32,System.Int32)">
            <summary>
            Draws the lines in a control polygons.
            <para>This is an helper function.</para>
            </summary>
            <param name="start">The point start.</param>
            <param name="end">The point end.</param>
            <param name="startStatus">Index of Grip status at start of line defined by start and end.</param>
            <param name="endStatus">Index if Grip status at end of line defined by start and end.</param>
        </member>
        <member name="P:Rhino.DocObjects.Custom.GripsDrawEventArgs.DrawStaticStuff">
            <summary>
            If true, then draw stuff that moves when grips are dragged,
            like the curve being bent by a dragged control point.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Custom.GripsDrawEventArgs.DrawDynamicStuff">
            <summary>
            If true, then draw stuff that does not move when grips are
            dragged, like the control polygon of the "original" curve.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Custom.GripsDrawEventArgs.ControlPolygonStyle">
            <summary>
            What kind of line is used to display things like control polygons.
            0 = no control polygon,  1 = solid control polygon,  2 = dotted control polygon.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Custom.CustomObjectGrips.Dragging">
            <summary>
            Determines if grips are currently being dragged.
            </summary>
            <returns>true if grips are dragged.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.CustomObjectGrips.OnReset">
            <summary>
            Resets location of all grips to original spots and cleans up stuff that
            was created by dynamic dragging.  This is required when dragging is
            canceled or in the Copy command when grips are "copied". The override
            should clean up dynamic workspace stuff.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Custom.CustomObjectGrips.OnResetMeshes">
            <summary>
            Just before Rhino turns off object grips, it calls this function.
            If grips have modified any display meshes, they must override
            this function and restore the meshes to their original states.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Custom.CustomObjectGrips.OnUpdateMesh(Rhino.Geometry.MeshType)">
            <summary>
            Just before Rhino shades an object with grips on, it calls this method
            to update the display meshes.  Grips that modify surface or mesh objects
            must override this function and modify the display meshes here.
            </summary>
            <param name="meshType">The mesh type being updated.</param>
        </member>
        <member name="M:Rhino.DocObjects.Custom.CustomObjectGrips.NewGeometry">
            <summary>
            If the grips control just one object, then override NewGeometry(). When
            NewGeometry() is called, return new geometry calculated from the current
            grip locations. This happens once at the end of a grip drag.
            </summary>
            <returns>The new geometry. The default implementation returns null.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.CustomObjectGrips.OnDraw(Rhino.DocObjects.Custom.GripsDrawEventArgs)">
            <summary>
            Draws the grips. In your implementation, override this if you need to draw
            dynamic elements and then call this base implementation to draw the grips themselves.
            </summary>
            <param name="args">The grips draw event arguments.</param>
        </member>
        <member name="M:Rhino.DocObjects.Custom.CustomObjectGrips.NeighborGrip(System.Int32,System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>Get neighbors.</summary>
            <param name="gripIndex">index of grip where the search begins.</param>
            <param name="dr">
            <para>1 = next grip in the first parameter direction.</para>
            <para>-1 = prev grip in the first parameter direction.</para>
            </param>
            <param name="ds">
            <para>1 = next grip in the second parameter direction.</para>
            <para>-1 = prev grip in the second parameter direction.</para>
            </param>
            <param name="dt">
            <para>1 = next grip in the third parameter direction.</para>
            <para>-1 = prev grip in the third parameter direction.</para>
            </param>
            <param name="wrap">If true and object is "closed", the search will wrap.</param>
            <returns>Pointer to the desired neighbor or NULL if there is no neighbor.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.CustomObjectGrips.NurbsSurfaceGrip(System.Int32,System.Int32)">
            <summary>
            If the grips are control points of a NURBS surface, then this gets the
            index of the grip that controls the (i,j)-th cv.
            </summary>
            <param name="i">The index in the first dimension.</param>
            <param name="j">The index in the second dimension.</param>
            <returns>A grip controling a NURBS surface CV or null.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Custom.CustomObjectGrips.NurbsSurface">
            <summary>
            If the grips control a NURBS surface, this returns a pointer to that
            surface.  You can look at but you must NEVER change this surface.
            </summary>
            <returns>A pointer to a NURBS surface or null.</returns>
        </member>
        <member name="P:Rhino.DocObjects.Custom.CustomObjectGrips.NewLocation">
            <summary>
            true if some of the grips have been moved. GripObject.NewLocation() sets
            NewLocation=true.  Derived classes can set NewLocation to false after 
            updating temporary display information.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Custom.CustomObjectGrips.GripsMoved">
            <summary>
            If GripsMoved is true if some of the grips have ever been moved
            GripObject.NewLocation() sets GripsMoved=true.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Custom.CustomObjectGrips.OwnerObject">
            <summary>Owner of the grips.</summary>
        </member>
        <member name="T:Rhino.DocObjects.Tables.GroupTable">
            <summary>
            Group tables store the list of groups in a Rhino document.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.GroupTable.Find(System.String,System.Boolean)">
            <summary>Finds a group with a given name.</summary>
            <param name="groupName">
            Name of group to search for. Ignores case.
            </param>
            <param name="ignoreDeletedGroups">
            true means don't search deleted groups.
            </param>
            <returns>
            &gt;=0 index of the group with the given name.
            -1 no group found with the given name.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.GroupTable.Add(System.String)">
            <summary>Adds a new empty group to the group table.</summary>
            <param name="groupName">name of new group.</param>
            <returns>
            &gt;=0 index of new group. 
            -1 group not added because a group with that name already exists.
            </returns>
            <remarks>
            In some cases, calling Add() can cause the group indices to become invalid.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.Tables.GroupTable.Add">
            <summary>Adds a new empty group to the group table.</summary>
            <returns>
            &gt;=0 index of new group. 
            -1 group not added because a group with that name already exists.
            </returns>
            <remarks>
            In some cases, calling Add() can cause the group indices to become invalid.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.Tables.GroupTable.Add(System.String,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Adds a new group to the group table with a set of objects.
            </summary>
            <param name="groupName">Name of new group.</param>
            <param name="objectIds">An array, a list or any enumerable set of object IDs.</param>
            <returns>
            &gt;=0 index of new group. 
            <para>-1 group not added because a group with that name already exists.</para>
            </returns>
            <remarks>
            In some cases, calling Add() can cause the group indices to become invalid.
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.Tables.GroupTable.Add(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Adds a new group to the group table with a set of objects.
            </summary>
            <param name="objectIds">An array, a list or any enumerable set of object IDs.</param>
            <returns>
            &gt;=0 index of new group.
            <para>-1 group not added because a group with that name already exists.</para>
            </returns>
            <remarks>
            In some cases, calling Add() can cause the group indices to become invalid.
            </remarks>
            <example>
            <code source='examples\vbnet\ex_addobjectstogroup.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addobjectstogroup.cs' lang='cs'/>
            <code source='examples\py\ex_addobjectstogroup.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.GroupTable.AddToGroup(System.Int32,System.Guid)">
            <summary>
            Adds an object to an existing group.
            </summary>
            <param name="groupIndex">The group index value.</param>
            <param name="objectId">An ID of an object.</param>
            <returns>true if the operation was successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.GroupTable.AddToGroup(System.Int32,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Adds a list of objects to an existing group.
            </summary>
            <param name="groupIndex">The group index value.</param>
            <param name="objectIds">An array, a list or any enumerable set of IDs to objects.</param>
            <returns>true if at least an operation was successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.GroupTable.Delete(System.Int32)">
            <summary>
            Deletes a group from this table.
            <para>Deleted groups are kept in the runtime group table so that undo
            will work with groups.  Call IsDeleted() to determine if a group is deleted.</para>
            </summary>
            <param name="groupIndex">An group index to be deleted.</param>
            <returns>true if the operation was successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.GroupTable.GroupMembers(System.Int32)">
            <summary>
            Gets an array of all of the objects in a group.
            </summary>
            <param name="groupIndex">The index of the group in this table.</param>
            <returns>An array with all the objects in the specified group.</returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.GroupTable.Document">
            <summary>Document that owns this group table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.GroupTable.Count">
            <summary>Number of groups in the group table.</summary>
        </member>
        <member name="T:Rhino.UI.Gumball.GumballMode">
            <summary>
            Transformation modes for gumballs.
            </summary>
        </member>
        <member name="F:Rhino.UI.Gumball.GumballMode.Menu">
            <summary>gumball menu button was picked.</summary>
        </member>
        <member name="F:Rhino.UI.Gumball.GumballMode.TranslateFree">
            <summary>Unconstrained translation.</summary>
        </member>
        <member name="F:Rhino.UI.Gumball.GumballMode.TranslateX">
            <summary>Translation along a single axis.</summary>
        </member>
        <member name="F:Rhino.UI.Gumball.GumballMode.TranslateY">
            <summary>Translation along a single axis.</summary>
        </member>
        <member name="F:Rhino.UI.Gumball.GumballMode.TranslateZ">
            <summary>Translation along a single axis.</summary>
        </member>
        <member name="F:Rhino.UI.Gumball.GumballMode.TranslateXY">
            <summary>Translation in a plane.</summary>
        </member>
        <member name="F:Rhino.UI.Gumball.GumballMode.TranslateYZ">
            <summary>Translation in a plane.</summary>
        </member>
        <member name="F:Rhino.UI.Gumball.GumballMode.TranslateZX">
            <summary>Translation in a plane.</summary>
        </member>
        <member name="F:Rhino.UI.Gumball.GumballMode.ScaleX">
            <summary>
            GumballFrame.ScaleMode is used to enable multi-axis scaling.  This
            indicates which control is being dragged.
            </summary>
        </member>
        <member name="F:Rhino.UI.Gumball.GumballMode.ScaleY">
            <summary>
            GumballFrame.ScaleMode is used to enable multi-axis scaling.  This
            indicates which control is being dragged.
            </summary>
        </member>
        <member name="F:Rhino.UI.Gumball.GumballMode.ScaleZ">
            <summary>
            GumballFrame.ScaleMode is used to enable multi-axis scaling.  This
            indicates which control is being dragged.
            </summary>
        </member>
        <member name="M:Rhino.UI.Gumball.GumballObject.SetFromBoundingBox(Rhino.Geometry.Plane,Rhino.Geometry.BoundingBox)">
            <summary>
            Sets the gumball bounding box with respect to a frame.
            </summary>
            <param name="frame">The frame.</param>
            <param name="frameBoundingBox">Bounding box with respect to frame.</param>
            <returns>
            true if input is valid and gumball is set. false if input is not valid.
            In this case, gumball is set to the default.
            </returns>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.RelocateEnabled">
            <summary>
            When RelocateEnabled is true, the user can reposition the gumball by
            tapping the control key while dragging.  Once the repostion drag is
            terminated by releasing the/ mouse button, ordinary editing resumes.
            The default setting is true.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.MenuEnabled">
            <summary>
            When MenuEnabled is true, the menu "button" is drawn on the gumball.
            The default setting is true.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.TranslateXEnabled">
            <summary>
            TranslateXEnabled is true, the X axis translation control is available.
            The default setting is true.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.TranslateYEnabled">
            <summary>
            TranslateYEnabled is true, the Y axis translation control is available.
            The default setting is true.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.TranslateZEnabled">
            <summary>
            TranslateZEnabled is true, the Z axis translation control is available.
            The default setting is true.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.TranslateXYEnabled">
            <summary>
            When TranslateXY is true, the XY plane translation control is available
            in appropriate views. The default setting is true.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.TranslateYZEnabled">
            <summary>
            When TranslateYZ is true, the YZ plane translation control is available
            in appropriate views. The default setting is true.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.TranslateZXEnabled">
            <summary>
            When TranslateZX is true, the ZX plane translation control is available
            in appropriate views. The default setting is true.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.RotateXEnabled">
            <summary>
            When RotateX is true, the X rotation control is available. The default
            setting is true.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.RotateYEnabled">
            <summary>
            When RotateY is true, the Y rotation control is available. The default
            setting is true.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.RotateZEnabled">
            <summary>
            When RotateZ is true, the Z rotation control is available. The default
            setting is true.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.ScaleXEnabled">
            <summary>
            When ScaleXEnabled is true, the X scale control is available. The
            default setting is true.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.ScaleYEnabled">
            <summary>
            When ScaleYEnabled is true, the Y scale control is available. The
            default setting is true.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.ScaleZEnabled">
            <summary>
            When ScaleZEnabled is true, the Z scale control is available. The
            default setting is true.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.FreeTranslate">
            <summary>
            When FreeTranslate is 1, the center translation control can be dragged
            in any direction and moves the object the gumball controls. When
            FreeTranslate is 2, the center translation control can be dragged in any
            direction and moves the object the gumball itself. The default value is 2.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.ColorX">
            <summary>Default is Red.</summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.ColorY">
            <summary>Default is Green.</summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.ColorZ">
            <summary>Default is Blue.</summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.Radius">
            <summary>in pixels.</summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.ArrowHeadLength">
            <summary>in pixels.</summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.ArrowHeadWidth">
            <summary>in pixels.</summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.ScaleGripSize">
            <summary>in pixels.</summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.PlanarTranslationGripCorner">
            <summary>in pixels.</summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.PlanarTranslationGripSize">
            <summary>in pixels.</summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.AxisThickness">
            <summary>in pixels.</summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.ArcThickness">
            <summary>in pixels.</summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.MenuDistance">
            <summary>Distance of menu ball from center.</summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballAppearanceSettings.MenuSize">
            <summary>Radius of menu circle.</summary>
        </member>
        <member name="M:Rhino.UI.Gumball.GumballDisplayConduit.SetBaseGumball(Rhino.UI.Gumball.GumballObject)">
            <summary>
            Contents of the gumball are copied to the base gumball of this class.
            </summary>
            <param name="gumball">The gumball source.</param>
        </member>
        <member name="M:Rhino.UI.Gumball.GumballDisplayConduit.SetBaseGumball(Rhino.UI.Gumball.GumballObject,Rhino.UI.Gumball.GumballAppearanceSettings)">
            <summary>
            Contents of the gumball are copied to the base gumball of this class.
            </summary>
            <param name="gumball">The gumball source.</param>
            <param name="appearanceSettings">The gumball appearance and behavior settings.</param>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballDisplayConduit.PreTransform">
            <summary>
            The pre-transform is a transformation that needs to be applied before
            the gumball transformation.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballDisplayConduit.GumballTransform">
            <summary>
            The gumball transformation is the transformation calculated by comparing
            the current gumball to the starting BaseGumball.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballDisplayConduit.TotalTransform">
            <summary>
            The total transformation is GumballTransform * PreTransform.
            </summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballDisplayConduit.BaseGumball">
            <summary>Starting location.</summary>
        </member>
        <member name="P:Rhino.UI.Gumball.GumballDisplayConduit.PickResult">
            <summary>The inital mouse down event sets PickResult.</summary>
        </member>
        <member name="P:Rhino.DocObjects.HatchObject.HatchGeometry">
            <example>
            <code source='examples\vbnet\ex_replacehatchpattern.vb' lang='vbnet'/>
            <code source='examples\cs\ex_replacehatchpattern.cs' lang='cs'/>
            <code source='examples\py\ex_replacehatchpattern.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.HatchPattern.ReadFromFile(System.String,System.Boolean)">
            <summary>
            Reads hatch pattern definitions from a file.
            </summary>
            <param name="filename">
            Name of an existing file. If filename is null or empty, default hatch pattern filename is used.
            </param>
            <param name="quiet">
            If file doesn't exist, and quiet is false, an error meesage box is shown.
            </param>
            <returns>An array of hatch patterns. This can be null, but not empty.</returns>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.IsDeleted">
            <summary>
            Deleted hatch patterns are kept in the runtime hatch pattern table so that undo
            will work with hatch patterns.  Call IsDeleted to determine to determine if
            a hatch pattern is deleted.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.IsReference">
            <summary>
            Rhino allows multiple files to be viewed simultaneously. Hatch patterns in the
            document are "normal" or "reference". Reference hatch patterns are not saved.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.Index">
            <summary>
            Index in the hatch pattern table for this pattern. -1 if not in the table.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.HatchPattern.Name">
            <example>
            <code source='examples\vbnet\ex_hatchcurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_hatchcurve.cs' lang='cs'/>
            <code source='examples\py\ex_hatchcurve.py' lang='py'/>
            </example>
        </member>
        <member name="T:Rhino.DocObjects.Tables.HatchPatternTable">
            <summary>
            All of the hatch pattern definitions contained in a rhino document.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.HatchPatternTable.Find(System.String,System.Boolean)">
            <summary>
            Finds the hatch pattern with a given name. Search ignores case.
            </summary>
            <param name="name">The name of the hatch patter to be found.</param>
            <param name="ignoreDeleted">true means don't search deleted hatch patterns.</param>
            <returns>Index of the hatch pattern with the given name. -1 if no hatch pattern found.</returns>
            <example>
            <code source='examples\vbnet\ex_hatchcurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_hatchcurve.cs' lang='cs'/>
            <code source='examples\py\ex_hatchcurve.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.HatchPatternTable.Add(Rhino.DocObjects.HatchPattern)">
            <summary>
            Adds a new hatch pattern with specified definition to the table.
            </summary>
            <param name="pattern">
            definition of new hatch pattern. The information in pattern is copied.
            If patern.Name is empty the a unique name of the form "HatchPattern 01"
            will be automatically created.
            </param>
            <returns>
            >=0 index of new hatch pattern
            -1  not added because a hatch pattern with that name already exists or
            some other problem occured.
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.HatchPatternTable.Document">
            <summary>Document that owns this table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.HatchPatternTable.Count">
            <summary>Number of patterns in the table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.HatchPatternTable.Item(System.Int32)">
            <summary>
            Conceptually, the hatch pattern table is an array of hatch patterns.
            The operator[] can be used to get individual hatch patterns. A hatch pattern is
            either active or deleted and this state is reported by HatchPattern.IsDeleted.
            </summary>
            <param name="index">zero based array index.</param>
            <returns>
            If index is out of range, the current hatch pattern is returned.
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.HatchPatternTable.CurrentHatchPatternIndex">
            <summary>
            At all times, there is a "current" hatch pattern.  Unless otherwise
            specified, new objects are assigned to the current hatch pattern.
            The current hatch pattern is never locked, hidden, or deleted.
            </summary>
            <example>
            <code source='examples\vbnet\ex_hatchcurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_hatchcurve.cs' lang='cs'/>
            <code source='examples\py\ex_hatchcurve.py' lang='py'/>
            </example>
        </member>
        <member name="T:Rhino.DocObjects.InstanceDefinitionUpdateType">
            <summary>
            The possible relationships between the instance definition geometry
            and the archive containing the original defition.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionUpdateType.Static">
            <summary>
            The Rhino user interface uses the term "Embedded" for Static update types.
            This instance definition is never updated. If m_source_archive is set,
            it records the origin of the instance definition geometry, but
            m_source_archive is never used to update the instance definition.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionUpdateType.Embedded">
            <summary>
            This instance definition geometry was imported from another archive (m_source_archive)
            and is embedded. If m_source_archive changes, the user is asked if they want to update
            the instance definition.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionUpdateType.LinkedAndEmbedded">
            <summary>
            This instance definition geometry was imported from another archive (m_source_archive)
            and is embedded. If m_source_archive changes, the instance definition is automatically
            updated. If m_source_archive is not available, the instance definition is still valid.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionUpdateType.Linked">
            <summary>
            This instance definition geometry was imported from another archive (m_source_archive)
            and is not embedded. If m_source_archive changes, the instance definition is automatically
            updated. If m_source_archive is not available, the instance definition is not valid.
            This does not save runtime memory.  It may save a little disk space, but it is a  foolish
            option requested by people who do not understand all the issues.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.InstanceDefinitionLayerStyle">
            <summary>
            A InstanceDefinitionUpdateType.Static or InstanceDefinitionUpdateType.LinkedAndEmbedded idef
            must have LayerStyle = Unset, a InstanceDefinitionUpdateType.Linked InstanceDefnition must
            have LayerStyle = Active or Reference
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.InstanceDefinitionArchiveFileStatus">
            <summary>
            The archive file of a linked instance definition can have the following possible states.
            Use InstanceObject.ArchiveFileStatus to query a instance definition's archive file status.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionArchiveFileStatus.NotALinkedInstanceDefinition">
            <summary>
            The instance definition is not a linked instance definition.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionArchiveFileStatus.LinkedFileNotReadable">
            <summary>
            The instance definition's archive file is not readable.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionArchiveFileStatus.LinkedFileNotFound">
            <summary>
            The instance definition's archive file cannot be found.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionArchiveFileStatus.LinkedFileIsUpToDate">
            <summary>
            The instance definition's archive file is up-to-date.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionArchiveFileStatus.LinkedFileIsNewer">
            <summary>
            The instance definition's archive file is newer.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionArchiveFileStatus.LinkedFileIsOlder">
            <summary>
            The instance definition's archive file is older.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.InstanceDefinitionArchiveFileStatus.LinkedFileIsDifferent">
            <summary>
            The instance definition's archive file is different.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.InstanceObject.UsesDefinition(System.Int32,System.Int32@)">
            <summary>Determine if this reference uses an instance definition</summary>
            <param name="definitionIndex"></param>
            <param name="nestingLevel">
            If the instance definition is used, this is the definition's nesting depth
            </param>
            <returns>true or false depending on if the deifinition is used</returns>
        </member>
        <member name="M:Rhino.DocObjects.InstanceObject.Explode(System.Boolean,Rhino.DocObjects.RhinoObject[]@,Rhino.DocObjects.ObjectAttributes[]@,Rhino.Geometry.Transform[]@)">
            <summary>
            Explodes the instance reference into pieces.
            </summary>
            <param name="explodeNestedInstances">
            If true, then nested instance references are recursively exploded into pieces
            until actual geometry is found. If false, an InstanceObject is added to
            the pieces out parameter when this InstanceObject has nested references.
            </param>
            <param name="pieces">An array of Rhino objects will be assigned to this out parameter during this call.</param>
            <param name="pieceAttributes">An array of object attributes will be assigned to this out parameter during this call.</param>
            <param name="pieceTransforms">An array of the previously applied transform matrices will be assigned to this out parameter during this call.</param>
        </member>
        <member name="P:Rhino.DocObjects.InstanceObject.InstanceXform">
            <summary>
            transformation applied to an instance definition for this object.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.InstanceObject.InsertionPoint">
            <summary>Basepoint coordinates of a block.</summary>
            <example>
            <code source='examples\vbnet\ex_blockinsertionpoint.vb' lang='vbnet'/>
            <code source='examples\cs\ex_blockinsertionpoint.cs' lang='cs'/>
            <code source='examples\py\ex_blockinsertionpoint.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.InstanceObject.InstanceDefinition">
            <summary>instance definition that this object uses.</summary>
            <example>
            <code source='examples\vbnet\ex_instancedefinitionobjects.vb' lang='vbnet'/>
            <code source='examples\cs\ex_instancedefinitionobjects.cs' lang='cs'/>
            <code source='examples\py\ex_instancedefinitionobjects.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.InstanceDefinition.Object(System.Int32)">
            <summary>
            returns an object used as part of this definition.
            </summary>
            <param name="index">0 &lt;= index &lt; ObjectCount.</param>
            <returns>
            Returns an object that is used to define the geometry.
            Does NOT return an object that references this definition.count the number of references to this instance.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.InstanceDefinition.GetObjects">
            <summary>
            Gets an array with the objects that belong to this instance definition.
            </summary>
            <returns>An array of Rhino objects. The returned array can be empty, but not null.</returns>
            <example>
            <code source='examples\vbnet\ex_instancedefinitionobjects.vb' lang='vbnet'/>
            <code source='examples\cs\ex_instancedefinitionobjects.cs' lang='cs'/>
            <code source='examples\py\ex_instancedefinitionobjects.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.InstanceDefinition.GetReferences(System.Int32)">
            <summary>
            Gets a list of the CRhinoInstanceObjects (inserts) that contains
            a reference this instance definition.
            </summary>
            <param name="wheretoLook">
            <para>0 = get top level references in active document.</para>
            <para>1 = get top level and nested references in active document.</para>
            <para>2 = check for references from other instance definitions.</para>
            </param>
            <returns>An array of instance objects. The returned array can be empty, but not null.</returns>
        </member>
        <member name="M:Rhino.DocObjects.InstanceDefinition.GetContainers">
            <summary>
            Gets a list of all the InstanceDefinitions that contain a reference this InstanceDefinition.
            </summary>
            <returns>An array of instance definitions. The returned array can be empty, but not null.</returns>
        </member>
        <member name="M:Rhino.DocObjects.InstanceDefinition.UsesDefinition(System.Int32)">
            <summary>
            Determines if this instance definition contains a reference to another instance definition.
            </summary>
            <param name="otherIdefIndex">index of another instance definition.</param>
            <returns>
              0      no
              1      other_idef_index is the index of this instance definition
             >1      This InstanceDefinition uses the instance definition
                     and the returned value is the nesting depth.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.InstanceDefinition.InUse(System.Int32)">
            <summary>
            Determines whether the instance definition is referenced.
            </summary>
            <param name="wheretoLook">
            <para>0 = check for top level references in active document.</para>
            <para>1 = check for top level and nested references in active document.</para>
            <para>2 = check for references in other instance definitions.</para>
            </param>
            <returns>true if the instance definition is used; otherwise false.</returns>
        </member>
        <member name="P:Rhino.DocObjects.InstanceDefinition.ObjectCount">
            <summary>
            Number of objects this definition uses. This counts the objects that are used to define the geometry.
            This does NOT count the number of references to this instance definition.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.InstanceDefinition.Index">
            <summary>
            Index of this instance definition in the index definition table.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.InstanceDefinition.IsReference">
            <summary>
            An object from a work session reference model is reference a
            reference object and cannot be modified.  An object is a reference
            object if, and only if, it is on a reference layer.
            </summary>
            <example>
            <code source='examples\vbnet\ex_renameblock.vb' lang='vbnet'/>
            <code source='examples\cs\ex_renameblock.cs' lang='cs'/>
            <code source='examples\py\ex_renameblock.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.InstanceDefinition.SkipNestedLinkedDefinitions">
            <summary>
            Controls how much geometry is read when a linked InstanceDefinition is updated.
            </summary>
            <returns>If this returns true then nested linked InstanceDefinition objects will be skipped otherwise; read everything, included nested linked InstanceDefinition objects</returns>
        </member>
        <member name="P:Rhino.DocObjects.InstanceDefinition.IsDeleted">
            <example>
            <code source='examples\vbnet\ex_renameblock.vb' lang='vbnet'/>
            <code source='examples\cs\ex_renameblock.cs' lang='cs'/>
            <code source='examples\py\ex_renameblock.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.InstanceDefinition.UrlDescription">
            <summary>
            The URL description displayed as a hyperlink in the Insert and Block UI
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.InstanceDefinition.Url">
            <summary>
            The hyperlink URL that is executed when the UrlDescription hyperlink is clicked on in the Insert and Block UI
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.InstanceDefinition.ArchiveFileStatus">
            <summary>
            Returns the archive file status of a linked instance definition.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.Tables.InstanceDefinitionTableEventType.Sorted">
            <summary>InstanceDefinitionTable.Sort() potentially changed sort order.</summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.Find(System.String,System.Boolean)">
            <summary>Finds the instance definition with a given name.</summary>
            <param name="instanceDefinitionName">name of instance definition to search for (ignores case)</param>
            <param name="ignoreDeletedInstanceDefinitions">true means don't search deleted instance definitions.</param>
            <returns>The specified instance definition, or null if nothing matching was found.</returns>
            <example>
            <code source='examples\vbnet\ex_createblock.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createblock.cs' lang='cs'/>
            <code source='examples\py\ex_createblock.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.Find(System.Guid,System.Boolean)">
            <summary>Finds the instance definition with a given id.</summary>
            <param name="instanceId">Unique id of the instance definition to search for.</param>
            <param name="ignoreDeletedInstanceDefinitions">true means don't search deleted instance definitions.</param>
            <returns>The specified instance definition, or null if nothing matching was found.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.Add(System.String,System.String,Rhino.Geometry.Point3d,System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase},System.Collections.Generic.IEnumerable{Rhino.DocObjects.ObjectAttributes})">
            <summary>
            Adds an instance definition to the instance definition table.
            </summary>
            <param name="name">The definition name.</param>
            <param name="description">The definition description.</param>
            <param name="basePoint">A base point.</param>
            <param name="geometry">An array, a list or any enumerable set of geometry.</param>
            <param name="attributes">An array, a list or any enumerable set of attributes.</param>
            <returns>
            &gt;=0  index of instance definition in the instance definition table. -1 on failure.
            </returns>
            <example>
            <code source='examples\vbnet\ex_createblock.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createblock.cs' lang='cs'/>
            <code source='examples\py\ex_createblock.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.Add(System.String,System.String,Rhino.Geometry.Point3d,System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase})">
            <summary>
            Adds an instance definition to the instance definition table.
            </summary>
            <param name="name">The definition name.</param>
            <param name="description">The definition description.</param>
            <param name="basePoint">A base point.</param>
            <param name="geometry">An array, a list or any enumerable set of geometry.</param>
            <returns>
            &gt;=0  index of instance definition in the instance definition table. -1 on failure.
            </returns>
            <example>
            <code source='examples\cs\ex_nestedblock.cs' lang='cs'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.Add(System.String,System.String,Rhino.Geometry.Point3d,Rhino.Geometry.GeometryBase,Rhino.DocObjects.ObjectAttributes)">
            <summary>
            Adds an instance definition to the instance definition table.
            </summary>
            <param name="name">The definition name.</param>
            <param name="description">The definition description.</param>
            <param name="basePoint">A base point.</param>
            <param name="geometry">An element.</param>
            <param name="attributes">An attribute.</param>
            <returns>
            &gt;=0  index of instance definition in the instance definition table. -1 on failure.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.Modify(Rhino.DocObjects.InstanceDefinition,System.String,System.String,System.Boolean)">
            <summary>
            Modifies the instance definition name and description.
            Does not change instance definition ID or geometry.
            </summary>
            <param name="idef">The instance definition to be modified.</param>
            <param name="newName">The new name.</param>
            <param name="newDescription">The new description string.</param>
            <param name="quiet">
            If true, information message boxes pop up when illegal changes are attempted.
            </param>
            <returns>
            true if successful.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.Modify(System.Int32,System.String,System.String,System.Boolean)">
            <summary>
            Modifies the instance definition name and description.
            Does not change instance definition ID or geometry.
            </summary>
            <param name="idefIndex">The index of the instance definition to be modified.</param>
            <param name="newName">The new name.</param>
            <param name="newDescription">The new description string.</param>
            <param name="quiet">
            If true, information message boxes pop up when illegal changes are attempted.
            </param>
            <returns>
            true if successful.
            </returns>
            <example>
            <code source='examples\vbnet\ex_renameblock.vb' lang='vbnet'/>
            <code source='examples\cs\ex_renameblock.cs' lang='cs'/>
            <code source='examples\py\ex_renameblock.py' lang='py'/>
            </example>    
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.UndoModify(System.Int32)">
            <summary>
            Restores the instance definition to its previous state,
            if the instance definition has been modified and the modification can be undone.
            </summary>
            <param name="idefIndex">The index of the instance definition to be restored.</param>
            <returns>true if operation succeeded.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.ModifyGeometry(System.Int32,System.Collections.Generic.IEnumerable{Rhino.Geometry.GeometryBase},System.Collections.Generic.IEnumerable{Rhino.DocObjects.ObjectAttributes})">
            <summary>
            Modifies the instance definition geometry and replaces all references
            to the current definition with references to the new definition.
            </summary>
            <param name="idefIndex">The index of the instance definition to be modified.</param>
            <param name="newGeometry">The new geometry.</param>
            <param name="newAttributes">The new attributes.</param>
            <returns>true if operation succeeded.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.MakeSourcePathRelative(Rhino.DocObjects.InstanceDefinition,System.Boolean,System.Boolean)">
            <summary>
            Marks the source path for a linked instance definition as relative or absolute.
            </summary>
            <param name="idef">The instance definition to be marked.</param>
            <param name="relative">
            <para>If true, the path should be considered as relative.</para>
            <para>If false, the path should be considered as absolute.</para>
            </param>
            <param name="quiet">If true, then message boxes about erroneous parameters will not be shown.</param>
            <returns>
            true if the instance defintion could be modified.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.Delete(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Deletes the instance definition.
            </summary>
            <param name="idefIndex">
            zero based index of instance definition to delete.
            This must be in the range 0 &lt;= idefIndex &lt; InstanceDefinitionTable.Count.
            </param>
            <param name="deleteReferences">
            true to delete all references to this definition.
            false to delete definition only if there are no references.
            </param>
            <param name="quiet">
            If true, no warning message box appears if an instance definition cannot be
            deleted because it is the current layer or it contains active geometry.
            </param>
            <returns>
            true if successful. false if the instance definition has active references and bDeleteReferences is false.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.Purge(System.Int32)">
            <summary>
            Purges an instance definition and its definition geometry.
            </summary>
            <param name="idefIndex">
            zero based index of instance definition to delete.
            This must be in the range 0 &lt;= idefIndex &lt; InstanceDefinitionTable.Count.
            </param>
            <returns>
            True if successful. False if the instance definition cannot be purged
            because it is in use by reference objects or undo information.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.Compact(System.Boolean)">
            <summary>
            Purge deleted instance definition information that is not in use.
            This function is time consuming and should be used in a thoughtful manner.    
            </summary>
            <param name="ignoreUndoReferences">
            If false, then deleted instance definition information that could possibly
            be undeleted by the Undo command will not be deleted. If true, then all
            deleted instance definition information is deleted.
            </param>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.Undelete(System.Int32)">
            <summary>
            Undeletes an instance definition that has been deleted by Delete()
            </summary>
            <param name="idefIndex">
            zero based index of instance definition to delete.
            This must be in the range 0 &lt;= idefIndex &lt; InstanceDefinitionTable.Count.
            </param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.UpdateLinkedInstanceDefinition(System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Read the objects from a file and use them as the instance's definition geometry.
            </summary>
            <param name="idefIndex">
            zero based index of instance definition to delete.
            This must be in the range 0 &lt;= idefIndex &lt; InstanceDefinitionTable.Count.
            </param>
            <param name="filename">
            name of file (can be any type of file that Rhino or a plug-in can read)
            </param>
            <param name="updateNestedLinks">
            If true and the instance definition referes to a linked instance definition,
            that needs to be updated, then the nested defition is also updated. If
            false, nested updates are skipped.
            </param>
            <param name="quiet"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.GetList(System.Boolean)">
            <summary>
            Gets an array of instance definitions.
            </summary>
            <param name="ignoreDeleted">If true then deleted idefs are filtered out.</param>
            <returns>An array of instance definitions. This can be empty, but not null.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.GetUnusedInstanceDefinitionName">
            <summary>
            Gets unsed instance definition name used as default when creating
            new instance definitions.
            </summary>
            <returns>An unused instance definition name string.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.GetUnusedInstanceDefinitionName(System.String)">
            <summary>
            Gets unsed instance definition name used as default when creating
            new instance definitions.
            </summary>
            <param name="root">
            The returned name is 'root nn'  If root is empty, then 'Block' (localized) is used.
            </param>
            <returns>An unused instance definition name string.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.InstanceDefinitionTable.GetUnusedInstanceDefinitionName(System.String,System.UInt32)">
            <summary>
            Gets unsed instance definition name used as default when creating
            new instance definitions.
            </summary>
            <param name="root">
            The returned name is 'root nn'  If root is empty, then 'Block' (localized) is used.
            </param>
            <param name="defaultSuffix">
            Unique names are created by appending a decimal number to the
            localized term for "Block" as in "Block 01", "Block 02",
            and so on.  When defaultSuffix is supplied, the search for an unused
            name begins at "Block suffix".
            </param>
            <returns>An unused instance definition name string.</returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.InstanceDefinitionTable.Document">
            <summary>Document that owns this table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.InstanceDefinitionTable.Count">
            <summary>Number of items in the instance definitions table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.InstanceDefinitionTable.ActiveCount">
            <summary>
            Number of items in the instance definitions table, excluding deleted definitions.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.InstanceDefinitionTable.Item(System.Int32)">
            <summary>
            Conceptually, the InstanceDefinition table is an array of Instance
            definitions. The operator[] can be used to get individual instance
            definition. An instance definition is either active or deleted and this
            state is reported by IsDeleted or will be null if it has been purged
            from the document.
            </summary>
            <param name="index">zero based array index.</param>
            <returns>The instance definition at the specified index.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Layer.GetDefaultLayerProperties">
            <summary>
            Constructs a layer with the current default properties.
            The default layer properties are:
            <para>color = Rhino.ApplicationSettings.AppearanceSettings.DefaultLayerColor</para>
            <para>line style = Rhino.ApplicationSettings.AppearanceSettings.DefaultLayerLineStyle</para>
            <para>material index = -1</para>
            <para>iges level = -1</para>
            <para>mode = NormalLayer</para>
            <para>name = empty</para>
            <para>layer index = 0 (ignored by AddLayer)</para>
            </summary>
            <returns>A new layer instance.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Layer.CommitChanges">
            <example>
            <code source='examples\vbnet\ex_locklayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_locklayer.cs' lang='cs'/>
            <code source='examples\py\ex_locklayer.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Layer.GetPersistentVisibility">
            <summary>
            The persistent visbility setting is used for layers whose visibilty can
            be changed by a "parent" object. A common case is when a layer is a
            child layer (ParentId is not nil). In this case, when a parent layer is
            turned off, then child layers are also turned off. The persistent
            visibility setting determines what happens when the parent is turned on
            again.
            </summary>
            <remarks>
            Returns true if this layer's visibility is controlled by a parent
            object and the parent is turned on (after being off), then this
            layer will also be turned on.
            Returns false if this layer's visibility is controlled by a parent
            object and the parent layer is turned on (after being off), then
            this layer will continue to be off.
            
            When the persistent visbility is not explicitly set, this
            property returns the current value of IsVisible
            </remarks>
        </member>
        <member name="M:Rhino.DocObjects.Layer.SetPersistentVisibility(System.Boolean)">
            <summary>
            Set the persistent visibility setting for this layer
            </summary>
            <param name="persistentVisibility"></param>
        </member>
        <member name="M:Rhino.DocObjects.Layer.UnsetPersistentVisibility">
            <summary>
            Remove any explicit persistent visibility setting from this layer
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Layer.GetPersistentLocking">
            <summary>
            The persistent locking setting is used for layers that can be locked by
            a "parent" object. A common case is when a layer is a child layer
            (Layer.ParentI is not nil). In this case, when a parent layer is locked,
            then child layers are also locked. The persistent locking setting
            determines what happens when the parent is unlocked again.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.Layer.SetPersistentLocking(System.Boolean)">
            <summary>
            Set the persistent locking setting for this layer
            </summary>
            <param name="persistentLocking"></param>
        </member>
        <member name="M:Rhino.DocObjects.Layer.UnsetPersistentLocking">
            <summary>
            Remove any explicity persistent locking settings from this layer
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Layer.Default">
            <summary>
            Sets layer to default settings.
            </summary>
            <remarks>If you are modifying a layer inside a Rhino document, 
            you must call CommitChanges for the modifications to take effect.</remarks>
        </member>
        <member name="M:Rhino.DocObjects.Layer.IsValidName(System.String)">
            <summary>
            Determines if a given string is valid for a layer name.
            </summary>
            <param name="name">A name to be validated.</param>
            <returns>true if the name is valid for a layer name; otherwise, false.</returns>
            <example>
            <code source='examples\vbnet\ex_addlayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayer.cs' lang='cs'/>
            <code source='examples\py\ex_addlayer.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Layer.GetChildren">
            <summary>
            Gets immediate children of this layer. Note that child layers may have their own children.
            </summary>
            <returns>Array of child layers. null if this layer does not have any children.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Layer.SetUserString(System.String,System.String)">
            <summary>
            Attach a user string (key,value combination) to this geometry.
            </summary>
            <param name="key">id used to retrieve this string.</param>
            <param name="value">string associated with key.</param>
            <returns>true on success.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Layer.GetUserString(System.String)">
            <summary>
            Gets user string from this geometry.
            </summary>
            <param name="key">id used to retrieve the string.</param>
            <returns>string associated with the key if successful. null if no key was found.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Layer.GetUserStrings">
            <summary>
            Gets a copy of all (user key string, user value string) pairs attached to this geometry.
            </summary>
            <returns>A new collection.</returns>
        </member>
        <member name="P:Rhino.DocObjects.Layer.Name">
            <summary>Gets or sets the name of this layer.</summary>
            <example>
            <code source='examples\vbnet\ex_sellayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_sellayer.cs' lang='cs'/>
            <code source='examples\py\ex_sellayer.py' lang='py'/>
            </example>
            <remarks>If you are modifying a layer inside a Rhino document, 
            you must call CommitChanges for the modifications to take effect.</remarks>
            <example>
            <code source='examples\vbnet\ex_renamelayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_renamelayer.cs' lang='cs'/>
            <code source='examples\py\ex_renamelayer.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.Layer.FullPath">
            <summary>
            Gets the full path to this layer. The full path includes nesting information.
            </summary>
            <example>
            <code source='examples\vbnet\ex_locklayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_locklayer.cs' lang='cs'/>
            <code source='examples\py\ex_locklayer.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.Layer.LayerIndex">
            <summary>
            Gets or sets the index of this layer.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.Id">
            <summary>
            Gets or sets the ID of this layer object. 
            You typically do not need to assign a custom ID.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.ParentLayerId">
            <summary>
            Gets the ID of the parent layer. Layers can be origanized in a hierarchical structure, 
            in which case this returns the parent layer ID. If the layer has no parent, 
            Guid.Empty will be returned.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addchildlayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addchildlayer.cs' lang='cs'/>
            <code source='examples\py\ex_addchildlayer.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IgesLevel">
            <summary>
            Gets or sets the IGES level for this layer.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.Color">
            <summary>
            Gets or sets the display color for this layer.
            </summary>
            <remarks>If you are modifying a layer inside a Rhino document, 
            you must call CommitChanges for the modifications to take effect.</remarks>
        </member>
        <member name="P:Rhino.DocObjects.Layer.PlotColor">
            <summary>
            Gets or sets the plot color for this layer.
            </summary>
            <remarks>If you are modifying a layer inside a Rhino document, 
            you must call CommitChanges for the modifications to take effect.</remarks>
        </member>
        <member name="P:Rhino.DocObjects.Layer.PlotWeight">
            <summary>
            Gets or sets the thickness of the plotting pen in millimeters. 
            A thickness of 0.0 indicates the "default" pen weight should be used.
            </summary>
            <remarks>If you are modifying a layer inside a Rhino document, 
            you must call CommitChanges for the modifications to take effect.</remarks>
        </member>
        <member name="P:Rhino.DocObjects.Layer.LinetypeIndex">
            <summary>
            Gets or sets the line-type index for this layer.
            </summary>
            <remarks>If you are modifying a layer inside a Rhino document, 
            you must call CommitChanges for the modifications to take effect.</remarks>
        </member>
        <member name="P:Rhino.DocObjects.Layer.RenderMaterialIndex">
            <summary>
            Gets or sets the index of render material for objects on this layer that have
            MaterialSource() == MaterialFromLayer. 
            A material index of -1 indicates no material has been assigned 
            and the material created by the default Material constructor 
            should be used.
            </summary>
            <remarks>If you are modifying a layer inside a Rhino document, 
            you must call CommitChanges for the modifications to take effect.</remarks>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IsVisible">
            <summary>
            Gets or sets the visibility of this layer.
            </summary>
            <remarks>If you are modifying a layer inside a Rhino document, 
            you must call CommitChanges for the modifications to take effect.</remarks>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IsLocked">
            <summary>
            Gets or sets a value indicating the locked state of this layer.
            </summary>
            <remarks>If you are modifying a layer inside a Rhino document, 
            you must call CommitChanges for the modifications to take effect.</remarks>
            <example>
            <code source='examples\vbnet\ex_locklayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_locklayer.cs' lang='cs'/>
            <code source='examples\py\ex_locklayer.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IsExpanded">
            <summary>
            Gets or sets a value indicating whether this layer is expanded in the Rhino Layer dialog.
            </summary>
            <remarks>If you are modifying a layer inside a Rhino document, 
            you must call CommitChanges for the modifications to take effect.</remarks>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IsDeleted">
            <summary>
            Gets a value indicating whether this layer has been deleted and is 
            currently in the Undo buffer.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.IsReference">
            <summary>
            Gets a value indicting whether this layer is a referenced layer. 
            Referenced layers are part of referenced documents.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.RenderMaterial">
            <summary>
            Gets or sets the <see cref="T:Rhino.Render.RenderMaterial"/> for objects on
            this layer that have MaterialSource() == MaterialFromLayer.
            A null result indicates that no <see cref="T:Rhino.Render.RenderMaterial"/> has
            been assigned  and the material created by the default Material
            constructor or the <see cref="P:Rhino.DocObjects.Layer.RenderMaterialIndex"/> should be used.
            </summary>
            <remarks>If you are modifying a layer inside a Rhino document, 
            you must call CommitChanges for the modifications to take effect.</remarks>
        </member>
        <member name="P:Rhino.DocObjects.Layer.SortIndex">
            <summary>
            Runtime index used to sort layers in layer dialog.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Layer.UserStringCount">
            <summary>
            Gets the amount of user strings.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.Tables.LayerTableEventType.Sorted">
            <summary>LayerTable.Sort() potentially changed sort order.</summary>
        </member>
        <member name="F:Rhino.DocObjects.Tables.LayerTableEventType.Current">
            <summary>Current layer change.</summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.SetCurrentLayerIndex(System.Int32,System.Boolean)">
            <summary>
            At all times, there is a "current" layer. Unless otherwise specified, new objects
            are assigned to the current layer. The current layer is never locked, hidden, or deleted.
            </summary>
            <param name="layerIndex">
            Value for new current layer. 0 &lt;= layerIndex &lt; LayerTable.Count.
            The layer's mode is automatically set to NormalMode.
            </param>
            <param name="quiet">
            if true, then no warning message box pops up if the current layer request can't be satisfied.
            </param>
            <returns>true if current layer index successfully set.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.Find(System.String,System.Boolean)">
            <summary>
            Finds the layer with a given name. If multiple layers exist that have the same name, the
            first match layer index will be returned.
            </summary>
            <param name="layerName">name of layer to search for. The search ignores case.</param>
            <param name="ignoreDeletedLayers">true means don't search deleted layers.</param>
            <returns>
            >=0 index of the layer with the given name
            -1  no layer has the given name.
            </returns>
            <example>
            <code source='examples\vbnet\ex_addlayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayer.cs' lang='cs'/>
            <code source='examples\py\ex_addlayer.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.Find(System.Guid,System.Boolean)">
            <summary>Finds a layer with a matching ID.</summary>
            <param name="layerId">A valid layer ID.</param>
            <param name="ignoreDeletedLayers">If true, deleted layers are not checked.</param>
            <returns>
            >=0 index of the layer with the given name
            -1  no layer has the given name.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.Add(Rhino.DocObjects.Layer)">
            <summary>
            Adds a new layer with specified definition to the layer table.
            </summary>
            <param name="layer">
            definition of new layer. The information in layer is copied. If layer.Name is empty
            the a unique name of the form "Layer 01" will be automatically created.
            </param>
            <returns>
            >=0 index of new layer
            -1  layer not added because a layer with that name already exists.
            </returns>
            <example>
            <code source='examples\vbnet\ex_addchildlayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addchildlayer.cs' lang='cs'/>
            <code source='examples\py\ex_addchildlayer.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.Add(System.String,System.Drawing.Color)">
            <summary>
            Adds a new layer with specified definition to the layer table.
            </summary>
            <param name="layerName">Name for new layer. Cannot be a null or zero-length string.</param>
            <param name="layerColor">Color of new layer. Alpha components will be ignored.</param>
            <returns>
            >=0 index of new layer
            -1  layer not added because a layer with that name already exists.
            </returns>
            <example>
            <code source='examples\vbnet\ex_addlayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayer.cs' lang='cs'/>
            <code source='examples\py\ex_addlayer.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.AddReferenceLayer(Rhino.DocObjects.Layer)">
            <summary>
            Adds a new reference layer with specified definition to the layer table
            Reference layers are not saved in files.
            </summary>
            <param name="layer">
            definition of new layer. The information in layer is copied. If layer.Name is empty
            the a unique name of the form "Layer 01" will be automatically created.
            </param>
            <returns>
            >=0 index of new layer
            -1  layer not added because a layer with that name already exists.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.Add">
            <summary>
            Adds a new layer with default definition to the layer table.
            </summary>
            <returns>index of new layer.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.AddReferenceLayer">
            <summary>
            Adds a new reference layer with default definition to the layer table.
            Reference layers are not saved in files.
            </summary>
            <returns>index of new layer.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.Modify(Rhino.DocObjects.Layer,System.Int32,System.Boolean)">
            <summary>Modifies layer settings.</summary>
            <param name="newSettings">This information is copied.</param>
            <param name="layerIndex">
            zero based index of layer to set.  This must be in the range 0 &lt;= layerIndex &lt; LayerTable.Count.
            </param>
            <param name="quiet">if true, information message boxes pop up when illegal changes are attempted.</param>
            <returns>
            true if successful. false if layerIndex is out of range or the settings attempt
            to lock or hide the current layer.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.ForceLayerVisible(System.Guid)">
            <summary>
            Makes a layer and all of its parent layers visible.
            </summary>
            <param name="layerId">The layer ID to be made visible.</param>
            <returns>true if the operation succeeded.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.ForceLayerVisible(System.Int32)">
            <summary>
            Makes a layer and all of its parent layers visible.
            </summary>
            <param name="layerIndex">The layer index to be made visible.</param>
            <returns>true if the operation succeeded.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.UndoModify(System.Int32,System.UInt32)">
            <summary>
            Restores the layer to its previous state,
            if the layer has been modified and the modification can be undone.
            </summary>
            <param name="layerIndex">The layer index to be used.</param>
            <param name="undoRecordSerialNumber">The undo record serial number. Pass 0 not to specify one.</param>
            <returns>true if this layer had been modified and the modifications were undone.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.Delete(System.Int32,System.Boolean)">
            <summary>Deletes layer.</summary>
            <param name="layerIndex">
            zero based index of layer to delete. This must be in the range 0 &lt;= layerIndex &lt; LayerTable.Count.
            </param>
            <param name="quiet">
            If true, no warning message box appears if a layer the layer cannot be
            deleted because it is the current layer or it contains active geometry.
            </param>
            <returns>
            true if successful. false if layerIndex is out of range or the the layer cannot be
            deleted because it is the current layer or because it layer contains active geometry.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.Purge(System.Int32,System.Boolean)">
            <summary>
            Delete layer and all geometry objects on a layer
            </summary>
            <param name="layerIndex">
            zero based index of layer to delete. This must be in the range 0 &lt;= layerIndex &lt; LayerTable.Count.
            </param>
            <param name="quiet">
            If true, no warning message box appears if a layer the layer cannot be
            deleted because it is the current layer.
            </param>
            <returns>
            true if successful. false if layerIndex is out of range or the the layer cannot be
            deleted because it is the current layer.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.Undelete(System.Int32)">
            <summary>
            Undeletes a layer that has been deleted by DeleteLayer().
            </summary>
            <param name="layerIndex">
            zero based index of layer to undelete.
            This must be in the range 0 &lt;= layerIndex &lt; LayerTable.Count.
            </param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LayerTable.GetUnusedLayerName(System.Boolean)">
            <summary>
            Gets the next unused layer name used as default when creating new layers.
            </summary>
            <param name="ignoreDeleted">
            If this is true then Rhino may use a name used by a deleted layer.
            </param>
            <returns>An unused layer name string.</returns>
            <example>
            <code source='examples\vbnet\ex_addlayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayer.cs' lang='cs'/>
            <code source='examples\py\ex_addlayer.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LayerTable.Document">
            <summary>Document that owns this table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LayerTable.Count">
            <summary>
            Returns number of layers in the layer table, including deleted layers.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LayerTable.ActiveCount">
            <summary>
            Returns number of layers in the layer table, excluding deleted layers.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LayerTable.Item(System.Int32)">
            <summary>
            Conceptually, the layer table is an array of layers.
            The operator[] can be used to get individual layers. A layer is
            either active or deleted and this state is reported by Layer.IsDeleted.
            </summary>
            <param name="index">zero based array index.</param>
            <returns>
            Refererence to the layer.  If layer_index is out of range, the current
            layer is returned. Note that this reference may become invalid after
            AddLayer() is called.
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LayerTable.CurrentLayerIndex">
            <summary>
            At all times, there is a "current" layer.  Unless otherwise specified, new objects
            are assigned to the current layer. The current layer is never locked, hidden, or deleted.
            Resturns: Zero based layer table index of the current layer.
            </summary>
            <example>
            <code source='examples\vbnet\ex_moveobjectstocurrentlayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_moveobjectstocurrentlayer.cs' lang='cs'/>
            <code source='examples\py\ex_moveobjectstocurrentlayer.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LayerTable.CurrentLayer">
            <summary>
            At all times, there is a "current" layer. Unless otherwise specified,
            new objects are assigned to the current layer. The current layer is
            never locked, hidden, or deleted.
            
            Returns reference to the current layer. Note that this reference may
            become invalid after a call to AddLayer().
            </summary>
            <example>
            <code source='examples\vbnet\ex_sellayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_sellayer.cs' lang='cs'/>
            <code source='examples\py\ex_sellayer.py' lang='py'/>
            </example>
        </member>
        <member name="F:Rhino.DocObjects.Tables.LightTableEventType.Sorted">
            <summary>LightTable.Sort() potentially changed sort order.</summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LightTable.Modify(System.Guid,Rhino.Geometry.Light)">
            <example>
            <code source='examples\vbnet\ex_modifylightcolor.vb' lang='vbnet'/>
            <code source='examples\cs\ex_modifylightcolor.cs' lang='cs'/>
            <code source='examples\py\ex_modifylightcolor.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LightTable.Document">
            <summary>Document that owns this light table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LightTable.Sun">
            <summary>
            Gets the Sun instance that is applied to the document.
            <para>If the RDK is loaded, an instance is always returned.</para>
            </summary>
            <exception cref="T:Rhino.Runtime.RdkNotLoadedException">If the RDK is not loaded.</exception>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LightTable.Count">
            <summary>Number of lights in the light table.  Does not include Sun or Skylight.</summary>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.Default">
            <summary>
            Set linetype to default settings.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.AppendSegment(System.Double,System.Boolean)">
            <summary>Adds a segment to the pattern.</summary>
            <param name="length">The length of the segment to be added.</param>
            <param name="isSolid">
            If true, the length is interpreted as a line. If false,
            then the length is interpreted as a space.
            </param>
            <returns>Index of the added segment.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.RemoveSegment(System.Int32)">
            <summary>Removes a segment in the linetype.</summary>
            <param name="index">Zero based index of the segment to remove.</param>
            <returns>true if the segment index was removed.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.SetSegment(System.Int32,System.Double,System.Boolean)">
            <summary>Sets the length and type of the segment at index.</summary>
            <param name="index">Zero based index of the segment.</param>
            <param name="length">The length of the segment to be added in millimeters.</param>
            <param name="isSolid">
            If true, the length is interpreted as a line. If false,
            then the length is interpreted as a space.
            </param>
            <returns>true if the operation was successful; otherwise false.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Linetype.GetSegment(System.Int32,System.Double@,System.Boolean@)">
            <summary>
            Gets the segment information at a index.
            </summary>
            <param name="index">Zero based index of the segment.</param>
            <param name="length">The length of the segment in millimeters.</param>
            <param name="isSolid">
            If the length is interpreted as a line, true is assigned during the call to this out parameter.
            <para>If the length is interpreted as a space, then false is assigned during the call to this out parameter.</para>
            </param>
            <exception cref="T:System.IndexOutOfRangeException">If the index is unacceptable.</exception>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.Name">
            <summary>The name of this linetype.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.LinetypeIndex">
            <summary>The index of this linetype.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.PatternLength">
            <summary>Total length of one repeat of the pattern.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.SegmentCount">
            <summary>Number of segments in the pattern.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.Id">
            <summary>
            Gets the ID of this linetype object.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.IsDeleted">
            <summary>
            Gets a value indicating whether this linetype has been deleted and is 
            currently in the Undo buffer.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.IsReference">
            <summary>
            Gets a value indicting whether this linetype is a referenced linetype. 
            Referenced linetypes are part of referenced documents.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Linetype.IsModified">
            <summary>
            true if this linetype has been modified by LinetypeTable.ModifyLinetype()
            and the modifications can be undone.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.SetCurrentLinetypeIndex(System.Int32,System.Boolean)">
            <summary>
            At all times, there is a "current" linetype. Unless otherwise specified, new objects
            are assigned to the current linetype. The current linetype is never deleted.
            </summary>
            <param name="linetypeIndex">
            Value for new current linetype. 0 &lt;= linetypeIndex &lt; LinetypeTable.Count.
            </param>
            <param name="quiet">
            if true, then no warning message box pops up if the current linetype request can't be satisfied.
            </param>
            <returns>true if current linetype index successfully set.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.LinetypeIndexForObject(Rhino.DocObjects.RhinoObject)">
            <summary>
            Returns the effective linetype index to be used to find the 
            linetype definition to draw an object. If an object's linetype
            source is LinetypeFromObject, the linetype index in the object's
            attributes is used. If an object's linetype source is LinetypeFromLayer
            the linetype index from the object's layer is used.
            </summary>
            <param name="rhinoObject">The Rhino object to use in the query.</param>
            <returns>The effective linetype index.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.Find(System.String,System.Boolean)">
            <summary>Finds the linetype with a given name.</summary>
            <param name="name">search ignores case.</param>
            <param name="ignoreDeletedLinetypes">If true, deleted linetypes are not checked.</param>
            <returns>
            >=0 index of the linetype with the given name
            -1  no linetype has the given name.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.Find(System.Guid,System.Boolean)">
            <summary>Finds a linetype with a matching ID.</summary>
            <param name="id">The ID of the line type to be found.</param>
            <param name="ignoreDeletedLinetypes">If true, deleted linetypes are not checked.</param>
            <returns>
            Zero or a positive value if the index of the linetype with the given ID is found.
            <para>-1 if no linetype has the given ID.</para>
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.Add(Rhino.DocObjects.Linetype)">
            <summary>
            Adds a new linetype with specified definition to the linetype table.
            </summary>
            <param name="linetype">
            Definition of new linetype.  The information in linetype is copied.
            If linetype.Name is empty then a unique name of the form "Linetype 01"
            will be automatically created.
            </param>
            <returns>
            Index of newline type or -1 on error.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.Add(System.String,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Adds a new linetype with specified definition to the linetype table.
            </summary>
            <param name="name">A name for the new linetype.</param>
            <param name="segmentLengths">Positive values are dashes, negative values are gaps.</param>
            <returns>
            Index of new linetype or -1 on error.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.AddReferenceLinetype(Rhino.DocObjects.Linetype)">
            <summary>
            Adds a reference linetypes that will not be saved in files.
            </summary>
            <param name="linetype">Definition of new linetype.  The information in linetype is copied.
            If linetype.Name is empty then a unique name of the form "Linetype 01"
            will be automatically created.</param>
            <returns>
            Index of new linetype or -1 on error.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.Modify(Rhino.DocObjects.Linetype,System.Int32,System.Boolean)">
            <summary>Modify linetype settings.</summary>
            <param name="linetype">New linetype settings. This information is copied.</param>
            <param name="index">Zero based index of linetype to set.</param>
            <param name="quiet">
            if true, information message boxes pop up when illegal changes are attempted.
            </param>
            <returns>
            true if successful. false if linetype_index is out of range or the
            settings attempt to lock or hide the current linetype.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.UndoModify(System.Int32)">
            <summary>
            If the linetype has been modified and the modifcation can be undone,
            then UndoModify() will restore the linetype to its previous state.
            </summary>
            <param name="index">Zero based index of linetype for which to undo changes.</param>
            <returns>
            true if this linetype had been modified and the modifications were undone.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.Delete(System.Int32,System.Boolean)">
            <summary>Deletes linetype.</summary>
            <param name="index">zero based index of linetype to delete.</param>
            <param name="quiet">
            If true, no warning message box appears if a linetype the
            linetype cannot be deleted because it is the current linetype
            or it contains active geometry.
            </param>
            <returns>
            true if successful. false if linetypeIndex is out of range or the
            linetype cannot be deleted because it is the current linetype or
            because it linetype is referenced by active geometry.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.Delete(System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>Deletes multiple linetypes.</summary>
            <param name="indices">An array, a list or any enumerable instance of linetype indices.</param>
            <param name="quiet">If true, no warning message box appears if a linetype the
            linetype cannot be deleted because it is the current linetype
            or it contains active geometry.</param>
            <returns>true if operation succeeded.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.Undelete(System.Int32)">
            <summary>Restores a linetype that has been deleted.</summary>
            <param name="index">A linetype index to be undeleted.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.LinetypeTable.GetUnusedLinetypeName(System.Boolean)">
            <summary>
            Gets unused linetype name used as default when creating new linetypes.
            </summary>
            <param name="ignoreDeleted">
            If this is true then a name used by a deleted linetype is allowed.
            </param>
            <returns>The unused linetype name.</returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.Document">
            <summary>Document that owns this table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.Count">
            <summary>
            Returns number of linetypes in the linetypes table, including deleted linetypes.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.ActiveCount">
            <summary>
            Returns number of linetypes in the linetypes table, excluding deleted linetypes.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.CurrentLinetypeIndex">
            <summary>
            At all times, there is a "current" linetype.  Unless otherwise specified,
            new objects are assigned to the current linetype. If the current linetype
            source is LinetypeFromLayer the object's layer's linetype is used instead.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.LinetypeScale">
            <summary>
            For display in Rhino viewports, the linetypes are scaled by a single scale
            factor for all viewports. This is not used for printing, where all linetype
            patterns are scaled to print in their defined size 1:1 on the paper.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.Item(System.Int32)">
            <summary>
            Conceptually, the linetype table is an array of linetypes.
            The operator[] can be used to get individual linetypes. A linetype is
            either active or deleted and this state is reported by Linetype.IsDeleted.
            </summary>
            <param name="index">zero based array index.</param>
            <returns>
            Refererence to the linetype.  If index is out of range, the current
            linetype is returned. Note that this reference may become invalid after
            AddLinetype() is called.
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.CurrentLinetypeSource">
            <summary>
            Source used by an object to determine its current linetype to be used by new objects.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.CurrentLinetype">
            <summary>
            Returns reference to the current linetype. Note that this reference may
            become invalid after a call to AddLinetype().
            </summary>
            <remarks>
            At all times, there is a "current" linetype. Unless otherwise specified,
            new objects are assigned to the current linetype. The current linetype
            is never deleted.
            </remarks>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.ContinuousLinetypeName">
            <summary>
            Returns the text name of the continuous linetype.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.LinetypeTable.ByLayerLinetypeName">
            <summary>
            Returns the text name of the bylayer linetype.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRef.MaterialSource">
            <summary>
            Determines if the simple material should come from the object or from
            it's layer.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRef.PlugInId">
            <summary>
            Identifies a rendering plug-in
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRef.FrontFaceMaterialId">
            <summary>
            The Id of the Material used to render the front of an object.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRef.BackFaceMaterialId">
            <summary>
            The Id of the Material used to render the back of an object.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRef.FrontFaceMaterialIndex">
            <summary>
            The index of the material used to render the front of an object
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRef.BackFaceMaterialIndex">
            <summary>
            The index of the material used to render the back of an object
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.MaterialRefCreateParams">
            <summary>
            Options passed to MaterialRefs.Create
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefCreateParams.PlugInId">
            <summary>
            Identifies a rendering plug-in
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefCreateParams.MaterialSource">
            <summary>
            Determines if the simple material should come from the object or from
            it's layer.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefCreateParams.FrontFaceMaterialId">
            <summary>
            The Id of the Material used to render the front of an object.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefCreateParams.FrontFaceMaterialIndex">
            <summary>
            The index of the material used to render the front of an object
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefCreateParams.BackFaceMaterialId">
            <summary>
            The Id of the Material used to render the back of an object.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefCreateParams.BackFaceMaterialIndex">
            <summary>
            The index of the material used to render the back of an object
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.MaterialRefs">
            <summary>
            If you are developing a high quality plug-in renderer, and a user is
            assigning a custom render material to this object, then add rendering
            material information to the MaterialRefs dictionary.
            
            Note to developers:
             As soon as the MaterialRefs dictionary contains items rendering
             material queries slow down.  Do not populate the MaterialRefs
            dictionary when setting the MaterialIndex will take care of your needs.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.Create(Rhino.DocObjects.MaterialRefCreateParams)">
            <summary>
            Call this method to create a MaterialRef which can be used when calling
            one of the Add methods.
            </summary>
            <param name="createParams">
            Values used to initialize the MaterialRef
            </param>
            <returns>
            A temporary MaterialRef object, the caller is responsible for disposing
            of this object.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this dictionary.
            </summary>
            <returns>
            A IEnumerator that can be used to iterate this dictionary.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through this dictionary.
            </summary>
            <returns>
            An System.Collections.IEnumerator object that can be used to iterate
            through this dictionary.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.Add(System.Collections.Generic.KeyValuePair{System.Guid,Rhino.DocObjects.MaterialRef})">
            <summary>
            Adds an item to this dictionary.
            </summary>
            <param name="item">
            The object to add to this dictionary
            </param>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            key is empty.
            </exception>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.Add(System.Guid,Rhino.DocObjects.MaterialRef)">
            <summary>
            Add or replace an element with the provided key and value to this dictionary.
            </summary>
            <param name="key">
            The plug-in associated with this MaterialRef
            </param>
            <param name="value">
            MaterialRef to add to this dictionary
            </param>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            key is empty.
            </exception>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.Clear">
            <summary>
            Removes all items from this dictionary.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.Contains(System.Collections.Generic.KeyValuePair{System.Guid,Rhino.DocObjects.MaterialRef})">
            <summary>
            Determines whether this dictionary contains a specific value.
            </summary>
            <param name="item">
            The object to locate in this dictionary.
            </param>
            <returns>
            true if item is found in this dictionary; otherwise, false.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.CopyTo(System.Collections.Generic.KeyValuePair{System.Guid,Rhino.DocObjects.MaterialRef}[],System.Int32)">
            <summary>
            Copies the elements of this dictionary to an System.Array, starting at
            a particular System.Array index.
            </summary>
            <param name="array">
            The one-dimensional System.Array that is the destination of the
            elements copied from this dictionary. The System.Array must have
            zero-based indexing.
            </param>
            <param name="arrayIndex">
            The zero-based index in array at which copying begins.
            </param>
            <exception cref="T:System.ArgumentNullException">
            array is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            arrayIndex is less than 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The number of elements in the source dictionary is greater than the
            available space from arrayIndex to the end of the destination array.
            </exception>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.Remove(System.Collections.Generic.KeyValuePair{System.Guid,Rhino.DocObjects.MaterialRef})">
            <summary>
            Removes the element with the specified plug-in id from the this dictionary.
            </summary>
            <param name="item">
            The object to remove from this dictionary
            </param>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.ContainsKey(System.Guid)">
            <summary>
            Determines whether this dictionary contains an MaterialRef with the
            specified plug-in id.
            </summary>
            <param name="key">
            The plug-in Id used to locate a MaterialRef in this dictionary.
            </param>
            <returns>
            true if this dictionary contains an element with the specified plug-in
            Id; otherwise, false.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.Remove(System.Guid)">
            <summary>
            Removes the MaterialRef with the specified plug-in Id from this
            dictionary.
            </summary>
            <param name="key">
            The plug-in Id for the MaterialRef to remove.
            </param>
            <returns>
            true if the MaterialRef is successfully removed; otherwise, false. This
            method also returns false if key was not found in the original dictionary.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.MaterialRefs.TryGetValue(System.Guid,Rhino.DocObjects.MaterialRef@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">
            The plug-in Id whose MaterialRef to get.
            </param>
            <param name="value">
            When this method returns, the MaterialRef associated with the specified
            key, if the key is found; otherwise, null. This parameter is passed
            uninitialized.
            </param>
            <returns>
            true if this dictionary contains a MaterialRef with the specified key;
            otherwise, false.
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefs.Count">
            <summary>
            Gets the number of elements contained in this dictionary
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefs.IsReadOnly">
            <summary>
            IDictionary required property, always returns false for this dictionary.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefs.Item(System.Guid)">
            <summary>
            Gets or sets the element with the specified plug-in Id.
            </summary>
            <param name="key">
            The plug-in Id of the MaterialRef to get or set.
            </param>
            <returns>
            The MaterialRef with the specified key.
            </returns>
            <exception cref="T:System.ArgumentNullException">
            value is null.
            </exception>
            <exception cref="T:System.ArgumentException">
            key is empty.
            </exception>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefs.Keys">
            <summary>
            Gets an ICollection containing the plug-in Id's in this dictionary.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.MaterialRefs.Values">
            <summary>
            Gets an ICollection containing the MaterialRef objects in this
            dictionary.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Material.Default">
            <summary>
            Set material to default settings.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Material.GetTextures">
            <summary>
            Get array of textures that this material uses
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.DocObjects.Material.GetBumpTexture">
            <summary>
            Gets the bump texture of this material.
            </summary>
            <returns>A texture; or null if no bump texture has been added to this material.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Material.SetUserString(System.String,System.String)">
            <summary>
            Attach a user string (key,value combination) to this geometry.
            </summary>
            <param name="key">id used to retrieve this string.</param>
            <param name="value">string associated with key.</param>
            <returns>true on success.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Material.GetUserString(System.String)">
            <summary>
            Gets a user string.
            </summary>
            <param name="key">id used to retrieve the string.</param>
            <returns>string associated with the key if successful. null if no key was found.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Material.GetUserStrings">
            <summary>
            Gets an independent copy of the collection of (user text key, user text value) pairs attached to this object.
            </summary>
            <returns>A collection of key strings and values strings. This </returns>
        </member>
        <member name="P:Rhino.DocObjects.Material.IsDeleted">
            <summary>
            Deleted materials are kept in the runtime material table so that undo
            will work with materials.  Call IsDeleted to determine to determine if
            a material is deleted.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Material.Id">
            <summary>Gets or sets the ID of this material.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Material.RenderPlugInId">
            <summary>
            The Id of the RenderPlugIn that is associated with this material.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Material.IsReference">
            <summary>
            Rhino allows multiple files to be viewed simultaneously. Materials in the
            document are "normal" or "reference". Reference materials are not saved.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Material.IsDefaultMaterial">
            <summary>
            By default Rhino layers and objects are assigned the default rendering material.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Material.MaterialIndex">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Material.UseCount">
            <summary>
            Number of objects and layers that use this material.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Material.IsDocumentControlled">
            <summary>
            If true this object may not be modified. Any properties or functions that attempt
            to modify this object when it is set to "IsReadOnly" will throw a NotSupportedException.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Material.Shine">
            <summary>
            Gets or sets the shine factor of the material.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Material.Transparency">
            <summary>
            Gets or sets the transparency of the material (0.0 = opaque to 1.0 = transparent)
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Material.IndexOfRefraction">
            <summary>
            Gets or sets the index of refraction of the material, generally
            >= 1.0 (speed of light in vacuum)/(speed of light in material)
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Material.Reflectivity">
            <summary>
            Gets or sets how reflective a material is, 0f is no reflection
            1f is 100% reflective.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.Tables.MaterialTable.Add">
            <summary>
            Adds a new material to the table based on the default material.
            </summary>
            <returns>The position of the new material in the table.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.MaterialTable.Add(Rhino.DocObjects.Material)">
            <summary>
            Adds a new material to the table based on a given material.
            </summary>
            <param name="material">A model of the material to be added.</param>
            <returns>The position of the new material in the table.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.MaterialTable.Add(Rhino.DocObjects.Material,System.Boolean)">
            <summary>
            Adds a new material to the table based on a given material.
            </summary>
            <param name="material">A model of the material to be added.</param>
            <param name="reference">
            true if this material is supposed to be a reference material.
            Reference materials are not saved in the file.
            </param>
            <returns>The position of the new material in the table.</returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.MaterialTable.Find(System.String,System.Boolean)">
            <summary>
            Finds a meterial with a given name.
            </summary>
            <param name="materialName">Name of the material to search for. The search ignores case.</param>
            <param name="ignoreDeletedMaterials">true means don't search deleted materials.</param>
            <returns>
            >=0 index of the material with the given name
            -1  no material has the given name.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.MaterialTable.Find(System.Guid,System.Boolean)">
            <summary>Finds a material with a matching id.</summary>
            <param name="materialId">A material ID to be found.</param>
            <param name="ignoreDeletedMaterials">If true, deleted materials are not checked.</param>
            <returns>
            >=0 index of the material with the given name
            -1  no material has the given name.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.MaterialTable.Modify(Rhino.DocObjects.Material,System.Int32,System.Boolean)">
            <summary>Modify material settings.</summary>
            <param name="newSettings">This information is copied.</param>
            <param name="materialIndex">
            zero based index of material to set.  This must be in the range 0 &lt;= layerIndex &lt; MaterialTable.Count.
            </param>
            <param name="quiet">if true, information message boxes pop up when illegal changes are attempted.</param>
            <returns>
            true if successful. false if materialIndex is out of range or the settings attempt
            to lock or hide the current material.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.Tables.MaterialTable.DeleteAt(System.Int32)">
            <summary>
            Removes a material at a specific position from this material table.
            </summary>
            <param name="materialIndex">The position to be removed.</param>
            <returns>
            true if successful. false if materialIndex is out of range or the
            material cannot be deleted because it is the current material or because
            it material contains active geometry.
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.MaterialTable.Document">
            <summary>Document that owns this table.</summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.MaterialTable.Count">
            <summary>
            Returns number of materials in the material table, including deleted materials.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.MaterialTable.Item(System.Int32)">
            <summary>
            Conceptually, the material table is an array of materials.
            The operator[] can be used to get individual materials. A material is
            either active or deleted and this state is reported by Material.IsDeleted.
            </summary>
            <param name="index">zero based array index.</param>
            <returns>
            If index is out of range, the current material is returned.
            </returns>
        </member>
        <member name="P:Rhino.DocObjects.Tables.MaterialTable.CurrentMaterialIndex">
            <summary>
            At all times, there is a "current" material.  Unless otherwise
            specified, new objects are assigned to the current material.
            The current material is never locked, hidden, or deleted.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.Tables.MaterialTable.CurrentMaterialSource">
            <summary>
            Gets or sets the current material source.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.MeshObject.SetMesh(Rhino.Geometry.Mesh)">
            <summary>
            Only for developers who are defining custom subclasses of MeshObject.
            Directly sets the internal mesh geometry for this object.  Note that
            this function does not work with Rhino's "undo".
            </summary>
            <param name="mesh"></param>
            <returns>
            The old mesh geometry that was set for this object
            </returns>
            <remarks>
            Note that this function does not work with Rhino's "undo".  The typical
            approach for adjusting the mesh geometry is to modify the object that you
            get when you call the MeshGeometry property and then call CommitChanges.
            </remarks>
        </member>
        <member name="T:Rhino.UI.MouseCallback">
            <summary>
            Used for intercepting mouse events in the Rhino viewports.
            </summary>
            <example>
            <code source='examples\vbnet\ex_mousecallback.vb' lang='vbnet'/>
            <code source='examples\cs\ex_mousecallback.cs' lang='cs'/>
            <code source='examples\py\ex_mousecallback.py' lang='py'/>
            </example>
        </member>
        <member name="T:Rhino.DocObjects.ObjectAttributes">
            <summary>
            Attributes (color, material, layer,...) associated with a rhino object
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.Duplicate">
            <summary>
            Constructs a copy of this <see cref="T:Rhino.DocObjects.ObjectAttributes"/> instance.
            </summary>
            <returns>A new instance on success, or null on failure.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.HasDisplayModeOverride(System.Guid)">
            <summary>
            Determines if an object has a display mode override for a given viewport.
            </summary>
            <param name="viewportId">Id of a Rhino Viewport.</param>
            <returns>true if the object has a display mode override for the viewport; otherwise, false.</returns>
            <example>
            <code source='examples\vbnet\ex_objectdisplaymode.vb' lang='vbnet'/>
            <code source='examples\cs\ex_objectdisplaymode.cs' lang='cs'/>
            <code source='examples\py\ex_objectdisplaymode.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.SetDisplayModeOverride(Rhino.Display.DisplayModeDescription)">
            <summary>
            By default, objects are drawn using the display mode of the viewport that
            the object is being drawn in. Setting a specific display mode, instructs
            Rhino to always use that display mode, regardless of the viewport's mode.
            This version affects the object's display mode for all viewports.
            </summary>
            <param name="mode">The display mode.</param>
            <returns>true if setting was successful.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.SetDisplayModeOverride(Rhino.Display.DisplayModeDescription,System.Guid)">
            <summary>
            By default, objects are drawn using the display mode of the viewport that
            the object is being drawn in. Setting a specific display mode, instructs
            Rhino to always use that display mode, regardless of the viewport's mode.
            This version sets a display mode for a specific viewport.
            </summary>
            <param name="mode">The display mode.</param>
            <param name="rhinoViewportId">The Rhino viewport ID.</param>
            <returns>true on success.</returns>
            <example>
            <code source='examples\vbnet\ex_objectdisplaymode.vb' lang='vbnet'/>
            <code source='examples\cs\ex_objectdisplaymode.cs' lang='cs'/>
            <code source='examples\py\ex_objectdisplaymode.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.RemoveDisplayModeOverride">
            <summary>
            By default, objects are drawn using the display mode of the viewport that
            the object is being drawn in. Setting a specific display mode, instructs
            Rhino to always use that display mode, regardless of the viewport's mode.
            This function resets an object to use the viewport's display mode for all
            viewports.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.RemoveDisplayModeOverride(System.Guid)">
            <summary>
            By default, objects are drawn using the display mode of the viewport that
            the object is being drawn in. Setting a specific display mode, instructs
            Rhino to always use that display mode, regardless of the viewport's mode.
            This function resets an object to use the viewport's display mode.
            </summary>
            <param name="rhinoViewportId">viewport that display mode overrides should be cleared from.</param>
            <example>
            <code source='examples\vbnet\ex_objectdisplaymode.vb' lang='vbnet'/>
            <code source='examples\cs\ex_objectdisplaymode.cs' lang='cs'/>
            <code source='examples\py\ex_objectdisplaymode.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.GetGroupList">
            <summary>
            Returns an array of GroupCount group indices.  If GroupCount is zero, then GetGroupList() returns null.
            </summary>
            <returns>An array of group indices. null might be retuned in place of an empty array.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.AddToGroup(System.Int32)">
            <summary>
            Adds object to the group with specified index by appending index to
            group list.
            <para>If the object is already in group, nothing is changed.</para>
            </summary>
            <param name="groupIndex">The index that will be added.</param>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.RemoveFromGroup(System.Int32)">
            <summary>
            removes object from the group with specified index.
            <para>If the object is not in the group, nothing is changed.</para>
            </summary>
            <param name="groupIndex">The index that will be removed.</param>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.RemoveFromAllGroups">
            <summary>Removes object from all groups.</summary>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.SetUserString(System.String,System.String)">
            <summary>
            Attach a user string (key,value combination) to this geometry.
            </summary>
            <param name="key">id used to retrieve this string.</param>
            <param name="value">string associated with key. If null, the key will be removed</param>
            <returns>true on success.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.GetUserString(System.String)">
            <summary>
            Gets a user string.
            </summary>
            <param name="key">id used to retrieve the string.</param>
            <returns>string associated with the key if successful. null if no key was found.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjectAttributes.GetUserStrings">
            <summary>
            Gets an independent copy of the collection of (user text key, user text value) pairs attached to this object.
            </summary>
            <returns>A collection of key strings and values strings. This </returns>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.Mode">
            <summary>
            An object must be in one of three modes: normal, locked or hidden.
            If an object is in normal mode, then the object's layer controls visibility
            and selectability. If an object is locked, then the object's layer controls
            visibility by the object cannot be selected. If the object is hidden, it is
            not visible and it cannot be selected.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.IsInstanceDefinitionObject">
            <summary>
            Use this query to determine if an object is part of an instance definition.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.Visible">
            <summary>object visibility.</summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.LinetypeSource">
            <summary>
            The Linetype used to display an object is specified in one of two ways.
            If LinetypeSource is ON::linetype_from_layer, then the object's layer ON_Layer::Linetype() is used.
            If LinetypeSource is ON::linetype_from_object, then value of m_linetype is used.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.ColorSource">
            <summary>
            The color used to display an object is specified in one of three ways.
            If ColorSource is ON::color_from_layer, then the object's layer ON_Layer::Color() is used.
            If ColorSource is ON::color_from_object, then value of m_color is used.
            If ColorSource is ON::color_from_material, then the diffuse color of the object's
            render material is used.  See ON_3dmObjectAttributes::MaterialSource() to
            determine where to get the definition of the object's render material.
            </summary>
            <example>
            <code source='examples\vbnet\ex_modifyobjectcolor.vb' lang='vbnet'/>
            <code source='examples\cs\ex_modifyobjectcolor.cs' lang='cs'/>
            <code source='examples\py\ex_modifyobjectcolor.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.PlotColorSource">
            <summary>
            The color used to plot an object on paper is specified in one of three ways.
            If PlotColorSource is ON::plot_color_from_layer, then the object's layer ON_Layer::PlotColor() is used.
            If PlotColorSource is ON::plot_color_from_object, then value of PlotColor() is used.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.ObjectId">
            <summary>
            Every object has a Guid (globally unique identifier, also known as UUID, or universally
            unique identifier). The default value is Guid.Empty.
            <para>
            When an object is added to a model, the value is checked.  If the value is Guid.Empty, a
            new Guid is created. If the value is not null but it is already used by another object
            in the model, a new Guid is created. If the value is not Guid.Empty and it is not used by
            another object in the model, then that value persists. When an object is updated, by
            a move for example, the value of ObjectId persists.
            </para>
            <para>This value is the same as the one returned by object.Id.</para>
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.Name">
            <summary>
            Gets or sets an object optional text name.
            <para>More than one object in a model can have the same name and
            some objects may have no name.</para>
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.LayerIndex">
            <summary>
            Gets or sets an associated layer index.
            <para>Layer definitions in an OpenNURBS model are stored in a layer table.
            The layer table is conceptually an array of ON_Layer classes.  Every
            OpenNURBS object in a model is on some layer.  The object's layer
            is specified by zero based indicies into the ON_Layer array.</para>
            </summary>
            <example>
            <code source='examples\vbnet\ex_moveobjectstocurrentlayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_moveobjectstocurrentlayer.cs' lang='cs'/>
            <code source='examples\py\ex_moveobjectstocurrentlayer.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.LinetypeIndex">
            <summary>
            Gets or sets the linetype index.
            <para>Linetype definitions in an OpenNURBS model are stored in a linetype table.
            The linetype table is conceptually an array of ON_Linetype classes. Every
            OpenNURBS object in a model references some linetype.  The object's linetype
            is specified by zero based indicies into the ON_Linetype array.</para>
            <para>Index 0 is reserved for continuous linetype (no pattern).</para>
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.MaterialIndex">
            <summary>
            Gets or sets the material index.
            <para>If you want something simple and fast, set the index of
            the rendering material.</para>
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.MaterialSource">
            <summary>
            Determines if the simple material should come from the object or from it's layer.
            High quality rendering plug-ins should use m_rendering_attributes.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.Decals">
            <summary>
            Gets all object decals associated with this object.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.MaterialRefs">
            <summary>
            If you are developing a high quality plug-in renderer, and a user is
            assigning a custom render material to this object, then add rendering
            material information to the MaterialRefs dictionary.
            
            Note to developers:
             As soon as the MaterialRefs dictionary contains items rendering
             material queries slow down.  Do not populate the MaterialRefs
            dictionary when setting the MaterialIndex will take care of your needs.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.ObjectColor">
            <summary>
            If ON::color_from_object == ColorSource, then color is the object's display color.
            </summary>
            <example>
            <code source='examples\vbnet\ex_modifyobjectcolor.vb' lang='vbnet'/>
            <code source='examples\cs\ex_modifyobjectcolor.cs' lang='cs'/>
            <code source='examples\py\ex_modifyobjectcolor.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.PlotColor">
            <summary>
            If plot_color_from_object == PlotColorSource, then PlotColor is the object's plotting color.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.HasMapping">
            <summary>
            A mapping from any plugin source is associated with these attributes
            Need to do this here to respond correctly to ModifyObjectAttributes event
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.DisplayOrder">
            <summary>
            Display order used to force objects to be drawn on top or behind each other.
            Larger numbers draw on top of smaller numbers.
            <para>0  = draw object in standard depth buffered order</para>
            <para>&lt;0 = draw object behind "normal" draw order objects</para>
            <para>&gt;0 = draw object on top of "normal" draw order objects</para>
            </summary>
            <example>
            <code source='examples\vbnet\ex_displayorder.vb' lang='vbnet'/>
            <code source='examples\cs\ex_displayorder.cs' lang='cs'/>
            <code source='examples\py\ex_displayorder.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.PlotWeight">
            <summary>
            Plot weight in millimeters.
            =0.0 means use the default width
            &lt;0.0 means don't plot (visible for screen display, but does not show on plot)
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.ObjectDecoration">
            <summary>
            Used to indicate an object has a decoration (like an arrowhead on a curve)
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.WireDensity">
            <summary>
            When a surface object is displayed in wireframe, this controls
            how many isoparametric wires are used.
            value    number of isoparametric wires
            -1       boundary wires (off)
            0        boundary and knot wires 
            1        boundary and knot wires and, if there are no interior knots, a single interior wire.
            N>=2     boundary and knot wires and (N+1) interior wires.
            </summary>
            <example>
            <code source='examples\vbnet\ex_isocurvedensity.vb' lang='vbnet'/>
            <code source='examples\cs\ex_isocurvedensity.cs' lang='cs'/>
            <code source='examples\py\ex_isocurvedensity.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.ViewportId">
            <summary>
            If ViewportId is nil, the object is active in all viewports. If ViewportId is not nil, then 
            this object is only active in a specific view. This field is primarily used to assign page
            space objects to a specific page, but it can also be used to restrict model space to a
            specific view.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.Space">
            <summary>
            Starting with V4, objects can be in either model space or page space.
            If an object is in page space, then ViewportId is not nil and
            identifies the page it is on.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjectAttributes.GroupCount">
            <summary>number of groups object belongs to.</summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.HistorySettings">
            <summary>
            Provides static (Shared in Vb.Net) properties to modify Rhino History settings.
            </summary>
        </member>
        <member name="M:Rhino.UI.ObjectPropertiesPage.OnActivate(System.Boolean)">
            <summary>Called when this page is activated/deactivated.</summary>
            <param name="active">If true then this page is on top otherwise it is about to be hidden.</param>
            <returns>
            If true then the page is hidden and the requested page is not
            activated otherwise will not allow you to change the current page.
            Default returns true
            </returns>
        </member>
        <member name="P:Rhino.UI.ObjectPropertiesPage.PageControl">
            <summary>
             Return the control that represents this page. This will typically be a custom user control.
             </summary>
        </member>
        <member name="P:Rhino.UI.ObjectPropertiesPage.SelectedObjects">
            <summary>
            Return a list of Rhino objects to be processed by this object properties page
            </summary>
        </member>
        <member name="F:Rhino.UI.ObjectPropertiesPage.ProertyPageType.Material">
            <summary>
            Replace the material page with this page, only works are the current
            render plug-in
            </summary>
        </member>
        <member name="F:Rhino.UI.ObjectPropertiesPage.ProertyPageType.Light">
            <summary>
            Replace light page with this page, only works are the current render
            plug-in
            </summary>
        </member>
        <member name="F:Rhino.UI.ObjectPropertiesPage.ProertyPageType.Custom">
            <summary>
            User defined custom page
            </summary>
        </member>
        <member name="F:Rhino.UI.ObjectPropertiesPage.ProertyPageType.ObjectProperties">
            <summary>
            For internal use
            </summary>
        </member>
        <member name="F:Rhino.UI.ObjectPropertiesPage.ProertyPageType.Dimension">
            <summary>
            If page is provided by Rhino and only dimensions are selected
            activate this page
            </summary>
        </member>
        <member name="F:Rhino.UI.ObjectPropertiesPage.ProertyPageType.Leader">
            <summary>
            If page is provided by Rhino and leaders are selected activate this
            page
            </summary>
        </member>
        <member name="F:Rhino.UI.ObjectPropertiesPage.ProertyPageType.Text">
            <summary>
            If page is provided by Rhino and only text objects are selected
            activate this page
            </summary>
        </member>
        <member name="F:Rhino.UI.ObjectPropertiesPage.ProertyPageType.Hatch">
            <summary>
            If page is provided by Rhino and only hatch objects are selected
            activate this page
            </summary>
        </member>
        <member name="T:Rhino.UI.StackedDialogPage">
            <summary>
            Provides a base class to inherit from for the addition of stacked dialog pages.
            </summary>
        </member>
        <member name="M:Rhino.UI.StackedDialogPage.OnApply">
            <summary>Called when stacked dialog OK button is pressed.</summary>
            <returns>
            If return value is true then the dialog will be closed. A return of false means
            there was an error and dialog remains open so page can be properly updated.
            </returns>
        </member>
        <member name="M:Rhino.UI.StackedDialogPage.OnCancel">
            <summary>Called when stacked dialog Cancel button is pressed.</summary>
        </member>
        <member name="M:Rhino.UI.StackedDialogPage.OnActivate(System.Boolean)">
            <summary>Called when this page is activated/deactivated.</summary>
            <param name="active">If true then this page is on top otherwise it is about to be hidden.</param>
            <returns>
            If true then the page is hidden and the requested page is not
            activated otherwise will not allow you to change the current page.
            Default returns true
            </returns>
        </member>
        <member name="M:Rhino.UI.StackedDialogPage.OnDefaults">
            <summary>Called when stacked dialog Defaults button is pressed (see ShowDefaultsButton).</summary>
        </member>
        <member name="P:Rhino.UI.StackedDialogPage.PageControl">
            <summary>
             Return the control that represents this page. This will typically be a custom user control.
             </summary> 
        </member>
        <member name="P:Rhino.UI.StackedDialogPage.ShowDefaultsButton">
            <summary>Called when this page is activated.</summary>
            <returns>
            true  : if the page wants the "Defaults" button to appear.
            false : if the page does not want the "Defaults" button to appear.
            
            Default returns false
            Note: returning false implies that OnDefaults() method will never get called.
            </returns>
        </member>
        <member name="T:Rhino.Display.RhinoView">
            <summary>
            A RhinoView represents a single "window" display of a document. A view could
            contain one or many RhinoViewports (many in the case of Layout views with detail viewports).
            Standard Rhino modeling views have one viewport.
            </summary>
        </member>
        <member name="M:Rhino.Display.RhinoView.ScreenToClient(System.Drawing.Point)">
            <summary>
            Converts a point in screen coordinates to client coordinates for this view.
            </summary>
            <param name="screenPoint">The 2D screen point.</param>
            <returns>A 2D point in client coordinates.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoView.Redraw">
            <summary>Redraws this view.</summary>
            <remarks>
            If you change something in "this" view like the projection, construction plane,
            background bitmap, etc., then you need to call RhinoView.Redraw() to redraw
            "this" view./ The other views will not be changed. If you change something in
            the document (like adding new geometry to the model), then you need to call
            RhinoDoc.Views.Redraw() to redraw all the views.
            </remarks>
            <example>
            <code source='examples\vbnet\ex_addbackgroundbitmap.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbackgroundbitmap.cs' lang='cs'/>
            <code source='examples\py\ex_addbackgroundbitmap.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoView.CreateWireframePreviewImage(System.String,System.Drawing.Size,System.Boolean,System.Boolean)">
            <summary>Creates a bitmap preview image of model.</summary>
            <param name='imagePath'>
            [in] The name of the bitmap file to create.  The extension of the imagePath controls
            the format of the bitmap file created (bmp, tga, jpg, pcx, png, tif).
            </param>
            <param name='size'>[in] The width and height of the bitmap in pixels.</param>
            <param name="ignoreHighlights">true if highlighted elements should be drawn normally.</param>
            <param name="drawConstructionPlane">true if the CPlane should be drawn.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoView.CreateShadedPreviewImage(System.String,System.Drawing.Size,System.Boolean,System.Boolean,System.Boolean)">
            <summary>Creates a bitmap preview image of model.</summary>
            <param name='imagePath'>
            [in] The name of the bitmap file to create.  The extension of the imagePath controls
            the format of the bitmap file created (bmp, tga, jpg, pcx, png, tif).
            </param>
            <param name='size'>[in] The width and height of the bitmap in pixels.</param>
            <param name="ignoreHighlights">true if highlighted elements should be drawn normally.</param>
            <param name="drawConstructionPlane">true if the CPlane should be drawn.</param>
             <param name="useGhostedShading">true if ghosted shading (partially transparent shading) should be used.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoView.CaptureToBitmap">
            <summary>
            Capture View contents to a bitmap.
            </summary>
            <returns>The bitmap of the complete view.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoView.CaptureToBitmap(System.Drawing.Size)">
            <summary>
            Capture View contents to a bitmap.
            </summary>
            <param name="size">Size of Bitmap to capture to.</param>
            <returns>The bitmap of the specified part of the view.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoView.CaptureToBitmap(System.Drawing.Size,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Captures a part of the view contents to a bitmap allowing for visibility of grid and axes.
            </summary>
            <param name="size">The width and height of the returned bitmap.</param>
            <param name="grid">true if the construction plane grid should be visible.</param>
            <param name="worldAxes">true if the world axis should be visible.</param>
            <param name="cplaneAxes">true if the construction plane close the the grid should be visible.</param>
            <returns>A new bitmap.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoView.CaptureToBitmap(System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Captures the view contents to a bitmap allowing for visibility of grid and axes.
            </summary>
            <param name="grid">true if the construction plane grid should be visible.</param>
            <param name="worldAxes">true if the world axis should be visible.</param>
            <param name="cplaneAxes">true if the construction plane close the the grid should be visible.</param>
            <returns>A new bitmap.</returns>
            <example>
            <code source='examples\vbnet\ex_screencaptureview.vb' lang='vbnet'/>
            <code source='examples\cs\ex_screencaptureview.cs' lang='cs'/>
            <code source='examples\py\ex_screencaptureview.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoView.CaptureToBitmap(System.Drawing.Size,Rhino.Display.DisplayModeDescription)">
            <summary>
            Capture View contents to a bitmap using a display mode description to define
            how drawing is performed.
            </summary>
            <param name="size">The width and height of the returned bitmap.</param>
            <param name="mode">The display mode.</param>
            <returns>A new bitmap.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoView.CaptureToBitmap(Rhino.Display.DisplayModeDescription)">
            <summary>
            Capture View contents to a bitmap using a display mode description to define
            how drawing is performed.
            </summary>
            <param name="mode">The display mode.</param>
            <returns>A new bitmap.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoView.CaptureToBitmap(System.Drawing.Size,Rhino.Display.DisplayPipelineAttributes)">
            <summary>
            Capture View contents to a bitmap using display attributes to define how
            drawing is performed.
            </summary>
            <param name="size">The width and height of the returned bitmap.</param>
            <param name="attributes">The specific display mode attributes.</param>
            <returns>A new bitmap.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoView.CaptureToBitmap(Rhino.Display.DisplayPipelineAttributes)">
            <summary>
            Captures view contents to a bitmap using display attributes to define how
            drawing is performed.
            </summary>
            <param name="attributes">The specific display mode attributes.</param>
            <returns>A new bitmap.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoView.Close">
            <summary>
            Remove this View from Rhino. DO NOT attempt to use this instance of this
            class after calling Close.
            </summary>
            <returns>true on success</returns>
        </member>
        <member name="P:Rhino.Display.RhinoView.Handle">
            <summary>
            Gets the window handle that this view is bound to.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoView.Bounds">
            <summary>
            Gets or sets the size and location of the view including its nonclient elements, in pixels, relative to the parent control.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoView.ClientRectangle">
            <summary>
            Gets the rectangle that represents the client area of the view. 
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoView.ScreenRectangle">
            <summary>
            Gets the rectangle that represents the client area of the view in screen coordinates.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoView.EnableDrawing">
            <summary>
            Gets or sets the 'drawing enabled' flag. By default, drawing is enabled.
            <para>There are some rare situations where scipts want to disable drawing for a while.</para>
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoView.MainViewport">
            <summary>
            A RhinoView contains a "main viewport" that fills the entire view client window.
            RhinoPageViews may also contain nested child RhinoViewports for implementing
            detail viewports.
            The MainViewport will always return this RhinoView's m_vp.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoView.ActiveViewport">
            <summary>
            The ActiveViewport is the same as the MainViewport for standard RhinoViews. In
            a RhinoPageView, the active viewport may be the RhinoViewport of a child detail object.
            Most of the time, you will use ActiveViewport unless you explicitly need to work with
            the main viewport.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addbackgroundbitmap.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbackgroundbitmap.cs' lang='cs'/>
            <code source='examples\py\ex_addbackgroundbitmap.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Display.RhinoView.ActiveViewportID">
            <summary>
            Returns viewport ID for the active viewport. Faster than ActiveViewport function when
            working with page views.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoView.TitleVisible">
            <summary>
            Visibility of the viewport title window.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoView.Floating">
            <summary>
            Floating state of RhinoView.
            if true, then the view will be in a floating frame window. Otherwise
            the view will be embeded in the main frame.
            </summary>
        </member>
        <member name="M:Rhino.Display.RhinoPageView.SetPageAsActive">
            <example>
            <code source='examples\vbnet\ex_addlayout.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayout.cs' lang='cs'/>
            <code source='examples\py\ex_addlayout.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoPageView.SetActiveDetail(System.Guid)">
            <example>
            <code source='examples\vbnet\ex_addlayout.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayout.cs' lang='cs'/>
            <code source='examples\py\ex_addlayout.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoPageView.AddDetailView(System.String,Rhino.Geometry.Point2d,Rhino.Geometry.Point2d,Rhino.Display.DefinedViewportProjection)">
            <summary>
            Creates a detail view object that is displayed on this page and adds it to the doc.
            </summary>
            <param name="title">The detail view title.</param>
            <param name="corner0">Corners of the detail view in world coordinates.</param>
            <param name="corner1">Corners of the detail view in world coordinates.</param>
            <param name="initialProjection">The defined initial projection type.</param>
            <returns>Newly created detail view on success. null on error.</returns>
            <example>
            <code source='examples\vbnet\ex_addlayout.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayout.cs' lang='cs'/>
            <code source='examples\py\ex_addlayout.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoPageView.GetDetailViews">
            <summary>
            Gets a list of the detail view objects associated with this layout.
            </summary>
            <returns>A detail view object array. This can be null, but not empty.</returns>
        </member>
        <member name="P:Rhino.Display.RhinoPageView.ActiveViewport">
            <summary>
            The ActiveViewport is the same as the MainViewport for standard RhinoViews. In
            a RhinoPageView, the active viewport may be the RhinoViewport of a child detail object.
            Most of the time, you will use ActiveViewport unless you explicitly need to work with
            the main viewport.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoPageView.ActiveViewportID">
            <summary>
            Returns viewport ID for the active viewport. Faster than ActiveViewport function when
            working with page views.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoPageView.PageIsActive">
            <summary>
            true if the page is active instead of any detail views. This occurs
            when the MainViewport.Id == ActiveViewportID.
            </summary>
            <example>
            <code source='examples\vbnet\ex_activeviewport.vb' lang='vbnet'/>
            <code source='examples\cs\ex_activeviewport.cs' lang='cs'/>
            <code source='examples\py\ex_activeviewport.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Display.RhinoPageView.PageNumber">
            <summary>
            Gets or sets the runtime page number and updates the page number for all
            of the other pages. The first page has a value of 0
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoPageView.PageWidth">
            <summary>
            Width of the page in the document's PageUnitSystem
            </summary>
            <example>
            <code source='examples\vbnet\ex_rhinopageviewwidthheight.vb' lang='vbnet'/>
            <code source='examples\cs\ex_rhinopageviewwidthheight.cs' lang='cs'/>
            <code source='examples\py\ex_rhinopageviewwidthheight.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Display.RhinoPageView.PageHeight">
            <summary>
            Height of the page in the document's PageUnitSystem
            </summary>
            <example>
            <code source='examples\vbnet\ex_rhinopageviewwidthheight.vb' lang='vbnet'/>
            <code source='examples\cs\ex_rhinopageviewwidthheight.cs' lang='cs'/>
            <code source='examples\py\ex_rhinopageviewwidthheight.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Display.RhinoPageView.PageName">
            <summary>Same as the MainViewport.Name.</summary>
            <example>
            <code source='examples\vbnet\ex_activeviewport.vb' lang='vbnet'/>
            <code source='examples\cs\ex_activeviewport.cs' lang='cs'/>
            <code source='examples\py\ex_activeviewport.py' lang='py'/>
            </example>
        </member>
        <member name="T:Rhino.Input.Custom.PickStyle">
            <summary>
            Provides picking values that describe common CAD picking behavior.
            </summary>
        </member>
        <member name="T:Rhino.Input.Custom.PickMode">
            <summary>
            Picking can happen in wireframe or shaded display mode
            </summary>
        </member>
        <member name="T:Rhino.Input.Custom.PickContext">
            <summary>
            Provides storage for picking operations.
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.PickContext.UpdateClippingPlanes">
            <summary>
            Updates the clipping plane information in pick region. The
            SetClippingPlanes and View fields must be called before calling
            UpdateClippingPlanes().
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.PickContext.PickFrustumTest(Rhino.Geometry.BoundingBox,System.Boolean@)">
            <summary>
            Fast test to check if a bounding box intersects a pick frustum.
            </summary>
            <param name="box"></param>
            <param name="boxCompletelyInFrustum">
            Set to true if the box is completely contained in the pick frustum.
            When doing a window or crossing pick, you can immediately return a
            hit if the object's bounding box is completely inside of the pick frustum.
            </param>
            <returns>
            False if bbox is invalid or box does not intersect the pick frustum
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.PickContext.PickFrustumTest(Rhino.Geometry.Point3d,System.Double@,System.Double@)">
            <summary>Utility for picking 3d point</summary>
            <param name="point"></param>
            <param name="depth">
            depth returned here for point picks.
            LARGER values are NEARER to the camera.
            SMALLER values are FARTHER from the camera.
            </param>
            <param name="distance">
            planar distance returned here for point picks.
            SMALLER values are CLOSER to the pick point
            </param>
            <returns>true if there is a hit</returns>
        </member>
        <member name="M:Rhino.Input.Custom.PickContext.PickFrustumTest(Rhino.Geometry.Mesh,Rhino.Input.Custom.PickContext.MeshPickStyle,Rhino.Geometry.Point3d@,Rhino.Geometry.Point2d@,Rhino.Geometry.Point2d@,System.Double@,System.Double@,Rhino.Input.Custom.PickContext.MeshHitFlag@,System.Int32@)">
            <summary>Utility for picking meshes</summary>
            <param name="mesh">mesh to test</param>
            <param name="pickStyle">mode used for pick test</param>
            <param name="hitPoint">location returned here for point picks</param>
            <param name="hitSurfaceUV">
            If the mesh has surface parameters, set to the surface parameters of the hit point
            </param>
            <param name="hitTextureCoordinate">
            If the mesh has texture coordinates, set to the texture coordinate of the hit
            point.  Note that the texture coodinates can be set in many different ways
            and this information is useless unless you know how the texture coordinates
            are set on this particular mesh.
            </param>
            <param name="depth">
            depth returned here for point picks
            LARGER values are NEARER to the camera.
            SMALLER values are FARTHER from the camera.
            </param>
            <param name="distance">
            planar distance returned here for point picks.
            SMALLER values are CLOSER to the pick point
            </param>
            <param name="hitFlag">
            For point picks, How to interpret the hitIndex (vertex hit, edge hit, or face hit)
            </param>
            <param name="hitIndex">
            index of vertex/edge/face that was hit. Use hitFlag to determine what this index
            corresponds to
            </param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Input.Custom.PickContext.PickFrustumTest(Rhino.Geometry.Mesh,Rhino.Input.Custom.PickContext.MeshPickStyle,Rhino.Geometry.Point3d@,System.Double@,System.Double@,Rhino.Input.Custom.PickContext.MeshHitFlag@,System.Int32@)">
            <summary>Utility for picking meshes</summary>
            <param name="mesh">mesh to test</param>
            <param name="pickStyle">mode used for pick test</param>
            <param name="hitPoint">location returned here for point picks</param>
            <param name="depth">
            depth returned here for point picks
            LARGER values are NEARER to the camera.
            SMALLER values are FARTHER from the camera.
            </param>
            <param name="distance">
            planar distance returned here for point picks.
            SMALLER values are CLOSER to the pick point
            </param>
            <param name="hitFlag">
            For point picks, How to interpret the hitIndex (vertex hit, edge hit, or face hit)
            </param>
            <param name="hitIndex">
            index of vertex/edge/face that was hit. Use hitFlag to determine what this index
            corresponds to
            </param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Input.Custom.PickContext.PickMeshTopologyVertices(Rhino.Geometry.Mesh)">
            <summary>
            Utility for picking mesh vertices
            </summary>
            <param name="mesh"></param>
            <returns>indices of mesh topology vertices that were picked</returns>
        </member>
        <member name="P:Rhino.Input.Custom.PickContext.View">
            <summary>
            This view can be a model view or a page view. When view is a page view,
            then you need to distingish between the viewports MainViewport() and
            ActiveViewport().  When m_view is a model view, both MainViewport() and
            ActiveViewport() return the world view's viewport.
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.PickContext.PickLine">
            <summary>
            pick chord starts on near clipping plane and ends on far clipping plane.
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.PickContext.PickGroupsEnabled">
            <summary>
            Thue if GroupObjects should be added to the pick list
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.PickContext.SubObjectSelectionEnabled">
            <summary>
            True if the user had activated subobject selection
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.PickContext.MeshPickStyle.WireframePicking">
            <summary>Checks for vertex and edge hits</summary>
        </member>
        <member name="F:Rhino.Input.Custom.PickContext.MeshPickStyle.ShadedModePicking">
            <summary>Checks for face hits</summary>
        </member>
        <member name="F:Rhino.Input.Custom.PickContext.MeshPickStyle.VertexOnlyPicking">
            <summary>Returns false if no vertices are hit</summary>
        </member>
        <member name="F:Rhino.PlugIns.PlugInLoadTime.Disabled">
            <summary>never load plug-in.</summary>
        </member>
        <member name="F:Rhino.PlugIns.PlugInLoadTime.AtStartup">
            <summary>Load when Rhino starts.</summary>
        </member>
        <member name="F:Rhino.PlugIns.PlugInLoadTime.WhenNeeded">
            <summary>(default) Load the first time a plug-in command used.</summary>
        </member>
        <member name="F:Rhino.PlugIns.PlugInLoadTime.WhenNeededIgnoreDockingBars">
            <summary>Load the first time a plug-in command used NOT when restoring docking control bars.</summary>
        </member>
        <member name="F:Rhino.PlugIns.PlugInLoadTime.WhenNeededOrOptionsDialog">
            <summary>When a plug-in command is used or the options dialog is shown.</summary>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.GetLoadedPlugIn(System.Guid)">
            <summary>
            Only searches through list of RhinoCommon plug-ins.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.Find(System.Reflection.Assembly)">
            <summary>
            Finds the plug-in instance that was loaded from a given assembly.
            </summary>
            <param name="pluginAssembly">The plug-in assembly.
            <para>You can get the assembly instance at runtime with the <see cref="P:System.Type.Assembly"/> instance property.</para></param>
            <returns>The assembly plug-in instance if successful. Otherwise, null.</returns>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.Find(System.Guid)">
            <summary>
            Finds the plug-in instance that was loaded from a given plug-in Id.
            </summary>
            <param name="plugInId">The plug-in Id.</param>
            <returns>The plug-in instance if successful. Otherwise, null.</returns>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.GetCommands">
            <summary>All of the commands associated with this plug-in.</summary>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.OnLoad(System.String@)">
            <summary>
            Is called when the plug-in is being loaded.
            </summary>
            <param name="errorMessage">
            If a load error is returned and this string is set. This string is the 
            error message that will be reported back to the user.
            </param>
            <returns>An appropriate load return code.
            <para>The default implementation returns <see cref="F:Rhino.PlugIns.LoadReturnCode.Success"/>.</para></returns>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.CreateCommands">
            <summary>
            Called right after plug-in is created and is responsible for creating
            all of the commands in a given plug-in.  The base class implementation
            Constructs an instance of every publicly exported command class in your
            plug-in's assembly.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.ShouldCallWriteDocument(Rhino.FileIO.FileWriteOptions)">
            <summary>
            Called whenever a Rhino is about to save a .3dm file.
            If you want to save plug-in document data when a model is 
            saved in a version 5 .3dm file, then you must override this
            function to return true and you must override WriteDocument().
            </summary>
            <param name="options">The file write options, such as "include preview image" and "include render meshes".</param>
            <returns>
            true if the plug-in wants to save document user data in the
            version 5 .3dm file.  The default returns false.
            </returns>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.WriteDocument(Rhino.RhinoDoc,Rhino.FileIO.BinaryArchiveWriter,Rhino.FileIO.FileWriteOptions)">
            <summary>
            Called when Rhino is saving a .3dm file to allow the plug-in
            to save document user data.
            </summary>
            <param name="doc">The Rhino document instance that is being saved.</param>
            <param name="archive">
            OpenNURBS file archive object Rhino is using to write the file.
            Use BinaryArchiveWriter.Write*() functions to write plug-in data.
            OR use the ArchivableDictionary
            
            If any BinaryArchiveWriter.Write*() functions throw an exception, 
            then archive.WriteErrorOccured will be true and you should immediately return.
            Setting archive.WriteErrorOccured to true will cause Rhino to stop saving the file.
            </param>
            <param name="options">The file write options, such as "include preview image" and "include render meshes".</param>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.ReadDocument(Rhino.RhinoDoc,Rhino.FileIO.BinaryArchiveReader,Rhino.FileIO.FileReadOptions)">
            <summary>
            Called whenever a Rhino document is being loaded and plug-in user data was
            encountered written by a plug-in with this plug-in's GUID.
            </summary>
            <param name="doc">A Rhino document that is being loaded.</param>
            <param name="archive">
            OpenNURBS file archive object Rhino is using to read this file.
            Use BinaryArchiveReader.Read*() functions to read plug-in data.
            
            If any BinaryArchive.Read*() functions throws an exception then
            archive.ReadErrorOccurve will be true and you should immediately return.
            </param>
            <param name="options">Describes what is being written.</param>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.OptionsDialogPages(System.Collections.Generic.List{Rhino.UI.OptionsDialogPage})">
            <summary>
            Override this function if you want to extend the options dialog. This function is
            called whenever the user brings up the Options dialog.
            </summary>
            <param name="pages">list of pages to add your custom options dialog page(s) to.</param>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.DocumentPropertiesDialogPages(Rhino.RhinoDoc,System.Collections.Generic.List{Rhino.UI.OptionsDialogPage})">
            <summary>
            Override this function if you want to extend the document properties sections
            of the options dialog. This function is called whenever the user brings up the
            Options dialog.
            </summary>
            <param name="doc">document that the pages are set up for</param>
            <param name="pages">list of pages to add your custom options dialog page(s) to.</param>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.ObjectPropertiesPages(System.Collections.Generic.List{Rhino.UI.ObjectPropertiesPage})">
            <summary>
            Override this function is you want to extend the object properties dialog
            </summary>
            <param name="pages"></param>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.GetLicense(Rhino.PlugIns.LicenseBuildType,Rhino.PlugIns.ValidateProductKeyDelegate)">
            <summary>
            Verifies that there is a valid product license for your plug-in, using
            the Rhino licensing system. If the plug-in is installed as a standalone
            node, the locally installed license will be validated. If the plug-in
            is installed as a network node, a loaner license will be requested by
            the system's assigned Zoo server. If the Zoo server finds and returns 
            a license, then this license will be validated. If no license is found,
            then the user will be prompted to provide a license key, which will be
            validated.
            </summary>
            <param name="productBuildType">
            The product build contentType required by your plug-in.
            </param>
            <param name="validateDelegate">
            Since the Rhino licensing system knows nothing about your product license,
            you will need to validate the product license provided by the Rhino 
            licensing system. This is done by supplying a callback function, or delegate,
            that can be called to perform the validation.
            </param>
            <returns>
            true if a valid license was found. false otherwise.
            </returns>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.GetLicense(Rhino.PlugIns.LicenseCapabilities,System.String,Rhino.PlugIns.ValidateProductKeyDelegate)">
            <summary>
            Verifies that there is a valid product license for your plug-in, using
            the Rhino licensing system. If the plug-in is installed as a standalone
            node, the locally installed license will be validated. If the plug-in
            is installed as a network node, a loaner license will be requested by
            the system's assigned Zoo server. If the Zoo server finds and returns 
            a license, then this license will be validated. If no license is found,
            then the user will be prompted to provide a license key, which will be
            validated.
            </summary>
            <param name="licenseCapabilities">
            In the event that a license was not found, or if the user wants to change
            the way your plug-in is licenses, then provide what capabilities your
            license has by using this enumeration flag.
            </param>
            <param name="textMask">
            In the event that the user needs to be asked for a license, then you can
            provide a text mask, which helps the user to distinguish between proper
            and improper user input of your license code. Note, if you do not want
            to use a text mask, then pass in a null value for this parameter.
            For more information on text masks, search MSDN for the System.Windows.Forms.MaskedTextBox class.
            </param>
            <param name="validateDelegate">
            Since the Rhino licensing system knows nothing about your product license,
            you will need to validate the product license provided by the Rhino 
            licensing system. This is done by supplying a callback function, or delegate,
            that can be called to perform the validation.
            </param>
            <returns>
            true if a valid license was found. false otherwise.
            </returns>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.ReturnLicense">
            <summary>
            Returns, or releases, a product license that was obtained from the Rhino
            licensing system. Note, most plug-ins do not need to call this as the
            Rhino licensing system will return all licenses when Rhino shuts down. 
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.GetLicenseOwner(System.String@,System.String@)">
            <summary>
            Get the customer name and organization used when entering the product
            license. 
            </summary>
            <param name="registeredOwner"></param>
            <param name="registeredOrganization"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.PlugInRuiDictionary">
            <summary>
            Toolbars uses reflection to access this method, do NOT remove or rename it
            without updating the references in the Toolbars plug-in.  This is a hack for
            Rhino 5 only, in V6 all of the toolbar related plug-in stuff has been moved
            into the Toolbars plug-in.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.ValidateRegisteredPlugInRuiFileNameHelper(System.IntPtr,System.IntPtr,System.Guid,System.IntPtr)">
            <summary>
            
            </summary>
            <param name="registeredRuiFile"></param>
            <param name="fullPathToPlugIn"></param>
            <param name="plugInId"></param>
            <param name="pResult"></param>
            <returns>
            0 = no file name or do noting
            1 = file name found and useable
            2 = file name modified, update the registered file name
            </returns>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.GetInstalledPlugInNames(Rhino.PlugIns.PlugInType,System.Boolean,System.Boolean)">
            <summary>
            Gets a list of installed plug-in names.  The list can be restricted by some filters.
            </summary>
            <param name="typeFilter">
            The enumeration flags that determine which types of plug-ins are included.
            </param>
            <param name="loaded">true if loaded plug-ins are returned.</param>
            <param name="unloaded">true if unloaded plug-ins are returned.</param>
            <returns>An array of installed plug-in names. This can be empty, but not null.</returns>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.NameFromPath(System.String)">
            <summary>
            Gets a plug-in name for an installed plug-in given the path to that plug-in.
            </summary>
            <param name="pluginPath">The path of the plug-in.</param>
            <returns>The plug-in name.</returns>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.PathFromName(System.String)">
            <summary>
            Gets the path to an installed plug-in given the name of that plug-in
            </summary>
            <param name="pluginName"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.PathFromId(System.Guid)">
            <summary>
            Gets the path to an installed plug-in given the id of that plug-in
            </summary>
            <param name="pluginId"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.GetEnglishCommandNames(System.Guid)">
            <summary>
            Gets names of all "non-test" commands for a given plug-in.
            </summary>
            <param name="pluginId">The plug-in ID.</param>
            <returns>An array with all plug-in names. This can be empty, but not null.</returns>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.SetLoadProtection(System.Guid,System.Boolean)">
            <summary>
            Set load protection state for a certain plug-in
            </summary>
            <param name="pluginId"></param>
            <param name="loadSilently"></param>
        </member>
        <member name="M:Rhino.PlugIns.PlugIn.GetLoadProtection(System.Guid,System.Boolean@)">
            <summary>
            Get load protection state for a plug-in
            </summary>
            <param name="pluginId"></param>
            <param name="loadSilently"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.PlugIns.PlugIn.Assembly">
            <summary>Source assembly for this plug-in.</summary>
        </member>
        <member name="P:Rhino.PlugIns.PlugIn.LoadTime">
            <summary>
            Plug-ins are typically loaded on demand when they are first needed. You can change
            this behavior to load the plug-in at during different stages in time by overriding
            this property.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.RenderPlugIn.OnCustomRenderSaveFileTypes(System.Int32,System.IntPtr)">
            <summary>
            Called to add custom file types to the render window save dialog.
            </summary>
            <param name="serialNumber">
            Plug-in runtime serial number
            </param>
            <param name="saveFileTypeArray">
            Array of CRhRdkCustomRenderSaveFileType objects that describe the
            custom file type
            </param>
            <returns></returns>
        </member>
        <member name="F:Rhino.PlugIns.RenderPlugIn.m_custom_render_save_file_types">
            <summary>
            Cache the GetCustomRenderSaveFileTypes() result
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.RenderPlugIn.RegisterCustomRenderSaveFileTypes(Rhino.PlugIns.CustomRenderSaveFileTypes)">
            <summary>
            Override this method to add custom file types to the render window save
            file dialog.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.PlugIns.RenderPlugIn.RegisterRenderPanels(Rhino.Render.RenderPanels)">
            <summary>
            Override this method and call <see cref="M:Rhino.Render.RenderPanels.RegisterPanel(Rhino.PlugIns.PlugIn,Rhino.Render.RenderPanelType,System.Type,System.String,System.Boolean,System.Boolean)"/>
            to add custom render UI to the render output window.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.RenderPlugIn.RegisterRenderTabs(Rhino.Render.RenderTabs)">
            <summary>
            Override this method and call <see cref="M:Rhino.Render.RenderTabs.RegisterTab(Rhino.PlugIns.PlugIn,System.Type,System.String,System.Drawing.Icon)"/>
            to add custom tabs to the render output window
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.RenderPlugIn.RenderContentSerializers">
            <summary>
            Called by Rhino when it is time to register RenderContentSerializer
            derived classes.  Override this method and return an array of an
            instance of each serialize custom content object you wish to add.
            </summary>
            <returns>
            List of RenderContentSerializer objects to register with the Rhino
            render content browsers.
            </returns>
        </member>
        <member name="M:Rhino.PlugIns.RenderPlugIn.SupportsFeature(Rhino.PlugIns.RenderPlugIn.RenderFeature)">
            <summary>
            Determines if your renderer supports a specific feature.
            </summary>
            <param name="feature">A feature to be controlled.</param>
            <returns>true if the renderer indeed supports the feature.</returns>
        </member>
        <member name="M:Rhino.PlugIns.RenderPlugIn.CreatePreview(Rhino.Render.CreatePreviewEventArgs)">
            <summary>
            Creates the preview bitmap that will appear in the content editor's
            thumbnail display when previewing materials and environments. If this
            function is not overridden or the PreviewImage is not set on the
            args, then the internal OpenGL renderer will generate a simulation of
            the content.
            
            This function is called with four different preview quality settings.
            The first quality level of RealtimeQuick is called on the main thread
            and needs to be drawn as fast as possible.  This function is called
            with the other three quality settings on a separate thread and are
            meant for generating progressively refined preview.
            </summary>
            <param name="args">Event argument with several preview option state properties.</param>
        </member>
        <member name="M:Rhino.PlugIns.RenderPlugIn.CreateTexture2dPreview(Rhino.Render.CreateTexture2dPreviewEventArgs)">
             <summary>
             Creates the preview bitmap that will appear in the content editor's
             thumbnail display when previewing textures in 2d (UV) mode.
            
             If this function is not overridden or the PreviewImage is not set on the
             args, then the internal OpenGL renderer will generate a simulation.
             </summary>
             <param name="args">Event argument with several preview option state properties.</param>
        </member>
        <member name="M:Rhino.PlugIns.RenderPlugIn.AllowChooseContent(Rhino.Render.RenderContent)">
            <summary>
            Default implementation returns true which means the content can be
            picked from the content browser by the user. Override this method and
            return false if you don't want to allow a certain content contentType to be
            picked from the content browser while your render engine is current.
            </summary>
            <param name="content">A render context.</param>
            <returns>true if the operation was successful.</returns>
        </member>
        <member name="M:Rhino.PlugIns.RenderPlugIn.SupportedOutputTypes">
            <summary>
            Returns a list of output types which your renderer can write.
            <para>The default implementation returns bmp, jpg, png, tif, tga.</para>
            </summary>
            <returns>A list of file types.</returns>
        </member>
        <member name="M:Rhino.PlugIns.RenderPlugIn.ShowDecalProperties(System.Collections.Generic.List{Rhino.Render.NamedValue}@)">
            <summary>
            Override this function to handle showing a modal dialog with your plugin's
            custom decal properties.  You will be passed the current properties for the 
            object being edited.  The defaults will be set in InitializeDecalProperties.
            </summary>
            <param name="properties">A list of named values that will be stored on the object
            the input values are the current ones, you should modify the values after the dialog
            closes.</param>
            <returns>true if the user pressed "OK", otherwise false.</returns>
        </member>
        <member name="M:Rhino.PlugIns.RenderPlugIn.InitializeDecalProperties(System.Collections.Generic.List{Rhino.Render.NamedValue}@)">
            <summary>
            Initialize your custom decal properties here.  The input list will be empty - add your
            default named property values and return.
            </summary>
            <param name="properties">A list of named values that will be stored on the object
            the input values are the current ones, you should modify the values after the dialog
            closes.</param>
        </member>
        <member name="M:Rhino.PlugIns.RenderPlugIn.Render(Rhino.RhinoDoc,Rhino.Commands.RunMode,System.Boolean)">
            <summary>
            Called by Render and RenderPreview commands if this plug-in is set as the default render engine. 
            </summary>
            <param name="doc">A document.</param>
            <param name="mode">A command running mode.</param>
            <param name="fastPreview">If true, lower quality faster render expected.</param>
            <returns>If true, then the renderer is required to construct a rapid preview and not the high-quality final result.</returns>
        </member>
        <member name="M:Rhino.PlugIns.RenderPlugIn.RenderOptionsDialogPage(Rhino.RhinoDoc)">
            <summary>
            Override this method to replace the render properties page in the Rhino
            document properties dialog.  The default implementation returns null
            which means just use the the default Rhino page.
            </summary>
            <param name="doc">
            The document properties to edit.
            </param>
            <returns>
            Return null to use the default Rhino page or return a page derived from
            <see cref="T:Rhino.UI.OptionsDialogPage"/> to replace the default page.
            </returns>
        </member>
        <member name="M:Rhino.PlugIns.RenderPlugIn.OnSetCurrent(System.Boolean)">
            <summary>
            This plug-in (has become)/(is no longer) the current render plug-in
            </summary>
            <param name="current">
            If true then this plug-in is now the current render plug-in otherwise
            it is no longer the current render plug-in.
            </param>
        </member>
        <member name="M:Rhino.PlugIns.CustomRenderSaveFileTypes.#ctor">
            <summary>
            Only allow Rhino Common to construct one of these
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.CustomRenderSaveFileTypes.Clear">
            <summary>
            Clear the cached save type list
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.CustomRenderSaveFileTypes.CustomRenderSaveFileTypeFromExtension(System.String)">
            <summary>
            Find the first CustomRenderSaveFileType that includes the specified
            file extension.
            </summary>
            <param name="extensionId">
            Runtime Id of extension to find as a string
            </param>
            <returns>
            Returns the CustomRenderSaveFileType which contains the specified file
            extension or null if one is not found.
            </returns>
        </member>
        <member name="M:Rhino.PlugIns.CustomRenderSaveFileTypes.RegisterFileType(System.Collections.Generic.IEnumerable{System.String},System.String,Rhino.PlugIns.CustomRenderSaveFileTypes.SaveFileHandler)">
            <summary>
            Call this method to register a custom file save type with the render
            output window save dialog.
            </summary>
            <param name="extensions">
            List of one or more file extension associated with this custom type,
            for example: hdr, hdri
            </param>
            <param name="description">
            File extension description which appears in the file save dialog file
            type combo box.
            </param>
            Called by the rendered scene to write the save file.
            <param name="saveFileHandler">
            </param>
        </member>
        <member name="P:Rhino.PlugIns.CustomRenderSaveFileTypes.TypeList">
            <summary>
            Used to cache the list, the cache is built by the
            OnCustomRenderSaveFileTypes callback and used by the
            OnSaveCusomtomRenderFile callback to find the specific
            save file callback.
            </summary>
        </member>
        <member name="T:Rhino.PlugIns.CustomRenderSaveFileTypes.SaveFileHandler">
            <summary>
            Called when a user chooses to save a rendered scene as this custom
            file type.
            </summary>
            <param name="fileName">
            Name of the file to write.
            </param>
            <param name="includeAlpha">
            Only meaningful if the custom file type optionally supports alpha
            channel.
            </param>
            <param name="renderWindow">
            The <see cref="T:Rhino.Render.RenderWindow"/> to save.
            </param>
            <returns>
            Return true if the file was written successfully otherwise return
            false.
            </returns>
        </member>
        <member name="T:Rhino.PlugIns.CustomRenderSaveFileType">
            <summary>
            Custom render output window save file type
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.CustomRenderSaveFileType.#ctor(System.Collections.Generic.IEnumerable{System.String},System.String,Rhino.PlugIns.CustomRenderSaveFileTypes.SaveFileHandler)">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.CustomRenderSaveFileType.RuntimeId">
            <summary>
            Id for this instance
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.CustomRenderSaveFileType.FileExtensions">
            <summary>
            Custom file extensions for this type for example: "hdr", "hdri"
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.CustomRenderSaveFileType.Description">
            <summary>
            File extension description which appears in the file save dialog file
            type combo box.
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.CustomRenderSaveFileType.SaveFileCallback">
            <summary>
            Called by OnSaveCusomtomRenderFile to actually write the file.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.DigitizerPlugIn.EnableDigitizer(System.Boolean)">
            <summary>
            Called by Rhino to enable/disable input from the digitizer.
            If enable is true and EnableDigitizer() returns false, then
            Rhino will not calibrate the digitizer.
            </summary>
            <param name="enable">
            If true, enable the digitizer. If false, disable the digitizer.
            </param>
            <returns>true if the operation succeeded; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.PlugIns.DigitizerPlugIn.SendPoint(Rhino.Geometry.Point3d,System.Windows.Forms.MouseButtons,System.Boolean,System.Boolean)">
            <summary>
            If the digitizer is enabled, call this function to send a point to Rhino.
            Call this function as much as you like.  The digitizers that Rhino currently
            supports send a point every 15 milliseconds or so. This function should be
            called when users press or release any digitizer button.
            </summary>
            <param name="point">3d point in digitizer coordinates.</param>
            <param name="mousebuttons">corresponding digitizer button is down.</param>
            <param name="shiftKey">true if the Shift keyboard key was pressed. Otherwise, false.</param>
            <param name="controlKey">true if the Control keyboard key was pressed. Otherwise, false.</param>
        </member>
        <member name="P:Rhino.PlugIns.DigitizerPlugIn.DigitizerUnitSystem">
            <summary>
            Unit system of the points the digitizer passes to SendPoint().
            Rhino uses this value when it calibrates a digitizer.
            This unit system must be not change.
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.DigitizerPlugIn.PointTolerance">
            <summary>
            The point tolerance is the distance the digitizer must move 
            (in digitizer coordinates) for a new point to be considered
            real rather than noise. Small desktop digitizer arms have
            values like 0.001 inches and 0.01 millimeters.  This value
            should never be smaller than the accuracy of the digitizing
            device.
            </summary>
        </member>
        <member name="T:Rhino.PlugIns.VerifyFromZooCommon">
            <summary>
            Internal class used strictly to verify that the Zoo Client is being called
            from Rhino Common.
            </summary>
        </member>
        <member name="T:Rhino.PlugIns.LicenseUtils">
            <summary>
            License Manager Utilities.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.GetLicenseClientAssembly">
            <summary>
            Returns the license client assembly.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.Initialize">
            <summary>
            Initializes the license manager.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.ShowRhinoExpiredMessage(System.Int32)">
            <summary>
            Show Rhino or Beta expired message
            </summary>
            <param name="mode"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.Echo(System.String)">
            <summary>
            Tests connectivity with the Zoo.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.ShowLicenseValidationUi(System.String)">
            <summary>
            ShowLicenseValidationUi
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.GetLicense(System.String,System.Guid,System.Int32,System.String,Rhino.PlugIns.ValidateProductKeyDelegate)">
            <summary>
            This (internal) version of Rhino.PlugIns.LicenseUtils.GetLicense
            is used by Rhino.PlugIns.PlugIn objects.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.GetLicense(System.String,System.Guid,System.String,Rhino.PlugIns.LicenseCapabilities,System.String,Rhino.PlugIns.ValidateProductKeyDelegate)">
            <summary>
            20-May-2013 Dale Fugier
            This (internal) version of Rhino.PlugIns.LicenseUtils.GetLicense
            is used by Rhino.PlugIns.PlugIn objects.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.GetLicense(System.Int32,Rhino.PlugIns.ValidateProductKeyDelegate)">
            <summary>
            This version of Rhino.PlugIns.LicenseUtils.GetLicense
            is used by Rhino C++ plug-ins.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.GetLicense(Rhino.PlugIns.ValidateProductKeyDelegate,System.Int32,System.String)">
            <summary>
            This version of Rhino.PlugIns.LicenseUtils.GetLicense
            is used by Rhino C++ plug-ins.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.AskUserForLicense(System.Int32,System.Boolean,System.Windows.Forms.IWin32Window,System.String,Rhino.PlugIns.ValidateProductKeyDelegate)">
            <summary>
            This version of Rhino.PlugIns.LicenseUtils.AskUserForLicense
            is used by Rhino C++ plug-ins.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.ReturnLicense(System.String,System.Guid,System.String)">
            <summary>
            This (internal) version of Rhino.PlugIns.LicenseUtils.ReturnLicense is used
            is used by Rhino.PlugIns.PlugIn objects.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.ReturnLicense(Rhino.PlugIns.ValidateProductKeyDelegate)">
            <summary>
            This (internal) version of Rhino.PlugIns.LicenseUtils.ReturnLicense is used
            is used by Rhino C++ plug-ins.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.ReturnLicense(System.Guid)">
            <summary>
            OBSOLETE - REMOVE WHEN POSSIBLE.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.CheckOutLicense(System.Guid)">
            <summary>
            Checks out a license that is on loan from a Zoo server
            on a permanent basis.
            </summary>
            <param name="productId">
            The Guid of the product that you want to check out.
            </param>
            <returns>
            true if the license was checked out successful.
            false if not successful or on error.
            </returns>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.CheckInLicense(System.Guid)">
            <summary>
            Checks in a previously checked out license to
            the Zoo server from which it was checked out.
            </summary>
            <param name="productId">
            The Guid of the product that you want to check in.
            </param>
            <returns>
            true if the license was checked in successful.
            false if not successful or on error.
            </returns>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.ConvertLicense(System.Guid)">
            <summary>
            Converts a product license from a standalone node
            to a network node.
            </summary>
            <param name="productId">
            The Guid of the product that you want to check in.
            </param>
            <returns>
            true if the license was successfully converted.
            false if not successful or on error.
            </returns>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.GetLicenseType(System.Guid)">
            <summary>
            Returns the contentType of a specified product license
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.IsCheckOutEnabled">
            <summary>
            Returns whether or not license checkout is enabled.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.GetLicenseStatus">
            <summary>
            Returns the current status of every license for ui purposes.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.GetOneLicenseStatus(System.Guid)">
            <summary>
            Returns the current status of a license for ui purposes.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.GetLicenseCapabilities(System.Int32)">
            <summary>
            Converts an integer to a LicenseCapabilities flag
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseUtils.GetRegisteredOwnerInfo(System.Guid,System.String@,System.String@)">
            <summary>
            This (internal) version GetRegisteredOwnerInfo is used RhinoCommon plug-ins.
            </summary>
        </member>
        <member name="T:Rhino.PlugIns.ValidateResult">
            <summary>ValidateProductKeyDelegate result code.</summary>
        </member>
        <member name="F:Rhino.PlugIns.ValidateResult.Success">
            <summary>The product key or license is validated successfully.</summary>
        </member>
        <member name="F:Rhino.PlugIns.ValidateResult.ErrorShowMessage">
            <summary>
            There was an error validating the product key or license, the license
            manager show an error message.
            </summary>
        </member>
        <member name="F:Rhino.PlugIns.ValidateResult.ErrorHideMessage">
            <summary>
            There was an error validating the product key or license. The validating
            delegate will show an error message, not the license manager.
            </summary>
        </member>
        <member name="T:Rhino.PlugIns.ValidateProductKeyDelegate">
            <summary>
            Validates a product key or license.
            </summary>
        </member>
        <member name="T:Rhino.PlugIns.LicenseBuildType">
            <summary>License build contentType enumerations.</summary>
        </member>
        <member name="F:Rhino.PlugIns.LicenseBuildType.Unspecified">
            <summary>An unspecified build</summary>
        </member>
        <member name="F:Rhino.PlugIns.LicenseBuildType.Release">
            <summary>A release build (e.g. commercial, education, nfr, etc.)</summary>
        </member>
        <member name="F:Rhino.PlugIns.LicenseBuildType.Evaluation">
            <summary>A evaluation build</summary>
        </member>
        <member name="F:Rhino.PlugIns.LicenseBuildType.Beta">
            <summary>A beta build (e.g. wip)</summary>
        </member>
        <member name="T:Rhino.PlugIns.LicenseCapabilities">
            <summary>
            Controls the buttons that will appear on the license notification window
            that is displayed if a license for the requesting product is not found.
            Note, the "Close" button will always be displayed.
            </summary>
        </member>
        <member name="F:Rhino.PlugIns.LicenseCapabilities.NoCapabilities">
            <summary>Only the "Close" button will be displayed</summary>
        </member>
        <member name="F:Rhino.PlugIns.LicenseCapabilities.CanBePurchased">
            <summary>Shows "Buy a license" button</summary>
        </member>
        <member name="F:Rhino.PlugIns.LicenseCapabilities.CanBeSpecified">
            <summary>Shows ""Enter a license" and "Use a Zoo" buttons</summary>
        </member>
        <member name="F:Rhino.PlugIns.LicenseCapabilities.CanBeEvaluated">
            <summary>Shows "Evaluate" button</summary>
        </member>
        <member name="F:Rhino.PlugIns.LicenseCapabilities.EvaluationIsExpired">
            <summary>Shows "Evaluate" button disabled</summary>
        </member>
        <member name="T:Rhino.PlugIns.LicenseData">
            <summary>Zoo plugin license data.</summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseData.#ctor">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseData.#ctor(System.String,System.String,System.String)">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseData.#ctor(System.String,System.String,System.String,Rhino.PlugIns.LicenseBuildType)">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseData.#ctor(System.String,System.String,System.String,Rhino.PlugIns.LicenseBuildType,System.Int32)">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseData.#ctor(System.String,System.String,System.String,Rhino.PlugIns.LicenseBuildType,System.Int32,System.Nullable{System.DateTime})">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseData.#ctor(System.String,System.String,System.String,Rhino.PlugIns.LicenseBuildType,System.Int32,System.Nullable{System.DateTime},System.Drawing.Icon)">
            <summary>
            Public constructor.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseData.IsValid">
            <summary>
            Public validator.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseData.IsNotValid(Rhino.PlugIns.LicenseData)">
            <summary>
            Indicates whether a LicenseData object is either null or invalid.
            </summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseData.IsValid(Rhino.PlugIns.LicenseData)">
            <summary>
            Indicates whether a LicenseData object is not null and valid.
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseData.ProductLicense">
            <summary>
            The actual product license. 
            This is provided by the plugin that validated the license.
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseData.SerialNumber">
            <summary>
            The "for display only" product license.
            This is provided by the plugin that validated the license.
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseData.LicenseTitle">
            <summary>
            The title of the license.
            This is provided by the plugin that validated the license.
            (e.g. "Rhinoceros 5.0 Commercial")
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseData.BuildType">
            <summary>
            The build of the product that this license work with.
            When your product requests a license from the Zoo, it
            will specify one of these build types.
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseData.LicenseCount">
            <summary>
            The number of instances supported by this license.
            This is provided by the plugin that validated the license.
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseData.DateToExpire">
            <summary>
            The date and time the license is set to expire.
            This is provided by the plugin that validated the license.
            This time value should be in Coordinated Universal Time (UTC).
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseData.ProductIcon">
            <summary>
            The product's icon. This will displayed in the "license"
            page in the Options dialog. Note, this can be null.
            Note, LicenseData creates it's own copy of the icon.
            </summary>
        </member>
        <member name="T:Rhino.PlugIns.LicenseType">
            <summary>LicenseType enumeration.</summary>
        </member>
        <member name="F:Rhino.PlugIns.LicenseType.Standalone">
            <summary>A standalone license</summary>
        </member>
        <member name="F:Rhino.PlugIns.LicenseType.Network">
            <summary>A network license that has not been fulfilled by a Zoo</summary>
        </member>
        <member name="F:Rhino.PlugIns.LicenseType.NetworkLoanedOut">
            <summary>A license on temporary loan from a Zoo</summary>
        </member>
        <member name="F:Rhino.PlugIns.LicenseType.NetworkCheckedOut">
            <summary>A license on permanent check out from a Zoo</summary>
        </member>
        <member name="T:Rhino.PlugIns.LicenseStatus">
            <summary>LicenseStatus class.</summary>
        </member>
        <member name="M:Rhino.PlugIns.LicenseStatus.#ctor">
            <summary>Public constructor.</summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseStatus.ProductId">
            <summary>The id of the product or plugin.</summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseStatus.BuildType">
            <summary>
            The build contentType of the product, where:
              100 = A release build, either commercical, education, nfr, etc.
              200 = A evaluation build
              300 = A beta build, such as a wip.
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseStatus.LicenseTitle">
            <summary>The title of the license. (e.g. "Rhinoceros 5.0 Commercial")</summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseStatus.SerialNumber">
            <summary>The "for display only" product license or serial number.</summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseStatus.LicenseType">
            <summary>The license contentType. (e.g. Standalone, Network, etc.)</summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseStatus.ExpirationDate">
            <summary>
            The date and time the license will expire.
            This value can be null if:
              1.) The license contentType is "Standalone" and the license does not expire.
              2.) The license contentType is "Network".
              3.) The license contentType is "NetworkCheckedOut" and the checkout does not expire
            Note, date and time is in local time coordinates.
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseStatus.CheckOutExpirationDate">
            <summary>
            The date and time the checked out license will expire.
            Note, this is only set if m_license_type = LicenceType.Standalone
            and if "limited license checkout" was enabled on the Zoo server.
            Note, date and time is in local time coordinates.
            </summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseStatus.RegisteredOwner">
            <summary>The registered owner of the product. (e.g. "Dale Fugier")</summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseStatus.RegisteredOrganization">
            <summary>The registered organization of the product (e.g. "Robert McNeel and Associates")</summary>
        </member>
        <member name="P:Rhino.PlugIns.LicenseStatus.ProductIcon">
            <summary>The product's icon. Note, this can be null.</summary>
        </member>
        <member name="M:Rhino.DocObjects.GripObject.Move(Rhino.Geometry.Transform)">
            <summary>
            Moves the grip to a new location.
            </summary>
            <param name="xform">
            Transformation appliead to the OriginalLocation point.
            </param>
        </member>
        <member name="M:Rhino.DocObjects.GripObject.Move(Rhino.Geometry.Vector3d)">
            <summary>
            Moves the grip to a new location.
            </summary>
            <param name="delta">
            Translation applied to the OriginalLocation point.
            </param>
        </member>
        <member name="M:Rhino.DocObjects.GripObject.Move(Rhino.Geometry.Point3d)">
            <summary>
            Moves the grip to a new location.
            </summary>
            <param name="newLocation">
            New location for grip.
            </param>
        </member>
        <member name="M:Rhino.DocObjects.GripObject.UndoMove">
            <summary>
            Undoes any grip moves made by calling Move.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.GripObject.NeighborGrip(System.Int32,System.Int32,System.Int32,System.Boolean)">
            <summary>
            Used to get a grip's logical neighbors, like NURBS curve, suface,
            and cage control point grips.
            </summary>
            <param name="directionR">
            -1 to go back one grip, +1 to move forward one grip.  For curves, surfaces
            and cages, this is the first parameter direction.
            </param>
            <param name="directionS">
            -1 to go back one grip, +1 to move forward one grip.  For surfaces and
            cages this is the second parameter direction.
            </param>
            <param name="directionT">
            For cages this is the third parameter direction
            </param>
            <param name="wrap"></param>
            <returns>logical neighbor or null if the is no logical neighbor</returns>
        </member>
        <member name="P:Rhino.DocObjects.GripObject.Moved">
            <summary>
            true if the grip has moved from OriginalLocation.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.GripObject.Weight">
            <summary>
            The weight of a NURBS control point grip or RhinoMath.UnsetValue
            if the grip is not a NURBS control point grip.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.SelectionMethod">
            <summary>
            Defines enumerated values for several kinds of selection methods.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.SelectionMethod.Other">
            <summary>
            Selected by non-mouse method (SelAll, etc.)
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.SelectionMethod.MousePick">
            <summary>
            Selected by a mouse click on the object.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.SelectionMethod.WindowBox">
            <summary>
            Selected by a mouse selection window box. 
            Window selection indicates the object is completely contained by the selection rectangle.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.SelectionMethod.CrossingBox">
            <summary>
            Selected by a mouse selection crossing box. 
            A crossing selection indicates the object intersects with the selection rectangle.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjRef">
            <summary>
            Represents a reference to a Rhino object.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.#ctor(System.Guid)">
            <summary>
            Initializes a new object reference from a globally unique identifier (<see cref="T:System.Guid"/>).
            </summary>
            <param name="id">The ID.</param>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.#ctor(Rhino.DocObjects.RhinoObject)">
            <summary>
            Initializes a new object reference from a Rhino object.
            </summary>
            <param name="rhinoObject">The Rhino object.</param>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.#ctor(Rhino.DocObjects.RhinoObject,Rhino.Input.Custom.PickContext)">
            <summary>
            Initialized a new object reference from a Rhino object and pick context
            </summary>
            <param name="rhinoObject"></param>
            <param name="pickContext"></param>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.Geometry">
            <summary>
            Gets the geometry linked to the object targeted by this reference.
            </summary>
            <returns>The geometry.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.ClippingPlaneSurface">
            <summary>
            Gets the clipping plane surface if this reference targeted one.
            </summary>
            <returns>A clipping plane surface, or null if this reference targeted something else.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.Curve">
            <summary>
            Gets the curve if this reference targeted one.
            </summary>
            <returns>A curve, or null if this reference targeted something else.</returns>
            <example>
            <code source='examples\vbnet\ex_intersectcurves.vb' lang='vbnet'/>
            <code source='examples\cs\ex_intersectcurves.cs' lang='cs'/>
            <code source='examples\py\ex_intersectcurves.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.Edge">
            <summary>
            Gets the edge if this reference geometry is one.
            </summary>
            <returns>A boundary representation edge; or null on error.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.Face">
            <summary>
            If the referenced geometry is a brep face, a brep with one face, or
            a surface, this returns the brep face.
            </summary>
            <returns>A boundary representation face; or null on error.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.Trim">
            <summary>
            If the referenced geometry is an edge of a surface,
            this returns the associated brep trim.
            </summary>
            <returns>A boundary representation trim; or null on error</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.Brep">
            <summary>
             Gets the brep if this reference geometry is one.
            </summary>
            <returns>A boundary representation; or null on error.</returns>
            <example>
            <code source='examples\vbnet\ex_booleandifference.vb' lang='vbnet'/>
            <code source='examples\cs\ex_booleandifference.cs' lang='cs'/>
            <code source='examples\py\ex_booleandifference.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.Surface">
            <summary>
            Gets the surface if the referenced geometry is one.
            </summary>
            <returns>A surface; or null if the referenced object is not a surface, or on error.</returns>
            <example>
            <code source='examples\vbnet\ex_orientonsrf.vb' lang='vbnet'/>
            <code source='examples\cs\ex_orientonsrf.cs' lang='cs'/>
            <code source='examples\py\ex_orientonsrf.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.TextDot">
            <summary>
            Gets the text dot if the referenced geometry is one.
            </summary>
            <returns>A text dot; or null if the referenced object is not a text dot, or on error.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.Mesh">
            <summary>
            Gets the mesh if the referenced geometry is one.
            </summary>
            <returns>A mesh; or null if the referenced object is not a mesh, or on error.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.Point">
            <summary>
            Gets the point if the referenced geometry is one.
            </summary>
            <returns>A point; or null if the referenced object is not a point, or on error.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.PointCloud">
            <summary>
            Gets the point cloud if the referenced geometry is one.
            </summary>
            <returns>A point cloud; or null if the referenced object is not a point cloud, or on error.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.TextEntity">
            <summary>
            Gets the text entity if the referenced geometry is one.
            </summary>
            <returns>A text entity; or null if the referenced object is not a text entity, or on error.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.Light">
            <summary>
            Gets the light if the referenced geometry is one.
            </summary>
            <returns>A light; or null if the referenced object is not a light, or on error.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.Hatch">
            <summary>
            Gets the hatch if the referenced geometry is one.
            </summary>
            <returns>A hatch; or null if the referenced object is not a hatch</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.Dispose(System.Boolean)">
            <summary>
            For derived class implementers.
            <para>This method is called with argument true when class user calls Dispose(), while with argument false when
            the Garbage Collector invokes the finalizer, or Finalize() method.</para>
            <para>You must reclaim all used unmanaged resources in both cases, and can use this chance to call Dispose on disposable fields if the argument is true.</para>
            <para>Also, you must call the base virtual method within your overriding method.</para>
            </summary>
            <param name="disposing">true if the call comes from the Dispose() method; false if it comes from the Garbage Collector finalizer.</param>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.Object">
            <summary>Returns the referenced Rhino object.</summary>
            <example>
            <code source='examples\vbnet\ex_orientonsrf.vb' lang='vbnet'/>
            <code source='examples\cs\ex_orientonsrf.cs' lang='cs'/>
            <code source='examples\py\ex_orientonsrf.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.SelectionMethod">
            <summary>
            Gets the method used to select this object.
            </summary>
            <returns>The method used to select this object.</returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.SelectionPoint">
            <summary>
            If the object was selected by picking a point on it, then
            SelectionPoint() returns the point where the selection
            occured, otherwise it returns Point3d.Unset.
            </summary>
            <returns>
            The point where the selection occured or Point3d.Unset on failure.
            </returns>
            <example>
            <code source='examples\vbnet\ex_constrainedcopy.vb' lang='vbnet'/>
            <code source='examples\cs\ex_constrainedcopy.cs' lang='cs'/>
            <code source='examples\py\ex_constrainedcopy.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.CurveParameter(System.Double@)">
            <summary>
            If the reference geometry is a curve or edge with a selection
            point, then this gets the parameter of the selection point.
            </summary>
            <param name="parameter">The parameter of the selection point.</param>
            <returns>If the selection point was on a curve or edge, then the
            curve/edge is returned, otherwise null.</returns>
            <remarks>
            If a curve was selected and CurveParameter is called and the 
            SelectionMethod() is not 1 (point pick on object), the curve will
            be returned and parameter will be set to the start parameter of
            the picked curve. This can be misleading so it may be necessary
            to call SelectionMethod() first, before calling CurveParameter
            to get the desired information.</remarks>
            <example>
            <code source='examples\vbnet\ex_addradialdimension.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addradialdimension.cs' lang='cs'/>
            <code source='examples\py\ex_addradialdimension.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.SurfaceParameter(System.Double@,System.Double@)">
            <summary>
            If the reference geometry is a surface, brep with one face,
            or surface edge with a selection point, then this gets the 
            surface paramters of the selection point.
            </summary>
            <param name="u">The U value is assigned to this out parameter during the call.</param>
            <param name="v">The V value is assigned to this out parameter during the call.</param>
            <returns>
            If the selection point was on a surface, then the surface is returned.
            </returns>
        </member>
        <member name="M:Rhino.DocObjects.ObjRef.SetSelectionComponent(Rhino.Geometry.ComponentIndex)">
            <summary>
            When an object is selected by picking a sub-object, SetSelectionComponent
            may be used to identify the sub-object.
            </summary>
            <param name="componentIndex"></param>
        </member>
        <member name="P:Rhino.DocObjects.ObjRef.ObjectId">
            <summary>Returns the id of the referenced Rhino object.</summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjRef.RuntimeSerialNumber">
            <summary>
            If &gt; 0, then this is the value of a Rhino object's serial number field.
            The serial number is used instead of the pointer to prevent crashes in
            cases when the RhinoObject is deleted but an ObjRef continues to reference
            the Rhino object. The value of RuntimeSerialNumber is not saved in archives
            because it generally changes if you save and reload an archive.
            </summary>
        </member>
        <member name="P:Rhino.DocObjects.ObjRef.GeometryComponentIndex">
            <summary>
            Gets the component index of the referenced (sub) geometry.
            Some objects have subobjects that are valid pieces of geometry. For
            example, breps have edges and faces that are valid curves and surfaces.
            Each subobject has a component index that is &gt; 0. The parent
            geometry has a component index = -1.
            </summary>
        </member>
        <member name="T:Rhino.FileIO.File3dmNotes">
            <summary>
            Represents the notes information stored in a 3dm file.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.File3dmNotes.#ctor">
            <summary>
            Creates empty default notes
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmNotes.Notes">
            <summary>
            Gets or sets the text content of the notes.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmNotes.IsVisible">
            <summary>
            Gets or sets the notes visibility. If the notes are visible, true; false otherwise.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmNotes.IsHtml">
            <summary>
            Gets or sets the text format. If the format is HTML, true; false otherwise.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.File3dmNotes.WindowRectangle">
            <summary>
            Gets or sets the position of the Notes when they were saved.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Interval">
            <summary>
            Represents an interval in one-dimensional space,
            that is defined as two extrema or bounds.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Interval.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the Rhino.Geometry.Interval class.
            </summary>
            <param name="t0">The first value.</param>
            <param name="t1">The second value.</param>
        </member>
        <member name="M:Rhino.Geometry.Interval.#ctor(Rhino.Geometry.Interval)">
            <summary>
            Initializes a new instance copying the other instance values.
            </summary>
            <param name="other">The Rhino.Geometry.Interval to use as a base.</param>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_Equality(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Determines whether the two Intervals have equal values.
            </summary>
            <param name="a">The first interval.</param>
            <param name="b">The second interval.</param>
            <returns>true if the components of the two intervals are exactly equal; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_Inequality(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Determines whether the two Intervals have different values.
            </summary>
            <param name="a">The first interval.</param>
            <param name="b">The second interval.</param>
            <returns>true if the two intervals are different in any value; false if they are equal.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_Addition(Rhino.Geometry.Interval,System.Double)">
            <summary>
            Shifts a <see cref="T:Rhino.Geometry.Interval"/> by a specific amount (addition).
            </summary>
            <param name="interval">The interval to be used as a base.</param>
            <param name="number">The shifting value.</param>
            <returns>A new interval where T0 and T1 are summed with number.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_Addition(System.Double,Rhino.Geometry.Interval)">
            <summary>
            Shifts an interval by a specific amount (addition).
            </summary>
            <param name="number">The shifting value.</param>
            <param name="interval">The interval to be used as a base.</param>
            <returns>A new interval where T0 and T1 are summed with number.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_Subtraction(Rhino.Geometry.Interval,System.Double)">
            <summary>
            Shifts an interval by a specific amount (subtraction).
            </summary>
            <param name="interval">The base interval (minuend).</param>
            <param name="number">The shifting value to be subtracted (subtrahend).</param>
            <returns>A new interval with [T0-number, T1-number].</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_Subtraction(System.Double,Rhino.Geometry.Interval)">
            <summary>
            Shifts an interval by a specific amount (subtraction).
            </summary>
            <param name="number">The shifting value to subtract from (minuend).</param>
            <param name="interval">The interval to be subtracted from (subtrahend).</param>
            <returns>A new interval with [number-T0, number-T1].</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_LessThan(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Interval"/> comes before
            (has inferior sorting value than) the second Interval.
            <para>The lower bound has first evaluation priority.</para>
            </summary>
            <param name="a">First interval.</param>
            <param name="b">Second interval.</param>
            <returns>true if a[0] is smaller than b[0], or a[0] == b[0] and a[1] is smaller than b[1]; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_LessThanOrEqual(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Interval"/> comes before
            (has inferior sorting value than) the second Interval, or is equal to it.
            <para>The lower bound has first evaluation priority.</para>
            </summary>
            <param name="a">First interval.</param>
            <param name="b">Second interval.</param>
            <returns>true if a[0] is smaller than b[0], or a[0] == b[0] and a[1] is smaller than or equal to b[1]; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_GreaterThan(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Interval"/> comes after
            (has superior sorting value than) the second Interval.
            <para>The lower bound has first evaluation priority.</para>
            </summary>
            <param name="a">First interval.</param>
            <param name="b">Second interval.</param>
            <returns>true if a[0] is larger than b[0], or a[0] == b[0] and a[1] is larger than b[1]; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.op_GreaterThanOrEqual(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Interval"/> comes after
            (has superior sorting value than) the second Interval, or is equal to it.
            <para>The lower bound has first evaluation priority.</para>
            </summary>
            <param name="a">First interval.</param>
            <param name="b">Second interval.</param>
            <returns>true if a[0] is larger than b[0], or a[0] == b[0] and a[1] is larger than or equal to b[1]; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.GetHashCode">
            <summary>
            Computes the hash code for this <see cref="T:Rhino.Geometry.Interval"/> object.
            </summary>
            <returns>A hash value that might be equal for two different <see cref="T:Rhino.Geometry.Interval"/> values.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is equal to the current <see cref="T:Rhino.Geometry.Interval"/>,
            comparing by value.
            </summary>
            <param name="obj">The other object to compare with.</param>
            <returns>true if obj is an <see cref="T:Rhino.Geometry.Interval"/> and has the same bounds; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.Equals(Rhino.Geometry.Interval)">
            <summary>
            Determines whether the specified <see cref="T:Rhino.Geometry.Interval"/> is equal to the current <see cref="T:Rhino.Geometry.Interval"/>,
            comparing by value.
            </summary>
            <param name="other">The other interval to compare with.</param>
            <returns>true if obj is an <see cref="T:Rhino.Geometry.Interval"/> and has the same bounds; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.CompareTo(Rhino.Geometry.Interval)">
             <summary>
             Compares this <see cref="T:Rhino.Geometry.Interval"/> with another interval.
             <para>The lower bound has first evaluation priority.</para>
             </summary>
             <param name="other">The other <see cref="T:Rhino.Geometry.Interval"/> to compare with.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this[0] &lt; other[0]</para>
            <para>+1: if this[0] &gt; other[0]</para>
            <para>-1: if this[0] == other[0] and this[1] &lt; other[1]</para>
            <para>+1: if this[0] == other[0] and this[1] &gt; other[1]</para>.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.ToString">
            <summary>
            Returns a string representation of this <see cref="T:Rhino.Geometry.Interval"/>.
            </summary>
            <returns>A string with T0,T1.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.Grow(System.Double)">
            <summary>
            Grows the <see cref="T:Rhino.Geometry.Interval"/> to include the given number.
            </summary>
            <param name="value">Number to include in this interval.</param>
        </member>
        <member name="M:Rhino.Geometry.Interval.MakeIncreasing">
            <summary>
            Ensures this <see cref="T:Rhino.Geometry.Interval"/> is either singleton or increasing.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Interval.Reverse">
            <summary>
            Changes interval to [-T1, -T0].
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Interval.Swap">
            <summary>
            Exchanges T0 and T1.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Interval.ParameterAt(System.Double)">
            <summary>Converts normalized parameter to interval value, or pair of values.</summary>
            <returns>Interval parameter min*(1.0-normalizedParameter) + max*normalizedParameter.</returns>
            <seealso>NormalizedParameterAt</seealso>
        </member>
        <member name="M:Rhino.Geometry.Interval.ParameterIntervalAt(Rhino.Geometry.Interval)">
            <summary>Converts normalized parameter to interval value, or pair of values.</summary>
            <returns>Interval parameter min*(1.0-normalizedParameter) + max*normalized_paramete.</returns>
            <seealso>NormalizedParameterAt</seealso>
        </member>
        <member name="M:Rhino.Geometry.Interval.NormalizedParameterAt(System.Double)">
            <summary>Converts interval value, or pair of values, to normalized parameter.</summary>
            <returns>Normalized parameter x so that min*(1.0-x) + max*x = intervalParameter.</returns>
            <seealso>ParameterAt</seealso>
        </member>
        <member name="M:Rhino.Geometry.Interval.NormalizedIntervalAt(Rhino.Geometry.Interval)">
            <summary>Converts interval value, or pair of values, to normalized parameter.</summary>
            <returns>Normalized parameter x so that min*(1.0-x) + max*x = intervalParameter.</returns>
            <seealso>ParameterAt</seealso>
        </member>
        <member name="M:Rhino.Geometry.Interval.IncludesParameter(System.Double)">
            <summary>
            Tests a parameter for Interval inclusion.
            </summary>
            <param name="t">Parameter to test.</param>
            <returns>true if t is contained within or is coincident with the limits of this Interval.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.IncludesParameter(System.Double,System.Boolean)">
            <summary>
            Tests a parameter for Interval inclusion.
            </summary>
            <param name="t">Parameter to test.</param>
            <param name="strict">If true, the parameter must be fully on the inside of the Interval.</param>
            <returns>true if t is contained within the limits of this Interval.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.IncludesInterval(Rhino.Geometry.Interval)">
            <summary>
            Tests another interval for Interval inclusion.
            </summary>
            <param name="interval">Interval to test.</param>
            <returns>true if the other interval is contained within or is coincident with the limits of this Interval; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.IncludesInterval(Rhino.Geometry.Interval,System.Boolean)">
            <summary>
            Tests another interval for Interval inclusion.
            </summary>
            <param name="interval">Interval to test.</param>
            <param name="strict">If true, the other interval must be fully on the inside of the Interval.</param>
            <returns>true if the other interval is contained within the limits of this Interval; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.FromIntersection(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Returns a new Interval that is the Intersection of the two input Intervals.
            </summary>
            <param name="a">The first input interval.</param>
            <param name="b">The second input interval.</param>
            <returns>If the intersection is not empty, then 
            intersection = [max(a.Min(),b.Min()), min(a.Max(),b.Max())]
            The interval [ON.UnsetValue,ON.UnsetValue] is considered to be
            the empty set interval.  The result of any intersection involving an
            empty set interval or disjoint intervals is the empty set interval.</returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.FromUnion(Rhino.Geometry.Interval,Rhino.Geometry.Interval)">
            <summary>
            Returns a new Interval which contains both inputs.
            </summary>
            <param name="a">The first input interval.</param>
            <param name="b">The second input interval.</param>
            <returns>The union of an empty set and an increasing interval is the increasing interval.
            <para>The union of two empty sets is empty.</para>
            <para>The union of an empty set an a non-empty interval is the non-empty interval.</para>
            <para>The union of two non-empty intervals is [min(a.Min(),b.Min()), max(a.Max(),b.Max())]</para>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Interval.EpsilonEquals(Rhino.Geometry.Interval,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.Geometry.Interval.Unset">
            <summary>
            Gets an Interval whose limits are RhinoMath.UnsetValue.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.T0">
            <summary>
            Gets or sets the lower bound of the Interval.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.T1">
            <summary>
            Gets or sets the upper bound of the Interval.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.Item(System.Int32)">
            <summary>
            Gets or sets the indexed bound of this Interval.
            </summary>
            <param name="index">Bound index (0 = lower; 1 = upper).</param>
        </member>
        <member name="P:Rhino.Geometry.Interval.Min">
            <summary>
            Gets the smaller of T0 and T1.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.Max">
            <summary>
            Gets the larger of T0 and T1.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.Mid">
            <summary>
            Gets the average of T0 and T1.
            </summary>
            <example>
            <code source='examples\vbnet\ex_extendcurve.vb' lang='vbnet'/>
            <code source='examples\cs\ex_extendcurve.cs' lang='cs'/>
            <code source='examples\py\ex_extendcurve.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.Interval.Length">
            <summary>
            Gets the signed length of the numeric range. 
            If the interval is decreasing, a negative length will be returned.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.IsValid">
            <summary>
            Gets a value indicating whether or not this Interval is valid. 
            Valid intervals must contain valid numbers.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.IsSingleton">
            <summary>
            Returns true if T0 == T1 != ON.UnsetValue.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.IsIncreasing">
            <summary>
            Returns true if T0 &lt; T1.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Interval.IsDecreasing">
            <summary> 
            Returns true if T[0] &gt; T[1].
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Point2d">
            <summary>
            Represents the two coordinates of a point in two-dimensional space,
            using <see cref="T:System.Double"/>-precision floating point numbers.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point2d.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of <see cref="T:Rhino.Geometry.Point2d"/> from coordinates.
            </summary>
            <param name="x">The X (first) coordinate.</param>
            <param name="y">The Y (second) coordinate.</param>
        </member>
        <member name="M:Rhino.Geometry.Point2d.#ctor(Rhino.Geometry.Vector2d)">
            <summary>
            Initializes a new instance of <see cref="T:Rhino.Geometry.Point2d"/> by converting a vector.
            </summary>
            <param name="vector">The vector that will be copied.</param>
        </member>
        <member name="M:Rhino.Geometry.Point2d.#ctor(Rhino.Geometry.Point2d)">
            <summary>
            Initializes a new instance of <see cref="T:Rhino.Geometry.Point2d"/> by copying another <see cref="T:Rhino.Geometry.Point2d"/>.
            </summary>
            <param name="point">The point that will be copied.</param>
        </member>
        <member name="M:Rhino.Geometry.Point2d.#ctor(Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new instance of <see cref="T:Rhino.Geometry.Point3d"/> by copying the first two coordiantes of a <see cref="T:Rhino.Geometry.Point3d"/>.
            </summary>
            <param name="point">The point that will be used: the Z (third) coordinate is discarded.</param>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Multiply(Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Multiplies a <see cref="T:Rhino.Geometry.Point2d"/> by a number.
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinatewise multiplied by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Multiply(Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Multiplies a <see cref="T:Rhino.Geometry.Point2d"/> by a number.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinatewise multiplied by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Multiply(System.Double,Rhino.Geometry.Point2d)">
            <summary>
            Multiplies a <see cref="T:Rhino.Geometry.Point2d"/> by a number.
            </summary>
            <param name="t">A number.</param>
            <param name="point">A point.</param>
            <returns>A new point that is coordinatewise multiplied by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Multiply(System.Double,Rhino.Geometry.Point2d)">
            <summary>
            Multiplies a <see cref="T:Rhino.Geometry.Point2d"/> by a number.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="t">A number.</param>
            <param name="point">A point.</param>
            <returns>A new point that is coordinatewise multiplied by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Division(Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Point2d"/> by a number.
            </summary>
            <param name="t">A number.</param>
            <param name="point">A point.</param>
            <returns>A new point that is coordinatewise divided by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Divide(Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Point2d"/> by a number.
            <para>(Provided for languages that do not support operator overloading. You can use the / operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinatewise divided by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Addition(Rhino.Geometry.Point2d,Rhino.Geometry.Vector2d)">
            <summary>
            Adds a point with a vector.
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that is coordinatewise summed with the vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Add(Rhino.Geometry.Point2d,Rhino.Geometry.Vector2d)">
            <summary>
            Adds a point with a vector.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that is coordinatewise summed with the vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Addition(Rhino.Geometry.Vector2d,Rhino.Geometry.Point2d)">
            <summary>
            Adds a vector with a point.
            </summary>
            <param name="vector">A vector.</param>
            <param name="point">A point.</param>
            <returns>A new point that is coordinatewise summed with the vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Add(Rhino.Geometry.Vector2d,Rhino.Geometry.Point2d)">
            <summary>
            Adds a vector with a point.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="vector">A vector.</param>
            <param name="point">A point.</param>
            <returns>A new point that is coordinatewise summed with the vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Addition(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Adds a point with a point.
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">A point.</param>
            <returns>A new point that is coordinatewise summed with the other point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Add(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Adds a point with a point.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">A point.</param>
            <returns>A new point that is coordinatewise summed with the other point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Subtraction(Rhino.Geometry.Point2d,Rhino.Geometry.Vector2d)">
            <summary>
            Subtracts a vector from a point.
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that is coordinatewise subtracted by vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Subtract(Rhino.Geometry.Point2d,Rhino.Geometry.Vector2d)">
            <summary>
            Subtracts a vector from a point.
            <para>(Provided for languages that do not support operator overloading. You can use the - operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that is coordinatewise subtracted by vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Subtraction(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Subtracts point2 from point1.
            </summary>
            <param name="point1">A point (minuend).</param>
            <param name="point2">A point (subtrahend).</param>
            <returns>A new vector that is point1 coordinatewise subtracted by point2.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Subtract(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Subtracts the second point from the first point.
            <para>(Provided for languages that do not support operator overloading. You can use the - operator otherwise)</para>
            </summary>
            <param name="point1">A point (minuend).</param>
            <param name="point2">A point (subtrahend).</param>
            <returns>A new vector that is point1 coordinatewise subtracted by point2.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Equality(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Determines whether two <see cref="T:Rhino.Geometry.Point2d"/> have equal values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the coordinates of the two points are exactly equal; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_Inequality(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Determines whether two <see cref="T:Rhino.Geometry.Point2d"/> have different values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the two points differ in any coordinate; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_LessThan(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Determines whether the first specified point comes before (has inferior sorting value than) the second point.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>true if a.X is smaller than b.X, or a.X == b.X and a.Y is smaller than b.Y; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_LessThanOrEqual(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Determines whether the first specified point comes before
            (has inferior sorting value than) the second point, or it is equal to it.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>true if a.X is smaller than b.X, or a.X == b.X and a.Y &lt;= b.Y; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_GreaterThan(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Point2d"/> comes after
            (has superior sorting value than) the second point.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>true if a.X is larger than b.X, or a.X == b.X and a.Y is larger than b.Y; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.op_GreaterThanOrEqual(Rhino.Geometry.Point2d,Rhino.Geometry.Point2d)">
            <summary>
            Determines whether the first specified <see cref="T:Rhino.Geometry.Point2d"/> comes after
            (has superior sorting value than) the second point, or it is equal to it.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="a">First point.</param>
            <param name="b">Second point.</param>
            <returns>true if a.X is larger than b.X, or a.X == b.X and a.Y &gt;= b.Y; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is a Point2d and has the same values as the present point.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is a Point2d and has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Equals(Rhino.Geometry.Point2d)">
            <summary>
            Determines whether the specified Point2d has the same values as the present point.
            </summary>
            <param name="point">The specified point.</param>
            <returns>true if point has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.GetHashCode">
            <summary>
            Computes a hash number that represents the current point.
            </summary>
            <returns>A hash code that is not unique for each point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.CompareTo(Rhino.Geometry.Point2d)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.Point2d"/> with another <see cref="T:Rhino.Geometry.Point2d"/>.
            <para>Coordinates evaluation priority is first X, then Y.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.Point2d"/> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this.X &lt; other.X</para>
            <para>-1: if this.X == other.X and this.Y &lt; other.Y</para>
            <para>+1: otherwise.</para>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.EpsilonEquals(Rhino.Geometry.Point2d,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.ToString">
            <summary>
            Constructs the string representation for the current point.
            </summary>
            <returns>The point representation in the form X,Y.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point2d.DistanceTo(Rhino.Geometry.Point2d)">
            <summary>
            Computes the distance between two points.
            </summary>
            <param name="other">Another point.</param>
            <returns>The length of the line between the two points, or 0 if either point is invalid.</returns>
            <example>
            <code source='examples\vbnet\ex_leader.vb' lang='vbnet'/>
            <code source='examples\cs\ex_leader.cs' lang='cs'/>
            <code source='examples\py\ex_leader.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Point2d.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the present point in place. The transformation matrix acts on the left of the point. i.e.,
            <para>result = transformation*point</para>
            </summary>
            <param name="xform">Transformation to apply.</param>
        </member>
        <member name="P:Rhino.Geometry.Point2d.X">
            <summary>
            Gets or sets the X (first) coordinate of the point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point2d.Y">
            <summary>
            Gets or sets the Y (second) coordinate of the point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point2d.Item(System.Int32)">
            <summary>
            Accesses the coordinates of this point.
            </summary>
            <param name="index">Either 0 or 1.</param>
            <returns>If index is 0, the X (first) coordinate. If index is 1, the Y (second) coordinate.</returns>
        </member>
        <member name="P:Rhino.Geometry.Point2d.IsValid">
            <summary>
            If any coordinate of a point is UnsetValue, then the point is not valid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point2d.MinimumCoordinate">
            <summary>
            Gets the smallest (both positive and negative) valid coordinate, or RhinoMath.UnsetValue if no coordinate is valid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point2d.MaximumCoordinate">
            <summary>
            Gets the largest valid coordinate, or RhinoMath.UnsetValue if no coordinate is valid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point2d.Origin">
            <summary>
            Gets a point at 0,0.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point2d.Unset">
            <summary>
            Gets a point at RhinoMath.UnsetValue,RhinoMath.UnsetValue.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Point3d">
            <summary>
            Represents the three coordinates of a point in three-dimensional space,
            using <see cref="T:System.Double"/>-precision floating point values.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new point by defining the X, Y and Z coordinates.
            </summary>
            <param name="x">The value of the X (first) coordinate.</param>
            <param name="y">The value of the Y (second) coordinate.</param>
            <param name="z">The value of the Z (third) coordinate.</param>
            <example>
            <code source='examples\vbnet\ex_addcircle.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addcircle.cs' lang='cs'/>
            <code source='examples\py\ex_addcircle.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Point3d.#ctor(Rhino.Geometry.Vector3d)">
            <summary>
            Initializes a new point by copying coordinates from the components of a vector.
            </summary>
            <param name="vector">A vector.</param>
        </member>
        <member name="M:Rhino.Geometry.Point3d.#ctor(Rhino.Geometry.Point3f)">
            <summary>
            Initializes a new point by copying coordinates from a single-precision point.
            </summary>
            <param name="point">A point.</param>
        </member>
        <member name="M:Rhino.Geometry.Point3d.#ctor(Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new point by copying coordinates from another point.
            </summary>
            <param name="point">A point.</param>
        </member>
        <member name="M:Rhino.Geometry.Point3d.#ctor(Rhino.Geometry.Point4d)">
            <summary>
            Initializes a new point by copying coordinates from a four-dimensional point.
            The first three coordinates are divided by the last one.
            If the W (fourth) dimension of the input point is zero, then it will be just discarded.
            </summary>
            <param name="point">A point.</param>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Multiply(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Multiplies a <see cref="T:Rhino.Geometry.Point3d"/> by a number.
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinatewise multiplied by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Multiply(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Multiplies a <see cref="T:Rhino.Geometry.Point3d"/> by a number.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinatewise multiplied by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Multiply(System.Double,Rhino.Geometry.Point3d)">
            <summary>
            Multiplies a <see cref="T:Rhino.Geometry.Point3d"/> by a number.
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinatewise multiplied by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Multiply(System.Double,Rhino.Geometry.Point3d)">
            <summary>
            Multiplies a <see cref="T:Rhino.Geometry.Point3d"/> by a number.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinatewise multiplied by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Division(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Point3d"/> by a number.
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinatewise divided by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Divide(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Point3d"/> by a number.
            <para>(Provided for languages that do not support operator overloading. You can use the / operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="t">A number.</param>
            <returns>A new point that is coordinatewise divided by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Addition(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Sums two <see cref="T:Rhino.Geometry.Point3d"/> instances.
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">A point.</param>
            <returns>A new point that results from the addition of point1 and point2.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Add(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Sums two <see cref="T:Rhino.Geometry.Point3d"/> instances.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">A point.</param>
            <returns>A new point that results from the addition of point1 and point2.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Addition(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Sums up a point and a vector, and returns a new point.
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that results from the addition of point and vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Add(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Sums up a point and a vector, and returns a new point.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that results from the addition of point and vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Addition(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3f)">
            <summary>
            Sums up a point and a vector, and returns a new point.
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that results from the addition of point and vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Add(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3f)">
            <summary>
            Sums up a point and a vector, and returns a new point.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that results from the addition of point and vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Addition(Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Sums up a point and a vector, and returns a new point.
            </summary>
            <param name="vector">A vector.</param>
            <param name="point">A point.</param>
            <returns>A new point that results from the addition of point and vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Add(Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Sums up a point and a vector, and returns a new point.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="vector">A vector.</param>
            <param name="point">A point.</param>
            <returns>A new point that results from the addition of point and vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Subtraction(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Subtracts a vector from a point.
            </summary>
            <param name="point">A point.</param>
            <param name="vector">A vector.</param>
            <returns>A new point that is the difference of point minus vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Subtract(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Subtracts a vector from a point.
            <para>(Provided for languages that do not support operator overloading. You can use the - operator otherwise)</para>
            </summary>
            <param name="vector">A vector.</param>
            <param name="point">A point.</param>
            <returns>A new point that is the difference of point minus vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Subtraction(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Subtracts a point from another point.
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">Another point.</param>
            <returns>A new vector that is the difference of point minus vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Subtract(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Subtracts a point from another point.
            <para>(Provided for languages that do not support operator overloading. You can use the - operator otherwise)</para>
            </summary>
            <param name="point1">A point.</param>
            <param name="point2">Another point.</param>
            <returns>A new vector that is the difference of point minus vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_UnaryNegation(Rhino.Geometry.Point3d)">
            <summary>
            Computes the additive inverse of all coordinates in the point, and returns the new point.
            </summary>
            <param name="point">A point.</param>
            <returns>A point value that, when summed with the point input, yields the <see cref="P:Rhino.Geometry.Point3d.Origin"/>.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Equality(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Determines whether two Point3d have equal values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the coordinates of the two points are exactly equal; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Inequality(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Determines whether two Point3d have different values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the two points differ in any coordinate; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Implicit(Rhino.Geometry.Point3d)~Rhino.Geometry.ControlPoint">
            <summary>
            Converts a point in a control point, without needing casting.
            </summary>
            <param name="pt">The point.</param>
            <returns>The control point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Explicit(Rhino.Geometry.Point3d)~Rhino.Geometry.Vector3d">
            <summary>
            Converts a point in a vector, needing casting.
            </summary>
            <param name="point">A point.</param>
            <returns>The resulting vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Explicit(Rhino.Geometry.Vector3d)~Rhino.Geometry.Point3d">
            <summary>
            Converts a vector in a point, needing casting.
            </summary>
            <param name="vector">A vector.</param>
            <returns>The resulting point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_Implicit(Rhino.Geometry.Point3f)~Rhino.Geometry.Point3d">
            <summary>
            Converts a single-precision point in a double-precision point, without needing casting.
            </summary>
            <param name="point">A point.</param>
            <returns>The resulting point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_LessThan(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Determines whether the first specified point comes before (has inferior sorting value than) the second point.
            <para>Coordinates evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if a.X is smaller than b.X,
            or a.X == b.X and a.Y is smaller than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z is smaller than b.Z;
            otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_LessThanOrEqual(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Determines whether the first specified point comes before
            (has inferior sorting value than) the second point, or it is equal to it.
            <para>Coordinates evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if a.X is smaller than b.X,
            or a.X == b.X and a.Y is smaller than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z &lt;= b.Z;
            otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_GreaterThan(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Determines whether the first specified point comes after (has superior sorting value than) the second point.
            <para>Coordinates evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if a.X is larger than b.X,
            or a.X == b.X and a.Y is larger than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z is larger than b.Z;
            otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.op_GreaterThanOrEqual(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Determines whether the first specified point comes after
            (has superior sorting value than) the second point, or it is equal to it.
            <para>Coordinates evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if a.X is larger than b.X,
            or a.X == b.X and a.Y is larger than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z &gt;= b.Z;
            otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Equals(System.Object)">
            <summary>
            Determines whether the specified <see cref="T:System.Object"/> is a <see cref="T:Rhino.Geometry.Point3d"/> and has the same values as the present point.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is a Point3d and has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.EpsilonEquals(Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.CompareTo(Rhino.Geometry.Point3d)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.Point3d"/> with another <see cref="T:Rhino.Geometry.Point3d"/>.
            <para>Component evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.Point3d"/> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this.X &lt; other.X</para>
            <para>-1: if this.X == other.X and this.Y &lt; other.Y</para>
            <para>-1: if this.X == other.X and this.Y == other.Y and this.Z &lt; other.Z</para>
            <para>+1: otherwise.</para>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Equals(Rhino.Geometry.Point3d)">
            <summary>
            Determines whether the specified <see cref="T:Rhino.Geometry.Point3d"/> has the same values as the present point.
            </summary>
            <param name="point">The specified point.</param>
            <returns>true if point has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.GetHashCode">
            <summary>
            Computes a hash code for the present point.
            </summary>
            <returns>A non-unique integer that represents this point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Interpolate(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double)">
            <summary>
            Interpolate between two points.
            </summary>
            <param name="pA">First point.</param>
            <param name="pB">Second point.</param>
            <param name="t">Interpolation parameter. 
            If t=0 then this point is set to pA. 
            If t=1 then this point is set to pB. 
            Values of t in between 0.0 and 1.0 result in points between pA and pB.</param>
        </member>
        <member name="M:Rhino.Geometry.Point3d.ToString">
            <summary>
            Constructs the string representation for the current point.
            </summary>
            <returns>The point representation in the form X,Y,Z.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.DistanceTo(Rhino.Geometry.Point3d)">
            <summary>
            Computes the distance between two points.
            </summary>
            <param name="other">Other point for distance measurement.</param>
            <returns>The length of the line between this and the other point; or 0 if any of the points is not valid.</returns>
            <example>
            <code source='examples\vbnet\ex_intersectcurves.vb' lang='vbnet'/>
            <code source='examples\cs\ex_intersectcurves.cs' lang='cs'/>
            <code source='examples\py\ex_intersectcurves.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Point3d.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the present point in place. The transformation matrix acts on the left of the point. i.e.,
            <para>result = transformation*point</para>
            </summary>
            <param name="xform">Transformation to apply.</param>
            <example>
            <code source='examples\vbnet\ex_pointatcursor.vb' lang='vbnet'/>
            <code source='examples\cs\ex_pointatcursor.cs' lang='cs'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Point3d.CullDuplicates(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double)">
            <summary>
            Removes duplicates in the supplied set of points.
            </summary>
            <param name="points">A list, an array or any enumerable of <see cref="T:Rhino.Geometry.Point3d"/>.</param>
            <param name="tolerance">The minimum distance between points.
            <para>Points that fall within this tolerance will be discarded.</para>
            .</param>
            <returns>An array of points without duplicates; or null on error.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.ArePointsCoplanar(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double)">
            <summary>
            Determines whether a set of points is coplanar within a given tolerance.
            </summary>
            <param name="points">A list, an array or any enumerable of <see cref="T:Rhino.Geometry.Point3d"/>.</param>
            <param name="tolerance">A tolerance value. A default might be RhinoMath.ZeroTolerance.</param>
            <returns>true if points are on the same plane; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point3d.SortAndCullPointList(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Double)">
            <summary>
            Orders a set of points so they will be connected in a "reasonable polyline" order.
            <para>Also, removes points from the list if their common distance exceeds a specified threshold.</para>
            </summary>
            <param name="points">A list, an array or any enumerable of <see cref="T:Rhino.Geometry.Point3d"/>.</param>
            <param name="minimumDistance">Minimum allowed distance among a pair of points. If points are closer than this, only one of them will be kept.</param>
            <returns>The new array of sorted and culled points.</returns>
        </member>
        <member name="P:Rhino.Geometry.Point3d.Origin">
            <summary>
            Gets the value of a point at location 0,0,0.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point3d.Unset">
            <summary>
            Gets the value of a point at location RhinoMath.UnsetValue,RhinoMath.UnsetValue,RhinoMath.UnsetValue.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point3d.X">
            <summary>
            Gets or sets the X (first) coordinate of this point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point3d.Y">
            <summary>
            Gets or sets the Y (second) coordinate of this point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point3d.Z">
            <summary>
            Gets or sets the Z (third) coordinate of this point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point3d.Item(System.Int32)">
            <summary>
            Gets or sets an indexed coordinate of this point.
            </summary>
            <param name="index">
            The coordinate index. Valid values are:
            <para>0 = X coordinate</para>
            <para>1 = Y coordinate</para>
            <para>2 = Z coordinate</para>
            .</param>
        </member>
        <member name="P:Rhino.Geometry.Point3d.IsValid">
            <summary>
            Each coordinate of the point must pass the <see cref="M:Rhino.RhinoMath.IsValidDouble(System.Double)"/> test.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point3d.MinimumCoordinate">
            <summary>
            Gets the smallest (both positive and negative) coordinate value in this point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point3d.MaximumCoordinate">
            <summary>
            Gets the largest (both positive and negative) valid coordinate in this point,
            or RhinoMath.UnsetValue if no coordinate is valid.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Point4d">
            <summary>
            Represents the four coordinates of a point in four-dimensional space.
            <para>The W (fourth) dimension is often considered the weight of the point as seen in 3D space.</para>
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Point4d.#ctor(System.Double,System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.Point4d"/> class based on coordinates.
            </summary>
            <param name="x">The X (first) dimension.</param>
            <param name="y">The Y (second) dimension.</param>
            <param name="z">The Z (third) dimension.</param>
            <param name="w">The W (fourth) dimension, or weight.</param>
        </member>
        <member name="M:Rhino.Geometry.Point4d.#ctor(Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.Point4d"/> class from the coordinates of a point.
            </summary>
            <param name="point">.</param>
        </member>
        <member name="M:Rhino.Geometry.Point4d.op_Addition(Rhino.Geometry.Point4d,Rhino.Geometry.Point4d)">
            <summary>
            Sums two <see cref="T:Rhino.Geometry.Point4d"/> together.
            </summary>
            <param name="point1">First point.</param>
            <param name="point2">Second point.</param>
            <returns>A new point that results from the weighted addition of point1 and point2.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point4d.Add(Rhino.Geometry.Point4d,Rhino.Geometry.Point4d)">
            <summary>
            Sums two <see cref="T:Rhino.Geometry.Point4d"/> together.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="point1">First point.</param>
            <param name="point2">Second point.</param>
            <returns>A new point that results from the weighted addition of point1 and point2.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point4d.op_Subtraction(Rhino.Geometry.Point4d,Rhino.Geometry.Point4d)">
            <summary>
            Subtracts the second point from the first point.
            </summary>
            <param name="point1">First point.</param>
            <param name="point2">Second point.</param>
            <returns>A new point that results from the weighted subtraction of point2 from point1.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point4d.Subtract(Rhino.Geometry.Point4d,Rhino.Geometry.Point4d)">
            <summary>
            Subtracts the second point from the first point.
            <para>(Provided for languages that do not support operator overloading. You can use the - operator otherwise)</para>
            </summary>
            <param name="point1">First point.</param>
            <param name="point2">Second point.</param>
            <returns>A new point that results from the weighted subtraction of point2 from point1.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point4d.op_Multiply(Rhino.Geometry.Point4d,System.Double)">
            <summary>
            Multiplies a point by a number.
            </summary>
            <param name="point">A point.</param>
            <param name="d">A number.</param>
            <returns>A new point that results from the coordinatewise multiplication of point with d.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point4d.Multiply(Rhino.Geometry.Point4d,System.Double)">
            <summary>
            Multiplies a point by a number.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="point">A point.</param>
            <param name="d">A number.</param>
            <returns>A new point that results from the coordinatewise multiplication of point with d.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point4d.op_Multiply(Rhino.Geometry.Point4d,Rhino.Geometry.Point4d)">
            <summary>
            Multiplies two <see cref="T:Rhino.Geometry.Point4d"/> together, returning the dot (internal) product of the two.
            This is not the cross product.
            </summary>
            <param name="point1">The first point.</param>
            <param name="point2">The second point.</param>
            <returns>A value that results from the coordinatewise multiplication of point1 and point2.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point4d.op_Equality(Rhino.Geometry.Point4d,Rhino.Geometry.Point4d)">
            <summary>
            Determines whether two Point4d have equal values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the coordinates of the two points are equal; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point4d.op_Inequality(Rhino.Geometry.Point4d,Rhino.Geometry.Point4d)">
            <summary>
            Determines whether two Point4d have different values.
            </summary>
            <param name="a">The first point.</param>
            <param name="b">The second point.</param>
            <returns>true if the two points differ in any coordinate; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point4d.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is Point4d and has same coordinates as the present point.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is Point4d and has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point4d.Equals(Rhino.Geometry.Point4d)">
            <summary>
            Determines whether the specified point has same value as the present point.
            </summary>
            <param name="point">The specified point.</param>
            <returns>true if point has the same value as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Point4d.EpsilonEquals(Rhino.Geometry.Point4d,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Point4d.GetHashCode">
            <summary>
            Computes the hash code for the present point.
            </summary>
            <returns>A non-unique hash code, which uses all coordiantes of this object.</returns>
        </member>
        <member name="P:Rhino.Geometry.Point4d.X">
            <summary>
            Gets or sets the X (first) coordinate of this point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point4d.Y">
            <summary>
            Gets or sets the Y (second) coordinate of this point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point4d.Z">
            <summary>
            Gets or sets the Z (third) coordinate of this point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point4d.W">
            <summary>
            Gets or sets the W (fourth) coordinate -or weight- of this point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Point4d.Unset">
            <summary>
            Gets the value of a point with all coordinates set as RhinoMath.UnsetValue.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Vector2d">
            <summary>
            Represents the two components of a vector in two-dimensional space,
            using <see cref="T:System.Double"/>-precision floating point numbers.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.#ctor(System.Double,System.Double)">
            <summary>
            Initializes a new instance of the vector based on two, X and Y, components.
            </summary>
            <param name="x">The X (first) component.</param>
            <param name="y">The Y (second) component.</param>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_Equality(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Determines whether two vectors have equal values.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if components of the two vectors are pairwise equal; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_Inequality(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Determines whether two vectors have different values.
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if any component of the two vectors is pairwise different; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_LessThan(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Determines whether the first specified vector comes before
            (has inferior sorting value than) the second vector.
            <para>Components have decreasing evaluation priority: first X, then Y.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>true if a.X is smaller than b.X, or a.X == b.X and a.Y is smaller than b.Y; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_LessThanOrEqual(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Determines whether the first specified vector comes before
            (has inferior sorting value than) the second vector, or it is equal to it.
            <para>Components have decreasing evaluation priority: first X, then Y.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>true if a.X is smaller than b.X, or a.X == b.X and a.Y &lt;= b.Y; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_GreaterThan(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Determines whether the first specified vector comes after
            (has superior sorting value than) the second vector.
            <para>Components have decreasing evaluation priority: first X, then Y.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>true if a.X is larger than b.X, or a.X == b.X and a.Y is larger than b.Y; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.op_GreaterThanOrEqual(Rhino.Geometry.Vector2d,Rhino.Geometry.Vector2d)">
            <summary>
            Determines whether the first specified vector comes after
            (has superior sorting value than) the second vector, or it is equal to it.
            <para>Components have decreasing evaluation priority: first X, then Y.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>true if a.X is larger than b.X, or a.X == b.X and a.Y &gt;= b.Y; otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is a Vector2d and has the same value as the present vector.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is Vector2d and has the same components as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.Equals(Rhino.Geometry.Vector2d)">
            <summary>
            Determines whether the specified vector has the same value as the present vector.
            </summary>
            <param name="vector">The specified vector.</param>
            <returns>true if vector has the same components as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.EpsilonEquals(Rhino.Geometry.Vector2d,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.CompareTo(Rhino.Geometry.Vector2d)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.Vector2d"/> with another <see cref="T:Rhino.Geometry.Vector2d"/>.
            <para>Components evaluation priority is first X, then Y.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.Vector2d"/> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this.X &lt; other.X</para>
            <para>-1: if this.X == other.X and this.Y &lt; other.Y</para>
            <para>+1: otherwise.</para>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.GetHashCode">
            <summary>
            Provides a hashing value for the present vector.
            </summary>
            <returns>A non-unique number based on vector components.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.ToString">
            <summary>
            Constructs a string representation of the current vector.
            </summary>
            <returns>A string in the form X,Y.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector2d.Unitize">
            <summary>
            Unitizes the vector in place. A unit vector has length 1 unit. 
            <para>An invalid or zero length vector cannot be unitized.</para>
            </summary>
            <returns>true on success or false on failure.</returns>
        </member>
        <member name="P:Rhino.Geometry.Vector2d.X">
            <summary>
            Gets or sets the X (first) component of this vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector2d.Y">
            <summary>
            Gets or sets the Y (second) component of this vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector2d.Length">
            <summary>
            Computes the length (or magnitude, or size) of this vector.
            This is an application of Pythagoras' theorem.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector2d.Zero">
            <summary>
            Gets the value of the vector with components 0,0.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector2d.Unset">
            <summary>
            Gets the value of the vector with components set as RhinoMath.UnsetValue,RhinoMath.UnsetValue.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector2d.IsValid">
            <summary>
            Gets a value indicating whether this vector is valid. 
            A valid vector must be formed of valid component values for x, y and z.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Vector3d">
            <summary>
            Represents the three components of a vector in three-dimensional space,
            using <see cref="T:System.Double"/>-precision floating point numbers.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of a vector, using its three components.
            </summary>
            <param name="x">The X (first) component.</param>
            <param name="y">The Y (second) component.</param>
            <param name="z">The Z (third) component.</param>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.#ctor(Rhino.Geometry.Point3d)">
            <summary>
            Initializes a new instance of a vector, copying the three components from the three coordinates of a point.
            </summary>
            <param name="point">The point to copy from.</param>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.#ctor(Rhino.Geometry.Vector3f)">
            <summary>
            Initializes a new instance of a vector, copying the three components from a single-precision vector.
            </summary>
            <param name="vector">A single-precision vector.</param>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.#ctor(Rhino.Geometry.Vector3d)">
            <summary>
            Initializes a new instance of a vector, copying the three components from a vector.
            </summary>
            <param name="vector">A double-precision vector.</param>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Multiply(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is the original vector coordinatewise multiplied by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Multiply(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is the original vector coordinatewise multiplied by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Multiply(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            </summary>
            <param name="t">A number.</param>
            <param name="vector">A vector.</param>
            <returns>A new vector that is the original vector coordinatewise multiplied by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Multiply(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Multiplies a vector by a number, having the effect of scaling it.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="t">A number.</param>
            <param name="vector">A vector.</param>
            <returns>A new vector that is the original vector coordinatewise multiplied by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Division(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Vector3d"/> by a number, having the effect of shrinking it.
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is componentwise divided by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Divide(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Divides a <see cref="T:Rhino.Geometry.Vector3d"/> by a number, having the effect of shrinking it.
            <para>(Provided for languages that do not support operator overloading. You can use the / operator otherwise)</para>
            </summary>
            <param name="vector">A vector.</param>
            <param name="t">A number.</param>
            <returns>A new vector that is componentwise divided by t.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Addition(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Sums up two vectors.
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>A new vector that results from the componentwise addition of the two vectors.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Add(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Sums up two vectors.
            <para>(Provided for languages that do not support operator overloading. You can use the + operator otherwise)</para>
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>A new vector that results from the componentwise addition of the two vectors.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Subtraction(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Subtracts the second vector from the first one.
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>A new vector that results from the componentwise difference of vector1 - vector2.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Subtract(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Subtracts the second vector from the first one.
            <para>(Provided for languages that do not support operator overloading. You can use the - operator otherwise)</para>
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>A new vector that results from the componentwise difference of vector1 - vector2.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Multiply(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Multiplies two vectors together, returning the dot product (or inner product).
            This differs from the cross product.
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>
            A value that results from the evaluation of v1.X*v2.X + v1.Y*v2.Y + v1.Z*v2.Z.
            <para>This value equals v1.Length * v2.Length * cos(alpha), where alpha is the angle between vectors.</para>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Multiply(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Multiplies two vectors together, returning the dot product (or inner product).
            This differs from the cross product.
            <para>(Provided for languages that do not support operator overloading. You can use the * operator otherwise)</para>
            </summary>
            <param name="vector1">A vector.</param>
            <param name="vector2">A second vector.</param>
            <returns>
            A value that results from the evaluation of v1.X*v2.X + v1.Y*v2.Y + v1.Z*v2.Z.
            <para>This value equals v1.Length * v2.Length * cos(alpha), where alpha is the angle between vectors.</para>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_UnaryNegation(Rhino.Geometry.Vector3d)">
            <summary>
            Computes the opposite vector.
            </summary>
            <param name="vector">A vector to negate.</param>
            <returns>A new vector where all components were multiplied by -1.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Negate(Rhino.Geometry.Vector3d)">
            <summary>
            Computes the opposite vector.
            <para>(Provided for languages that do not support operator overloading. You can use the - unary operator otherwise)</para>
            </summary>
            <param name="vector">A vector to negate.</param>
            <returns>A new vector where all components were multiplied by -1.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Equality(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Determines whether two vectors have the same value.
            </summary>
            <param name="a">A vector.</param>
            <param name="b">Another vector.</param>
            <returns>true if all coordinates are pairwise equal; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Inequality(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Determines whether two vectors have different values.
            </summary>
            <param name="a">A vector.</param>
            <param name="b">Another vector.</param>
            <returns>true if any coordinate pair is different; false otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.CrossProduct(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Computes the cross product (or vector product, or exterior product) of two vectors.
            <para>This operation is not commutative.</para>
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <returns>A new vector that is perpendicular to both a and b,
            <para>has Length == a.Length * b.Length and</para>
            <para>with a result that is oriented following the right hand rule.</para>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.VectorAngle(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Compute the angle between two vectors.
            <para>This operation is commutative.</para>
            </summary>
            <param name="a">First vector for angle.</param>
            <param name="b">Second vector for angle.</param>
            <returns>If the input is valid, the angle (in radians) between a and b; RhinoMath.UnsetValue otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.VectorAngle(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d,Rhino.Geometry.Plane)">
            <summary>
            Computes the angle on a plane between two vectors.
            </summary>
            <param name="a">First vector.</param>
            <param name="b">Second vector.</param>
            <param name="plane">Two-dimensional plane on which to perform the angle measurement.</param>
            <returns>On success, the angle (in radians) between a and b as projected onto the plane; RhinoMath.UnsetValue on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_Implicit(Rhino.Geometry.Vector3f)~Rhino.Geometry.Vector3d">
            <summary>
            Converts a single-precision (float) vector in a double-precision vector, without needing casting.
            </summary>
            <param name="vector">A single-precision vector.</param>
            <returns>The same vector, expressed using double-precision values.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_LessThan(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Determines whether the first specified vector comes before (has inferior sorting value than) the second vector.
            <para>Components evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if a.X is smaller than b.X,
            or a.X == b.X and a.Y is smaller than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z is smaller than b.Z;
            otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_LessThanOrEqual(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Determines whether the first specified vector comes before
            (has inferior sorting value than) the second vector, or it is equal to it.
            <para>Components evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if a.X is smaller than b.X,
            or a.X == b.X and a.Y is smaller than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z &lt;= b.Z;
            otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_GreaterThan(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Determines whether the first specified vector comes after (has superior sorting value than)
            the second vector.
            <para>Components evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if a.X is larger than b.X,
            or a.X == b.X and a.Y is larger than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z is larger than b.Z;
            otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.op_GreaterThanOrEqual(Rhino.Geometry.Vector3d,Rhino.Geometry.Vector3d)">
            <summary>
            Determines whether the first specified vector comes after (has superior sorting value than)
            the second vector, or it is equal to it.
            <para>Components evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="a">The first vector.</param>
            <param name="b">The second vector.</param>
            <returns>true if a.X is larger than b.X,
            or a.X == b.X and a.Y is larger than b.Y,
            or a.X == b.X and a.Y == b.Y and a.Z &gt;= b.Z;
            otherwise, false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.IsTiny(System.Double)">
            <summary>
            Determines whether a vector is very short.
            </summary>
            <param name="tolerance">
            A nonzero value used as the coordinate zero tolerance.
            .</param>
            <returns>(Math.Abs(X) &lt;= tiny_tol) AND (Math.Abs(Y) &lt;= tiny_tol) AND (Math.Abs(Z) &lt;= tiny_tol).</returns>
            <example>
            <code source='examples\vbnet\ex_addline.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addline.cs' lang='cs'/>
            <code source='examples\py\ex_addline.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.IsTiny">
            <summary>
            Uses RhinoMath.ZeroTolerance for IsTiny calculation.
            </summary>
            <returns>true if vector is very small, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is a Vector3d and has the same values as the present vector.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is a Vector3d and has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Equals(Rhino.Geometry.Vector3d)">
            <summary>
            Determines whether the specified vector has the same value as the present vector.
            </summary>
            <param name="vector">The specified vector.</param>
            <returns>true if vector has the same coordinates as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.EpsilonEquals(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.CompareTo(Rhino.Geometry.Vector3d)">
            <summary>
            Compares this <see cref="T:Rhino.Geometry.Vector3d"/> with another <see cref="T:Rhino.Geometry.Vector3d"/>.
            <para>Component evaluation priority is first X, then Y, then Z.</para>
            </summary>
            <param name="other">The other <see cref="T:Rhino.Geometry.Vector3d"/> to use in comparison.</param>
            <returns>
            <para> 0: if this is identical to other</para>
            <para>-1: if this.X &lt; other.X</para>
            <para>-1: if this.X == other.X and this.Y &lt; other.Y</para>
            <para>-1: if this.X == other.X and this.Y == other.Y and this.Z &lt; other.Z</para>
            <para>+1: otherwise.</para>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.GetHashCode">
            <summary>
            Computes the hash code for the current vector.
            </summary>
            <returns>A non-unique number that represents the components of this vector.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.ToString">
            <summary>
            Returns the string representation of the current vector, in the form X,Y,Z.
            </summary>
            <returns>A string with the current location of the point.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Unitize">
            <summary>
            Unitizes the vector in place. A unit vector has length 1 unit. 
            <para>An invalid or zero length vector cannot be unitized.</para>
            </summary>
            <returns>true on success or false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Transform(Rhino.Geometry.Transform)">
            <summary>
            Transforms the vector in place.
            <para>The transformation matrix acts on the left of the vector; i.e.,</para>
            <para>result = transformation*vector</para>
            </summary>
            <param name="transformation">Transformation matrix to apply.</param>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Rotate(System.Double,Rhino.Geometry.Vector3d)">
            <summary>
            Rotates this vector around a given axis.
            </summary>
            <param name="angleRadians">Angle of rotation (in radians).</param>
            <param name="rotationAxis">Axis of rotation.</param>
            <returns>true on success, false on failure.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.Reverse">
            <summary>
             Reverses (inverts) this vector in place.
             <para>If this vector is Invalid, no changes will occur and false will be returned.</para>
            </summary>
            <returns>true on success or false if the vector is invalid.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.IsParallelTo(Rhino.Geometry.Vector3d)">
            <summary>
            Determines whether this vector is parallel to another vector, within one degree (within Pi / 180). 
            </summary>
            <param name="other">Vector to use for comparison.</param>
            <returns>
            Parallel indicator:
            <para>+1 = both vectors are parallel</para>
            <para> 0 = vectors are not parallel, or at least one of the vectors is zero</para>
            <para>-1 = vectors are anti-parallel.</para>
            </returns>
            <example>
            <code source='examples\vbnet\ex_intersectlines.vb' lang='vbnet'/>
            <code source='examples\cs\ex_intersectlines.cs' lang='cs'/>
            <code source='examples\py\ex_intersectlines.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.IsParallelTo(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
            Determines whether this vector is parallel to another vector, within a provided tolerance. 
            </summary>
            <param name="other">Vector to use for comparison.</param>
            <param name="angleTolerance">Angle tolerance (in radians).</param>
            <returns>
            Parallel indicator:
            <para>+1 = both vectors are parallel.</para>
            <para>0 = vectors are not parallel or at least one of the vectors is zero.</para>
            <para>-1 = vectors are anti-parallel.</para>
            </returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.IsPerpendicularTo(Rhino.Geometry.Vector3d)">
            <summary>
             Test to see whether this vector is perpendicular to within one degree of another one. 
            </summary>
             <param name="other">Vector to compare to.</param>
            <returns>true if both vectors are perpendicular, false if otherwise.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.IsPerpendicularTo(Rhino.Geometry.Vector3d,System.Double)">
            <summary>
             Determines whether this vector is perpendicular to another vector, within a provided angle tolerance. 
            </summary>
             <param name="other">Vector to use for comparison.</param>
             <param name="angleTolerance">Angle tolerance (in radians).</param>
            <returns>true if vectors form Pi-radians (90-degree) angles with each other; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Vector3d.PerpendicularTo(Rhino.Geometry.Vector3d)">
            <summary>
             Sets this vector to be perpendicular to another vector. 
             Result is not unitized.
            </summary>
             <param name="other">Vector to use as guide.</param>
            <returns>true on success, false if input vector is zero or invalid.</returns>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.Zero">
            <summary>
            Gets the value of the vector with components 0,0,0.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.XAxis">
            <summary>
            Gets the value of the vector with components 1,0,0.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.YAxis">
            <summary>
            Gets the value of the vector with components 0,1,0.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.ZAxis">
            <summary>
            Gets the value of the vector with components 0,0,1.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.Unset">
            <summary>
            Gets the value of the vector with each component set to RhinoMath.UnsetValue.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.X">
            <summary>
            Gets or sets the X (first) component of the vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.Y">
            <summary>
            Gets or sets the Y (second) component of the vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.Z">
            <summary>
            Gets or sets the Z (third) component of the vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.Item(System.Int32)">
            <summary>
            Gets or sets a vector component at the given index.
            </summary>
            <param name="index">Index of vector component. Valid values are: 
            <para>0 = X-component</para>
            <para>1 = Y-component</para>
            <para>2 = Z-component</para>
            .</param>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.IsValid">
            <summary>
            Gets a value indicating whether this vector is valid. 
            A valid vector must be formed of valid component values for x, y and z.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.MinimumCoordinate">
            <summary>
            Gets the smallest (both positive and negative) component value in this vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.MaximumCoordinate">
            <summary>
            Gets the largest (both positive and negative) component value in this vector.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.Length">
            <summary>
            Computes the length (or magnitude, or size) of this vector.
            This is an application of Pythagoras' theorem.
            If this vector is invalid, its length is considered 0.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.SquareLength">
            <summary>
            Computes the squared length (or magnitude, or size) of this vector.
            This is an application of Pythagoras' theorem.
            While the Length property checks for input validity,
            this property does not. You should check validity in advance,
            if this vector can be invalid.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.IsUnitVector">
            <summary>
            Gets a value indicating whether or not this is a unit vector. 
            A unit vector has length 1.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Vector3d.IsZero">
            <summary>
            Gets a value indicating whether the X, Y, and Z values are all equal to 0.0.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Ray3d">
            <summary>
            Represents an immutable ray in three dimensions, using position and direction.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Ray3d.#ctor(Rhino.Geometry.Point3d,Rhino.Geometry.Vector3d)">
            <summary>
            Initializes a new Ray3d instance.
            </summary>
            <param name="position">The position.</param>
            <param name="direction">The direction.</param>
        </member>
        <member name="M:Rhino.Geometry.Ray3d.PointAt(System.Double)">
            <summary>
            Evaluates a point along the ray.
            </summary>
            <param name="t">The t parameter.</param>
            <returns>A point at (Direction*t + Position).</returns>
        </member>
        <member name="M:Rhino.Geometry.Ray3d.op_Equality(Rhino.Geometry.Ray3d,Rhino.Geometry.Ray3d)">
            <summary>
            Determines whether two <see cref="T:Rhino.Geometry.Ray3d"/> have equal values.
            </summary>
            <param name="a">The first <see cref="T:Rhino.Geometry.Ray3d"/>.</param>
            <param name="b">The second <see cref="T:Rhino.Geometry.Ray3d"/>.</param>
            <returns>true if position and direction of the two rays are equal; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Ray3d.op_Inequality(Rhino.Geometry.Ray3d,Rhino.Geometry.Ray3d)">
            <summary>
            Determines whether two <see cref="T:Rhino.Geometry.Ray3d"/> have different values.
            </summary>
            <param name="a">The first <see cref="T:Rhino.Geometry.Ray3d"/>.</param>
            <param name="b">The second <see cref="T:Rhino.Geometry.Ray3d"/>.</param>
            <returns>true if position or direction (or both) in the two rays are different; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Ray3d.Equals(System.Object)">
            <summary>
            Determines whether the specified System.Object is a Ray3d and has the same values as the present ray.
            </summary>
            <param name="obj">The specified object.</param>
            <returns>true if obj is a Ray3d and has the same position and direction as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Ray3d.Equals(Rhino.Geometry.Ray3d)">
            <summary>
            Determines whether the specified Ray3d has the same value as the present ray.
            </summary>
            <param name="ray">The specified ray.</param>
            <returns>true if ray has the same position and direction as this; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Geometry.Ray3d.EpsilonEquals(Rhino.Geometry.Ray3d,System.Double)">
            <summary>
            Check that all values in other are within epsilon of the values in this
            </summary>
            <param name="other"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Geometry.Ray3d.GetHashCode">
            <summary>
            Computes a hashing number that represents the current ray.
            </summary>
            <returns>A signed integer that represents both postion and direction, but is not unique.</returns>
        </member>
        <member name="P:Rhino.Geometry.Ray3d.Position">
            <summary>
            Gets the starting position of this ray.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Ray3d.Direction">
            <summary>
            Gets the direction vector of this ray.
            </summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.LicenseNode">
            <summary>
            Provides enumerated constant values for license node types.
            </summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.LicenseNode.Standalone">
            <summary>
            An independent node.
            </summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.LicenseNode.Network">
            <summary>
            Network (obtains license from Zoo server)
            </summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.LicenseNode.NetworkCheckedOut">
            <summary>
            Network (has license checked out from Zoo server)
            </summary>
        </member>
        <member name="T:Rhino.ApplicationSettings.Installation">
            <summary>The type of Rhino executable that is executing</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.Installation.Undefined">
            <summary>Unknown</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.Installation.Commercial">
            <summary></summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.Installation.Educational">
            <summary></summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.Installation.EducationalLab">
            <summary></summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.Installation.NotForResale">
            <summary></summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.Installation.NotForResaleLab">
            <summary></summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.Installation.Beta">
            <summary></summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.Installation.BetaLab">
            <summary></summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.Installation.Evaluation">
            <summary>25 Save limit evaluation version of Rhino</summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.Installation.Corporate">
            <summary></summary>
        </member>
        <member name="F:Rhino.ApplicationSettings.Installation.EvaluationTimed">
            <summary>90 day time limit evaluation version of Rhino</summary>
        </member>
        <member name="T:Rhino.RhinoWindow">
            <summary>
            Represents the top level window in Rhino
            </summary>
        </member>
        <member name="M:Rhino.RhinoWindow.Invoke(System.Delegate)">
            <summary>
            
            </summary>
            <param name="method"></param>
            <returns></returns>
        </member>
        <member name="P:Rhino.RhinoWindow.Handle">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rhino.RhinoWindow.InvokeRequired">
            <summary>
            See Control.InvokeRequired
            </summary>
        </member>
        <member name="T:Rhino.RhinoApp">
            <summary>.NET RhinoApp is parallel to C++ CRhinoApp.</summary>
        </member>
        <member name="M:Rhino.RhinoApp.Write(System.String)">
            <summary>Print formatted text in the command window.</summary>
        </member>
        <member name="M:Rhino.RhinoApp.Write(System.String,System.Object)">
            <summary>Print formatted text in the command window.</summary>
        </member>
        <member name="M:Rhino.RhinoApp.Write(System.String,System.Object,System.Object)">
            <summary>Print formatted text in the command window.</summary>
        </member>
        <member name="M:Rhino.RhinoApp.Write(System.String,System.Object,System.Object,System.Object)">
            <summary>Print formatted text in the command window.</summary>
        </member>
        <member name="M:Rhino.RhinoApp.WriteLine">
            <summary>Print a newline in the command window.</summary>
        </member>
        <member name="M:Rhino.RhinoApp.WriteLine(System.String)">
            <summary>Print text in the command window.</summary>
             <example>
             <code source='examples\vbnet\ex_addlayer.vb' lang='vbnet'/>
             <code source='examples\cs\ex_addlayer.cs' lang='cs'/>
             <code source='examples\py\ex_addlayer.py' lang='py'/>
             </example>
        </member>
        <member name="M:Rhino.RhinoApp.WriteLine(System.String,System.Object)">
            <summary>Print formatted text with a newline in the command window.</summary>
             <example>
             <code source='examples\vbnet\ex_addlayer.vb' lang='vbnet'/>
             <code source='examples\cs\ex_addlayer.cs' lang='cs'/>
             <code source='examples\py\ex_addlayer.py' lang='py'/>
             </example>
        </member>
        <member name="M:Rhino.RhinoApp.WriteLine(System.String,System.Object,System.Object)">
            <summary>Print formatted text with a newline in the command window.</summary>
        </member>
        <member name="M:Rhino.RhinoApp.WriteLine(System.String,System.Object,System.Object,System.Object)">
            <summary>Print formatted text with a newline in the command window.</summary>
        </member>
        <member name="M:Rhino.RhinoApp.SetCommandPrompt(System.String,System.String)">
            <summary>Sets the command prompt in Rhino.</summary>
            <param name="prompt">The new prompt text.</param>
            <param name="promptDefault">
             Text that appears in angle brackets and indicates what will happen if the user pressed ENTER.
            </param>
        </member>
        <member name="M:Rhino.RhinoApp.SetCommandPrompt(System.String)">
            <summary>Set Rhino command prompt.</summary>
            <param name="prompt">The new prompt text.</param>
        </member>
        <member name="M:Rhino.RhinoApp.ClearCommandHistoryWindow">
            <summary>
            Clear the text in Rhino's command history window.
            </summary>
        </member>
        <member name="M:Rhino.RhinoApp.SendKeystrokes(System.String,System.Boolean)">
            <summary>Sends a string of printable characters, including spaces, to Rhino&apos;s command line.</summary>
            <param name='characters'>[in] A string to characters to send to the command line. This can be null.</param>
            <param name='appendReturn'>[in] Append a return character to the end of the string.</param>
        </member>
        <member name="M:Rhino.RhinoApp.SetFocusToMainWindow">
            <summary>Sets the focus to the main window.</summary>
        </member>
        <member name="M:Rhino.RhinoApp.ReleaseMouseCapture">
            <summary>Releases the mouse capture.</summary>
        </member>
        <member name="M:Rhino.RhinoApp.Exit">
            <summary>Exits, or closes, Rhino.</summary>
        </member>
        <member name="M:Rhino.RhinoApp.RunScript(System.String,System.Boolean)">
            <summary>Runs a Rhino command script.</summary>
            <param name="script">[in] script to run.</param>
            <param name="echo">
             Controls how the script is echoed in the command output window.
             false = silent - nothing is echoed.
             true = verbatim - the script is echoed literally.
            </param>
            <remarks>
             Rhino acts as if each character in the script string had been typed in the command prompt.
             When RunScript is called from a "script runner" command, it completely runs the
             script before returning. When RunScript is called outside of a command, it returns and the
             script is run. This way menus and buttons can use RunScript to execute complicated functions.
            </remarks>
            <exception cref="T:System.ApplicationException">
             If RunScript is being called while inside an event watcher.
            </exception>
        </member>
        <member name="M:Rhino.RhinoApp.RunScript(System.String,System.String,System.Boolean)">
            <summary>Runs a Rhino command script.</summary>
            <param name="script">[in] script to run.</param>
            <param name="mruDisplayString">[in] String to display in the most recent command list.</param>
            <param name="echo">
             Controls how the script is echoed in the command output window.
             false = silent - nothing is echoed.
             true = verbatim - the script is echoed literally.
            </param>
            <remarks>
             Rhino acts as if each character in the script string had been typed in the command prompt.
             When RunScript is called from a "script runner" command, it completely runs the
             script before returning. When RunScript is called outside of a command, it returns and the
             script is run. This way menus and buttons can use RunScript to execute complicated functions.
            </remarks>
            <exception cref="T:System.ApplicationException">
             If RunScript is being called while inside an event watcher.
            </exception>
        </member>
        <member name="M:Rhino.RhinoApp.Wait">
            <summary>
            Pauses to keep Windows message pump alive so views will update
            and windows will repaint.
            </summary>
        </member>
        <member name="M:Rhino.RhinoApp.MainWindow">
            <summary>
            Gets the Windows interface handle of the main window.
            </summary>
            <returns>A interface to the handle.</returns>
        </member>
        <member name="M:Rhino.RhinoApp.MainWindowHandle">
            <summary>
            Gets the WindowHandle of the Rhino main window.
            </summary>
        </member>
        <member name="M:Rhino.RhinoApp.GetPlugInObject(System.Guid)">
            <summary>
            Gets the object that is returned by PlugIn.GetPlugInObject for a given
            plug-in. This function attempts to find and load a plug-in with a given Id.
            When a plug-in is found, it's GetPlugInObject function is called and the
            result is returned here.
            Note the plug-in must have already been installed in Rhino or the plug-in manager
            will not know where to look for a plug-in with a matching id.
            </summary>
            <param name="pluginId">Guid for a given plug-in.</param>
            <returns>
            Result of PlugIn.GetPlugInObject for a given plug-in on success.
            </returns>
        </member>
        <member name="M:Rhino.RhinoApp.GetPlugInObject(System.String)">
            <summary>
            Gets the object that is returned by PlugIn.GetPlugInObject for a given
            plug-in. This function attempts to find and load a plug-in with a given name.
            When a plug-in is found, it's GetPlugInObject function is called and the
            result is returned here.
            Note the plug-in must have already been installed in Rhino or the plug-in manager
            will not know where to look for a plug-in with a matching name.
            </summary>
            <param name="plugin">Name of a plug-in.</param>
            <returns>
            Result of PlugIn.GetPlugInObject for a given plug-in on success.
            </returns>
        </member>
        <member name="M:Rhino.RhinoApp.IsInstallationEvaluation(Rhino.ApplicationSettings.Installation)">
            <summary>
            If licenseType is an evaluation license, returns true. An evaluation license limits the ability of
            Rhino to save based on either the number of saves or a fixed period of time.
            </summary>
            <seealso cref="T:Rhino.ApplicationSettings.Installation"/>
            <param name="licenseType"></param>
            <returns>true if licenseType is an evaluation license. false otherwise</returns>
        </member>
        <member name="M:Rhino.RhinoApp.IsInstallationCommercial(Rhino.ApplicationSettings.Installation)">
            <summary>
            If licenseType is a commercial license, returns true. A commercial license grants
            full use of the product.
            </summary>
            <param name="licenseType"></param>
            <seealso cref="T:Rhino.ApplicationSettings.Installation"/>
            <returns>true if licenseType is a commercial license. false otherwise</returns>
        </member>
        <member name="M:Rhino.RhinoApp.IsInstallationBeta(Rhino.ApplicationSettings.Installation)">
            <summary>
            If licenseType is a beta license, returns true. A beta license grants
            full use of the product during the pre-release development period.
            </summary>
            <param name="licenseType"></param>
            <seealso cref="T:Rhino.ApplicationSettings.Installation"/>
            <returns>true if licenseType is a beta license. false otherwise</returns>
        </member>
        <member name="M:Rhino.RhinoApp.AskUserForRhinoLicense(System.Boolean,System.Windows.Forms.IWin32Window)">
            <summary>
            Causes Rhino to display UI asking the user to enter a license for Rhino or use one from the Zoo.
            </summary>
            <param name="standAlone">True to ask for a stand-alone license, false to ask the user for a license from the Zoo</param>
            <param name="parent">Parent window for the user interface dialog.</param>
            <returns></returns>
        </member>
        <member name="F:Rhino.RhinoApp.m_keyboard_event">
            <summary>
            
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.SdkVersion">
            <summary>
            Rhino SDK 9 digit SDK version number in the form YYYYMMDDn
            
            Rhino will only load plug-ins that were build with exactly the
            same version of the SDK.
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.SdkServiceRelease">
            <summary>
            Rhino SDK 9 digit SDK service release number in the form YYYYMMDDn
            
            Service service release of the Rhino SDK supported by this executable. Rhino will only
            load plug-ins that require a service release of &lt;= this release number.
            For example, SR1 will load all plug-ins made with any SDK released up through and including
            the SR1 SDK. But, SR1 will not load a plug-in built using the SR2 SDK. If an &quot;old&quot; Rhino
            tries to load a &quot;new&quot; plug-in, the user is told that they have to get a free Rhino.exe
            update in order for the plug-in to load. Rhino.exe updates are available from http://www.rhino3d.com.
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.ExeVersion">
            <summary>
            Major version of Rhino executable 4, 5, ...
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.ExeServiceRelease">
            <summary>
            Service release version of Rhino executable (0, 1, 2, ...)  
            The integer is the service release number of Rhino.  For example,
            this function returns &quot;0&quot; if Rhino V4SR0 is running and returns
            &quot;1&quot; if Rhino V4SR1 is running.
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.BuildDate">
            <summary>
            Gets the build date.
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.VersionControlRevision">
            <summary>
            McNeel version control revision identifier at the time this version
            of Rhino was built.
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.Version">
            <summary> File version of the main Rhino process </summary>
        </member>
        <member name="P:Rhino.RhinoApp.SerialNumber">
            <summary>Gets the product serial number, as seen in Rhino's ABOUT dialog box.</summary>
        </member>
        <member name="P:Rhino.RhinoApp.Name">
            <summary>Gets the application name.</summary>
        </member>
        <member name="P:Rhino.RhinoApp.NodeType">
            <summary>Gets license the node type.</summary>
        </member>
        <member name="P:Rhino.RhinoApp.InstallationType">
            <summary>Gets the product installation type, as seen in Rhino's ABOUT dialog box.</summary>
        </member>
        <member name="P:Rhino.RhinoApp.Rhino2Id">
            <summary>Gets the ID of Rhino 2.</summary>
        </member>
        <member name="P:Rhino.RhinoApp.Rhino3Id">
            <summary>Gets the ID of Rhino 3.</summary>
        </member>
        <member name="P:Rhino.RhinoApp.Rhino4Id">
            <summary>Gets the ID of Rhino 4.</summary>
        </member>
        <member name="P:Rhino.RhinoApp.Rhino5Id">
            <summary>Gets the ID of Rhino 5.</summary>
        </member>
        <member name="P:Rhino.RhinoApp.CurrentRhinoId">
            <summary>Gets the current ID of Rhino.</summary>
        </member>
        <member name="P:Rhino.RhinoApp.IsRunningAutomated">
            <summary>Is Rhino currently being executed through automation</summary>
        </member>
        <member name="P:Rhino.RhinoApp.CommandPrompt">
            <summary>Rhino command prompt.</summary>
        </member>
        <member name="P:Rhino.RhinoApp.CommandHistoryWindowText">
            <summary>
            Text in Rhino's command history window.
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.MainApplicationWindow">
            <summary>
            Same as MainWindow function, but provides the concrete class instead of an interface
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.LicenseExpires">
            <summary>
            Returns 
              true if the license will expire
              false otherwise
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.IsLicenseValidated">
            <summary>
            Returns 
              true if the license is validated
              false otherwise
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.ValidationGracePeriodDaysLeft">
            <summary>
            Returns number of days within which validation must occur. Zero when
              validation grace period has expired.
            Raises InvalidLicenseTypeException if LicenseType is one of:
              EvaluationSaveLimited
              EvaluationTimeLimited
              Viewer
              Unknown
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.DaysUntilExpiration">
            <summary>
            Returns number of days until license expires. Zero when
              license is expired.
            Raises InvalidLicenseTypeException if LicenseExpires
            would return false.
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.LicenseSavesLeft">
            <summary>
            Returns number of saves left in save-limited Evaluation. Zero when
              evaluation is expired.
            Raises InvalidLicenseTypeException if LicenseType != EvaluationSaveLimited
            </summary>
        </member>
        <member name="E:Rhino.RhinoApp.EscapeKeyPressed">
            <summary>
            Can add or removed delegates that are raised when the escape key is clicked.
            </summary>
        </member>
        <member name="E:Rhino.RhinoApp.KeyboardEvent">
            <summary>
            Can add or removed delegates that are raised by a keyboard event.
            </summary>
        </member>
        <member name="E:Rhino.RhinoApp.Initialized">
            <summary>
            Is raised when the apllication is fully initialized.
            </summary>
        </member>
        <member name="E:Rhino.RhinoApp.Closing">
            <summary>
            Is raised when the application is about to close.
            </summary>
        </member>
        <member name="E:Rhino.RhinoApp.AppSettingsChanged">
            <summary>
            Is raised when settings are changed.
            </summary>
        </member>
        <member name="E:Rhino.RhinoApp.Idle">
            <summary>
            Occurs when the application finishes processing and is about to enter the idle state
            </summary>
        </member>
        <member name="E:Rhino.RhinoApp.RdkNewDocument">
            <summary>
            Monitors when RDK document information is rebuilt.
            </summary>
        </member>
        <member name="E:Rhino.RhinoApp.RdkGlobalSettingsChanged">
            <summary>
            Monitors when RDK global settings are modified.
            </summary>
        </member>
        <member name="E:Rhino.RhinoApp.RdkUpdateAllPreviews">
            <summary>
            Monitors when RDK thumbnails are updated.
            </summary>
        </member>
        <member name="E:Rhino.RhinoApp.RdkCacheImageChanged">
            <summary>
            Monitors when the RDK thumbnail cache images are changed.
            </summary>
        </member>
        <member name="E:Rhino.RhinoApp.RendererChanged">
            <summary>
            Monitors when Rhino's current renderer changes.
            </summary>
        </member>
        <member name="E:Rhino.RhinoApp.RdkPlugInUnloading">
            <summary>
            Monitors when RDK client plugins are unloaded.
            </summary>
        </member>
        <member name="P:Rhino.RhinoApp.ToolbarFiles">
            <summary>
            Collection of currently open toolbar files in the application
            </summary>
        </member>
        <member name="T:Rhino.RhinoApp.KeyboardHookEvent">
            <summary>
            KeyboardEvent delegate
            </summary>
            <param name="key"></param>
        </member>
        <member name="T:Rhino.UI.MouseCursor">
            <summary>
            Contains static methods to control the mouse icon.
            </summary>
        </member>
        <member name="M:Rhino.UI.MouseCursor.SetToolTip(System.String)">
            <summary>
            Sets a cursor tooltip string shown next to the mouse cursor.
            Overrides all cursor tooltip panes.
            </summary>
            <param name="tooltip">The text to show.</param>
        </member>
        <member name="P:Rhino.UI.MouseCursor.Location">
            <summary>
            Retrieves the position of the mouse cursor, in screen coordinates
            </summary>
        </member>
        <member name="T:Rhino.UI.StatusBar">
            <summary>
            Contains static methods to control the application status bar.
            </summary>
        </member>
        <member name="M:Rhino.UI.StatusBar.SetDistancePane(System.Double)">
            <summary>
            Sets the distance pane to a distance value.
            </summary>
            <param name="distance">The distance value.</param>
        </member>
        <member name="M:Rhino.UI.StatusBar.SetPointPane(Rhino.Geometry.Point3d)">
            <summary>
            Sets the point pane to a point value.
            </summary>
            <param name="point">The point value.</param>
        </member>
        <member name="M:Rhino.UI.StatusBar.SetMessagePane(System.String)">
            <summary>
            Sets the message pane to a message.
            </summary>
            <param name="message">The message value.</param>
        </member>
        <member name="M:Rhino.UI.StatusBar.ClearMessagePane">
            <summary>
            Removes the message from the message pane.
            </summary>
        </member>
        <member name="M:Rhino.UI.StatusBar.ShowProgressMeter(System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)">
            <summary>
            Starts, or shows, Rhino's status bar progress meter.
            </summary>
            <param name="lowerLimit">The lower limit of the progress meter's range.</param>
            <param name="upperLimit">The upper limit of the progress meter's range.</param>
            <param name="label">The short description of the progress (e.g. "Calculating", "Meshing", etc)</param>
            <param name="embedLabel">
            If true, then the label will be embeded in the progress meter.
            If false, then the label will appear to the left of the progress meter.
            </param>
            <param name="showPercentComplete">
            If true, then the percent complete will appear in the progress meter.
            </param>
            <returns>
            1 - The progress meter was created successfully.
            0 - The progress meter was not created.
            -1 - The progress meter was not created because some other process has already created it.
            </returns>
        </member>
        <member name="M:Rhino.UI.StatusBar.UpdateProgressMeter(System.Int32,System.Boolean)">
            <summary>
            Sets the current position of Rhino's status bar progress meter.
            </summary>
            <param name="position">The new value. This can be stated in absolute terms, or relative compared to the current position.
            <para>The interval bounds are specified when you first show the bar using <see cref="M:Rhino.UI.StatusBar.ShowProgressMeter(System.Int32,System.Int32,System.String,System.Boolean,System.Boolean)"/>.</para></param>
            <param name="absolute">
            If true, then the progress meter is moved to position.
            If false, then the progress meter is moved position from the current position (relative).
            </param>
            <returns>
            The previous position if successful.
            </returns>
        </member>
        <member name="M:Rhino.UI.StatusBar.HideProgressMeter">
            <summary>
            Ends, or hides, Rhino's status bar progress meter.
            </summary>
        </member>
        <member name="T:Rhino.IndexPair">
            <summary>
            Represents two indices: I and J.
            </summary>
        </member>
        <member name="M:Rhino.IndexPair.#ctor(System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of <see cref="T:Rhino.IndexPair"/> with two indices.
            </summary>
            <param name="i">A first index.</param>
            <param name="j">A second index.</param>
        </member>
        <member name="P:Rhino.IndexPair.I">
            <summary>
            Gets or sets the first, I index.
            </summary>
        </member>
        <member name="P:Rhino.IndexPair.J">
            <summary>
            Gets or sets the second, J index.
            </summary>
        </member>
        <member name="T:Rhino.RhinoMath">
            <summary>
            Provides constants and static methods that are additional to
            <see cref="T:System.Math"/>.
            </summary>
        </member>
        <member name="F:Rhino.RhinoMath.ZeroTolerance">
            <summary>
            Gets the Zero Tolerance constant (1.0e-12).
            </summary>
        </member>
        <member name="F:Rhino.RhinoMath.UnsetValue">
            <summary>
            Gets the Rhino standard Unset value. Use this value rather than Double.NaN when 
            a bogus floating point value is required.
            </summary>
        </member>
        <member name="F:Rhino.RhinoMath.SqrtEpsilon">
            <summary>
            Represents a default value that is used when comparing square roots.
            <para>This value is several orders of magnitude larger than <see cref="F:Rhino.RhinoMath.ZeroTolerance"/>.</para>
            </summary>
        </member>
        <member name="F:Rhino.RhinoMath.DefaultAngleTolerance">
            <summary>
            Represents the default angle tolerance, used when no other values are provided.
            <para>This is one degree, expressed in radians.</para>
            </summary>
        </member>
        <member name="F:Rhino.RhinoMath.UnsetSingle">
            <summary>
            Gets the single precision floating point number that is considered 'unset' in Rhino.
            </summary>
        </member>
        <member name="M:Rhino.RhinoMath.ToRadians(System.Double)">
            <summary>
            Convert an angle from degrees to radians.
            </summary>
            <param name="degrees">Degrees to convert (180 degrees equals pi radians).</param>
        </member>
        <member name="M:Rhino.RhinoMath.ToDegrees(System.Double)">
            <summary>
            Convert an angle from radians to degrees.
            </summary>
            <param name="radians">Radians to convert (180 degrees equals pi radians).</param>
        </member>
        <member name="M:Rhino.RhinoMath.IsValidDouble(System.Double)">
            <summary>
            Determines whether a <see cref="T:System.Double"/> value is valid within the RhinoCommon context.
            <para>Rhino does not use Double.NaN by convention, so this test evaluates to true if:</para>
            <para>x is not equal to RhinoMath.UnsetValue</para>
            <para>System.Double.IsNaN(x) evaluates to false</para>
            <para>System.Double.IsInfinity(x) evaluates to false</para>
            </summary>
            <param name="x"><see cref="T:System.Double"/> number to test for validity.</param>
            <returns>true if the number if valid, false if the number is NaN, Infinity or Unset.</returns>
        </member>
        <member name="M:Rhino.RhinoMath.IsValidSingle(System.Single)">
            <summary>
            Determines whether a <see cref="T:System.Single"/> value is valid within the RhinoCommon context.
            <para>Rhino does not use Single.NaN by convention, so this test evaluates to true if:</para>
            <para>x is not equal to RhinoMath.UnsetValue,</para>
            <para>System.Single.IsNaN(x) evaluates to false</para>
            <para>System.Single.IsInfinity(x) evaluates to false</para>
            </summary>
            <param name="x"><see cref="T:System.Single"/> number to test for validity.</param>
            <returns>true if the number if valid, false if the number is NaN, Infinity or Unset.</returns>
        </member>
        <member name="M:Rhino.RhinoMath.UnitScale(Rhino.UnitSystem,Rhino.UnitSystem)">
            <summary>Computes the scale factor for changing the measurements unit systems.</summary>
            <param name="from">The system to convert from.</param>
            <param name="to">The system to convert measurements into.</param>
            <returns>A scale multiplier.</returns>
        </member>
        <member name="M:Rhino.RhinoMath.Clamp(System.Int32,System.Int32,System.Int32)">
            <summary>
            Restricts a <see cref="T:System.Int32"/> to be specified within an interval of two integers.
            </summary>
            <param name="value">An integer.</param>
            <param name="bound1">A first bound.</param>
            <param name="bound2">A second bound. This does not necessarily need to be larger or smaller than bound1.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Rhino.RhinoMath.Clamp(System.Double,System.Double,System.Double)">
            <summary>
            Restricts a <see cref="T:System.Double"/> to be specified within an interval of two numbers.
            </summary>
            <param name="value">A number.</param>
            <param name="bound1">A first bound.</param>
            <param name="bound2">A second bound. This does not necessarily need to be larger or smaller than bound1.</param>
            <returns>The clamped value.</returns>
        </member>
        <member name="M:Rhino.RhinoMath.CRC32(System.UInt32,System.Byte[])">
            <summary>
            Advances the cyclic redundancy check value remainder given a byte array.
            http://en.wikipedia.org/wiki/Cyclic_redundancy_check.
            </summary>
            <param name="currentRemainder">The remainder from which to start.</param>
            <param name="buffer">The value to add to the current remainder.</param>
            <returns>The new current remainder.</returns>
        </member>
        <member name="M:Rhino.RhinoMath.CRC32(System.UInt32,System.Double)">
            <summary>
            Advances the cyclic redundancy check value remainder given a <see cref="T:System.Double"/>.
            http://en.wikipedia.org/wiki/Cyclic_redundancy_check.
            </summary>
            <param name="currentRemainder">The remainder from which to start.</param>
            <param name="value">The value to add to the current remainder.</param>
            <returns>The new current remainder.</returns>
            <example>
            <code source="examples\vbnet\ex_analysismode.vb" lang="vbnet"/>
            <code source="examples\cs\ex_analysismode.cs" lang="cs"/>
            </example>
        </member>
        <member name="M:Rhino.RhinoMath.CRC32(System.UInt32,System.Int32)">
            <summary>
            Advances the cyclic redundancy check value remainder given a <see cref="T:System.Int32"/>.
            http://en.wikipedia.org/wiki/Cyclic_redundancy_check.
            </summary>
            <param name="currentRemainder">The remainder from which to start.</param>
            <param name="value">The value to add to the current remainder.</param>
            <returns>The new current remainder.</returns>
        </member>
        <member name="M:Rhino.RhinoMath.EpsilonEquals(System.Double,System.Double,System.Double)">
            <summary>
            Compare two doubles for equality within some "epsilon" range
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.RhinoMath.EpsilonEquals(System.Single,System.Single,System.Single)">
            <summary>
            Compare to floats for equality within some "epsilon" range
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <param name="epsilon"></param>
            <returns></returns>
        </member>
        <member name="T:Rhino.UnitSystem">
            <summary>
            Provides enumerated values for several unit systems.
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.None">
            <summary>No unit system is specified.</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Angstroms">
            <summary>1.0e-10 meters.</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Nanometers">
            <summary>1.0e-9 meters.</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Microns">
            <summary>1.0e-6 meters.</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Millimeters">
            <summary>1.0e-3 meters.</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Centimeters">
            <summary>1.0e-2 meters.</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Decimeters">
            <summary>1.0e-1 meters.</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Meters">
            <summary>The base unit in the International System of Units.</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Dekameters">
            <summary>1.0e+1 meters.</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Hectometers">
            <summary>1.0e+2 meters.</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Kilometers">
            <summary>1.0e+3 meters.</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Megameters">
            <summary>1.0e+6 meters.</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Gigameters">
            <summary>1.0e+9 meters.</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Microinches">
            <summary>2.54e-8 meters (1.0e-6 inches).</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Mils">
            <summary>2.54e-5 meters (0.001 inches).</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Inches">
            <summary>0.0254 meters.</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Feet">
            <summary>0.3048 meters (12 inches).</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Yards">
            <summary>0.9144 meters (36 inches).</summary>
        </member>
        <member name="F:Rhino.UnitSystem.Miles">
            <summary>1609.344 meters (5280 feet).</summary>
        </member>
        <member name="F:Rhino.UnitSystem.PrinterPoint">
            <summary>Printer distance 1/72 inches (computer points).</summary>
        </member>
        <member name="F:Rhino.UnitSystem.PrinterPica">
            <summary>Printer distance 1/6 inches (computer picas).</summary>
        </member>
        <member name="F:Rhino.UnitSystem.NauticalMile">
            <summary>
            Terrestrial distance, 1852 meters.
            <para>Approximately 1 minute of arc on a terrestrial great circle.
            See http://en.wikipedia.org/wiki/Nautical_mile .</para>
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Astronomical">
            <summary>
            Astronomical unit distance.
            http://en.wikipedia.org/wiki/Astronomical_unit
            1.495979e+11  // http://units.nist.gov/Pubs/SP811/appenB9.htm
            An astronomical unit (au) is the mean distance from the
            center of the earth to the center of the sun.
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Lightyears">
            <summary>
            Light Year
            <para>http://en.wikipedia.org/wiki/Light_year
            9.46073e+15 meters   http://units.nist.gov/Pubs/SP811/appenB9.htm </para>
            <para>A light year is the distance light travels in one Julian year.
            The speed of light is exactly 299792458 meters/second.
            A Julian year is exactly 365.25 * 86400 seconds and is
            approximately the time it takes for one earth orbit.</para>
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.Parsecs">
            <summary>
            Parallax Second
            http://en.wikipedia.org/wiki/Parsec
            3.085678e+16 meters   http://units.nist.gov/Pubs/SP811/appenB9.htm.
            </summary>
        </member>
        <member name="F:Rhino.UnitSystem.CustomUnitSystem">
            <summary>
            Custom unit systems
            x meters with x defined in ON_3dmUnitsAndTolerances.m_custom_unit_scale.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Continuity">
            <summary>
            Provides enumerated values for continuity along geometry,
            such as continuous first derivative or continuous unit tangent and curvature.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.None">
            <summary>
            There is no continuity.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C0_continuous">
            <summary>
            Continuous Function : Test for parametric continuity. In particular, all types of curves
            are considered infinitely continuous at the start/end of the evaluation domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C1_continuous">
            <summary>
            Continuous first derivative : Test for parametric continuity. In particular,
            all types of curves are considered infinitely continuous at the start/end
            of the evaluation domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C2_continuous">
            <summary>
            Continuous first derivative and second derivative : Test for parametric continuity.
            In particular, all types of curves are considered infinitely continuous at the
            start/end of the evaluation domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.G1_continuous">
            <summary>
            Continuous unit tangent : Test for parametric continuity. In particular, all types of
            curves are considered infinitely continuous at the start/end of the evaluation domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.G2_continuous">
            <summary>
            Continuous unit tangent and curvature : Test for parametric continuity. In particular,
            all types of curves are considered infinitely continuous at the start/end of the
            evaluation domain.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C0_locus_continuous">
            <summary>
            Locus continuous function :
            Continuity tests using the following enum values are identical to tests using the
            preceding enum values on the INTERIOR of a curve's domain. At the END of a curve
            a "locus" test is performed in place of a parametric test. In particular, at the
            END of a domain, all open curves are locus discontinuous. At the END of a domain,
            all closed curves are at least C0_locus_continuous. By convention all Curves
            are considered locus continuous at the START of the evaluation domain. This
            convention is not strictly correct, but it was adopted to make iterative kink
            finding tools easier to use and so that locus discontinuities are reported once
            at the end parameter of a curve rather than twice.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C1_locus_continuous">
            <summary>
            Locus continuous first derivative :
            Continuity tests using the following enum values are identical to tests using the
            preceding enum values on the INTERIOR of a curve's domain. At the END of a curve
            a "locus" test is performed in place of a parametric test. In particular, at the
            END of a domain, all open curves are locus discontinuous. At the END of a domain,
            all closed curves are at least C0_locus_continuous. By convention all Curves
            are considered locus continuous at the START of the evaluation domain. This
            convention is not strictly correct, but it was adopted to make iterative kink
            finding tools easier to use and so that locus discontinuities are reported once
            at the end parameter of a curve rather than twice.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.C2_locus_continuous">
            <summary>
            Locus continuous first and second derivative :
            Continuity tests using the following enum values are identical to tests using the
            preceding enum values on the INTERIOR of a curve's domain. At the END of a curve
            a "locus" test is performed in place of a parametric test. In particular, at the
            END of a domain, all open curves are locus discontinuous. At the END of a domain,
            all closed curves are at least C0_locus_continuous. By convention all Curves
            are considered locus continuous at the START of the evaluation domain. This
            convention is not strictly correct, but it was adopted to make iterative kink
            finding tools easier to use and so that locus discontinuities are reported once
            at the end parameter of a curve rather than twice.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.G1_locus_continuous">
            <summary>
            Locus continuous unit tangent :
            Continuity tests using the following enum values are identical to tests using the
            preceding enum values on the INTERIOR of a curve's domain. At the END of a curve
            a "locus" test is performed in place of a parametric test. In particular, at the
            END of a domain, all open curves are locus discontinuous. At the END of a domain,
            all closed curves are at least C0_locus_continuous. By convention all Curves
            are considered locus continuous at the START of the evaluation domain. This
            convention is not strictly correct, but it was adopted to make iterative kink
            finding tools easier to use and so that locus discontinuities are reported once
            at the end parameter of a curve rather than twice.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.G2_locus_continuous">
            <summary>
            Locus continuous unit tangent and curvature :
            Continuity tests using the following enum values are identical to tests using the
            preceding enum values on the INTERIOR of a curve's domain. At the END of a curve
            a "locus" test is performed in place of a parametric test. In particular, at the
            END of a domain, all open curves are locus discontinuous. At the END of a domain,
            all closed curves are at least C0_locus_continuous. By convention all Curves
            are considered locus continuous at the START of the evaluation domain. This
            convention is not strictly correct, but it was adopted to make iterative kink
            finding tools easier to use and so that locus discontinuities are reported once
            at the end parameter of a curve rather than twice.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.Continuity.Cinfinity_continuous">
            <summary>
            Analytic discontinuity.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.MeshType">
            <summary>
            Defines enumerated values for various mesh types.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.MeshType.Default">
            <summary>
            The default mesh.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.MeshType.Render">
            <summary>
            The render mesh.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.MeshType.Analysis">
            <summary>
            The analysis mesh.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.MeshType.Preview">
            <summary>
            The preview mesh.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.MeshType.Any">
            <summary>
            Any mesh that is available.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ActiveSpace">
            <summary>Defines the current working space.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ActiveSpace.None">
            <summary>There is no working space.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ActiveSpace.ModelSpace">
            <summary>3d modeling or "world" space.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ActiveSpace.PageSpace">
            <summary>page/layout/paper/printing space.</summary>
        </member>
        <member name="T:Rhino.DocObjects.CoordinateSystem">
            <summary>
            Defines enumerated values for coordinate systems to use as references.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.CoordinateSystem.World">
            <summary>
            The world coordinate system. This has origin (0,0,0),
            X unit axis is (1, 0, 0) and Y unit axis is (0, 1, 0).
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.CoordinateSystem.Camera">
            <summary>
            The camera coordinate system.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.CoordinateSystem.Clip">
            <summary>
            The clip coordinate system.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.CoordinateSystem.Screen">
            <summary>
            The screen coordinate system.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectMode">
            <summary>
            Defines enumerated values for the display and behavior of single objects.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMode.Normal">
            <summary>Object mode comes from layer.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMode.Hidden">
            <summary>Not visible, object cannot be selected or changed.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMode.Locked">
            <summary>Visible, object cannot be selected or changed.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMode.InstanceDefinitionObject">
            <summary>
            Object is part of an InstanceDefinition. The InstanceDefinition
            m_object_uuid[] array will contain this object attribute's uuid.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectColorSource">
            <summary>
            Defines enumerated values for the source of display color of single objects.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectColorSource.ColorFromLayer">
            <summary>use color assigned to layer.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectColorSource.ColorFromObject">
            <summary>use color assigned to object.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectColorSource.ColorFromMaterial">
            <summary>use diffuse render material color.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectColorSource.ColorFromParent">
            <summary>
            for objects with parents (like objects in instance references, use parent linetype)
            if no parent, treat as color_from_layer.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectPlotColorSource">
            <summary>
            Defines enumerated values for the source of plotting/printing color of single objects.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotColorSource.PlotColorFromLayer">
            <summary>use plot color assigned to layer.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotColorSource.PlotColorFromObject">
            <summary>use plot color assigned to object.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotColorSource.PlotColorFromDisplay">
            <summary>use display color.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotColorSource.PlotColorFromParent">
            <summary>
            for objects with parents (like objects in instance references, use parent plot color)
            if no parent, treat as plot_color_from_layer.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectPlotWeightSource">
            <summary>
            Defines enumerated values for the source of plotting/printing weight of single objects.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotWeightSource.PlotWeightFromLayer">
            <summary>use plot color assigned to layer.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotWeightSource.PlotWeightFromObject">
            <summary>use plot color assigned to object.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectPlotWeightSource.PlotWeightFromParent">
            <summary>
            for objects with parents (like objects in instance references, use parent plot color)
            if no parent, treat as plot_color_from_layer.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectLinetypeSource">
            <summary>
            Defines enumerated values for the source of linetype of single objects.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectLinetypeSource.LinetypeFromLayer">
            <summary>use line style assigned to layer.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectLinetypeSource.LinetypeFromObject">
            <summary>use line style assigned to object.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectLinetypeSource.LinetypeFromParent">
            <summary>
            for objects with parents (like objects in instance references, use parent linetype)
            if not parent, treat as linetype_from_layer.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectMaterialSource">
            <summary>
            Defines enumerated values for the source of material of single objects.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMaterialSource.MaterialFromLayer">
            <summary>use material assigned to layer.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMaterialSource.MaterialFromObject">
            <summary>use material assigned to object.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectMaterialSource.MaterialFromParent">
            <summary>
            for objects with parents, like definition geometry in instance
            references and faces in polysurfaces, this value indicates the
            material definition should come from the parent. If the object
            does not have an obvious "parent", then treat it the same as
            material_from_layer.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.DisplayMode">
            <summary>
            Defines enumerated values for display modes, such as wireframe or shaded.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DisplayMode.Default">
            <summary>
            The default display mode.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DisplayMode.Wireframe">
            <summary>
            The wireframe display mode.
            <para>Objects are generally only outlined by their corresponding isocurves and edges.</para>
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DisplayMode.Shaded">
            <summary>
            The shaded display mode.
            <para>Objects are generally displayed with their corresponding isocurves and edges,
            and are filled with their diplay colors.</para>
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DisplayMode.RenderPreview">
            <summary>
            The render display mode.
            <para>Objects are generally displayed in a similar way to the one that will be resulting
            from rendering.</para>
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.DistanceDisplayMode">
            <summary>
            Defines enumerated values for the display of distances in US customary and Imperial units.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DistanceDisplayMode.Decimal">
            <summary>
            Shows distance decimals.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DistanceDisplayMode.Feet">
            <summary>
            Show feet.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.DistanceDisplayMode.FeetAndInches">
            <summary>
            Show feet and inches.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.TextDisplayAlignment">
            <summary>
            Defines enumerated values for the line alignment of text.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextDisplayAlignment.Normal">
            <summary>
            Normal alignment.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextDisplayAlignment.Horizontal">
            <summary>
            Horizontal alignment.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextDisplayAlignment.AboveLine">
            <summary>
            Above line alignment.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.TextDisplayAlignment.InLine">
            <summary>
            In line alignment.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectType">
            <summary>
            Defines binary mask values for each object type that can be found in a document.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.None">
            <summary>
            Nothing.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Point">
            <summary>
            A point.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.PointSet">
            <summary>
            A point set or cloud.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Curve">
            <summary>
            A curve.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Surface">
            <summary>
            A surface.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Brep">
            <summary>
            A brep.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Mesh">
            <summary>
            A mesh.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Light">
            <summary>
            A rendering light.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Annotation">
            <summary>
            An annotation.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.InstanceDefinition">
            <summary>
            A block definition.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.InstanceReference">
            <summary>
            A block reference.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.TextDot">
            <summary>
            A text dot.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Grip">
            <summary>Selection filter value - not a real object type.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Detail">
            <summary>
            A detail.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Hatch">
            <summary>
            A hatch.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.MorphControl">
            <summary>
            A morph control.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.BrepLoop">
            <summary>
            A brep loop.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.PolysrfFilter">
            <summary>Selection filter value - not a real object type.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.EdgeFilter">
            <summary>Selection filter value - not a real object type.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.PolyedgeFilter">
            <summary>Selection filter value - not a real object type.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.MeshVertex">
            <summary>
            A mesh vertex.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.MeshEdge">
            <summary>
            A mesh edge.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.MeshFace">
            <summary>
            A mesh face.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Cage">
            <summary>
            A cage.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Phantom">
            <summary>
            A phantom object.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.ClipPlane">
            <summary>
            A clipping plane.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.Extrusion">
            <summary>
            An extrusion.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectType.AnyObject">
            <summary>
            All bits set.
            </summary>
        </member>
        <member name="T:Rhino.DocObjects.ObjectDecoration">
            <summary>
            Defines bit mask values to represent object decorations.
            </summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectDecoration.None">
            <summary>There are no object decorations.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectDecoration.StartArrowhead">
            <summary>Arrow head at start.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectDecoration.EndArrowhead">
            <summary>Arrow head at end.</summary>
        </member>
        <member name="F:Rhino.DocObjects.ObjectDecoration.BothArrowhead">
            <summary>Arrow head at start and end.</summary>
        </member>
        <member name="T:Rhino.Geometry.LightStyle">
            <summary>
            Defines enumerated values to represent light styles or types, such as directional or spotlight.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.None">
            <summary>
            No light type. This is the default value of the enumeration type.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.CameraDirectional">
            <summary>
            Light location and direction in camera coordinates.
            +x points to right, +y points up, +z points towards camera.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.CameraPoint">
            <summary>
            Light location and direction in camera coordinates.
            +x points to right, +y points up, +z points towards camera.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.CameraSpot">
            <summary>
            Light location and direction in camera coordinates.
            +x points to right, +y points up, +z points towards camera.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.WorldDirectional">
            <summary>Light location and direction in world coordinates.</summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.WorldPoint">
            <summary>Light location and direction in world coordinates.</summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.WorldSpot">
            <summary>Light location and direction in world coordinates.</summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.Ambient">
            <summary>Ambient light.</summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.WorldLinear">
            <summary>Linear light in world coordinates.</summary>
        </member>
        <member name="F:Rhino.Geometry.LightStyle.WorldRectangular">
            <summary>Rectangular light in world coordinates.</summary>
        </member>
        <member name="T:Rhino.Geometry.ComponentIndexType">
            <summary>
            Defines enumerated values to represent component index types.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.InvalidType">
            <summary>
            Not used. This is the default value of the enumeration type.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.BrepVertex">
            <summary>
            Targets a brep vertex index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.BrepEdge">
            <summary>
            Targets a brep edge index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.BrepFace">
            <summary>
            Targets a brep face index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.BrepTrim">
            <summary>
            Targets a brep trim index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.BrepLoop">
            <summary>
            Targets a brep loop index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.MeshVertex">
            <summary>
            Targets a mesh vertex index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.MeshTopologyVertex">
            <summary>
            Targets a mesh topology vertex index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.MeshTopologyEdge">
            <summary>
            Targets a mesh topology edge index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.MeshFace">
            <summary>
            Targets a mesh face index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.InstanceDefinitionPart">
            <summary>
            Targets an instance definition part index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.PolycurveSegment">
            <summary>
            Targets a polycurve segment index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.PointCloudPoint">
            <summary>
            Targets a pointcloud point index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.GroupMember">
            <summary>
            Targets a group member index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.DimLinearPoint">
            <summary>
            Targets a linear dimension point index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.DimRadialPoint">
            <summary>
            Targets a radial dimension point index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.DimAngularPoint">
            <summary>
            Targets an angular dimension point index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.DimOrdinatePoint">
            <summary>
            Targets an ordinate dimension point index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.DimTextPoint">
            <summary>
            Targets a text point index.
            </summary>
        </member>
        <member name="F:Rhino.Geometry.ComponentIndexType.NoType">
            <summary>
            Targets no specific type.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.ComponentIndex">
            <summary>
            Represents an index of an element contained in another object.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.ComponentIndex.#ctor(Rhino.Geometry.ComponentIndexType,System.Int32)">
            <summary>
            Construct component index with a specific type/index combination
            </summary>
            <param name="type"></param>
            <param name="index"></param>
        </member>
        <member name="P:Rhino.Geometry.ComponentIndex.ComponentIndexType">
            <summary>
            The interpretation of Index depends on the Type value.
            Type             m_index interpretation (0 based indices)
            no_type            used when context makes it clear what array is being index
            brep_vertex        Brep.m_V[] array index
            brep_edge          Brep.m_E[] array index
            brep_face          Brep.m_F[] array index
            brep_trim          Brep.m_T[] array index
            brep_loop          Brep.m_L[] array index
            mesh_vertex        Mesh.m_V[] array index
            meshtop_vertex     MeshTopology.m_topv[] array index
            meshtop_edge       MeshTopology.m_tope[] array index
            mesh_face          Mesh.m_F[] array index
            idef_part          InstanceDefinition.m_object_uuid[] array index
            polycurve_segment  PolyCurve::m_segment[] array index
            dim_linear_point   LinearDimension2::POINT_INDEX
            dim_radial_point   RadialDimension2::POINT_INDEX
            dim_angular_point  AngularDimension2::POINT_INDEX
            dim_ordinate_point OrdinateDimension2::POINT_INDEX
            dim_text_point     TextEntity2 origin point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ComponentIndex.Index">
            <summary>
            The interpretation of m_index depends on the m_type value.
            m_type             m_index interpretation (0 based indices)
            no_type            used when context makes it clear what array is being index
            brep_vertex        Brep.m_V[] array index
            brep_edge          Brep.m_E[] array index
            brep_face          Brep.m_F[] array index
            brep_trim          Brep.m_T[] array index
            brep_loop          Brep.m_L[] array index
            mesh_vertex        Mesh.m_V[] array index
            meshtop_vertex     MeshTopology.m_topv[] array index
            meshtop_edge       MeshTopology.m_tope[] array index
            mesh_face          Mesh.m_F[] array index
            idef_part          InstanceDefinition.m_object_uuid[] array index
            polycurve_segment  PolyCurve::m_segment[] array index
            dim_linear_point   LinearDimension2::POINT_INDEX
            dim_radial_point   RadialDimension2::POINT_INDEX
            dim_angular_point  AngularDimension2::POINT_INDEX
            dim_ordinate_point OrdinateDimension2::POINT_INDEX
            dim_text_point     TextEntity2 origin point.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.ComponentIndex.Unset">
            <summary>
            The unset value of component index.
            </summary>
        </member>
        <member name="T:Rhino.Input.Custom.GetFileNameMode">
            <summary>
            </summary>
        </member>
        <member name="T:Rhino.UI.OpenFileDialog">
            <summary>
            Similar to the System.Windows.Forms.OpenFileDialog, but with customized
            Rhino user interface.
            </summary>
        </member>
        <member name="M:Rhino.UI.OpenFileDialog.#ctor">
            <summary>Create a new open file dialog.</summary>
            <example>
            <code source='examples\vbnet\ex_addbackgroundbitmap.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbackgroundbitmap.cs' lang='cs'/>
            <code source='examples\py\ex_addbackgroundbitmap.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.UI.OpenFileDialog.ShowOpenDialog">
            <summary>
            Show the actual dialog to allow the user to select a file.
            </summary>
            <returns>
            Returns false if the dialog was canceled otherwise returns true
            </returns>
        </member>
        <member name="M:Rhino.UI.OpenFileDialog.ShowDialog">
            <summary>Show the actual dialog to allow the user to select a file.</summary>
            <example>
            <code source='examples\vbnet\ex_addbackgroundbitmap.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbackgroundbitmap.cs' lang='cs'/>
            <code source='examples\py\ex_addbackgroundbitmap.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.UI.OpenFileDialog.DefaultExt">
            <summary>
            The default file name extension. The returned string does not include the period.
            </summary>
        </member>
        <member name="P:Rhino.UI.OpenFileDialog.FileName">
            <summary>
            Gets or sets a string containing the file name selected in the file dialog box. 
            </summary>
            <example>
            <code source='examples\vbnet\ex_addbackgroundbitmap.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbackgroundbitmap.cs' lang='cs'/>
            <code source='examples\py\ex_addbackgroundbitmap.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.UI.OpenFileDialog.Title">
            <summary>
            Gets or sets the file dialog box title.
            </summary>
        </member>
        <member name="P:Rhino.UI.OpenFileDialog.Filter">
            <summary>
            Gets or sets the current file name filter string, which determines
            the choices that appear in the "Save as file type" or "Files of type"
            box in the dialog box. See System.Windows.Forms.FileDialog for details.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addbackgroundbitmap.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbackgroundbitmap.cs' lang='cs'/>
            <code source='examples\py\ex_addbackgroundbitmap.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.UI.OpenFileDialog.InitialDirectory">
            <summary>
            Gets or sets the initial directory displayed by the file dialog box.
            </summary>
        </member>
        <member name="P:Rhino.UI.OpenFileDialog.MultiSelect">
            <summary>
            Gets or sets a value indicating whether the dialog box allows multiple files to be selected
            </summary>
        </member>
        <member name="P:Rhino.UI.OpenFileDialog.FileNames">
            <summary>
            Gets the names of all of the selected files in the dialog box
            </summary>
        </member>
        <member name="T:Rhino.UI.SaveFileDialog">
            <summary>
            Similar to the System.Windows.Forms.SaveFileDialog, but with customized
            Rhino user interface.
            </summary>
        </member>
        <member name="M:Rhino.UI.SaveFileDialog.#ctor">
            <example>
            <code source='examples\vbnet\ex_screencaptureview.vb' lang='vbnet'/>
            <code source='examples\cs\ex_screencaptureview.cs' lang='cs'/>
            <code source='examples\py\ex_screencaptureview.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.UI.SaveFileDialog.ShowSaveDialog">
            <summary>
            Display the dialog box.
            </summary>
            <returns>
            Returns false if the dialog was canceled otherwise returns true
            </returns>
        </member>
        <member name="M:Rhino.UI.SaveFileDialog.ShowDialog">
            <example>
            <code source='examples\vbnet\ex_screencaptureview.vb' lang='vbnet'/>
            <code source='examples\cs\ex_screencaptureview.cs' lang='cs'/>
            <code source='examples\py\ex_screencaptureview.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.UI.SaveFileDialog.DefaultExt">
            <summary>
            The default file name extension. The returned string does not include the period.
            </summary>
        </member>
        <member name="P:Rhino.UI.SaveFileDialog.FileName">
            <summary>
            Gets or sets a string containing the file name selected in the file dialog box. 
            </summary>
            <example>
            <code source='examples\vbnet\ex_screencaptureview.vb' lang='vbnet'/>
            <code source='examples\cs\ex_screencaptureview.cs' lang='cs'/>
            <code source='examples\py\ex_screencaptureview.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.UI.SaveFileDialog.Title">
            <summary>
            Gets or sets the file dialog box title.
            </summary>
        </member>
        <member name="P:Rhino.UI.SaveFileDialog.Filter">
            <summary>
            Gets or sets the current file name filter string, which determines
            the choices that appear in the "Save as file type" or "Files of type"
            box in the dialog box. See System.Windows.Forms.FileDialog for details.
            </summary>
            <example>
            <code source='examples\vbnet\ex_screencaptureview.vb' lang='vbnet'/>
            <code source='examples\cs\ex_screencaptureview.cs' lang='cs'/>
            <code source='examples\py\ex_screencaptureview.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.UI.SaveFileDialog.InitialDirectory">
            <summary>
            Gets or sets the initial directory displayed by the file dialog box.
            </summary>
            <example>
            <code source='examples\vbnet\ex_screencaptureview.vb' lang='vbnet'/>
            <code source='examples\cs\ex_screencaptureview.cs' lang='cs'/>
            <code source='examples\py\ex_screencaptureview.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetString.#ctor">
            <summary>
            Constructs a new GetString.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addlayer.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayer.cs' lang='cs'/>
            <code source='examples\py\ex_addlayer.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetString.Get">
            <summary>Returns the string that the user typed. By default, space stops the string input.</summary>
            <returns>The result type. If the user typed a string, this is <see cref="F:Rhino.Input.GetResult.String"/>.</returns>
            <example>
            <code source="examples\vbnet\ex_addlayer.vb" lang="vbnet"/>
            <code source="examples\cs\ex_addlayer.cs" lang="cs"/>
            <code source="examples\py\ex_addlayer.py" lang="py"/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetString.GetLiteralString">
            <summary>Returns the string that the user typed. By default, space does not stop input.</summary>
            <returns>The result type. If the user typed a string, this is <see cref="F:Rhino.Input.GetResult.String"/>.</returns>
        </member>
        <member name="T:Rhino.Input.Custom.GetOption">
            <summary>
            If you want to explicitly get string input, then use GetString class with
            options. If you only want to get options, then use this class (GetOption)
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetOption.Get">
            <summary>
            Call to get an option. A return value of "option" means the user selected
            a valid option. Use Option() the determine which option.
            </summary>
            <returns>If the user chose an option, then <see cref="F:Rhino.Input.GetResult.Option"/>; another enumeration value otherwise.</returns>
        </member>
        <member name="T:Rhino.Input.Custom.GetNumber">
            <summary>Used to get double precision numbers.</summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetNumber.#ctor">
            <summary>Create a new GetNumber.</summary>
            <example>
            <code source='examples\vbnet\ex_addbackgroundbitmap.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbackgroundbitmap.cs' lang='cs'/>
            <code source='examples\py\ex_addbackgroundbitmap.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetNumber.Get">
            <summary>Call to get a number.</summary>
            <returns>If the user chose a number, then <see cref="F:Rhino.Input.GetResult.Number"/>; another enumeration value otherwise.</returns>
            <example>
            <code source="examples\vbnet\ex_addbackgroundbitmap.vb" lang="vbnet"/>
            <code source="examples\cs\ex_addbackgroundbitmap.cs" lang="cs"/>
            <code source="examples\py\ex_addbackgroundbitmap.py" lang="py"/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetNumber.SetLowerLimit(System.Double,System.Boolean)">
            <summary>
            Sets a lower limit on the number that can be returned.
            By default there is no lower limit.
            </summary>
            <param name="lowerLimit">smallest acceptable number.</param>
            <param name="strictlyGreaterThan">
            If true, then the returned number will be > lower_limit.
            </param>
            <example>
            <code source='examples\vbnet\ex_addbackgroundbitmap.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbackgroundbitmap.cs' lang='cs'/>
            <code source='examples\py\ex_addbackgroundbitmap.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetNumber.SetUpperLimit(System.Double,System.Boolean)">
            <summary>
            Sets an upper limit on the number that can be returned.
            By default there is no upper limit.
            </summary>
            <param name="upperLimit">largest acceptable number.</param>
            <param name="strictlyLessThan">If true, then the returned number will be &lt; upper_limit.</param>
        </member>
        <member name="T:Rhino.Input.Custom.GetInteger">
            <summary>Used to get integer numbers.</summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetInteger.Get">
            <summary>
            Call to get an integer.
            </summary>
            <returns>If the user chose a number, then <see cref="F:Rhino.Input.GetResult.Number"/>; another enumeration value otherwise.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetInteger.SetLowerLimit(System.Int32,System.Boolean)">
            <summary>
            Sets a lower limit on the number that can be returned.
            By default there is no lower limit.
            </summary>
            <param name="lowerLimit">smallest acceptable number.</param>
            <param name="strictlyGreaterThan">
            If true, then the returned number will be > lower_limit.
            </param>
        </member>
        <member name="M:Rhino.Input.Custom.GetInteger.SetUpperLimit(System.Int32,System.Boolean)">
            <summary>
            Sets an upper limit on the number that can be returned.
            By default there is no upper limit.
            </summary>
            <param name="upperLimit">largest acceptable number.</param>
            <param name="strictlyLessThan">If true, then the returned number will be &lt; upper_limit.</param>
        </member>
        <member name="T:Rhino.Input.Custom.GetObject">
            <summary>
            The GetObject class is the tool commands use to interactively select objects.
            </summary>
            <example>
            GetObject go = new GetObject();
            go.GetObjects(1,0);
            if( go.CommandResult() != Command.Result.Success )
               ... use canceled or some other type of input was provided
            int object_count = go.ObjectCount();
            for( int i=0; i&lt;object_count; i++ )
            {
              ObjectReference objref = go.Object(i);
              ON_Geometry geo = objref.Geometry();
              ...
            }
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.#ctor">
            <example>
            <code source='examples\vbnet\ex_addobjectstogroup.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addobjectstogroup.cs' lang='cs'/>
            <code source='examples\py\ex_addobjectstogroup.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.CustomGeometryFilter(Rhino.DocObjects.RhinoObject,Rhino.Geometry.GeometryBase,Rhino.Geometry.ComponentIndex)">
            <summary>
            Checks geometry to see if it can be selected.
            Override to provide fancy filtering.
            </summary>
            <param name="rhObject">parent object being considered.</param>
            <param name="geometry">geometry being considered.</param>
            <param name="componentIndex">
            if >= 0, geometry is a proper sub-part of object->Geometry() with componentIndex.
            </param>
            <returns>
            The default returns true unless you've set a custom geometry filter. If a custom
            filter has been set, that delegate is called
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.SetCustomGeometryFilter(Rhino.Input.Custom.GetObjectGeometryFilter)">
            <summary>
            Set filter callback function that will be called by the CustomGeometryFilter
            </summary>
            <param name="filter"></param>
            <example>
            <code source='examples\vbnet\ex_customgeometryfilter.vb' lang='vbnet'/>
            <code source='examples\cs\ex_customgeometryfilter.cs' lang='cs'/>
            <code source='examples\py\ex_customgeometryfilter.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.PassesGeometryAttributeFilter(Rhino.DocObjects.RhinoObject,Rhino.Geometry.GeometryBase,Rhino.Geometry.ComponentIndex)">
            <summary>
            Checks geometry to see if it passes the basic GeometryAttributeFilter.
            </summary>
            <param name="rhObject">parent object being considered.</param>
            <param name="geometry">geometry being considered.</param>
            <param name="componentIndex">if >= 0, geometry is a proper sub-part of object->Geometry() with componentIndex.</param>
            <returns>
            true if the geometry passes the filter returned by GeometryAttributeFilter().
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.EnablePreSelect(System.Boolean,System.Boolean)">
            <summary>
            Control the pre selection behavior GetObjects.
            </summary>
            <param name="enable">if true, pre-selection is enabled.</param>
            <param name="ignoreUnacceptablePreselectedObjects">
            If true and some acceptable objects are pre-selected, then any unacceptable
            pre-selected objects are ignored. If false and any unacceptable are pre-selected,
            then the user is forced to post-select.
            </param>
            <remarks>
            By default, if valid input is pre-selected when GetObjects() is called, then that input
            is returned and the user is not given the opportunity to post-select. If you want
            to force the user to post-select, then call EnablePreSelect(false).
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.EnablePostSelect(System.Boolean)">
            <summary>
            Control the availability of post selection in GetObjects.
            </summary>
            <remarks>
            By default, if no valid input is pre-selected when GetObjects is called, then
            the user is given the chance to post select. If you want to force the user to pre-select,
            then call EnablePostSelect(false).
            </remarks>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.EnableSelPrevious(System.Boolean)">
            <summary>
            By default, any object selected during a command becomes part of the
            "previous selection set" and can be reselected by the SelPrev command.
            If you need to select objects but do not want them to be selected by
            a subsquent call to SelPrev, then call EnableSelPrev = false.
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.EnableHighlight(System.Boolean)">
            <summary>
            By default, any object post-pick selected by GetObjects() is highlighted.
            If you want to post-pick objects and not have them automatically highlight,
            then call EnableHighlight = false.
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.EnableIgnoreGrips(System.Boolean)">
            <summary>
            By default, post selection will select objects with grips on. If you do
            not want to be able to post select objects with grips on, then call
            EnableIgnoreGrips = false. The ability to preselect an object with grips
            on is determined by the value returned by the virtual
            RhinoObject.IsSelectableWithGripsOn.
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.EnablePressEnterWhenDonePrompt(System.Boolean)">
            <summary>
            By default, when GetObject.GetObjects is called with minimumNumber > 0
            and maximumNumber = 0, the command prompt automatically includes "Press Enter
            when done" after the user has selected at least minimumNumber of objects. If
            you want to prohibit the addition of the "Press Enter when done", then call
            EnablePressEnterWhenDonePrompt = false;
            </summary>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.SetPressEnterWhenDonePrompt(System.String)">
            <summary>
            The default prompt when EnablePressEnterWhenDonePrompt is enabled is "Press Enter
            when done". Use this function to specify a different string to be appended.
            </summary>
            <param name="prompt">The text that will be displayed just after the prompt,
            after the selection has been made.</param>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.Get">
            <summary>
            Call to select a single object.
            </summary>
            <returns>
            Success - objects selected.
            Cancel - user pressed ESCAPE to cancel the get.
            See GetResults for other possible values that may be returned when options, numbers,
            etc., are acceptable responses.
            </returns>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.GetMultiple(System.Int32,System.Int32)">
            <summary>Call to select objects.</summary>
            <param name="minimumNumber">minimum number of objects to select.</param>
            <param name="maximumNumber">
            maximum number of objects to select.
            If 0, then the user must press enter to finish object selection.
            If -1, then object selection stops as soon as there are at least minimumNumber of object selected.
            If >0, then the picking stops when there are maximumNumber objects.  If a window pick, crossing
            pick, or Sel* command attempts to add more than maximumNumber, then the attempt is ignored.
            </param>
            <returns>
            Success - objects selected.
            Cancel - user pressed ESCAPE to cancel the get.
            See GetResults for other possible values that may be returned when options, numbers,
            etc., are acceptable responses.
            </returns>
            <example>
            <code source='examples\vbnet\ex_addobjectstogroup.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addobjectstogroup.cs' lang='cs'/>
            <code source='examples\py\ex_addobjectstogroup.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.Object(System.Int32)">
            <example>
            <code source='examples\vbnet\ex_orientonsrf.vb' lang='vbnet'/>
            <code source='examples\cs\ex_orientonsrf.cs' lang='cs'/>
            <code source='examples\py\ex_orientonsrf.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.EnableClearObjectsOnEntry(System.Boolean)">
            <summary>
            By default the picked object list is cleared when GetObject.GetObjects() is called.
            If you are reusing a GetObject class and do not want the existing object list
            cleared when you call Input, then call EnableClearObjectsOnEntry(false) before
            calling GetObjects().
            </summary>
            <param name="enable">The state to set.</param>
        </member>
        <member name="M:Rhino.Input.Custom.GetObject.EnableUnselectObjectsOnExit(System.Boolean)">
            <summary>
            By default any objects in the object list are unselected when GetObject.GetObjects()
            exits with any return code besides Object. If you want to leave the objects
            selected when non-object input is returned, then call EnableUnselectObjectsOnExit(false)
            before calling GetObjects().
            </summary>
            <param name="enable">The state to set.</param>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.GeometryFilter">
            <summary>
            The geometry type filter controls which types of geometry
            (points, curves, surfaces, meshes, etc.) can be selected.
            The default geometry type filter permits selection of all
            types of geometry.
            NOTE: the filter can be a bitwise combination of multiple ObjectTypes.
            </summary>
            <example>
            <code source='examples\vbnet\ex_orientonsrf.vb' lang='vbnet'/>
            <code source='examples\cs\ex_orientonsrf.cs' lang='cs'/>
            <code source='examples\py\ex_orientonsrf.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.GeometryAttributeFilter">
            <summary>
            The geometry attribute filter provides a secondary filter that
            can be used to restrict which objects can be selected. Control
            of the type of geometry (points, curves, surfaces, meshes, etc.)
            is provided by GetObject.SetGeometryFilter. The geometry attribute
            filter is used to require the selected geometry to have certain
            attributes (open, closed, etc.). The default attribute filter
            permits selection of all types of geometry.
            </summary>
            <example>
            <code source='examples\vbnet\ex_circlecenter.vb' lang='vbnet'/>
            <code source='examples\cs\ex_circlecenter.cs' lang='cs'/>
            <code source='examples\py\ex_circlecenter.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.DeselectAllBeforePostSelect">
            <summary>
            true if pre-selected input will be deselected before
            post-selection begins when no pre-selected input is valid.
            </summary>
            <example>
            <code source='examples\vbnet\ex_orientonsrf.vb' lang='vbnet'/>
            <code source='examples\cs\ex_orientonsrf.cs' lang='cs'/>
            <code source='examples\py\ex_orientonsrf.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.OneByOnePostSelect">
            <summary>
            In one-by-one post selection, the user is forced
            to select objects by post picking them one at a time.
            </summary>
            <example>
            <code source='examples\vbnet\ex_orientonsrf.vb' lang='vbnet'/>
            <code source='examples\cs\ex_orientonsrf.cs' lang='cs'/>
            <code source='examples\py\ex_orientonsrf.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.SubObjectSelect">
            <summary>
            By default, GetObject.Input will permit a user to select
            sub-objects (like a curve in a b-rep or a curve in a group).
            If you only want the user to select "top" level objects,
            then call EnableSubObjectSelect = false.
            </summary>
            <example>
            <code source='examples\vbnet\ex_orientonsrf.vb' lang='vbnet'/>
            <code source='examples\cs\ex_orientonsrf.cs' lang='cs'/>
            <code source='examples\py\ex_orientonsrf.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.ChooseOneQuestion">
            <summary>
            By default, if a call to Input is permitted to select different parts
            of the same object, like a polysurface and an edge of that polysurface,
            then the top-most object is automatically selected. If you want the
            choose-one-object mechanism to include pop up in these cases, then call
            EnableChooseOneQuestion = true before calling GetObjects().
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.BottomObjectPreference">
            <summary>
            By default, if a call to Input is permitted to select different parts of
            the same object, like a polysurface, a surface and an edge, then the
            top-most object is prefered. (polysurface beats face beats edge). If
            you want the bottom most object to be prefered, then call 
            EnableBottomObjectPreference = true before calling GetObjects().
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.GroupSelect">
            <summary>
            By default, groups are ignored in GetObject. If you want your call to
            GetObjects() to select every object in a group that has any objects
            selected, then enable group selection.
            </summary>
            <example>
            <code source='examples\vbnet\ex_orientonsrf.vb' lang='vbnet'/>
            <code source='examples\cs\ex_orientonsrf.cs' lang='cs'/>
            <code source='examples\py\ex_orientonsrf.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.InactiveDetailPickEnabled">
            <summary>
            By default, objects in inactive details are not permitted to be picked.
            In a few rare cases this is used (ex. picking circles during DimRadius)
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.ReferenceObjectSelect">
            <summary>
            By default, reference objects can be selected. If you do not want to be
            able to select reference objects, then call EnableReferenceObjectSelect=false.
            </summary>
            <example>
            <code source='examples\vbnet\ex_createblock.vb' lang='vbnet'/>
            <code source='examples\cs\ex_createblock.cs' lang='cs'/>
            <code source='examples\py\ex_createblock.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.AlreadySelectedObjectSelect">
            <summary>
            Allow selecting objects that are already selected. By default, GetObjects() disallows
            selection of objects that are already selected to avoid putting the same object
            in the selection set more than once. Calling EnableAlreadySelectedObjectSelect = true
            overrides that restriction and allows selected objects to be selected and
            returned by GetObjects. This is useful because, coupled with the return immediately
            mode of GetObjects(1, -1), it is possible to select a selected object to deselect
            when the selected objects are being managed outside GetObjects() as in the case of
            CRhinoPolyEdge::GetEdge().
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.ObjectCount">
            <summary>
            Gets the number of objects that were selected.
            </summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetObject.SerialNumber">
            <summary>
            Each instance of GetObject has a unique runtime serial number that
            is used to identify object selection events associated with that instance.
            </summary>
        </member>
        <member name="T:Rhino.Input.Custom.GeometryAttributeFilter">
            <summary>
            If an object passes the geometry TYPE filter, then the geometry ATTRIBUTE
            filter is applied.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.WireCurve">
            <summary>
            3d wire curve
            If you want to accept only wire or edge curves, then
            specify wire_curve or edge_curve, otherwise both wire
            and edge curves will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.EdgeCurve">
            <summary>
            3d curve of a surface edge
            If you want to accept only wire or edge curves, then
            specify wire_curve or edge_curve, otherwise both wire
            and edge curves will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.ClosedCurve">
            <summary>
            Closed Curves and Edges are acceptable
            If you want to accept only closed or open curves, then
            specify either closed_curve or open_curve.  Otherwise both
            closed and open curves will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.OpenCurve">
            <summary>
            Open Curves and Edges are acceptable
            If you want to accept only closed or open curves, then
            specify either closed_curve or open_curve.  Otherwise both
            closed and open curves will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.SeamEdge">
             <summary>
             seam edges are acceptable
             attributes of acceptable trimming edge objects (associated with an ON_BrepTrim).
            
             If none of these attributes are explicitly specified, then
             any kind of trimming edge will pass the attribute filter.
             </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.ManifoldEdge">
             <summary>
             edges with 2 different surfaces pass
             attributes of acceptable trimming edge objects (associated with an ON_BrepTrim).
            
             If none of these attributes are explicitly specified, then
             any kind of trimming edge will pass the attribute filter.
             </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.NonmanifoldEdge">
             <summary>
             edges with 3 or more surfaces pass
             attributes of acceptable trimming edge objects (associated with an ON_BrepTrim).
            
             If none of these attributes are explicitly specified, then
             any kind of trimming edge will pass the attribute filter.
             </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.MatedEdge">
             <summary>
             any mated edge passes
             attributes of acceptable trimming edge objects (associated with an ON_BrepTrim).
            
             If none of these attributes are explicitly specified, then
             any kind of trimming edge will pass the attribute filter.
             </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.SurfaceBoundaryEdge">
             <summary>
             boundary edges on surface sides pass
             attributes of acceptable trimming edge objects (associated with an ON_BrepTrim).
            
             If none of these attributes are explicitly specified, then
             any kind of trimming edge will pass the attribute filter.
             </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.TrimmingBoundaryEdge">
             <summary>
             boundary edges that trim a surface pass
             attributes of acceptable trimming edge objects (associated with an ON_BrepTrim).
            
             If none of these attributes are explicitly specified, then
             any kind of trimming edge will pass the attribute filter.
             </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.BoundaryEdge">
             <summary>
             ant boundary edge passes
             attributes of acceptable trimming edge objects (associated with an ON_BrepTrim).
            
             If none of these attributes are explicitly specified, then
             any kind of trimming edge will pass the attribute filter.
             </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.ClosedSurface">
            <summary>
             If you want to accept only closed or open surfaces, then
             specify either closed_surface or open_surface.  Otherwise both
             closed and open surfaces will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.OpenSurface">
            <summary>
             If you want to accept only closed or open surfaces, then
             specify either closed_surface or open_surface.  Otherwise both
             closed and open surfaces will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.TrimmedSurface">
            <summary>
             If you want to accept only trimmed or untrimmed surfaces, then
             specify either trimmed_surface or untrimmed_surface.  Otherwise
             both trimmed and untrimmed surfaces will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.UntrimmedSurface">
            <summary>
             If you want to accept only trimmed or untrimmed surfaces, then
             specify either trimmed_surface or untrimmed_surface.  Otherwise
             both trimmed and untrimmed surfaces will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.SubSurface">
            <summary>
             If you want to accept only sub-surfaces of (multi-surface)
             polysrf, then specify sub_surface.  If you do not want to
             accept sub-surfaces, then specify top_surface.  Otherwise
             sub-surfaces and top surfaces will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.TopSurface">
            <summary>
             If you want to accept only sub-surfaces of (multi-surface)
             polysrf, then specify sub_surface.  If you do not want to
             accept sub-surfaces, then specify top_surface.  Otherwise
             sub-surfaces and top surfaces will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.ManifoldPolysrf">
            <summary>
             If you want to accept only manifold or nonmanifold polysrfs,
             then specify manifold_polysrf or nonmanifold_polysrf. Otherwise
             both manifold and nonmanifold polysrfs will pass the attribute
             filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.NonmanifoldPolysrf">
            <summary>
             If you want to accept only manifold or nonmanifold polysrfs,
             then specify manifold_polysrf or nonmanifold_polysrf. Otherwise
             both manifold and nonmanifold polysrfs will pass the attribute
             filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.ClosedPolysrf">
            <summary>
             If you want to accept only closed or open polysrfs, then
             specify either closed_polysrf or open_polysrf.  Otherwise both
             closed and open polysrfs will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.OpenPolysrf">
            <summary>
             If you want to accept only closed or open polysrfs, then
             specify either closed_polysrf or open_polysrf.  Otherwise both
             closed and open polysrfs will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.ClosedMesh">
            <summary>
             If you want to accept only closed or open meshs, then
             specify either closed_mesh or open_mesh.  Otherwise both
             closed and open meshs will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.OpenMesh">
            <summary>
             If you want to accept only closed or open meshs, then
             specify either closed_mesh or open_mesh.  Otherwise both
             closed and open meshs will pass the attribute filter.
            </summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.BoundaryInnerLoop">
            <summary>all trimming edges are boundary edges.</summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.MatedInnerLoop">
            <summary>all trimming edges are mated.</summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.InnerLoop">
            <summary>any inner loop is acceptable.</summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.BoundaryOuterLoop">
            <summary>all trimming edges are boundary edges.</summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.MatedOuterLoop">
            <summary>all trimming edges are mated.</summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.OuterLoop">
            <summary>any outer loop is acceptable.</summary>
        </member>
        <member name="F:Rhino.Input.Custom.GeometryAttributeFilter.SpecialLoop">
            <summary>slit, crvonsrf, ptonsrf, etc.</summary>
        </member>
        <member name="P:Rhino.Input.Custom.GetPointDrawEventArgs.Source">
            <summary>
            GetPoint class that this draw event originated from.
            </summary>
            <example>
            <code source='examples\vbnet\ex_arraybydistance.vb' lang='vbnet'/>
            <code source='examples\cs\ex_arraybydistance.cs' lang='cs'/>
            <code source='examples\py\ex_arraybydistance.py' lang='py'/>
            </example>
        </member>
        <member name="T:Rhino.Collections.ArchivableDictionary">
            <summary>
            <para>Represents a dictionary class that can be attached to objects and
            can be serialized (saved) at necessity.</para>
            <para>See remarks for layout.</para>
            </summary>
            <remarks>
            <para>This is the layout of this object:</para>
            <para>.</para>
            <para>BEGINCHUNK (TCODE_ANONYMOUS_CHUNK)</para>
            <para>|- version (int)</para>
            <para>|- entry count (int)</para>
            <para>   for entry count entries</para>
            <para>   |- BEGINCHUNK (TCODE_ANONYMOUS_CHUNK)</para>
            <para>   |- key (string)</para>
            <para>   |- entry contents</para>
            <para>   |- ENDCHUNK (TCODE_ANONYMOUS_CHUNK)</para>
            <para>ENDCHUNK (TCODE_ANONYMOUS_CHUNK)</para>
            </remarks>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.#ctor">
            <summary>Initializes an instance of a dictionary for writing to a 3dm archive.</summary>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.#ctor(Rhino.DocObjects.Custom.UserData)">
            <summary>Initializes an instance of a dictionary for writing to a 3dm archive</summary>
            <param name="parentUserData">
            parent user data if this dictionary is associated with user data
            </param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.#ctor(System.Int32)">
            <summary>Initializes an instance of a dictionary for writing to a 3dm archive.</summary>
            <param name="version">
            Custom version used to help the plug-in developer determine which version of
            a dictionary is being written. One good way to write version information is to
            use a date style integer (YYYYMMDD)
            </param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.#ctor(System.Int32,System.String)">
            <summary>Initializes an instance of a dictionary for writing to a 3dm archive.</summary>
            <param name="version">
             custom version used to help the plug-in developer determine which version of
             a dictionary is being written. One good way to write version information is to
             use a date style integer (YYYYMMDD)
            </param>
            <param name="name">
             Optional name to associate with this dictionary.
             NOTE: if this dictionary is set as a subdictionary, the name will be changed to
             the subdictionary key entry
            </param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.SetParentUserData(Rhino.DocObjects.Custom.UserData)">
            <summary>
            Recursively sets the parent user data for this dictionary
            </summary>
            <param name="parent"></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Read(Rhino.FileIO.BinaryArchiveReader)">
            <summary>Reads a dictionary from an archive.</summary>
            <param name='archive'>
            The archive to read from. The archive position should be at the beginning of
            the dictionary
            </param>
            <returns>new filled dictionary on success. null on failure.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Write(Rhino.FileIO.BinaryArchiveWriter)">
            <summary>
            Writes this dictionary to an archive.
            </summary>
            <param name="archive">The archive to write to.</param>
            <returns>true on success.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.ContainsKey(System.String)">
            <summary>
            Determines whether the dictionary contains the specified key.
            </summary>
            <param name="key">The key to locate.</param>
            <returns>true if the dictionary contains an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">key is null.</exception>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Clear">
            <summary>
            Removes all keys and values from the dictionary.
            </summary>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Remove(System.String)">
            <summary>
            Removes the value with the specified key from the dictionary.
            </summary>
            <param name="key">The key of the element to remove.</param>
            <exception cref="T:System.ArgumentNullException">Key is null.</exception>
            <returns>true if the element is successfully found and removed; otherwise, false.
            This method returns false if key is not found.
            </returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetValue(System.String,System.Object@)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get.</param>
            <param name="value">When this method returns and if the key is found,
            contains the value associated with the specified key;
            otherwise, null. This parameter is passed uninitialized.</param>
            <returns>true if the dictionary contains an element with the specified key; otherwise, false.</returns>
            <exception cref="T:System.ArgumentNullException">Key is null.</exception>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetString(System.String,System.String@)">
            <summary>
            Get value as string, will only succeed if value was created using Set(string key, string value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetString(System.String)">
            <summary>
            Get value as string, will only succeed if value was created using Set(string key, string value)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetString(System.String,System.String)">
            <summary>
            Get value as string, will return defaultValue unless value was created using Set(string key, string value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetDictionary(System.String,Rhino.Collections.ArchivableDictionary@)">
            <summary>
            Get value as ArchivableDictionary, will only succeed if value was
            created using Set(string key, ArchivableDictionary value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetDictionary(System.String)">
            <summary>
            Get value as ArchivableDictionary, will only succeed if value was created
            using Set(string key, ArchivableDictionary value)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetDictionary(System.String,Rhino.Collections.ArchivableDictionary)">
            <summary>
            Get value as ArchivableDictionary, will return defaultValue unless
            value was created using Set(string key, ArchivableDictionary value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetBytes(System.String,System.Byte[]@)">
            <summary>
            Get value as byte[], will only succeed if value was
            created using Set(string key, byte[] value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetBytes(System.String)">
            <summary>
            Get value as byte[], will only succeed if value was created
            using Set(string key, byte[] value)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetBytes(System.String,System.Byte[])">
            <summary>
            Get value as byte[], will return defaultValue unless
            value was created using Set(string key, byte[] value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetBool(System.String,System.Boolean@)">
            <summary>
            Get value as bool, will only succeed if value was created using Set(string key, bool value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetBool(System.String)">
            <summary>
            Get value as bool, will only succeed if value was created using Set(string key, bool value)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetBool(System.String,System.Boolean)">
            <summary>
            Get value as bool, will return defaultValue unless value was created using Set(string key, bool value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetFloat(System.String,System.Single@)">
            <summary>
            Get value as float, will only succeed if value was created using Set(string key, float value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetFloat(System.String)">
            <summary>
            Get value as float, will only succeed if value was created using Set(string key, float value)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetFloat(System.String,System.Single)">
            <summary>
            Get value as float, will return defaultValue unless value was created using Set(string key, float value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetDouble(System.String,System.Double@)">
            <summary>
            Get value as double, will only succeed if value was created using Set(string key, double value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetDouble(System.String)">
            <summary>
            Get value as double, will only succeed if value was created using Set(string key, double value)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetDouble(System.String,System.Double)">
            <summary>
            Get value as double, will only succeed if value was created using Set(string key, double value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetInteger(System.String,System.Int32)">
            <summary>
            Get value as int, will return defaultValue unless value was created using Set(string key, int value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetInteger(System.String,System.Int32@)">
            <summary>
            Get value as int, will only succeed if value was created using Set(string key, int value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetInteger(System.String)">
            <summary>
            Get value as int, will only succeed if value was created using Set(string key, int value)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Getint(System.String,System.Int32)">
            <summary>
            Get value as int, will return defaultValue unless value was created using Set(string key, int value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetPoint3f(System.String,Rhino.Geometry.Point3f@)">
            <summary>
            Get value as Point3f, will only succeed if value was created using Set(string key, Point3f value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetPoint3f(System.String)">
            <summary>
            Get value as Point3f, will only succeed if value was created using Set(string key, Point3f value)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetPoint3f(System.String,Rhino.Geometry.Point3f)">
            <summary>
            Get value as Point3f, will return defaultValue unless value was created using Set(string key, Point3f value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetPoint3d(System.String,Rhino.Geometry.Point3d@)">
            <summary>
            Get value as Point3d, will only succeed if value was created using Set(string key, Point3d value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetPoint3d(System.String)">
            <summary>
            Get value as Point3d, will only succeed if value was created using Set(string key, Point3d value)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetPoint3d(System.String,Rhino.Geometry.Point3d)">
            <summary>
            Get value as Point3d, will return defaultValue unless value was created using Set(string key, Point3d value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetVector3d(System.String,Rhino.Geometry.Vector3d@)">
            <summary>
            Get value as Vector3d, will only succeed if value was created using Set(string key, Vector3d value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetVector3d(System.String)">
            <summary>
            Get value as Vector3d, will only succeed if value was created using Set(string key, Vector3d value)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetVector3d(System.String,Rhino.Geometry.Vector3d)">
            <summary>
            Get value as Vector3d, will return defaultValue unless value was created using Set(string key, Vector3d value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetGuid(System.String,System.Guid@)">
            <summary>
            Get value as Guid, will only succeed if value was created using Set(string key, Guid value)
            </summary>
            <param name="key"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetGuid(System.String)">
            <summary>
            Get value as Guid, will only succeed if value was created using Set(string key, Guid value)
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetGuid(System.String,System.Guid)">
            <summary>
            Get value as Guid, will return defaultValue unless value was created using Set(string key, Guid value)
            </summary>
            <param name="key"></param>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Boolean)">
            <summary>
            Sets a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.Boolean"/> value.
            <para>Because <see cref="T:System.Boolean"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para>
            </param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Byte)">
            <summary>
            Sets a <see cref="T:System.Byte"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.Byte"/>.
            <para>Because <see cref="T:System.Byte"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.SByte)">
            <summary>
            Sets a <see cref="T:System.SByte"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.SByte"/>.
            <para>Because <see cref="T:System.SByte"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Int16)">
            <summary>
            Sets a <see cref="T:System.Int16"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.Int16"/>.
            <para>Because <see cref="T:System.Int16"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.UInt16)">
            <summary>
            Sets a <see cref="T:System.UInt16"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.UInt16"/>.
            <para>Because <see cref="T:System.UInt16"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Int32)">
            <summary>
            Sets a <see cref="T:System.Int32"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.Int32"/>.
            <para>Because <see cref="T:System.Int32"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.UInt32)">
            <summary>
            Sets a <see cref="T:System.UInt32"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.UInt32"/>.
            <para>Because <see cref="T:System.UInt32"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Int64)">
            <summary>
            Sets a <see cref="T:System.Int64"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.Int64"/>.
            <para>Because <see cref="T:System.Int64"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Single)">
            <summary>
            Sets a <see cref="T:System.Single"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.Single"/>.
            <para>Because <see cref="T:System.Single"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Double)">
            <summary>
            Sets a <see cref="T:System.Double"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.Double"/>.
            <para>Because <see cref="T:System.Double"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Guid)">
            <summary>
            Sets a <see cref="T:System.Guid"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.Guid"/>.
            <para>Because <see cref="T:System.Guid"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.String)">
            <summary>
            Sets a <see cref="T:System.String"/>.
            </summary>
            <param name="key">The text key.</param>
            <param name="val">A <see cref="T:System.String"/>.
            <para>Because <see cref="T:System.String"/> is immutable, it is not possible to modify the object while it is in this dictionary.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.Boolean"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.Byte"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.SByte})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.SByte"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.Int16"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.Int32"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.Single"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.Double"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.Guid"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Sets a list, an array or any enumerable of <see cref="T:System.String"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because this interface is a reference type, changes to the assigned object <b>will modify</b> this entry inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Drawing.Color)">
            <summary>
            Sets a <see cref="T:System.Drawing.Color"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:System.Drawing.Color"/> has value semantics, changes to the
            assigning value will leave this entry unchanged.</para></param>
            <returns>true if set operation succeeded, otherwise false.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Drawing.Point)">
            <summary>
            Sets a <see cref="T:System.Drawing.Point"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:System.Drawing.Point"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Drawing.PointF)">
            <summary>
            Sets a <see cref="T:System.Drawing.PointF"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:System.Drawing.PointF"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Drawing.Rectangle)">
            <summary>
            Sets a <see cref="T:System.Drawing.Rectangle"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:System.Drawing.Rectangle"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Drawing.RectangleF)">
            <summary>
            Sets a <see cref="T:System.Drawing.RectangleF"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:System.Drawing.RectangleF"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Drawing.Size)">
            <summary>
            Sets a <see cref="T:System.Drawing.Size"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:System.Drawing.Size"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Drawing.SizeF)">
            <summary>
            Sets a <see cref="T:System.Drawing.SizeF"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:System.Drawing.SizeF"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Drawing.Font)">
            <summary>
            Sets a <see cref="T:System.Drawing.Font"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:System.Drawing.Font"/> is immutable, it is not possible to modify the object while it is in this dictionary.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Interval)">
            <summary>
            Sets an <see cref="T:Rhino.Geometry.Interval"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.Interval"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Point2d)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Point2d"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A point for that key.
            <para>Because <see cref="T:Rhino.Geometry.Point2d"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Point3d)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Point3d"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A point for that key.
            <para>Because <see cref="T:Rhino.Geometry.Point3d"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Point4d)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Point4d"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.Point4d"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Vector2d)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Vector2d"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.Vector2d"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Vector3d)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Vector3d"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.Vector3d"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.BoundingBox)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.BoundingBox"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.BoundingBox"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Ray3d)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Ray3d"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.Ray3d"/> has value semantics and is immutable, no changes to this object are possible.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Transform)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Transform"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A transform for that key.
            <para>Because <see cref="T:Rhino.Geometry.Transform"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Plane)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Plane"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A plane for that key.
            <para>Because <see cref="T:Rhino.Geometry.Plane"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Line)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Line"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.Line"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Point3f)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Point3f"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.Point3f"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.Vector3f)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.Vector3f"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A value for that key.
            <para>Because <see cref="T:Rhino.Geometry.Vector3f"/> has value semantics, changes to the assigning value will leave this entry unchanged.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Collections.ArchivableDictionary)">
            <summary>
            Sets another <see cref="T:Rhino.Collections.ArchivableDictionary"/> as entry in this dictionary.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">An object for that key.
            <para>Because this class is a reference type and is mutable, changes to this object <b>will propagate</b> to the object inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.MeshingParameters)">
            <summary>
            Sets a <see cref="T:Rhino.Geometry.MeshingParameters"/>.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">An object for that key.
            <para>Because this class is a reference type and is mutable, changes to this object <b>will propagate</b> to the object inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.Geometry.GeometryBase)">
            <summary>
            Sets any class deriving from the <see cref="T:Rhino.Geometry.GeometryBase"/> base class.
            </summary>
            <param name="key">A text key.</param>
            <param name="val">A geometry object for that key.
            <para>Because this class is a reference type and is mutable, changes to this object <b>will propagate</b> to the object inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate. You can use <see cref="M:Rhino.Geometry.GeometryBase.Duplicate"/> for this.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,Rhino.DocObjects.ObjRef)">
            <summary>
            Sets a <see cref="T:Rhino.DocObjects.ObjRef"/>
            </summary>
            <param name="key">A text key</param>
            <param name="val">An object for that key
            <para>Because this class is a reference type and is mutable, changes to this object <b>will propagate</b> to the object inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Set(System.String,System.Collections.Generic.IEnumerable{Rhino.DocObjects.ObjRef})">
            <summary>
            Sets an array of <see cref="T:Rhino.DocObjects.ObjRef"/>
            </summary>
            <param name="key">A text key</param>
            <param name="val">An object for that key
            <para>Because this class is a reference type and is mutable, changes to this object <b>will propagate</b> to the object inside the dictionary.</para>
            <para>It is up to the user to clone this entry when appropriate.</para></param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.SetEnumValue``1(``0)">
            <summary>
            Set an enum value
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.SetEnumValue``1(System.String,``0)">
            <summary>
            Set an enum value in the dictionary with a custom key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetEnumValue``1">
            <summary>
            Get an enum value
            </summary>
            <typeparam name="T"></typeparam>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the key is not found in the dictionary.</exception>
            <exception cref="T:System.FormatException">Thrown when the string retrieved from the dictionary is not convertible to the enum type.</exception>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetEnumValue``1(System.String)">
            <summary>
            Get an enum value from the dictionary using a custom key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">Thrown when the key is not found in the dictionary.</exception>
            <exception cref="T:System.FormatException">Thrown when the string retrieved from the dictionary is not convertible to the enum type.</exception>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.TryGetEnumValue``1(System.String,``0@)">
            <summary>
            Attempt to get an enum value from the dictionary using a custom key.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"></param>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.RemoveEnumValue``1">
            <summary>
            Remmove an enum value from the dictionary.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.AddContentsFrom(Rhino.Collections.ArchivableDictionary)">
            <summary>
            Add the contents from the source dictionary.
            </summary>
            <param name="source"></param>
            <returns></returns>
            <exception cref="T:System.ArgumentException"></exception>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.ReplaceContentsWith(Rhino.Collections.ArchivableDictionary)">
            <summary>
            Replace the contents of the dictionary with that of the given source dictionary.
            </summary>
            <param name="source"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.Clone">
            <summary>
            Constructs a deep copy of this object.
            </summary>
            <returns>The copy of this object.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.System#Collections#Generic#IDictionary{System#String@System#Object}#Add(System.String,System.Object)">
            <summary>
            This is not supported and always throws <see cref="T:System.NotSupportedException"/> at the moment.
            </summary>
            <param name="key">Unused.</param>
            <param name="value">Unused.</param>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.GetEnumerator">
            <summary>
            Gets the enumerator of this dictionary.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/>, where T is an instance of <see cref="T:System.Collections.Generic.KeyValuePair`2"/>, with T0 set as string, and T1 as Syste.Object.</returns>
        </member>
        <member name="M:Rhino.Collections.ArchivableDictionary.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Gets the enumerator of this dictionary.
            </summary>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerator`1"/>, where T is an instance of <see cref="T:System.Collections.Generic.KeyValuePair`2"/>, with T0 set as string, and T1 as Syste.Object.</returns>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.Version">
            <summary>
            Gets or sets the version of this <see cref="T:Rhino.Collections.ArchivableDictionary"/>.
            </summary>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.Name">
            <summary>
            Gets or sets the name string of this <see cref="T:Rhino.Collections.ArchivableDictionary"/>.
            </summary>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.ParentUserData">
            <summary>
            If this dictionary is part of userdata (or is a UserDictionary), then
            this is the parent user data. null if this dictionary is not part of
            userdata
            </summary>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.Keys">
            <summary>Gets all entry names or keys.</summary>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.Values">
            <summary>Gets all values in this dictionary.</summary>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.Item(System.String)">
            <summary>
            Gets the value associated with the specified key.
            </summary>
            <param name="key">The key of the value to get or set.</param>
            <returns>
            The value associated with the specified key. If the specified key is not
            found, a get operation throws a <see cref="T:System.Collections.Generic.KeyNotFoundException"/>.
            </returns>
            <exception cref="T:System.ArgumentNullException">If the key is null.</exception>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException">If the key is not found.</exception>
        </member>
        <member name="P:Rhino.Collections.ArchivableDictionary.Count">
            <summary>
            Gets the number of key/value pairs contained in the dictionary.
            </summary>
        </member>
        <member name="T:Rhino.FileIO.BinaryArchiveException">
            <summary>
            Thrown by BinaryArchiveReader and BinaryArchiveWriter classes when
            an IO error has occured.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.FileIO.BinaryArchiveException"/> class.
            </summary>
            <param name="message">The inner message to show to users.</param>
        </member>
        <member name="T:Rhino.FileIO.BinaryArchiveWriter">
            <summary>
            Represents an entity that is able to write data to an archive.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.Write3dmChunkVersion(System.Int32,System.Int32)">
            <summary>
            A chunk version is a single byte that encodes a major.minor
            version number.  Useful when creating I/O code for 3dm chunks
            that may change in the future.  Increment the minor version 
            number if new information is added to the end of the chunk. 
            Increment the major version if the format of the chunk changes
            in some other way.
            </summary>
            <param name="major">0 to 15.</param>
            <param name="minor">0 to 16.</param>
            <returns>true on successful read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteDictionary(Rhino.Collections.ArchivableDictionary)">
            <summary>
            Delivers the complete content of a dictionary to the archive.
            </summary>
            <param name="dictionary">A dictionary to archive.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteBool(System.Boolean)">
            <summary>
            Writes a <see cref="T:System.Boolean"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteByte(System.Byte)">
            <summary>
            Writes a <see cref="T:System.Byte"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteSByte(System.SByte)">
            <summary>
            Writes a <see cref="T:System.SByte"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteShort(System.Int16)">
            <summary>
            Writes a <see cref="T:System.Int16"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteUShort(System.UInt16)">
            <summary>
            Writes a <see cref="T:System.UInt16"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteInt(System.Int32)">
            <summary>
            Writes a <see cref="T:System.Int32"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteUInt(System.UInt32)">
            <summary>
            Writes a <see cref="T:System.UInt32"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteInt64(System.Int64)">
            <summary>
            Writes a <see cref="T:System.Int64"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteSingle(System.Single)">
            <summary>
            Writes a <see cref="T:System.Single"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteDouble(System.Double)">
            <summary>
            Writes a <see cref="T:System.Double"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteGuid(System.Guid)">
            <summary>
            Writes a <see cref="T:System.Guid"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteString(System.String)">
            <summary>
            Writes a <see cref="T:System.String"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteBoolArray(System.Collections.Generic.IEnumerable{System.Boolean})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.Boolean"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteByteArray(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.Byte"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteCompressedBuffer(System.Collections.Generic.IEnumerable{System.Byte})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.Byte"/> to the archive as a compressed buffer.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteSByteArray(System.Collections.Generic.IEnumerable{System.SByte})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.SByte"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteShortArray(System.Collections.Generic.IEnumerable{System.Int16})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.Int16"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteIntArray(System.Collections.Generic.IEnumerable{System.Int32})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.Int32"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteSingleArray(System.Collections.Generic.IEnumerable{System.Single})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.Single"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteDoubleArray(System.Collections.Generic.IEnumerable{System.Double})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.Double"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteGuidArray(System.Collections.Generic.IEnumerable{System.Guid})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.Guid"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteStringArray(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:System.String"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteColor(System.Drawing.Color)">
            <summary>
            Writes a <see cref="T:System.Drawing.Color"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WritePoint(System.Drawing.Point)">
            <summary>
            Writes a <see cref="T:System.Drawing.Point"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WritePointF(System.Drawing.PointF)">
            <summary>
            Writes a <see cref="T:System.Drawing.PointF"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteRectangle(System.Drawing.Rectangle)">
            <summary>
            Writes a <see cref="T:System.Drawing.Rectangle"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteRectangleF(System.Drawing.RectangleF)">
            <summary>
            Writes a <see cref="T:System.Drawing.RectangleF"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteSize(System.Drawing.Size)">
            <summary>
            Writes a <see cref="T:System.Drawing.Size"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteSizeF(System.Drawing.SizeF)">
            <summary>
            Writes a <see cref="T:System.Drawing.SizeF"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteFont(System.Drawing.Font)">
            <summary>
            Writes a <see cref="T:System.Drawing.Font"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteObjRef(Rhino.DocObjects.ObjRef)">
            <summary>
            Writes a <see cref="T:Rhino.DocObjects.ObjRef"/> to the archive
            </summary>
            <returns>the element that was read</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteObjRefArray(System.Collections.Generic.IEnumerable{Rhino.DocObjects.ObjRef})">
            <summary>
            Writes a list, an array, or any enumerable of <see cref="T:Rhino.DocObjects.ObjRef"/> to the archive.
            <para>The return will always be an array.</para>
            </summary>
            <param name="objrefs">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteInterval(Rhino.Geometry.Interval)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Interval"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WritePoint2d(Rhino.Geometry.Point2d)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Point2d"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WritePoint3d(Rhino.Geometry.Point3d)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Point3d"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WritePoint4d(Rhino.Geometry.Point4d)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Point4d"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteVector2d(Rhino.Geometry.Vector2d)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Vector2d"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteVector3d(Rhino.Geometry.Vector3d)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Vector3d"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteBoundingBox(Rhino.Geometry.BoundingBox)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.BoundingBox"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteRay3d(Rhino.Geometry.Ray3d)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Ray3d"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteTransform(Rhino.Geometry.Transform)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Transform"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WritePlane(Rhino.Geometry.Plane)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Plane"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteLine(Rhino.Geometry.Line)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Line"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WritePoint3f(Rhino.Geometry.Point3f)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Point3f"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteVector3f(Rhino.Geometry.Vector3f)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.Vector3f"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteMeshingParameters(Rhino.Geometry.MeshingParameters)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.MeshingParameters"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveWriter.WriteGeometry(Rhino.Geometry.GeometryBase)">
            <summary>
            Writes a <see cref="T:Rhino.Geometry.GeometryBase"/> value to the archive.
            </summary>
            <param name="value">A value to write.</param>
        </member>
        <member name="P:Rhino.FileIO.BinaryArchiveWriter.WriteErrorOccured">
            <summary>
            Gets or sets whether an error occurred.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.BinaryArchiveWriter.Archive3dmVersion">
            <summary>
            If a 3dm archive is being read or written, then this is the
            version of the 3dm archive format (1, 2, 3, 4 or 5).
            0     a 3dm archive is not being read/written
            1     a version 1 3dm archive is being read/written
            2     a version 2 3dm archive is being read/written
            3     a version 3 3dm archive is being read/written
            4     a version 4 3dm archive is being read/written
            5     an old version 5 3dm archive is being read
            50    a version 5 3dm archive is being read/written.
            </summary>
        </member>
        <member name="T:Rhino.FileIO.BinaryArchiveReader">
            <summary>
            Represents an entity that is capable of reading a binary archive and
            instantiating strongly-typed objects.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.Read3dmChunkVersion(System.Int32@,System.Int32@)">
            <summary>
            A chunk version is a single byte that encodes a major.minor
            version number.  Useful when creating I/O code for 3dm chunks
            that may change in the future.  Increment the minor version 
            number if new information is added to the end of the chunk. 
            Increment the major version if the format of the chunk changes
            in some other way.
            </summary>
            <param name="major">0 to 15.</param>
            <param name="minor">0 to 16.</param>
            <returns>true on successful read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadDictionary">
            <summary>
            Reads a complete <see cref="T:Rhino.Collections.ArchivableDictionary"/> from the archive.
            </summary>
            <returns>The newly instantiated object.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadBool">
            <summary>
            Reads a <see cref="T:System.Boolean"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadByte">
            <summary>
            Reads a <see cref="T:System.Byte"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadSByte">
            <summary>
            Reads a <see cref="T:System.SByte"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadShort">
            <summary>
            Reads a <see cref="T:System.Int16"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadUShort">
            <summary>
            Reads a <see cref="T:System.UInt16"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadInt">
            <summary>
            Reads a <see cref="T:System.Int32"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadUInt">
            <summary>
            Reads a <see cref="T:System.UInt32"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadInt64">
            <summary>
            Reads a <see cref="T:System.Int64"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadSingle">
            <summary>
            Reads a <see cref="T:System.Single"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadDouble">
            <summary>
            Reads a <see cref="T:System.Double"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadGuid">
            <summary>
            Reads a <see cref="T:System.Guid"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadString">
            <summary>
            Reads a <see cref="T:System.String"/> from the archive.
            </summary>
            <returns>The value that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadBoolArray">
            <summary>
            Reads an array of <see cref="T:System.Boolean"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadByteArray">
            <summary>
            Reads an array of <see cref="T:System.Byte"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadCompressedBuffer">
            <summary>
            Reads an array of compressed <see cref="T:System.Byte"/> information from the archive and uncompresses it.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadSByteArray">
            <summary>
            Reads an array of <see cref="T:System.SByte"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadShortArray">
            <summary>
            Reads an array of <see cref="T:System.Int16"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadIntArray">
            <summary>
            Reads an array of <see cref="T:System.Int32"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadSingleArray">
            <summary>
            Reads an array of <see cref="T:System.Single"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadDoubleArray">
            <summary>
            Reads an array of <see cref="T:System.Double"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadGuidArray">
            <summary>
            Reads an array of <see cref="T:System.Guid"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadStringArray">
            <summary>
            Reads an array of <see cref="T:System.String"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadColor">
            <summary>
            Reads a <see cref="T:System.Drawing.Color"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadPoint">
            <summary>
            Reads a <see cref="T:System.Drawing.Point"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadPointF">
            <summary>
            Reads a <see cref="T:System.Drawing.PointF"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadRectangle">
            <summary>
            Reads a <see cref="T:System.Drawing.Rectangle"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadRectangleF">
            <summary>
            Reads a <see cref="T:System.Drawing.RectangleF"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadSize">
            <summary>
            Reads a <see cref="T:System.Drawing.Size"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadSizeF">
            <summary>
            Reads a <see cref="T:System.Drawing.SizeF"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadFont">
            <summary>
            Reads a <see cref="T:System.Drawing.Font"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadObjRef">
            <summary>
            Reads a <see cref="T:Rhino.DocObjects.ObjRef"/> from the archive
            </summary>
            <returns>the element that was read</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadObjRefArray">
            <summary>
            Reads an array of <see cref="T:System.Double"/> from the archive.
            <para>An array is returned even if the input was another enumerable type.</para>
            </summary>
            <returns>The array that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadInterval">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Interval"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadPoint2d">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Point2d"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadPoint3d">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Point3d"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadPoint4d">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Point4d"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadVector2d">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Vector2d"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadVector3d">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Vector3d"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadBoundingBox">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.BoundingBox"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadRay3d">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Ray3d"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadTransform">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Transform"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadPlane">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Plane"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadLine">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Line"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadPoint3f">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Point3f"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadVector3f">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.Vector3f"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadMeshingParameters">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.MeshingParameters"/> from the archive.
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.ReadGeometry">
            <summary>
            Reads a <see cref="T:Rhino.Geometry.GeometryBase"/>-derived object from the archive.
            <para>The <see cref="T:Rhino.Geometry.GeometryBase"/> class is abstract.</para>
            </summary>
            <returns>The element that was read.</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.Read3dmStartSection(System.Int32@,System.String@)">
            <summary>
            
            </summary>
            <param name="version">.3dm file version (2, 3, 4, 5 or 50)</param>
            <param name="comment">
            String with application name, et cetera.  This information is primarily
            used when debugging files that contain problems.  McNeel and Associates
            stores application name, application version, compile date, and the OS
            in use when file was written.
            </param>
            <returns>true on success</returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.Dump3dmChunk(Rhino.FileIO.TextLog)">
            <summary>
            Fnction for studying contents of a file.  The primary use is as an aid
            to help dig through files that have been damaged (bad disks, transmission
            errors, etc.) If an error is found, a line that begins with the word
            "ERROR" is printed.
            </summary>
            <param name="log">log where information is printed to</param>
            <returns>
            0 if something went wrong, otherwise the typecode of the chunk that
            was just studied.
            </returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.AtEnd">
            <summary>
            true if at end of a file
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveReader.BeginReadDictionaryEntry(System.Int32@,System.String@)">
            <summary>See return.</summary>
            <returns>
            0: serious IO error
            1: success
            read information and then call EndReadDictionaryEntry()
            2: at end of dictionary.
            </returns>
        </member>
        <member name="P:Rhino.FileIO.BinaryArchiveReader.ReadErrorOccured">
            <summary>
            Gets or sets whether en error occurred during reading.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.BinaryArchiveReader.Archive3dmVersion">
            <summary>
            If a 3dm archive is being read or written, then this is the
            version of the 3dm archive format (1, 2, 3, 4 or 5).
            0     a 3dm archive is not being read/written
            1     a version 1 3dm archive is being read/written
            2     a version 2 3dm archive is being read/written
            3     a version 3 3dm archive is being read/written
            4     a version 4 3dm archive is being read/written
            5     an old version 5 3dm archive is being read
            50    a version 5 3dm archive is being read/written.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveFile.Finalize">
            <summary>
            Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().
            </summary>
        </member>
        <member name="M:Rhino.FileIO.BinaryArchiveFile.Dispose">
            <summary>
            Actively reclaims unmanaged resources that this instance uses.
            </summary>
        </member>
        <member name="T:Rhino.FileIO.SerializationOptions">
            <summary>
            Contains options for serializing -or storing- data,
            such as Rhino version and user data.
            </summary>
        </member>
        <member name="M:Rhino.FileIO.SerializationOptions.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.FileIO.SerializationOptions"/> class.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.SerializationOptions.RhinoVersion">
            <summary>
            Gets or sets a value indicating the Rhino version.
            </summary>
        </member>
        <member name="P:Rhino.FileIO.SerializationOptions.WriteUserData">
            <summary>
            Gets or sets a value indicating whether to write user data.
            </summary>
        </member>
        <member name="T:Rhino.Input.GetBoxMode">
            <summary>
            Enumerates all Box getter modes.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetBoxMode.All">
            <summary>
            All modes are allowed.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetBoxMode.Corner">
            <summary>
            The base rectangle is created by picking the two corner points.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetBoxMode.ThreePoint">
            <summary>
            The base rectangle is created by picking three points.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetBoxMode.Vertical">
            <summary>
            The base vertical rectangle is created by picking three points.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetBoxMode.Center">
            <summary>
            The base rectangle is created by picking a center point and a corner point.
            </summary>
        </member>
        <member name="T:Rhino.Input.RhinoGet">
            <summary>
            Base class for GetObject, GetPoint, GetSphere, etc.
            
            You will never directly create a RhinoGet but you will use its member
            functions after calling GetObject::GetObjects(), GetPoint::GetPoint(), and so on.
            
            Provides tools to set command prompt, set command options, and specify
            if the "get" can optionally accept numbers, nothing (pressing enter),
            and undo.
            </summary>
        </member>
        <member name="M:Rhino.Input.RhinoGet.InGet(Rhino.RhinoDoc)">
            <summary>
            Returns true if the document is current in a "Get" operation.
            </summary>
            <returns>true if a getter is currently active.</returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetPoint(System.String,System.Boolean,Rhino.Geometry.Point3d@)">
            <summary>
            Gets a point coordinate from the document.
            </summary>
            <param name="prompt">Prompt to display in command line during the operation.</param>
            <param name="acceptNothing">if true, the user can press enter.</param>
            <param name="point">point value returned here.</param>
            <returns>
            Commands.Result.Success - got point
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel point getting.
            </returns>
            <remarks>
            If you need options or more advanced user interface, then use GetPoint class.
            </remarks>
            <example>
            <code source='examples\vbnet\ex_addnamedview.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnamedview.cs' lang='cs'/>
            <code source='examples\py\ex_addnamedview.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetPointOnMesh(System.Guid,System.String,System.Boolean,Rhino.Geometry.Point3d@)">
            <summary>
            Gets a point constrained to an existing mesh in the document.
            </summary>
            <param name="meshObjectId">An ID of a mesh in the document.</param>
            <param name="prompt">Text prompt.</param>
            <param name="acceptNothing">true if nothing else should be accepted.</param>
            <param name="point">A point value will be assigned to this out parameter during this call.</param>
            <returns>A command result based on user choice.</returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetPointOnMesh(Rhino.DocObjects.MeshObject,System.String,System.Boolean,Rhino.Geometry.Point3d@)">
            <summary>
            Gets a point constrained to an existing mesh in the document.
            </summary>
            <param name="meshObject">An mesh object in the document.</param>
            <param name="prompt">Text prompt.</param>
            <param name="acceptNothing">true if nothing else should be accepted.</param>
            <param name="point">A point value will be assigned to this out parameter during this call.</param>
            <returns>The command result based on user choice.</returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetColor(System.String,System.Boolean,System.Drawing.Color@)">
            <summary>Easy to use color getter.</summary>
            <param name="prompt">Command prompt.</param>
            <param name="acceptNothing">If true, the user can press enter.</param>
            <param name="color">Color value returned here. also used as default color.</param>
            <returns>
            <para>Commands.Result.Success - got color.</para>
            <para>Commands.Result.Nothing - user pressed enter.</para>
            <para>Commands.Result.Cancel - user cancel color getting.</para>
            </returns>
            <remarks>
            If you need options or more advanced user interface, then use GetColor class.
            </remarks>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetOneObject(System.String,System.Boolean,Rhino.DocObjects.ObjectType,Rhino.DocObjects.ObjRef@)">
            <summary>Easy to use object getter.</summary>
            <param name="prompt">command prompt.</param>
            <param name="acceptNothing">if true, the user can press enter.</param>
            <param name="filter">geometry filter to use when getting objects.</param>
            <param name="rhObject">result of the get. may be null.</param>
            <returns>
            Commands.Result.Success - got object
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel object getting.
            </returns>
            <remarks>
            If you need options or more advanced user interface, then use GetObject class.
            </remarks>
            <example>
            <code source='examples\vbnet\ex_dividebylength.vb' lang='vbnet'/>
            <code source='examples\cs\ex_dividebylength.cs' lang='cs'/>
            <code source='examples\py\ex_dividebylength.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetOneObject(System.String,System.Boolean,Rhino.Input.Custom.GetObjectGeometryFilter,Rhino.DocObjects.ObjRef@)">
            <summary>Easy to use object getter.</summary>
            <param name="prompt">command prompt.</param>
            <param name="acceptNothing">if true, the user can press enter.</param>
            <param name="filter">geometry filter to use when getting objects.</param>
            <param name="objref">result of the get. may be null.</param>
            <returns>
            Commands.Result.Success - got object
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel object getting.
            </returns>
            <remarks>
            If you need options or more advanced user interface, then use GetObject class.
            </remarks>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetMultipleObjects(System.String,System.Boolean,Rhino.DocObjects.ObjectType,Rhino.DocObjects.ObjRef[]@)">
            <summary>Easy to use object getter for getting multiple objects.</summary>
            <param name="prompt">command prompt.</param>
            <param name="acceptNothing">if true, the user can press enter.</param>
            <param name="filter">geometry filter to use when getting objects.</param>
            <param name="rhObjects">result of the get. may be null.</param>
            <returns>
            Commands.Result.Success - got object
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel object getting.
            </returns>
            <remarks>
            If you need options or more advanced user interface, then use GetObject class.
            </remarks>
            <example>
            <code source='examples\vbnet\ex_booleandifference.vb' lang='vbnet'/>
            <code source='examples\cs\ex_booleandifference.cs' lang='cs'/>
            <code source='examples\py\ex_booleandifference.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetMultipleObjects(System.String,System.Boolean,Rhino.Input.Custom.GetObjectGeometryFilter,Rhino.DocObjects.ObjRef[]@)">
            <summary>Easy to use object getter for getting multiple objects.</summary>
            <param name="prompt">command prompt.</param>
            <param name="acceptNothing">if true, the user can press enter.</param>
            <param name="filter">geometry filter to use when getting objects.</param>
            <param name="rhObjects">result of the get. may be null.</param>
            <returns>
            Commands.Result.Success - got object
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel object getting.
            </returns>
            <remarks>
            If you need options or more advanced user interface, then use GetObject class.
            </remarks>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetString(System.String,System.Boolean,System.String@)">
            <summary>Easy to use string getter.</summary>
            <param name="prompt">command prompt.</param>
            <param name="acceptNothing">if true, the user can press enter.</param>
            <param name="outputString">default string set to this value and string value returned here.</param>
            <returns>
            Commands.Result.Success - got string
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel string getting.
            </returns>
            <remarks>
            If you need options or more advanced user interface, then use GetString class.
            </remarks>
            <example>
            <code source='examples\vbnet\ex_addnamedview.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnamedview.cs' lang='cs'/>
            <code source='examples\py\ex_addnamedview.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetBool(System.String,System.Boolean,System.String,System.String,System.Boolean@)">
            <summary>Easy to use bool getter.</summary>
            <param name="prompt">Command prompt.</param>
            <param name="acceptNothing">If true, the user can press enter.</param>
            <param name="offPrompt">The 'false/off' message.</param>
            <param name="onPrompt">The 'true/on' message.</param>
            <param name="boolValue">Default bool value set to this and returned here.</param>
            <returns>The getter result based on user choice.
            <para>Commands.Result.Success - got value.</para>
            <para>Commands.Result.Nothing - user pressed enter.</para>
            <para>Commands.Result.Cancel - user cancelled value getting.</para>
            </returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetNumber(System.String,System.Boolean,System.Double@,System.Double,System.Double)">
            <summary>
            Easy to use number getter.
            </summary>
            <param name="prompt">The command prompt.</param>
            <param name="acceptNothing">If true, the user can press Enter.</param>
            <param name="outputNumber">
            Default number is set to this value and the return number value is assigned to this variable during the call.
            </param>
            <param name="lowerLimit">The minimum allowed value.</param>
            <param name="upperLimit">The maximum allowed value.</param>
            <returns>
            <para>Commands.Result.Success - got number.</para>
            <para>Commands.Result.Nothing - user pressed enter.</para>
            <para>Commands.Result.Cancel - user cancel number getting.</para>
            </returns>
            <example>
            <code source='examples\vbnet\ex_dividebylength.vb' lang='vbnet'/>
            <code source='examples\cs\ex_dividebylength.cs' lang='cs'/>
            <code source='examples\py\ex_dividebylength.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetNumber(System.String,System.Boolean,System.Double@)">
            <summary>
            Easy to use number getter.
            </summary>
            <param name="prompt">command prompt.</param>
            <param name="acceptNothing">if true, the user can press enter.</param>
            <param name="outputNumber">
            default number is set to this value and number value returned here.
            </param>
            <returns>
            Commands.Result.Success - got number
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel number getting.
            </returns>
            <example>
            <code source='examples\vbnet\ex_dividebylength.vb' lang='vbnet'/>
            <code source='examples\cs\ex_dividebylength.cs' lang='cs'/>
            <code source='examples\py\ex_dividebylength.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetInteger(System.String,System.Boolean,System.Int32@)">
            <summary>
            Easy to use number getter.
            </summary>
            <param name="prompt">command prompt.</param>
            <param name="acceptNothing">if true, the user can press enter.</param>
            <param name="outputNumber">
            default number is set to this value and number value returned here.
            </param>
            <returns>
            Commands.Result.Success - got number
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel number getting.
            </returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetInteger(System.String,System.Boolean,System.Int32@,System.Int32,System.Int32)">
            <summary>
            Easy to use number getter.
            </summary>
            <param name="prompt">The command prompt.</param>
            <param name="acceptNothing">If true, the user can press enter.</param>
            <param name="outputNumber">
            default number is set to this value and number value returned here.
            </param>
            <param name="lowerLimit">The minimum allowed value.</param>
            <param name="upperLimit">The maximum allowed value.</param>
            <returns>
            Commands.Result.Success - got number
            Commands.Result.Nothing - user pressed enter
            Commands.Result.Cancel - user cancel number getting.
            </returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetPlane(Rhino.Geometry.Plane@)">
            <summary>
            Gets an oriented infinite plane.
            </summary>
            <param name="plane">The plane result.</param>
            <returns>
            <para>Commands.Result.Success - got plane.</para>
            <para>Commands.Result.Nothing - user pressed enter.</para>
            <para>Commands.Result.Cancel - user cancel number getting.</para>
            </returns>
            <example>
            <code source='examples\vbnet\ex_splitbrepwithplane.vb' lang='vbnet'/>
            <code source='examples\cs\ex_splitbrepwithplane.cs' lang='cs'/>
            <code source='examples\py\ex_splitbrepwithplane.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetRectangle(Rhino.Geometry.Point3d[]@)">
            <summary>
            Gets a 3d rectangle.
            </summary>
            <param name="corners">corners of the rectangle in counter-clockwise order.</param>
            <returns>Commands.Result.Success if successful.</returns>
            <example>
            <code source='examples\vbnet\ex_addclippingplane.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addclippingplane.cs' lang='cs'/>
            <code source='examples\py\ex_addclippingplane.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetRectangle(Rhino.Input.GetBoxMode,Rhino.Geometry.Point3d,System.Collections.Generic.IEnumerable{System.String},Rhino.Geometry.Point3d[]@)">
            <summary>
            Gets a 3d rectangle made up of four points.
            </summary>
            <param name="mode">A get box mode.</param>
            <param name="firstPoint">The first corner used. Pass Point3d.Unset if you do not want to set this.</param>
            <param name="prompts">Optional prompts to display while getting points. May be null.</param>
            <param name="corners">Corners of the rectangle in counter-clockwise order will be assigned to this out parameter during this call.</param>
            <returns>Commands.Result.Success if successful.</returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.Get2dRectangle(System.Boolean,System.Drawing.Rectangle@,Rhino.Display.RhinoView@)">
            <summary>
            Gets a rectangle in view window coordinates.
            </summary>
            <param name="solidPen">
            If true, a solid pen is used for drawing while the user selects a rectangle.
            If false, a dotted pen is used for drawing while the user selects a rectangle.
            </param>
            <param name="rectangle">
            user selected rectangle in window coordinates.
            </param>
            <param name="rectView">
            view that the user selected the window in.
            </param>
            <returns>Success or Cancel.</returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetBox(Rhino.Geometry.Box@)">
            <summary>
            Asks the user to select a Box in the viewport.
            </summary>
            <param name="box">If the result is Success, this parameter will be filled out.</param>
            <returns>Commands.Result.Success if successful.</returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetBox(Rhino.Geometry.Box@,Rhino.Input.GetBoxMode,Rhino.Geometry.Point3d,System.String,System.String,System.String)">
            <summary>
            Asks the user to select a Box in the viewport.
            </summary>
            <param name="box">If the result is Success, this parameter will be filled out.</param>
            <param name="mode">A particular "get box" mode, or <see cref="F:Rhino.Input.GetBoxMode.All"/>.</param>
            <param name="basePoint">Optional base point. Supply Point3d.Unset if you don't want to use this.</param>
            <param name="prompt1">Optional first prompt. Supply null to use the default prompt.</param>
            <param name="prompt2">Optional second prompt. Supply null to use the default prompt.</param>
            <param name="prompt3">Optional third prompt. Supply null to use the default prompt.</param>
            <returns>Commands.Result.Success if successful.</returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetLinearDimension(Rhino.Geometry.LinearDimension@)">
            <example>
            <code source='examples\vbnet\ex_addlineardimension.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlineardimension.cs' lang='cs'/>
            <code source='examples\py\ex_addlineardimension.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetView(System.String,Rhino.Display.RhinoView@)">
            <summary>
            Allows the user to interactively pick a viewport.
            </summary>
            <param name="commandPrompt">The command prompt during the request.</param>
            <param name="view">The view that the user picked.
            <para>If the operation is successful, then this out parameter is assigned the correct view during this call.</para>
            </param>
            <returns>The result based on user choice.</returns>
            <example>
            <code source='examples\vbnet\ex_addnamedview.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnamedview.cs' lang='cs'/>
            <code source='examples\py\ex_addnamedview.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetAngle(System.String,Rhino.Geometry.Point3d,Rhino.Geometry.Point3d,System.Double,System.Double@)">
            <summary>
            Allows user to interactively pick an angle
            </summary>
            <param name="commandPrompt">if null, a default prompt will be displayed</param>
            <param name="basePoint"></param>
            <param name="referencePoint"></param>
            <param name="defaultAngleRadians"></param>
            <param name="angleRadians"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.Input.RhinoGet.GetFileName(Rhino.Input.Custom.GetFileNameMode,System.String,System.String,System.Windows.Forms.IWin32Window)">
            <example>
            <code source='examples\vbnet\ex_extractthumbnail.vb' lang='vbnet'/>
            <code source='examples\cs\ex_extractthumbnail.cs' lang='cs'/>
            <code source='examples\py\ex_extractthumbnail.py' lang='py'/>
            </example>
        </member>
        <member name="T:Rhino.Input.GetResult">
            <summary>
            Possible results from GetObject.Get(), GetPoint.Get(), etc...
            </summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Cancel">
            <summary>User wants to cancel current command.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Nothing">
            <summary>User pressed enter - typically used to accept defaults.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Option">
            <summary>User specified an option - call Option() to get option index.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Number">
            <summary>User entered a real number - call Number() to get value.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Color">
            <summary>User entered a color - call Color() to get value.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Undo">
            <summary>User pressed undo.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Miss">
            <summary>User clicked and missed.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Point">
            <summary>User picked 3d point - call Point() to get 3d point.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Point2d">
            <summary>
            User picked 2d window point in CRhinoGetPoint::Get2dPoint()
            call ON_2dPoint() to get the point and View() to get the view.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Line2d">
            <summary>
            User picked a 2d line in CRhinoGetPoint::Get2dLine() call Line2d()
            to get the line and View() to get the view.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Rectangle2d">
            <summary>
            User picked a 2d rectangle in CRhinoGetPoint::Get2dRectangle() call
            Rectangle2d() to get the rectangle and View() to get the view.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Object">
            <summary>User selected an object - call Object() to get object.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.String">
            <summary>User typed a string - call String() to get the string.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.CustomMessage">
            <summary>
            A custom message was posted to the RhinoGet
            </summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Timeout">
            <summary>
            The getter waited for the amount of time specifed in RhinoGet::SetWaitDuration()
            and then gave up.
            </summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Circle">
            <summary>call CRhinoGetCircle::GetCircle() to get the circle.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Plane">
            <summary>call CRhinoGetPlane::GetPlane() to get the plane.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Cylinder">
            <summary>call CRhinoGetCylinder::GetCylinder() to get the cylinder.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Sphere">
            <summary>call CRhinoGetSphere::GetSphere() to get the sphere.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Angle">
            <summary>call CRhinoGetAngle::Angle() to get the angle in radians (CRhinoGetAngle() returns this for typed number, too).</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Distance">
            <summary>call CRhinoGetDistance::Distance() to get the distance value.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Direction">
            <summary>call CRhinoGetDirection::Direction() to get the direction vector.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.Frame">
            <summary>call CRhinoGetFrame::Frame() to get the frame that was picked.</summary>
        </member>
        <member name="F:Rhino.Input.GetResult.ExitRhino">
            <summary>Stop now, do not cleaup, just return ASAP.</summary>
        </member>
        <member name="M:Rhino.Input.Custom.CommandLineOption.IsValidOptionName(System.String)">
            <summary>
            Test a string to see if it can be used as an option name in any of the RhinoGet::AddCommandOption...() functions.
            </summary>
            <param name="optionName">The string to be tested.</param>
            <returns>true if string can be used as an option name.</returns>
        </member>
        <member name="M:Rhino.Input.Custom.CommandLineOption.IsValidOptionValueName(System.String)">
            <summary>
            Test a string to see if it can be used as an option value in RhinoGet::AddCommandOption,
            RhinoGet::AddCommandOptionToggle, or RhinoGet::AddCommandOptionList.
            </summary>
            <param name="optionValue">The string to be tested.</param>
            <returns>true if string can be used as an option value.</returns>
        </member>
        <member name="P:Rhino.Input.Custom.CommandLineOption.CurrentListOptionIndex">
            <example>
            <code source='examples\vbnet\ex_commandlineoptions.vb' lang='vbnet'/>
            <code source='examples\cs\ex_commandlineoptions.cs' lang='cs'/>
            <code source='examples\py\ex_commandlineoptions.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.OptionToggle.#ctor(System.Boolean,System.String,System.String)">
            <example>
            <code source='examples\vbnet\ex_commandlineoptions.vb' lang='vbnet'/>
            <code source='examples\cs\ex_commandlineoptions.cs' lang='cs'/>
            <code source='examples\py\ex_commandlineoptions.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Input.Custom.OptionToggle.CurrentValue">
            <example>
            <code source='examples\vbnet\ex_commandlineoptions.vb' lang='vbnet'/>
            <code source='examples\cs\ex_commandlineoptions.cs' lang='cs'/>
            <code source='examples\py\ex_commandlineoptions.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.OptionDouble.#ctor(System.Double,System.Double,System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Input.Custom.OptionDouble"/> class with lower and upper limits.
            </summary>
            <param name="initialValue">The initial number .</param>
            <param name="lowerLimit">The minimum value.</param>
            <param name="upperLimit">The maximum value.</param>
            <example>
            <code source="examples\vbnet\ex_commandlineoptions.vb" lang="vbnet"/>
            <code source="examples\cs\ex_commandlineoptions.cs" lang="cs"/>
            <code source="examples\py\ex_commandlineoptions.py" lang="py"/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.OptionDouble.#ctor(System.Double,System.Boolean,System.Double)">
            <summary>
            Initializes a new instance of the double option class.
            </summary>
            <param name="initialValue">The initial number .</param>
            <param name="setLowerLimit">
            If true, limit sets the lower limit and upper limit is undefined.
            If false, limit sets the upper limit and lower limit is undefined.
            </param>
            <param name="limit">The lower limit if setLowerLimit is true; otherwise, the upper limit.</param>
        </member>
        <member name="P:Rhino.Input.Custom.OptionDouble.CurrentValue">
            <example>
            <code source='examples\vbnet\ex_commandlineoptions.vb' lang='vbnet'/>
            <code source='examples\cs\ex_commandlineoptions.cs' lang='cs'/>
            <code source='examples\py\ex_commandlineoptions.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.OptionInteger.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Input.Custom.OptionInteger"/> class wiht both lower and upper limits.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="lowerLimit">The minimum value.</param>
            <param name="upperLimit">The maximum value.</param>
            <example>
            <code source="examples\vbnet\ex_commandlineoptions.vb" lang="vbnet"/>
            <code source="examples\cs\ex_commandlineoptions.cs" lang="cs"/>
            <code source="examples\py\ex_commandlineoptions.py" lang="py"/>
            </example>
        </member>
        <member name="M:Rhino.Input.Custom.OptionInteger.#ctor(System.Int32,System.Boolean,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Input.Custom.OptionInteger"/> class.
            </summary>
            <param name="initialValue">The initial value.</param>
            <param name="setLowerLimit">
            If true, limit sets the lower limit and upper limit is undefined
            If false, limit sets the upper limit and lower limit is undefined.
            </param>
            <param name="limit">If <c>setLowerLimit</c> is true, then <c>limit</c> is the minimum value.
            Otherwise, it is the maximum.</param>
        </member>
        <member name="P:Rhino.Input.Custom.OptionInteger.CurrentValue">
            <example>
            <code source='examples\vbnet\ex_commandlineoptions.vb' lang='vbnet'/>
            <code source='examples\cs\ex_commandlineoptions.cs' lang='cs'/>
            <code source='examples\py\ex_commandlineoptions.py' lang='py'/>
            </example>
        </member>
        <member name="T:Rhino.Display.ViewCapture">
            <summary>
            Used to hold the information required to generate high resolution output
            of a RhinoViewport.  This is used for generating paper prints or image files
            </summary>
        </member>
        <member name="M:Rhino.Display.ViewCapture.Dispose">
            <summary>Actively reclaims unmanaged resources that this instance uses.</summary>
        </member>
        <member name="M:Rhino.Display.ViewCapture.Finalize">
            <summary>Passively reclaims unmanaged resources when the class user did not explicitly call Dispose().</summary>
        </member>
        <member name="P:Rhino.Display.ViewCapture.Viewport">
            <summary>
            The RhinoViewport that this view capture info is based off of.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SweepOneRail">
            <summary>
            Utility class for generating breps by sweeping cross section curves over
            a single rail curve.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.SweepOneRail.#ctor">
            <example>
            <code source='examples\vbnet\ex_sweep1.vb' lang='vbnet'/>
            <code source='examples\cs\ex_sweep1.cs' lang='cs'/>
            <code source='examples\py\ex_sweep1.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Geometry.SweepOneRail.PerformSweep(Rhino.Geometry.Curve,System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <example>
            <code source='examples\vbnet\ex_sweep1.vb' lang='vbnet'/>
            <code source='examples\cs\ex_sweep1.cs' lang='cs'/>
            <code source='examples\py\ex_sweep1.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Geometry.SweepOneRail.MiterType">
            <summary>
            0: don't miter,  1: intersect surfaces and trim sweeps,  2: rotate shapes at kinks and don't trim.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.SweepOneRail.ClosedSweep">
            <summary>
            If the input rail is closed, ClosedSweep determines if the swept breps will also
            be closed.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.SweepOneRail.GlobalShapeBlending">
            <summary>
            If true, the sweep is linearly blended from one end to the other,
            creating sweeps that taper from one cross-section curve to the other.
            If false, the sweep stays constant at the ends and changes more
            rapidly in the middle.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.SweepTwoRail">
            <summary>
            Utility class for generating breps by sweeping cross section curves over
            two rail curves.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.SweepTwoRail.ClosedSweep">
            <summary>
            If the input rails are closed, ClosedSweep determines if the swept breps
            will also be closed.
            </summary>
        </member>
        <member name="P:Rhino.UI.ToolbarFile.Path">
            <summary>Full path to this file on disk</summary>
        </member>
        <member name="P:Rhino.UI.ToolbarFileCollection.Count">
            <summary>
            Number of open toolbar files
            </summary>
        </member>
        <member name="M:Rhino.UI.RuiUpdateUi.RegisterMenuItem(System.Guid,System.Guid,System.Guid,Rhino.UI.RuiUpdateUi.UpdateMenuItemEventHandler)">
            <summary>Register menu item update delegate</summary>
            <param name="file">Menu file Id</param>
            <param name="menu">Menu Id</param>
            <param name="item">Menu item Id</param>
            <param name="callBack"></param>
            <returns>true if Registered otherwise false</returns>
        </member>
        <member name="M:Rhino.UI.RuiUpdateUi.RegisterMenuItem(System.String,System.String,System.String,Rhino.UI.RuiUpdateUi.UpdateMenuItemEventHandler)">
            <summary>Register menu item update delegate</summary>
            <param name="fileId">Menu file Id</param>
            <param name="menuId">Menu Id</param>
            <param name="itemId">Menu item Id</param>
            <param name="callBack"></param>
            <returns>true if Registered otherwise false</returns>
        </member>
        <member name="P:Rhino.UI.RuiUpdateUi.IsValid">
            <summary>Return true if initialize correctly</summary>
            <returns> true if initialize correctly</returns>
        </member>
        <member name="P:Rhino.UI.RuiUpdateUi.Enabled">
            <summary>Set to true to enable menu item or false to disable menu item</summary>
        </member>
        <member name="P:Rhino.UI.RuiUpdateUi.Checked">
            <summary>Set to true to enable menu item or false to check menu item</summary>
        </member>
        <member name="P:Rhino.UI.RuiUpdateUi.RadioChecked">
            <summary>Set to true to enable menu item or false to check menu item</summary>
        </member>
        <member name="P:Rhino.UI.RuiUpdateUi.Text">
            <summary>Menu item text</summary>
        </member>
        <member name="P:Rhino.UI.RuiUpdateUi.FileId">
            <summary>Id of the RUI file that owns this menu item</summary>
        </member>
        <member name="P:Rhino.UI.RuiUpdateUi.MenuId">
            <summary>Id of the menu that owns this menu item</summary>
        </member>
        <member name="P:Rhino.UI.RuiUpdateUi.MenuItemId">
            <summary>Id of the menu item that owns this menu item</summary>
        </member>
        <member name="P:Rhino.UI.RuiUpdateUi.MenuHandle">
            <summary>Windows menu handle of menu that contains this item</summary>
        </member>
        <member name="P:Rhino.UI.RuiUpdateUi.MenuIndex">
            <summary>Zero based index of item in the Windows menu</summary>
        </member>
        <member name="P:Rhino.UI.RuiUpdateUi.WindowsMenuItemId">
            <summary>Windows menu item ID</summary>
        </member>
        <member name="T:Rhino.UI.RuiUpdateUi.UpdateMenuItemEventHandler">
            <summary>Menu item update delegate</summary>
            <param name="sender">Unused, null</param>
            <param name="cmdui">Used to identify the menu item and modify its state</param>
            <returns></returns>
        </member>
        <member name="T:Rhino.SettingValue">
            <summary> PersistentSettings contains a dictionary of these items. </summary>
        </member>
        <member name="M:Rhino.SettingValue.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            ISerializable constructor.
            </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.SettingValue.#ctor(System.String,System.String)">
            <summary> Constructor. </summary>
            <param name="value">Current value string.</param>
            <param name="default_value">Default value string.</param>
        </member>
        <member name="M:Rhino.SettingValue.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary> ISerializable required method. </summary>
            <param name="info">Serialization data.</param>
            <param name="context">Serialization stream.</param>
        </member>
        <member name="M:Rhino.SettingValue.CopyFrom(Rhino.SettingValue)">
            <summary>
            Copies values from another SettingsValue object. If the destination contains more than one item,
            assumes it is a string list and appends values from the source object that are not currently in
            the array.
            </summary>
            <param name="source">The source settings.</param>
        </member>
        <member name="M:Rhino.SettingValue.ValuesAreEqual(Rhino.SettingValue)">
            <summary>
            Determines if two SettingsValue have the same data. Does not compare default values.
            </summary>
            <param name="other">The other value.</param>
            <returns>true if this and other setting have the same value, without comparing the default. Otherwise, false.</returns>
        </member>
        <member name="M:Rhino.SettingValue.ValuesAreEqual(Rhino.SettingValue,System.Boolean)">
            <summary>
            Determines if two SettingsValues have the same data and optionally compares default data.
            </summary>
            <param name="other">The other value.</param>
            <param name="compareDefaults">true if the default value should be compared.</param>
            <returns>true if this and other setting have the same value, optionally comparing the default. Otherwise, false.</returns>
        </member>
        <member name="M:Rhino.SettingValue.SetValue(System.Boolean,System.String)">
            <summary>
            Set either the current or default value string.
            </summary>
            <param name="bDefault">If true then the current value string is set otherwise the default value string is.</param>
            <param name="s">New value string.</param>
        </member>
        <member name="M:Rhino.SettingValue.GetValue(System.Boolean)">
            <summary>
            Gets the current or default value as requested.
            </summary>
            <param name="bDefault">If true then the default value string is returned otherwise the current value string is returned.</param>
            <returns>If bDefault is true then the default value string is returned otherwise the current value string is returned.</returns>
        </member>
        <member name="F:Rhino.SettingValue.StringListSeparator">
            <summary>
            I was going to use Path.PathSeparator, ';' which works when specifying a path but is a valid file name character so
            it does not work in a file name list, the '|' character is in both the Path.GetInvalidFileNameChars() and 
            Path.GetInvalidPathChars() list of characters so I went ahead and used it for now.
            </summary>
        </member>
        <member name="P:Rhino.SettingValue.ValueSameAsDefault">
            <summary>
            Compare current and default values and return true if they are identical, compare is case sensitive.
            </summary>
        </member>
        <member name="P:Rhino.SettingValue.ValueDifferentThanDefault">
            <summary>
            Compare current and default values and return true if they differ, compare is case sensitive.
            </summary>
        </member>
        <member name="P:Rhino.SettingValue.StringListSeparatorAsArray">
            <summary>
            Gets the <see cref="F:Rhino.SettingValue.StringListSeparator"/> value in an array.
            </summary>
        </member>
        <member name="T:Rhino.PersistentSettingsEventArgs">
            <summary>
            Represents event data that is passed as state in persistent settings events.
            </summary>
        </member>
        <member name="T:Rhino.PersistentSettingsEventArgs`1">
            <summary>
            Represents the persistent settings modification event arguments.
            </summary>
            <typeparam name="T">The type of the current and new setting that is being modified.</typeparam>
        </member>
        <member name="T:Rhino.PersistentSettings">
            <summary>
            A dictionary of SettingValue items.
            </summary>
        </member>
        <member name="M:Rhino.PersistentSettings.GetEnumValue``1(``0)">
            <summary>
            Get a stored enum value, or return default value if not found
            </summary>
            <typeparam name="T"></typeparam>
            <param name="defaultValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.PersistentSettings.GetEnumValue``1(System.String,``0)">
            <summary>
            Get a stored enum value using a custom key, or return default value if not found. 
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"> </param>
            <param name="defaultValue"> </param>
            <returns></returns>
        </member>
        <member name="M:Rhino.PersistentSettings.GetEnumValue``1">
            <summary>
            Get a stored enum value.
            </summary>
            <typeparam name="T"></typeparam>
            <returns></returns>
        </member>
        <member name="M:Rhino.PersistentSettings.GetEnumValue``1(System.String)">
            <summary>
            Get a stored enum value using a custom key.
            </summary>
            <param name="key"></param>
            <typeparam name="T"></typeparam>
            <returns></returns>
            <exception cref="T:System.Collections.Generic.KeyNotFoundException"></exception>
        </member>
        <member name="M:Rhino.PersistentSettings.TryGetEnumValue``1(System.String,``0@)">
            <summary>
            Attempt to get the stored value for an enum setting using a custom key. Note: the enum value ALWAYS gets assigned!
            Be sure to check for success of this method to prevent erroneous use of the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"> </param>
            <param name="enumValue"></param>
            <returns>true if successful</returns>
        </member>
        <member name="M:Rhino.PersistentSettings.TryGetEnumValue``1(``0@)">
            <summary>
            Attempt to get the stored value for an enum setting. Note: the enum value ALWAYS gets assigned!
            Be sure to check for success of this method to prevent erroneous use of the value.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.PersistentSettings.SetStringList(System.String,System.String[])">
            <summary>
            Including a item with the value of StringListRootKey will cause the ProgramData value to get inserted at
            that location in the list when calling GetStringList.
            </summary>
            <param name="key">The string key.</param>
            <param name="value">An array of values to set.</param>
        </member>
        <member name="M:Rhino.PersistentSettings.SetEnumValue``1(``0)">
            <summary>
            Set an enum value in the settings.
            </summary>
            <typeparam name="T"></typeparam>
            <param name="enumValue"></param>
        </member>
        <member name="M:Rhino.PersistentSettings.SetEnumValue``1(System.String,``0)">
            <summary>
            Set an enum value in the settings using a custom key
            </summary>
            <typeparam name="T"></typeparam>
            <param name="key"> </param>
            <param name="enumValue"></param>
        </member>
        <member name="M:Rhino.PersistentSettings.WriteXmlElement(System.Xml.XmlWriter,System.String,System.String,System.String,Rhino.PersistentSettings)">
            <summary>
            If the settings dictionary contains one or more values, which are not equal to the default value, then Write the contents
            of this settings dictionary to the specified XmlWriter contained within elementName.
            </summary>
            <param name="xmlWriter">XmlWriter object to write to.</param>
            <param name="elementName">Element which will contain key value pairs.</param>
            <param name="attributeName">Optional element attribute.</param>
            <param name="attributeValue">Optional element attribute value.</param>
            <param name="allUserSettings">All users settings to compare with.</param>
        </member>
        <member name="M:Rhino.PersistentSettings.ParseXmlNodes(System.Xml.XmlNode)">
            <summary>
            Parse XmlNode for settings "entry" elements, add entry elements to the dictionary
            first and if then check the defaults list and make sure the entry is in the list before setting the 
            default value.
            </summary>
        </member>
        <member name="P:Rhino.PersistentSettings.StringListRootKey">
            <summary>
            Adding this string to a string list when calling SetStringList will cause the ProgramData setting to
            get inserted at that location in the list.
            </summary>
        </member>
        <member name="F:Rhino.PlugInSettings.CURRENT_XML_FORMAT_VERSION">
            <summary>
            Main settings element id attribute value, used to query valid settings section in settings XML file.
            </summary>
        </member>
        <member name="M:Rhino.PlugInSettings.SettingsFileFolder(System.Boolean)">
            <summary>
            Computes folder to read or write settings files.
            </summary>
        </member>
        <member name="M:Rhino.PlugInSettings.SettingsFileName(System.Boolean)">
            <summary>
            Computes full path to settings file to read or write.
            </summary>
        </member>
        <member name="M:Rhino.PlugInSettings.#ctor(System.Reflection.Assembly,System.Guid,Rhino.PlugInSettings)">
            <summary>PersistentSettingsManager constructor.</summary>
            <param name="pluginAssembly">Requires a valid Skin, DLL or PlugIn object to attach to.</param>
            <param name="pluginId">Requires a PlugIn Id to attach to.</param>
            <param name="allUserSettings">All user setting to compare for changes.</param>
        </member>
        <member name="M:Rhino.PlugInSettings.#ctor(System.Guid,Rhino.PlugInSettings)">
            <summary>PersistentSettingsManager constructor</summary>
            <param name="pluginId"></param>
            <param name="allUserSettings"></param>
        </member>
        <member name="M:Rhino.PlugInSettings.CommandSettings(System.String)">
            <summary>
            Gets the PersistentSettings associated with the specified command.  If the settings file
            has not been previously loaded and exists then it will get read.  If the command name is
            not in the command settings dictionary then a new entry will get created and its settings
            will be returned.
            </summary>
            <param name="name">Command name key to search for and/or add.</param>
            <returns>Returns PersistentSettings object associated with command name on success or null on error.</returns>
        </member>
        <member name="M:Rhino.PlugInSettings.ReadSettings">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="M:Rhino.PlugInSettings.ReadSettingsHelper(System.Boolean)">
            <summary>
            Reads existing settings for a plug-in and its associated commands.
            Clears the dirty flag for the settings. 
            </summary>
            <returns>
            true if settings are successfully read. false if there was no existing
            settings file to read, or if a read lock could not be acquired.
            </returns>
        </member>
        <member name="M:Rhino.PlugInSettings.DeleteDirectory(System.String)">
            <summary>
            Helper method to delete a directory if it is empty.
            </summary>
            <param name="directory">Full path to directory to delete.</param>
            <returns>Returns true if the directory was empty and successfully deleted otherwise returns false.</returns>
        </member>
        <member name="M:Rhino.PlugInSettings.ContainsModifiedValues">
            <summary>
            Check the plug-in and command settings dictionaries for values other than default value.
            </summary>
            <returns>Returns true if either the plug-ins or commands dictionaries contains a modified item otherwise false.</returns>
        </member>
        <member name="M:Rhino.PlugInSettings.WriteSettingsHelper(System.Boolean)">
            <summary>
            Flushes the current settings to the user's roaming directory. 
            If an xml file for the guid already exists, it attempts to update
            the file in order to maintain comments, etc. If the xml is corrupt
            or the file does not exist, it writes out a new file.
            </summary>
            <returns>
            true if settings where flushed to disk, otherwise false. 
            </returns>
        </member>
        <member name="M:Rhino.PlugInSettings.WriteTempFile(System.String)">
            <summary>
            Constructs a temporary file and write plug-in and plug-in command settings to the temp file.
            Only writes PersistentSettings that contain one or more item with a value that differs
            from the default value.
            </summary>
        </member>
        <member name="P:Rhino.PlugInSettings.PluginSettings">
            <summary>
            Gets the Plug-in settings associated with this plug-in, if this is the first time called then
            the plug-in settings member variable will get initialized and if a settings file exists it
            will get loaded.
            </summary>
        </member>
        <member name="F:Rhino.PersistentSettingsManager.m_plugin_id">
            <summary>
            If this settings PersistentSettingsManager is created by plug-in provided DLL then save the plug-in ID
            so that when the plug-in requests its setting it will get the same PersistentSettingsManager
            </summary>
        </member>
        <member name="M:Rhino.PersistentSettingsManager.#ctor(System.Reflection.Assembly,System.Guid)">
            <summary>
            PersistentSettingsManager constructor.
            </summary>
            <param name="assembly">Requires a valid Assembly object to attach to.</param>
            <param name="pluginId">Optional plug-in Id which identifies the plug-in associated with this settings class.</param>
        </member>
        <member name="M:Rhino.PersistentSettingsManager.#ctor(System.Guid)">
            <summary>
            PersistentSettingsManager constructor.
            </summary>
            <param name="pluginId">Requires a valid pluginId to attach to</param>
        </member>
        <member name="M:Rhino.PersistentSettingsManager.#ctor(Rhino.Runtime.Skin)">
            <summary>
            PersistentSettingsManager constructor.
            </summary>
            <param name="skin"></param>
        </member>
        <member name="M:Rhino.PersistentSettingsManager.Create(System.Guid)">
            <summary>
            
            </summary>
            <param name="pluginId"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.PersistentSettingsManager.Create(Rhino.PlugIns.PlugIn)">
            <summary>
            
            </summary>
            <param name="plugin"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.PersistentSettingsManager.Create(Rhino.Runtime.Skin)">
            <summary>
            
            </summary>
            <param name="skin"></param>
            <returns></returns>
        </member>
        <member name="M:Rhino.PersistentSettingsManager.CommandSettings(System.String)">
            <summary>
            Gets the PersistentSettings associated with the specified command.  If the settings file
            has not been previously loaded and exists then it will get read.  If the command name is
            not in the command settings dictionary then a new entry will get created and its settings
            will be returned.
            </summary>
            <param name="name">Command name key to search for and/or add.</param>
            <returns>Returns PersistentSettings object associated with command name on success or null on error.</returns>
        </member>
        <member name="M:Rhino.PersistentSettingsManager.ContainsModifiedValues">
            <summary>
            Check the plug-in and command settings dictionaries for values other than default value.
            </summary>
            <returns>Returns true if either the plug-ins or commands dictionaries contains a modified item otherwise false.</returns>
        </member>
        <member name="M:Rhino.PersistentSettingsManager.WriteSettings">
            <summary>
            If they exist and contain modified values write global settings first then local settings.
            </summary>
            <returns>Returns true if local settings were successfully written.</returns>
        </member>
        <member name="P:Rhino.PersistentSettingsManager.PluginSettings">
            <summary>
            Gets the Plug-in settings associated with this plug-in, if this is the first time called then
            the plug-in settings member variable will get initialized and if a settings file exists it
            will get loaded.
            </summary>
        </member>
        <member name="T:Rhino.Geometry.Unroller">
            <summary>
            Represents the operation of unrolling a single surface.
            </summary>
        </member>
        <member name="M:Rhino.Geometry.Unroller.#ctor(Rhino.Geometry.Surface)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.Unroller"/> class with surface.
            </summary>
            <param name="surface">A surface to be unrolled.</param>
        </member>
        <member name="M:Rhino.Geometry.Unroller.#ctor(Rhino.Geometry.Brep)">
            <summary>
            Initializes a new instance of the <see cref="T:Rhino.Geometry.Unroller"/> class with a brep.
            </summary>
            <param name="brep">A brep to be unrolled.</param>
        </member>
        <member name="M:Rhino.Geometry.Unroller.AddFollowingGeometry(System.Collections.Generic.IEnumerable{Rhino.Geometry.Curve})">
            <summary>
            Adds curves that should be unrolled along with the surface/brep.
            </summary>
            <param name="curves">An array, a list or any enumerable set of curves.</param>
        </member>
        <member name="M:Rhino.Geometry.Unroller.AddFollowingGeometry(Rhino.Geometry.Curve)">
            <summary>
            Adds a curve that should be unrolled along with the surface/brep.
            </summary>
            <param name="curve">The curve.</param>
        </member>
        <member name="M:Rhino.Geometry.Unroller.AddFollowingGeometry(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d})">
            <summary>
            Adds points that should be unrolled along with the surface/brep.
            </summary>
            <param name="points">An array, a list or any enumerable set of points.</param>
        </member>
        <member name="M:Rhino.Geometry.Unroller.AddFollowingGeometry(Rhino.Geometry.Point3d)">
            <summary>
            Adds a point that should be unrolled along with the surface/brep.
            </summary>
            <param name="point">A point.</param>
        </member>
        <member name="M:Rhino.Geometry.Unroller.AddFollowingGeometry(Rhino.Geometry.Point)">
            <summary>
            Adds a point that should be unrolled along with the surface/brep.
            </summary>
            <param name="point">A point.</param>
        </member>
        <member name="M:Rhino.Geometry.Unroller.AddFollowingGeometry(System.Collections.Generic.IEnumerable{Rhino.Geometry.TextDot})">
            <summary>
            Adds text dots that should be unrolled along with the surface/brep.
            </summary>
            <param name="dots">An array, a list or any enumerable set of text dots.</param>
        </member>
        <member name="M:Rhino.Geometry.Unroller.AddFollowingGeometry(Rhino.Geometry.TextDot)">
            <summary>
            Adds a text dot that should be unrolled along with the surface/brep.
            </summary>
            <param name="dot">A text dot.</param>
        </member>
        <member name="M:Rhino.Geometry.Unroller.AddFollowingGeometry(System.Collections.Generic.IEnumerable{Rhino.Geometry.Point3d},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Adds text dots that should be unrolled along with the surface/brep.
            </summary>
            <param name="dotLocations">An array, a list, or any enumerable set of dot locations.</param>
            <param name="dotText">An array, a list, or any enumerable set of dot strings.</param>
        </member>
        <member name="M:Rhino.Geometry.Unroller.AddFollowingGeometry(Rhino.Geometry.Point3d,System.String)">
            <summary>
            Adds a text dot that should be unrolled along with the surface/brep.
            </summary>
            <param name="dotLocation">A dot point.</param>
            <param name="dotText">A dot text.</param>
        </member>
        <member name="M:Rhino.Geometry.Unroller.PerformUnroll(Rhino.Geometry.Curve[]@,Rhino.Geometry.Point3d[]@,Rhino.Geometry.TextDot[]@)">
            <summary>
            Executes unrolling operations.
            </summary>
            <param name="unrolledCurves">An array of unrolled curves is assigned during the call in this out parameter.</param>
            <param name="unrolledPoints">An array of unrolled points is assigned during the call in this out parameter.</param>
            <param name="unrolledDots">An array of unrolled text dots is assigned during the call in this out parameter.</param>
            <returns>An array of breps. This array can be empty.</returns>
        </member>
        <member name="P:Rhino.Geometry.Unroller.ExplodeOutput">
            <summary>
            Gets or sets a value determining whether geometry should be exploded.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Unroller.ExplodeSpacing">
            <summary>
            Gets or sets a value determining whether spacing should be exploded.
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Unroller.AbsoluteTolerance">
            <summary>
            Gets or sets the absolute tolerance for the unrolling operation.
            <para>Absolute tolerance is used in the evaluation of new entities,
            such as intersections, reprojections and splits.</para>
            <para>In the current implementation, absolute tolerance is used 
            in tessellating rails, fitting curves and pulling back trims.</para>
            </summary>
        </member>
        <member name="P:Rhino.Geometry.Unroller.RelativeTolerance">
            <summary>
            Gets or sets the relative tolerance for the unrolling operation.
            <para>Relative tolerance is used in the evaluation of intrinsic properties,
            such as computations "along" the surface or brep.</para>
            <para>In the current implementation, relative tolerance is used to decide
            if a surface is flat enough to try to unroll. That helps ease the scale dependency.
            The surface has to be linear in one direction within (length * RelativeTolerance)
            to be considered linear for that purpose. Otherwise smash will ignore that tolerance and
            unroll anything.</para>
            </summary>
        </member>
        <member name="P:Rhino.Display.PageViewSpaceChangeEventArgs.PageView">
            <summary>
            The page view on which a different detail object was set active.
            </summary>
        </member>
        <member name="P:Rhino.Display.PageViewSpaceChangeEventArgs.NewActiveDetailId">
            <summary>
            The id of the detail object was set active.  Note, if this id is
            equal to Guid.Empty, then the active detail object is the page
            view itself.
            </summary>
        </member>
        <member name="P:Rhino.Display.PageViewSpaceChangeEventArgs.OldActiveDetailId">
            <summary>
            The id of the previously active detail object. Note, if this id
            is equal to Guid.Empty, then the active detail object was the
            page view itself.
            </summary>
        </member>
        <member name="T:Rhino.Display.DefinedViewportProjection">
            <summary>
            Defines enumerated values for parallel and perspective projections that are "standard" in Rhino.
            </summary>
        </member>
        <member name="T:Rhino.Display.RhinoViewport">
            <summary>
            Displays geometry with a given projection. In standard modeling views there
            is a one to one relationship between RhinoView and RhinoViewports. In a page
            layout, there may be multiple RhinoViewports for a single layout.
            </summary>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.IsVisible(Rhino.Geometry.BoundingBox)">
            <summary>
            Returns true if some portion of a world coordinate bounding box is
            potentially visible in the viewing frustum.
            </summary>
            <param name="bbox">A bounding box that is tested for visibility.</param>
            <returns>true if the box is potentially visible; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.IsVisible(Rhino.Geometry.Point3d)">
            <summary>
            Deterines if a world coordinate point is visible in the viewing frustum.
            </summary>
            <param name="point">A point that is tested for visibility.</param>
            <returns>true if the point is visible; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetClippingPlanes(Rhino.Geometry.BoundingBox)">
            <summary>
            Sets optimal clipping planes to view objects in a world coordinate 3d bounding box.
            </summary>
            <param name="box">The bounding box </param>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetCameraTarget(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
            Set viewport target point. By default the camera location
            is translated so that the camera direction vector is parallel
            to the vector from the camera location to the target location.
            </summary>
            <param name="targetLocation">new target location.</param>
            <param name="updateCameraLocation">
            if true, the camera location is translated so that the camera direction
            vector is parallel to the vector from the camera location to the target
            location.
            If false, the camera location is not changed.
            </param>
            <remarks>
            In general, Rhino users expect to have the camera direction vector and
            the vector from the camera location to the target location to be parallel.
            If you use the RhinoViewport functions to set the camera location, camera
            direction, and target point, then the relationship between these three
            points and vectors is automatically maintained.  If you directly manipulate
            the camera properties, then you should carefully set the target by calling
            SetTarget() with updateCameraLocation=false.
            </remarks>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetCameraLocations(Rhino.Geometry.Point3d,Rhino.Geometry.Point3d)">
            <summary>
            Set viewport camera location and target location. The camera direction vector is
            changed so that it is parallel to the vector from the camera location to
            the target location.
            </summary>
            <param name="targetLocation">new target location.</param>
            <param name="cameraLocation">new camera location.</param>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetCameraLocation(Rhino.Geometry.Point3d,System.Boolean)">
            <summary>
             Set viewport camera location. By default the target location is changed so that
             the vector from the camera location to the target is parallel to the camera direction
             vector.
            </summary>
            <param name="cameraLocation">new camera location.</param>
            <param name="updateTargetLocation">
            if true, the target location is changed so that the vector from the camera
            location to the target is parallel to the camera direction vector.  
            If false, the target location is not changed. See the remarks section of
            RhinoViewport.SetTarget for important details.
            </param>
            <example>
            <code source='examples\vbnet\ex_addnamedview.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnamedview.cs' lang='cs'/>
            <code source='examples\py\ex_addnamedview.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetCameraDirection(Rhino.Geometry.Vector3d,System.Boolean)">
            <summary>
            Set viewport camera direction. By default the target location is changed so that
            the vector from the camera location to the target is parallel to the camera direction.
            </summary>
            <param name="cameraDirection">new camera direction.</param>
            <param name="updateTargetLocation">
            if true, the target location is changed so that the vector from the camera
            location to the target is parallel to the camera direction.
            If false, the target location is not changed.
            See the remarks section of RhinoViewport.SetTarget for important details.
            </param>
            <example>
            <code source='examples\vbnet\ex_addnamedview.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnamedview.cs' lang='cs'/>
            <code source='examples\py\ex_addnamedview.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.ConstructionPlane">
            <summary>
            Simple plane information for this viewport's construction plane. If you want
            detailed construction lpane information, use GetConstructionPlane.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addbackgroundbitmap.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbackgroundbitmap.cs' lang='cs'/>
            <code source='examples\py\ex_addbackgroundbitmap.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetConstructionPlane(Rhino.DocObjects.ConstructionPlane)">
            <summary>
            Sets the construction plane to cplane.
            </summary>
            <param name="cplane">The constuction plane to set.</param>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.PushConstructionPlane(Rhino.DocObjects.ConstructionPlane)">
            <summary>
            Pushes the current construction plane on the viewport's
            construction plane stack and sets the construction plane
            to cplane.
            </summary>
            <param name="cplane">The constuction plane to push.</param>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.PopConstructionPlane">
            <summary>
            Sets the construction plane to the plane that was
            active before the last call to PushConstructionPlane.
            </summary>
            <returns>true if a construction plane was popped.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.NextConstructionPlane">
            <summary>
            Sets the construction plane to the plane that was
            active before the last call to PreviousConstructionPlane.
            </summary>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.PreviousConstructionPlane">
            <summary>
            Sets the construction plane to the plane that was
            active before the last call to NextConstructionPlane
            or SetConstructionPlane.
            </summary>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetProjection(Rhino.Display.DefinedViewportProjection,System.String,System.Boolean)">
            <summary>
            Set viewport to a defined projection.
            </summary>
            <param name="projection">The "standard" projection type.</param>
            <param name="viewName">If not null or empty, the name is set.</param>
            <param name="updateConstructionPlane">If true, the construction plane is set to the viewport plane.</param>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.PushViewProjection">
            <summary>
            Appends the current view projection and target to the viewport's view stack.
            </summary>
            <example>
            <code source='examples\vbnet\ex_addnamedview.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnamedview.cs' lang='cs'/>
            <code source='examples\py\ex_addnamedview.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetViewProjection(Rhino.DocObjects.ViewportInfo,System.Boolean)">
            <summary>
            Sets the viewport camera projection.
            </summary>
            <param name="projection">The "standard" projection type.</param>
            <param name="updateTargetLocation">
            if true, the target location is changed so that the vector from the camera location to the target
            is parallel to the camera direction vector.  If false, the target location is not changed.
            </param>
            <returns>true on success.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.PopViewProjection">
            <summary>
            Sets the view projection and target to the settings at the top of
            the view stack and removes those settings from the view stack.
            </summary>
            <returns>true if there were settings that could be popped from the stack.</returns>
            <example>
            <code source='examples\vbnet\ex_addnamedview.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnamedview.cs' lang='cs'/>
            <code source='examples\py\ex_addnamedview.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.NextViewProjection">
            <summary>
            Sets the view projection and target to the settings that 
            were active before the last call to PrevView.
            </summary>
            <returns>true if the view stack was popped.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.PreviousViewProjection">
            <summary>
            Sets the view projection and target to the settings that
            were active before the last call to NextViewProjection.
            </summary>
            <returns>true if the view stack was popped.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.ZoomExtents">
            <summary>
            Dollies the camera location and so that the view frustum contains all of the
            selected document objects that can be seen in view. If the projection is
            perspective, the camera angle is not changed.
            </summary>
            <returns>true if successful.</returns>
            <example>
            <code source='examples\vbnet\ex_addlayout.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addlayout.cs' lang='cs'/>
            <code source='examples\py\ex_addlayout.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.ZoomExtentsSelected">
            <summary>
            Dollies the camera location and so that the view frustum contains all of the
            selected document objects that can be seen in view. If the projection is
            perspective, the camera angle is not changed.
            </summary>
            <returns>true if successful.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.ZoomBoundingBox(Rhino.Geometry.BoundingBox)">
            <summary>
            Zooms the viewport to the given bounding box.
            </summary>
            <param name="box">The bouding box to zoom.</param>
            <returns>true if operation succeeded; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.MouseRotateAroundTarget(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Rotates the viewport around target.
            </summary>
            <param name="mousePreviousPoint">The mouse previous point.</param>
            <param name="mouseCurrentPoint">The mouse current point.</param>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.MouseRotateCamera(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Rotates the view around the camera location.
            </summary>
            <param name="mousePreviousPoint">The mouse previous point.</param>
            <param name="mouseCurrentPoint">The mouse current point.</param>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.KeyboardRotate(System.Boolean,System.Double)">
            <summary>
            Emulates the keyboard arrow key in terms of interaction.
            </summary>
            <param name="leftRight">left/right rotate if true, up/down rotate if false.</param>
            <param name="angleRadians">
            If less than 0, rotation is to left or down.
            If greater than 0, rotation is to right or up.
            </param>
            <returns>true if operation succeeded; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.KeyboardDolly(System.Boolean,System.Double)">
            <summary>
            Emulates the keyboard arrow key in terms of interaction.
            </summary>
            <param name="leftRight">left/right dolly if true, up/down dolly if false.</param>
            <param name="amount">The dolly amount.</param>
            <returns>true if operation succeeded; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.KeyboardDollyInOut(System.Double)">
            <summary>
            Emulates the keyboard arrow key in terms of interaction.
            </summary>
            <param name="amount">The dolly amount.</param>
            <returns>true if operation succeeded; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.Magnify(System.Double,System.Boolean)">
            <summary>
            Zooms or dollies in order to scale the viewport projection of observed objects.
            </summary>
            <param name="magnificationFactor">The scale factor.</param>
            <param name="mode">
            false = perform a "dolly" magnification by moving the camera towards/away from
            the target so that the amount of the screen subtended by an object changes.
            true = perform a "zoom" magnification by adjusting the "lens" angle           
            </param>
            <returns>true if operation succeeded; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.Magnify(System.Double,System.Boolean,System.Drawing.Point)">
            <summary>
            Zooms or dollies in order to scale the viewport projection of observed objects.
            </summary>
            <param name="magnificationFactor">The scale factor.</param>
            <param name="mode">
            false = perform a "dolly" magnification by moving the camera towards/away from
            the target so that the amount of the screen subtended by an object changes.
            true = perform a "zoom" magnification by adjusting the "lens" angle           
            </param>
            <param name="fixedScreenPoint">A point in the sceen that should remain fixed.</param>
            <returns>true if operation succeeded; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetPickTransform(System.Int32,System.Int32)">
            <summary>
            Takes a rectangle in screen coordinates and returns a transformation
            that maps the 3d frustum defined by the rectangle to a -1/+1 clipping
            coordinate box. This takes a single point and inflates it by
            Rhino.ApplicationSettings.ModelAidSettings.MousePickBoxRadius to define
            the screen rectangle.
            </summary>
            <param name="clientX">The client point X coordinate.</param>
            <param name="clientY">The client point Y coordinate.</param>
            <returns>A transformation matrix.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetPickTransform(System.Drawing.Point)">
            <summary>
            Takes a rectangle in screen coordinates and returns a transformation
            that maps the 3d frustum defined by the rectangle to a -1/+1 clipping
            coordinate box. This takes a single point and inflates it by
            Rhino.ApplicationSettings.ModelAidSettings.MousePickBoxRadius to define
            the screen rectangle.
            </summary>
            <param name="clientPoint">The client point.</param>
            <returns>A transformation matrix.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetPickTransform(System.Drawing.Rectangle)">
            <summary>
            Takes a rectangle in screen coordinates and returns a transformation
            that maps the 3d frustum defined by the rectangle to a -1/+1 clipping
            coordinate box.
            </summary>
            <param name="clientRectangle">The client rectangle.</param>
            <returns>A transformation matrix.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.Rotate(System.Double,Rhino.Geometry.Vector3d,Rhino.Geometry.Point3d)">
            <summary>
            Rotates about the specified axis. A positive rotation angle results
            in a counter-clockwise rotation about the axis (right hand rule).
            </summary>
            <param name="angleRadians">angle of rotation in radians.</param>
            <param name="rotationAxis">direction of the axis of rotation.</param>
            <param name="rotationCenter">point on the axis of rotation.</param>
            <returns>true if geometry successfully rotated.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.ChangeToParallelProjection(System.Boolean)">
            <summary>
            Use this function to change projections of valid viewports from persective to parallel.
            It will make common additional adjustments to the frustum so the resulting views are
            similar. The camera location and direction will not be changed.
            </summary>
            <param name="symmetricFrustum">true if you want the resulting frustum to be symmetric.</param>
            <returns>
            If the current projection is parallel and bSymmetricFrustum, FrustumIsLeftRightSymmetric()
            and FrustumIsTopBottomSymmetric() are all equal, then no changes are made and true is returned.
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.ChangeToPerspectiveProjection(System.Boolean,System.Double)">
            <summary>
            Use this function to change projections of valid viewports from parallel to perspective.
            It will make common additional adjustments to the frustum and camera location so the
            resulting views are similar. The camera direction and target point are not be changed.
            </summary>
            <param name="symmetricFrustum">true if you want the resulting frustum to be symmetric.</param>
            <param name="lensLength">
            (pass 50.0 when in doubt) 35 mm lens length to use when changing from parallel to perspective
            projections. If the current projection is perspective or lens_length is &lt;= 0.0, then
            this parameter is ignored.
            </param>
            <returns>
            If the current projection is perspective and bSymmetricFrustum, FrustumIsLeftRightSymmetric()
            and FrustumIsTopBottomSymmetric() are all equal, then no changes are made and true is returned.
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.ChangeToPerspectiveProjection(System.Double,System.Boolean,System.Double)">
            <summary>
            Use this function to change projections of valid viewports from parallel to perspective.
            It will make common additional adjustments to the frustum and camera location so the
            resulting views are similar. The camera direction and target point are not be changed.
            </summary>
            <param name="targetDistance">
            If RhinoMath.UnsetValue this parameter is ignored. Otherwise it must be > 0 and indicates
            which plane in the current view frustum should be perserved.
            </param>
            <param name="symmetricFrustum">true if you want the resulting frustum to be symmetric.</param>
            <param name="lensLength">
            (pass 50.0 when in doubt) 35 mm lens length to use when changing from parallel to perspective
            projections. If the current projection is perspective or lens_length is &lt;= 0.0, then
            this parameter is ignored.
            </param>
            <returns>
            If the current projection is perspective and bSymmetricFrustum, FrustumIsLeftRightSymmetric()
            and FrustumIsTopBottomSymmetric() are all equal, then no changes are made and true is returned.
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetCameraFrame(Rhino.Geometry.Plane@)">
            <summary>
            Gets the camera plane.
            </summary>
            <param name="frame">A plane is assigned to this out parameter during the call, if the operation succeeded.</param>
            <returns>true if current camera orientation is valid.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustum(System.Double@,System.Double@,System.Double@,System.Double@,System.Double@,System.Double@)">
            <summary>
            Gets the view frustum.
            </summary>
            <param name="left">left &lt; right.</param>
            <param name="right">left &lt; right.</param>
            <param name="bottom">bottom &lt; top.</param>
            <param name="top">bottom &lt; top.</param>
            <param name="nearDistance">0 &lt; nearDistance &lt; farDistance.</param>
            <param name="farDistance">0 &lt; nearDistance &lt; farDistance.</param>
            <returns>true if operation succeeded.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustumCenter(Rhino.Geometry.Point3d@)">
            <summary>
            Returns world coordinates of frustum's center.
            </summary>
            <param name="center">The center coordinate is assigned to this out parameter if this call succeeds.</param>
            <returns>true if the center was successfully computed.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetDepth(Rhino.Geometry.Point3d,System.Double@)">
            <summary>Gets clipping distance of a point.</summary>
            <param name="point">A 3D point.</param>
            <param name="distance">A computed distance is assigned to this out parameter if this call succeeds.</param>
            <returns>
            true if the point is ing the view frustum and near_dist/far_dist were set.
            false if the bounding box does not intesect the view frustum.
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetDepth(Rhino.Geometry.BoundingBox,System.Double@,System.Double@)">
            <summary>
            Gets near and far clipping distances of a bounding box.
            </summary>
            <param name="bbox">The bounding box.</param>
            <param name="nearDistance">The near distance is assigned to this out parameter during this call.</param>
            <param name="farDistance">The far distance is assigned to this out parameter during this call.</param>
            <returns>
            true if the bounding box intersects the view frustum and near_dist/far_dist were set.
            false if the bounding box does not intesect the view frustum.
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetDepth(Rhino.Geometry.Sphere,System.Double@,System.Double@)">
            <summary>
            Gets near and far clipping distances of a sphere.
            </summary>
            <param name="sphere">The sphere.</param>
            <param name="nearDistance">The near distance is assigned to this out parameter during this call.</param>
            <param name="farDistance">The far distance is assigned to this out parameter during this call.</param>
            <returns>
            true if the sphere intersects the view frustum and near_dist/far_dist were set.
            false if the sphere does not intesect the view frustum.
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustumNearPlane(Rhino.Geometry.Plane@)">
            <summary>Get near clipping plane.</summary>
            <param name="plane">
            near clipping plane if camera and frustum are valid. The plane's
            frame is the same as the camera's frame. The origin is located at
            the intersection of the camera direction ray and the near clipping
            plane.
            </param>
            <returns>
            true if camera and frustum are valid.
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustumFarPlane(Rhino.Geometry.Plane@)">
            <summary>Get far clipping plane.</summary>
            <param name="plane">
            far clipping plane if camera and frustum are valid. The plane's
            frame is the same as the camera's frame. The origin is located at
            the intersection of the camera direction ray and the far clipping
            plane.
            </param>
            <returns>
            true if camera and frustum are valid.
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustumLeftPlane(Rhino.Geometry.Plane@)">
            <summary>Get left world frustum clipping plane.</summary>
            <param name="plane">
            frustum left side clipping plane. The normal points into the visible
            region of the frustum. If the projection is perspective, the origin
            is at the camera location, otherwise the origin isthe point on the
            plane that is closest to the camera location.
            </param>
            <returns>true if camera and frustum are valid and plane was set.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustumRightPlane(Rhino.Geometry.Plane@)">
            <summary>Get right world frustum clipping plane.</summary>
            <param name="plane">
            frustum right side clipping plane. The normal points into the visible
            region of the frustum. If the projection is perspective, the origin
            is at the camera location, otherwise the origin isthe point on the
            plane that is closest to the camera location.
            </param>
            <returns>true if camera and frustum are valid and plane was set.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustumBottomPlane(Rhino.Geometry.Plane@)">
            <summary>Get bottom world frustum clipping plane.</summary>
            <param name="plane">
            frustum bottom side clipping plane. The normal points into the visible
            region of the frustum. If the projection is perspective, the origin
            is at the camera location, otherwise the origin isthe point on the
            plane that is closest to the camera location.
            </param>
            <returns>true if camera and frustum are valid and plane was set.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustumTopPlane(Rhino.Geometry.Plane@)">
            <summary>Get top world frustum clipping plane.</summary>
            <param name="plane">
            frustum top side clipping plane. The normal points into the visible
            region of the frustum. If the projection is perspective, the origin
            is at the camera location, otherwise the origin isthe point on the
            plane that is closest to the camera location.
            </param>
            <returns>true if camera and frustum are valid and plane was set.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetNearRect">
            <summary>Get corners of near clipping plane rectangle.</summary>
            <returns>
            [left_bottom, right_bottom, left_top, right_top] points on success
            null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFarRect">
            <summary>Get corners of far clipping plane rectangle.</summary>
            <returns>
            [left_bottom, right_bottom, left_top, right_top] points on success
            null on failure.
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetScreenPort(System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@,System.Int32@)">
            <summary>
            Location of viewport in pixels.  These are provided so you can set the port you are using
            and get the appropriate transformations to and from screen space.
            </summary>
            <param name="portLeft">portLeft != portRight.</param>
            <param name="portRight">portLeft != portRight.</param>
            <param name="portBottom">portTop != portBottom.</param>
            <param name="portTop">portTop != portBottom.</param>
            <param name="portNear">The viewport near value.</param>
            <param name="portFar">The viewport far value.</param>
            <returns>true if the operation is successful.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetTransform(Rhino.DocObjects.CoordinateSystem,Rhino.DocObjects.CoordinateSystem)">
            <summary>
            Gets a transform from origin coordinate system to a target coordinate system.
            </summary>
            <param name="sourceSystem">The origin coordinate system.</param>
            <param name="destinationSystem">The target coordinate system.</param>
            <returns>
            4x4 transformation matrix (acts on the left)
            Identity matrix is returned if this function fails.
            </returns>
            <example>
            <code source='examples\vbnet\ex_pointatcursor.vb' lang='vbnet'/>
            <code source='examples\cs\ex_pointatcursor.cs' lang='cs'/>
            </example>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetFrustumLine(System.Double,System.Double,Rhino.Geometry.Line@)">
            <summary>
            Gets the world coordinate line in the view frustum that projects to a point on the screen.
            </summary>
            <param name="screenX">(screenx,screeny) = screen location.</param>
            <param name="screenY">(screenx,screeny) = screen location.</param>
            <param name="worldLine">
            3d world coordinate line segment starting on the near clipping
            plane and ending on the far clipping plane.
            </param>
            <returns>
            true if successful.
            false if view projection or frustum is invalid.
            </returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.GetWorldToScreenScale(Rhino.Geometry.Point3d,System.Double@)">
            <summary>
            Gets the world to screen size scaling factor at a point in frustum.
            </summary>
            <param name="pointInFrustum">A point in frustum.</param>
            <param name="pixelsPerUnit">
            scale = number of pixels per world unit at the 3d point.
            <para>This out parameter is assigned during this call.</para>
            </param>
            <returns>true if the operation is successful.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.WorldToClient(Rhino.Geometry.Point3d)">
            <summary>
            Convert a point from world coordinates in the viewport to a 2d screen
            point in the local coordinates of the viewport (X/Y of point is relative
            to top left corner of viewport on screen)
            </summary>
            <param name="worldPoint">The 3D point in world coordinates.</param>
            <returns>The 2D point on the screen.</returns>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.ClearTraceImage">
            <summary>
            Remove trace image (background bitmap) for this viewport if one exists.
            </summary>
        </member>
        <member name="M:Rhino.Display.RhinoViewport.SetTraceImage(System.String,Rhino.Geometry.Plane,System.Double,System.Double,System.Boolean,System.Boolean)">
            <summary>
            Set trace image (background bitmap) for this viewport.
            </summary>
            <param name="bitmapFileName">The bitmap file name.</param>
            <param name="plane">A picture plane.</param>
            <param name="width">The picture width.</param>
            <param name="height">The picture height.</param>
            <param name="grayscale">true if the picture should be in grayscale.</param>
            <param name="filtered">true if image should be filtered (bilinear) before displayed.</param>
            <returns>true if successful.</returns>
            <example>
            <code source='examples\vbnet\ex_addbackgroundbitmap.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addbackgroundbitmap.cs' lang='cs'/>
            <code source='examples\py\ex_addbackgroundbitmap.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.ParentView">
            <summary>
            Gets the parent view, if there is one
            
            Every RhinoView has an associated RhinoViewport that does all the 3d display work.
            Those associated viewports return the RhinoView as their parent view. However,
            RhinoViewports are used in other image creating contexts that do not have a parent
            RhinoView.  If you call ParentView, you MUST check for NULL return values.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.Id">
            <summary>Unique id for this viewport.</summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.ChangeCounter">
            <summary>
            The value of change counter is incremented every time the view projection
            or construction plane changes. The user can the mouse and nestable view 
            manipulation commands to change a view at any time. The value of change
            counter can be used to detect these changes in code that is sensitive to
            the view projection.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.Size">
            <summary>
            Gets or sets the height and width of the viewport (in pixels)
            </summary>
            <example>
            <code source='examples\vbnet\ex_viewportresolution.vb' lang='vbnet'/>
            <code source='examples\cs\ex_viewportresolution.cs' lang='cs'/>
            <code source='examples\py\ex_viewportresolution.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.Name">
            <summary>Name associated with this viewport.</summary>
            <example>
            <code source='examples\vbnet\ex_addnamedview.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnamedview.cs' lang='cs'/>
            <code source='examples\py\ex_addnamedview.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.CameraTarget">
            <summary>
            Viewport target point.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.IsPlanView">
            <summary>
            true if construction plane z axis is parallel to camera direction.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.CameraUp">
            <example>
            <code source='examples\vbnet\ex_addnamedview.vb' lang='vbnet'/>
            <code source='examples\cs\ex_addnamedview.cs' lang='cs'/>
            <code source='examples\py\ex_addnamedview.py' lang='py'/>
            </example>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.CameraX">
            <summary>Gets the "unit to the right" vector.</summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.CameraY">
            <summary>Gets the "unit up" vector.</summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.CameraZ">
            <summary>Gets the unit vector in CameraDirection.</summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.FrustumAspect">
            <summary>Gets the width/height ratio of the frustum.</summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.Bounds">
            <summary>
            Gets the size and location of the viewport, in pixels, relative to the parent view.
            </summary>
        </member>
        <member name="P:Rhino.Display.RhinoViewport.ScreenPortAspect">
            <summary>
            screen port's width/height.
            </summary>
        </member>
        <member name="T:Rhino.Display.VisualAnalysisMode">
            <summary>
            Represents a base class for visual analysis modes.
            <para>This class is abstract.</para>
            </summary>
        </member>
        <member name="M:Rhino.Display.VisualAnalysisMode.Register(System.Type)">
            <summary>
            Registers a custom visual analysis mode for use in Rhino.  It is OK to call
            register multiple times for a single custom analysis mode type, since subsequent
            register calls will notice that the type has already been registered.
            </summary>
            <param name="customAnalysisModeType">
            Must be a type that is a subclass of VisualAnalysisMode.
            </param>
            <returns>
            An instance of registered analysis mode on success.
            </returns>
        </member>
        <member name="M:Rhino.Display.VisualAnalysisMode.Find(System.Guid)">
            <summary>
            Finds a visual analysis mode by guid.
            </summary>
            <param name="id">The globally unique identifier to search for.</param>
            <returns>The found visual analysis mode, or null if it was not found, or on error.</returns>
        </member>
        <member name="M:Rhino.Display.VisualAnalysisMode.Find(System.Type)">
            <summary>
            Finds a visual analysis mode by type.
            </summary>
            <param name="t">A visual analysis mode type.</param>
            <returns>A visual analysis mode on success, or null on error.</returns>
        </member>
        <member name="M:Rhino.Display.VisualAnalysisMode.EnableUserInterface(System.Boolean)">
            <summary>
            Turns the analysis mode's user interface on and off. For Rhino's built
            in modes this opens or closes the modeless dialog that controls the
            analysis mode's display settings.
            </summary>
            <param name="on">true if the inferface should be shown; false if it should be concealed.</param>
        </member>
        <member name="M:Rhino.Display.VisualAnalysisMode.ObjectSupportsAnalysisMode(Rhino.DocObjects.RhinoObject)">
            <summary>
            Gets a value indicating if this visual analysis mode can be used on a given Rhino object.
            </summary>
            <param name="obj">The object to be tested.</param>
            <returns>true if this mode can indeed be used on the object; otherwise false.</returns>
        </member>
        <member name="M:Rhino.Display.VisualAnalysisMode.SetUpDisplayAttributes(Rhino.DocObjects.RhinoObject,Rhino.Display.DisplayPipelineAttributes)">
            <summary>
            If an analysis mode needs to modify display attributes, this is the place
            to do it.  In particular, Style==Texture, then this function must be
            overridden.
            </summary>
            <remarks>
            Shaded analysis modes that use texture mapping, like zebra and emap,
            override this function set the tex, diffuse_color, and EnableLighting
            parameter.
            </remarks>
            <param name="obj">The object for which to set up attributes.</param>
            <param name="attributes">The linked attributes.</param>
        </member>
        <member name="M:Rhino.Display.VisualAnalysisMode.UpdateVertexColors(Rhino.DocObjects.RhinoObject,Rhino.Geometry.Mesh[])">
            <summary>
            If Style==falseColor, then this virtual function must be overridden.
            Rhino calls this function when it is time for to set the false colors
            on the analysis mesh vertices.  For breps, there is one mesh per face.
            For mesh objects there is a single mesh.
            </summary>
            <param name="obj">The object for which to update vertex colors.</param>
            <param name="meshes">An array of meshes that should be updated.</param>
        </member>
        <member name="M:Rhino.Display.VisualAnalysisMode.DrawCurveObject(Rhino.DocObjects.CurveObject,Rhino.Display.DisplayPipeline)">
            <summary>
            If Style==Wireframe, then the default decomposes the curve object into
            nurbs curve segments and calls the virtual DrawNurbsCurve for each segment.
            </summary>
            <param name="curve">A document curve object.</param>
            <param name="pipeline">The drawing pipeline.</param>
        </member>
        <member name="M:Rhino.Display.VisualAnalysisMode.DrawMeshObject(Rhino.DocObjects.MeshObject,Rhino.Display.DisplayPipeline)">
            <summary>
            Draws one mesh. Override this method to add your custom behavior.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="mesh">A mesh object.</param>
            <param name="pipeline">The current display pipeline.</param>
        </member>
        <member name="M:Rhino.Display.VisualAnalysisMode.DrawBrepObject(Rhino.DocObjects.BrepObject,Rhino.Display.DisplayPipeline)">
            <summary>
            Draws one brep. Override this method to add your custom behavior.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="brep">A brep object.</param>
            <param name="pipeline">The current display pipeline.</param>
        </member>
        <member name="M:Rhino.Display.VisualAnalysisMode.DrawPointObject(Rhino.DocObjects.PointObject,Rhino.Display.DisplayPipeline)">
            <summary>
            Draws one point. Override this method to add your custom behavior.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="point">A point object.</param>
            <param name="pipeline">The current display pipeline.</param>
        </member>
        <member name="M:Rhino.Display.VisualAnalysisMode.DrawPointCloudObject(Rhino.DocObjects.PointCloudObject,Rhino.Display.DisplayPipeline)">
            <summary>
            Draws one point cloud. Override this method to add your custom behavior.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="pointCloud">A point cloud object.</param>
            <param name="pipeline">The current display pipeline.</param>
        </member>
        <member name="M:Rhino.Display.VisualAnalysisMode.DrawNurbsCurve(Rhino.DocObjects.RhinoObject,Rhino.Geometry.NurbsCurve,Rhino.Display.DisplayPipeline)">
            <summary>
            Draws a NURBS curve. This is a good function to override for
            analysis modes like curvature hair display.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="obj">A Rhino object corresponding to the curve.</param>
            <param name="curve">The curve geometry.</param>
            <param name="pipeline">The current display pipeline.</param>
        </member>
        <member name="M:Rhino.Display.VisualAnalysisMode.DrawNurbsSurface(Rhino.DocObjects.RhinoObject,Rhino.Geometry.NurbsSurface,Rhino.Display.DisplayPipeline)">
            <summary>
            Draws a NURBS surface. This is a good function to override
            to display object-related meshes.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="obj">A Rhino object corresponding to the surface.</param>
            <param name="surface">The surface geometry.</param>
            <param name="pipeline">The current display pipeline.</param>
        </member>
        <member name="M:Rhino.Display.VisualAnalysisMode.DrawMesh(Rhino.DocObjects.RhinoObject,Rhino.Geometry.Mesh,Rhino.Display.DisplayPipeline)">
            <summary>
            Draws a mesh.
            <para>The default implementation does nothing.</para>
            </summary>
            <param name="obj">A Rhino object corresponding to the surface.</param>
            <param name="mesh">The mesh geometry.</param>
            <param name="pipeline">The current display pipeline.</param>
        </member>
        <member name="P:Rhino.Display.VisualAnalysisMode.RhinoEdgeAnalysisModeId">
            <summary>
            Id for Rhino's built-in edge analysis mode. Brep and mesh edges are
            shown in a selected color.
            </summary>
        </member>
        <member name="P:Rhino.Display.VisualAnalysisMode.RhinoCurvatureGraphAnalysisModeId">
            <summary>
            Id for Rhino's built-in curvature graphs analysis mode. Curvature hair
            is shown on curves and surfaces.
            </summary>
        </member>
        <member name="P:Rhino.Display.VisualAnalysisMode.RhinoZebraStripeAnalysisModeId">
            <summary>
            Id for Rhino's built-in zebra stripe analysis mode. Zebra stripes are
            shown on surfaces and meshes.
            </summary>
        </member>
        <member name="P:Rhino.Display.VisualAnalysisMode.RhinoEmapAnalysisModeId">
            <summary>
            Id for Rhino's built-in emap analysis mode.  An environment map is
            shown on sufaces and meshes.
            </summary>
        </member>
        <member name="P:Rhino.Display.VisualAnalysisMode.RhinoCurvatureColorAnalyisModeId">
            <summary>
            Id for Rhino's built-in curvature color analysis mode.  Surface curvature
            is shown using false color mapping.
            </summary>
        </member>
        <member name="P:Rhino.Display.VisualAnalysisMode.RhinoDraftAngleAnalysisModeId">
            <summary>
            Id for Rhino's built-in draft angle analysis mode.  Draft angle is 
            displayed using false colors.
            </summary>
        </member>
        <member name="P:Rhino.Display.VisualAnalysisMode.RhinoThicknessAnalysisModeId">
            <summary>
            Id for Rhino's built-in thickness analysis mode.
            </summary>
        </member>
        <member name="P:Rhino.Display.VisualAnalysisMode.Name">
            <summary>
            Gets the name of the analysis mode. It is used by the _What command and the object
            properties details window to describe the object.
            </summary>
        </member>
        <member name="P:Rhino.Display.VisualAnalysisMode.Style">
            <summary>
            Gets the visual analysis mode style.
            </summary>
        </member>
        <member name="P:Rhino.Display.VisualAnalysisMode.Id">
            <summary>
            Gets the visual analysis mode GUID.
            The Guid is specified with the <see cref="T:System.Runtime.InteropServices.GuidAttribute">GuidAttribute</see>
            applied to the class.
            </summary>
        </member>
        <member name="P:Rhino.Display.VisualAnalysisMode.ShowIsoCurves">
            <summary>
            Gets true if this visual analysis mode will show isocuves on shaded surface
            objects.  Often a mode's user interface will provide a way to change this
            setting.
            <para>The default is false.</para>
            </summary>
        </member>
        <member name="T:Rhino.Display.VisualAnalysisMode.AnalysisStyle">
            <summary>
            Contains enumerated values for analysis styles, such as wireframe, texture or false colors..
            </summary>
        </member>
        <member name="F:Rhino.Display.VisualAnalysisMode.AnalysisStyle.Wireframe">
            <summary>The analysis is showing with wires.</summary>
        </member>
        <member name="F:Rhino.Display.VisualAnalysisMode.AnalysisStyle.Texture">
            <summary>The analysis is showing with textures.</summary>
        </member>
        <member name="F:Rhino.Display.VisualAnalysisMode.AnalysisStyle.FalseColor">
            <summary>The analysis is showing with false colors.</summary>
        </member>
        <member name="F:Rhino.UI.ComboListBoxForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rhino.UI.ComboListBoxForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rhino.UI.ComboListBoxForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Rhino.UI.LocalizationStringTable.XmlFileExists(System.String,System.String,System.Int32)">
            <summary>
            Look for XML file decorating the name with both the Locale ID as a number and a System.Globalization.CultureInfo.Name.
            </summary>
        </member>
        <member name="M:Rhino.UI.LocalizationStringTable.StripTrailingSquareBrackets(System.String)">
            <summary>
            Strip trailing "[[some number]]" from end of string.
            </summary>
        </member>
        <member name="M:Rhino.UI.LocalizationStringTable.ResourceNameContainsLocaleID(System.String,System.Int32,System.String)">
            <summary>
            Takes an embedded resource name and checks to see if it contains ".Localization." in the name and starts
            or ends with the locale ID or locale culture string.
            </summary>
        </member>
        <member name="M:Rhino.UI.LocalizationStringTable.LoadFromAssemblyEmbeddedResource(System.Reflection.Assembly,System.Int32)">
            <summary>
            Looks in the specified assembly for an embedded resource that contains ".Localization." in the name and starts
            or ends with the locale ID or locale culture string.
            </summary>
        </member>
        <member name="M:Rhino.UI.LocalizationStringTable.TextReaderFromFile(System.Reflection.Assembly,System.Int32)">
            <summary>
            Look in the assembly folder or sub folders for a XML file that starts with the locale ID or locale ID
            converted to culture string (something like "es-es") and if it is found attach a XmlTextReader to it.
            </summary>
        </member>
        <member name="M:Rhino.UI.LocalizationStringTable.LoadFromFile(System.Reflection.Assembly,System.Int32)">
            <summary>
            Look for a XML file with the current language ID and if one is not found then look in the specified assembly
            for an embedded resource with the name "*.Localization.[locale]*.xml", if one is found then parse the XML
            and extract the strings from it.
            </summary>
            <param name="a">Check this assembly folder and its embedded resources for the specified locale XML file.</param>
            <param name="languageId">Locale ID to check for.</param>
            <returns>true if the operation was successful.</returns>
        </member>
        <member name="M:Rhino.UI.LocalizationStringTable.LocalizeControlTree(System.String,System.String,System.Windows.Forms.Control,System.Windows.Forms.ToolTip[])">
            <summary>
            Recursive helper function for LocalizeUtils.LocalizeForm.
            </summary>
        </member>
        <member name="M:Rhino.UI.LocalizationStringTable.LocalizeToolStripCollection(System.String,System.String,System.Windows.Forms.ToolStripItemCollection)">
            <summary>
            Recursive helper function for LocalizeUtils.LocalizeForm.
            </summary>
        </member>
        <member name="M:Rhino.UI.LocalizationStringTable.LocalizeComboBoxItems(System.String,System.String,System.Windows.Forms.ComboBox)">
            <summary>
            Localizes combo list items.
            </summary>
            <param name="formName">The form name.</param>
            <param name="formClassName">The form class name.</param>
            <param name="cb">A Windows Forms combo box.</param>
        </member>
        <member name="T:Rhino.UI.LOC">
            <summary>
            Used a placeholded which is used by LocalizationProcessor application to create contextId
            mapped localized strings.
            </summary>
        </member>
        <member name="M:Rhino.UI.LOC.STR(System.String)">
            <summary>
             Strings that need to be localized should call this function. The STR function doesn't actually
             do anything but return the original string. The LocalizationProcessor application walks
             through the source code of a project and looks for LOC.STR. The function is then replaced with a
             call to Localization.LocalizeString using a unique context ID.
            </summary>
            <param name='english'>[in] The English string to localize.</param>
        </member>
        <member name="M:Rhino.UI.LOC.STR(System.String,System.Object)">
            <summary>
            Similar to <see cref="M:System.String.Format(System.String,System.Object)"/> function.
            </summary>
            <param name="english">The English name.</param>
            <param name="assemblyOrObject">Unused.</param>
            <returns>English name.</returns>
        </member>
        <member name="M:Rhino.UI.LOC.COMMANDNAME(System.String)">
            <summary>
             Command names that need to be localized should call this function. The COMMANDNAME function doesn't actually
             do anything but return the original string. The LocalizationProcessor application walks
             through the source code of a project and looks for LOC.COMMANDNAME and builds a record for each command
             name for the translators that can be used by developers in a commands overridden Rhino.Commands.Command.LocalName
             which should call Rhino.UI.Localization.LocalizeCommandName(EnglishName)
            </summary>
            <param name='english'>[in] The English string to localize.</param>
        </member>
        <member name="M:Rhino.UI.LOC.CON(System.String)">
             <summary>
             Command option name strings that need to be localized should call this function. The CON function
             doesn't actually do anything but return the original string. The LocalizationProcessor application walks
             through the source code of a project and looks for LOC.CON. The function is then replaced with a
             call to Localization.LocalizeCommandOptionName using a unique context ID.
            </summary>
            <param name='english'>[in] The English string to localize.</param>
             <returns>Returns localized string pair with both the English and local names set to the English value.</returns>
        </member>
        <member name="M:Rhino.UI.LOC.CON(System.String,System.Object)">
             <summary>
             Command option name strings that need to be localized should call this function. The CON function
             doesn't actually do anything but return the original string. The LocalizationProcessor application walks
             through the source code of a project and looks for LOC.CON. The function is then replaced with a
             call to Localization.LocalizeCommandOptionName using a unique context ID.
            </summary>
            <param name='english'>[in] The English string to localize.</param>
            <param name='assemblyFromObject'>[in] The object that identifies the assembly that owns the command option name.</param>
             <returns>Returns localized string pair with both the English and local names set to the English value.</returns>
        </member>
        <member name="M:Rhino.UI.LOC.COV(System.String)">
             <summary>
             Command option name strings that need to be localized should call this function. The COV function
             doesn't actually do anything but return the original string. The LocalizationProcessor application walks
             through the source code of a project and looks for LOC.COV. The function is then replaced with a
             call to Localization.LocalizeCommandOptionValue using a unique context ID.
            </summary>
            <param name='engilsh'>[in] The English string to localize.</param>
             <returns>Returns localized string pair with both the English and local names set to the English value.</returns>
        </member>
        <member name="M:Rhino.UI.LOC.COV(System.String,System.Object)">
             <summary>
             Command option name strings that need to be localized should call this function. The COV function
             doesn't actually do anything but return the original string. The LocalizationProcessor application walks
             through the source code of a project and looks for LOC.COV. The function is then replaced with a
             call to Localization.LocalizeCommandOptionValue using a unique context ID.
            </summary>
            <param name='engilsh'>[in] The English string to localize.</param>
            <param name='assemblyFromObject'>[in] The object that identifies the assembly that owns the command option value.</param>
             <returns>Returns localized string pair with both the English and local names set to the English value.</returns>
        </member>
        <member name="M:Rhino.UI.Localization.UnitSystemName(Rhino.UnitSystem,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Gets localized unit system name.  Uses current application locale id.
            </summary>
            <param name="units">The unit system.</param>
            <param name="capitalize">true if the name should be capitalized.</param>
            <param name="singular">true if the name is expressed for a singular element.</param>
            <param name="abbreviate">true if name should be the abbreviation.</param>
            <returns>The unit system name.</returns>
        </member>
        <member name="M:Rhino.UI.Localization.FormatNumber(System.Double,Rhino.UnitSystem,Rhino.UI.DistanceDisplayMode,System.Int32,System.Boolean)">
            <summary>
            Get a string version of a number in a given unit system / display mode.
            </summary>
            <param name="x">The number to format into a string.</param>
            <param name="units">The unit system for the number.</param>
            <param name="mode">How the number should be formatted.</param>
            <param name="precision">The precision of the number.</param>
            <param name="appendUnitSystemName">Adds unit system name to the end of the number.</param>
            <returns>The formatted number.</returns>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeString(System.String,System.Int32)">
            <summary>
            Returns localized version of a given English string. This function should be autogenerated by the
            RmaLDotNetLocalizationProcessor application for every function that uses RMASTR.
            </summary>
            <param name="english">The text in English.</param>
            <param name="contextId">The context ID.</param>
            <returns>The localized string.</returns>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeString(System.String,System.Object,System.Int32)">
            <summary>
            Returns localized version of a given English string. This function should be autogenerated by the
            RmaLDotNetLocalizationProcessor application for every function that uses RMASTR.
            </summary>
            <param name="english">The text in English.</param>
            <param name="assemblyOrObject">An assembly or an object from an assembly.</param>
            <param name="contextId">The context ID.</param>
            <returns>The localized string.</returns>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeDialogItem(System.Object,System.String,System.String)">
            <summary>
            Look in the dialog item list for the specified key and return the translated
            localized string if the key is found otherwise return the English string.
            </summary>
            <param name="assemblyOrObject">An assembly or an object from an assembly.</param>
            <param name="key"></param>
            <param name="english">The text in English.</param>
            <returns>
            Look in the dialog item list for the specified key and return the translated
            localized string if the key is found otherwise return the English string.
            </returns>
        </member>
        <member name="M:Rhino.UI.Localization.GetAssemblyFromObject(System.Object)">
            <summary>
            Check to see if the passed object is an assembly, if not then get the assembly that owns the object type.
            </summary>
            <param name="assemblyOrObject">An assembly or an object from an assembly.</param>
            <returns>The localized string.</returns>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeCommandName(System.String)">
            <summary>
             Commands that need to be localized should call this function.
            </summary>
            <param name='english'>The localized command name.</param>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeForm(System.Windows.Forms.Control)">
            <summary>
             A form or user control should call this in its constructor if it wants to be localized
             the typical constructor for a localize form would look like:
             MyForm::MyForm()
             {
               SuspendLayout();
               InitializeComponent();
               Rhino.UI.Localize.LocalizeForm( this );
               ResumeLayout(true);
             }
            </summary>
        </member>
        <member name="M:Rhino.UI.Localization.LocalizeToolStripItemCollection(System.Windows.Forms.Control,System.Windows.Forms.ToolStripItemCollection)">
            <summary>
             A form or user control should call this in its constructor if it wants to localize
             context menus that are set on the fly and not assigned to a forms control in design
             studio.
             MyForm::MyForm()
             {
               SuspendLayout();
               InitializeComponent();
               Rhino.UI.Localize.LocalizeToolStripItemCollection( this, this.MyToolStrip.Items );
             }
            </summary>
        </member>
        <member name="M:Rhino.UI.Localization.SetLanguageId(System.Int32)">
            <summary>
            Sets the Id used for Localization in RhinoCommon.  Only useful for when
            using RhinoCommon outside of the Rhino process
            </summary>
            <param name="id"></param>
            <returns>true if the language id could be set</returns>
        </member>
        <member name="T:Rhino.UI.LocalizeStringPair">
            <summary>
            Pair of strings used for localization.
            </summary>
        </member>
        <member name="M:Rhino.UI.LocalizationUtils.GetContainersPropertiesFromControl(System.Windows.Forms.Control,System.Collections.Generic.List{System.ComponentModel.IContainer}@)">
            <summary>
            Obtains container properties from a control.
            </summary>
            <param name="c">A control.</param>
            <param name="components">A list of components is returned.</param>
        </member>
        <member name="M:Rhino.UI.LocalizationUtils.GetComponentControls(System.Windows.Forms.Control)">
            <summary>
            Check to see if there are any System.Window.Control items in any components lists associated with the control like System.Windows.Forms.ContextMenuStrip
            which need to be localized.
            </summary>
            <param name="control">A control that might need to be localized.</param>
            <returns>An array of controls.</returns>
        </member>
        <member name="M:Rhino.UI.LocalizationUtils.GetToolTip(System.Windows.Forms.Control)">
            <summary>
            Iterate a controls list of data members for filed's of type System.ComponentModel.IContainer and if found
            then iterate the containers control components and return the ToolTip components found.
            </summary>
            <param name="control">A control.</param>
            <returns>An array of tooltips.</returns>
        </member>
        <member name="F:Rhino.UI.StringBoxForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rhino.UI.StringBoxForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rhino.UI.StringBoxForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Rhino.UI.Dialogs.SetCustomColorDialog(System.EventHandler{Rhino.UI.GetColorEventArgs})">
            <example>
            <code source='examples\vbnet\ex_replacecolordialog.vb' lang='vbnet'/>
            <code source='examples\cs\ex_replacecolordialog.cs' lang='cs'/>
            <code source='examples\py\ex_replacecolordialog.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.UI.Dialogs.KillSplash">
            <summary>
            Destroy the splash screen if it is being displayed.
            </summary>
        </member>
        <member name="M:Rhino.UI.Dialogs.PushPickButton(System.Windows.Forms.Form,System.EventHandler{System.EventArgs})">
            <summary>
            Hides a form, calls a provided function, and then shows the form. This works for
            modal forms. Useful for selecting objects or getting points while a modal dialog
            is running.
            </summary>
            <param name="form">A form window.</param>
            <param name="pickFunction">A picking delegate.</param>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowSemiModal(System.Windows.Forms.Form)">
            <summary>
            Show a windows form that is modal in the sense that this function does not return until
            the form is closed, but also allows for interaction with other elements of the Rhino
            user interface.
            </summary>
            <param name="form">
            The form must have buttons that are assigned to the "AcceptButton" and "CancelButton".
            </param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowTextDialog(System.String,System.String)">
            <summary>
            Display a text dialog similar to the dialog used for the "What" command.
            </summary>
            <param name="message">Text to display as the message content.</param>
            <param name="title">Test to display as the form title.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowMessageBox(System.String,System.String)">
            <summary>
            Same as System.Windows.Froms.MessageBox.Show but using a message box tailored to Rhino.
            </summary>
            <param name="message">Message box text content.</param>
            <param name="title">Message box title text.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowMessageBox(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon)">
            <summary>
            Same as System.Windows.Froms.MessageBox.Show but using a message box tailored to Rhino.
            </summary>
            <param name="message">Message box text content.</param>
            <param name="title">Message box title text.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowMessageBox(System.String,System.String,System.Windows.Forms.MessageBoxButtons,System.Windows.Forms.MessageBoxIcon,System.Windows.Forms.MessageBoxDefaultButton)">
            <summary>
            Same as System.Windows.Froms.MessageBox.Show but using a message box tailored to Rhino.
            </summary>
            <param name="message">Message box text content.</param>
            <param name="title">Message box title text.</param>
            <param name="buttons">One of the System.Windows.Forms.MessageBoxButtons values that specifies which buttons to display in the message box.</param>
            <param name="icon">One of the System.Windows.Forms.MessageBoxIcon values that specifies which icon to display in the message box.</param>
            <param name="defaultButton">One of the System.Windows.Forms.MessageBoxDefaultButton values that specifies the default button for the message box.</param>
            <returns>One of the System.Windows.Forms.DialogResult values.</returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowColorDialog(System.Drawing.Color@)">
            <summary>
            Display Rhino's color selection dialog.
            </summary>
            <param name="color">
            [in/out] Default color for dialog, and will receive new color if function returns true.
            </param>
            <returns>true if the color changed. false if the color has not changed or the user pressed cancel.</returns>
            <example>
            <code source='examples\vbnet\ex_modifylightcolor.vb' lang='vbnet'/>
            <code source='examples\cs\ex_modifylightcolor.cs' lang='cs'/>
            <code source='examples\py\ex_modifylightcolor.py' lang='py'/>
            </example>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowColorDialog(System.Drawing.Color@,System.Boolean,System.String)">
            <summary>
            Display Rhino's color selection dialog.
            </summary>
            <param name="color">
            [in/out] Default color for dialog, and will receive new color if function returns true.
            </param>
            <param name="includeButtonColors">
            Display button face and text options at top of named color list.
            </param>
            <param name="dialogTitle">The title of the dialog.</param>
            <returns>true if the color changed. false if the color has not changed or the user pressed cancel.</returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowColorDialog(System.Windows.Forms.IWin32Window,Rhino.Display.Color4f@,System.Boolean)">
            <summary>
            Displays the standard modal color picker dialog for floating point colors.
            </summary>
            <param name="parent">Parent window for this dialog, should always pass this if calling from a form or user control.</param>
            <param name="color">The initial color to set the picker to and also accepts the user's choice.</param>
            <param name="allowAlpha">Specifies if the color picker should allow changes to the alpha channel or not.</param>
            <returns>true if a color was picked, false if the user canceled the picker dialog.</returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowColorDialog(Rhino.Display.Color4f@,System.Boolean)">
            <summary>
            Displays the standard modal color picker dialog for floating point colors.
            </summary>
            <param name="color">The initial color to set the picker to and also accepts the user's choice.</param>
            <param name="allowAlpha">Specifies if the color picker should allow changes to the alpha channel or not.</param>
            <returns>true if a color was picked, false if the user canceled the picker dialog.</returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowSelectLayerDialog(System.Int32@,System.String,System.Boolean,System.Boolean,System.Boolean@)">
            <summary>
            Displays Rhino's single layer selection dialog.
            </summary>
            <param name="layerIndex">
            Initial layer for the dialog, and will receive selected
            layer if function returns DialogResult.OK.
            </param>
            <param name="dialogTitle">The dialog title.</param>
            <param name="showNewLayerButton">true if the new layer button will be visible.</param>
            <param name="showSetCurrentButton">true if the set current button will be visible.</param>
            <param name="initialSetCurrentState">true if the current state will be initially set.</param>
            <returns>A dialog result based on user choice.</returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowComboListBox(System.String,System.String,System.Collections.IList)">
            <summary>
            Displays Rhino's combo list box.
            </summary>
            <param name="title">The dialog title.</param>
            <param name="message">The dialog message.</param>
            <param name="items">A list of items to show.</param>
            <returns>
            <para>selected item.</para>
            <para>null if the user canceled.</para>
            </returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.ShowCheckListBox(System.String,System.String,System.Collections.IList,System.Collections.Generic.IList{System.Boolean})">
            <summary>
            Displays Rhino's check list box.
            </summary>
            <param name="title">The dialog title.</param>
            <param name="message">The dialog message.</param>
            <param name="items">A list of items to show.</param>
            <param name="checkState">A list of true/false boolean values.</param>
            <returns>An array or boolean values determining if the user checked the corresponding box. On error, null.</returns>
        </member>
        <member name="M:Rhino.UI.Dialogs.StringBoxRects">
            <summary>
            FOR INTERNAL TESTING
            Ignore - this is for internal testing and will be removed.
            </summary>
            <returns>
            On Windows (.NET)
            {X=0,Y=0,Width=300,Height=126}
              {X=0,Y=0,Width=284,Height=88}
              {X=0,Y=0,Width=284,Height=88}
            {X=10,Y=9,Width=49,Height=13}
              {X=0,Y=0,Width=49,Height=13}
              {X=0,Y=0,Width=49,Height=13}
            {X=197,Y=55,Width=75,Height=23}
              {X=0,Y=0,Width=75,Height=23}
              {X=0,Y=0,Width=75,Height=23}
            {X=116,Y=55,Width=75,Height=23}
              {X=0,Y=0,Width=75,Height=23}
              {X=0,Y=0,Width=75,Height=23}
            {X=13,Y=29,Width=259,Height=20}
              {X=0,Y=0,Width=255,Height=16}
              {X=0,Y=0,Width=255,Height=16}
            </returns>
        </member>
        <member name="F:Rhino.UI.EditBoxForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rhino.UI.EditBoxForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rhino.UI.EditBoxForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="F:Rhino.UI.ListBoxForm.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:Rhino.UI.ListBoxForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:Rhino.UI.ListBoxForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
    </members>
</doc>
